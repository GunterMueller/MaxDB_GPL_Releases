
Readme: Building %(prodname)s from the sources
==============================================

= Preparation =

    == Prerequisites ==

        - The build tools must be installed
        - UNIX/Linux: curses header files and libraries must be installed
        - UNIX/Linux: Create the file /etc/opt/sdb, which must be
            world readable and contain the following lines:
            [Globals]
            IndepData=<indep_data_path>
            IndepPrograms=<indep_programs_path>
            SdbOwner=<current_user>
            SdbGroup=<primary_group_of_current_user>

            where

            <indep_dat_path>:
                - an existing directory
                - subdirectories wrk and config must exist and be
                  writable by <current_user>
                - this is the default directory for newly created
                  databases, so it shouldn't be placed on a small
                  partition

            <indep_programs_path>: not used by the development
              environment (because $SAPDB_NO_INDEPPATH is set)

            <current_user>: You could use another user, but this would
              require that the following program in $TOOL/bin
              are set to suid root:
              instdbmverifypw

            <primary_group_of_current_user>:

            If the file /etc/opt/sdb exists from another MaxDB
            installation, then it is best to replace the existing file
            during development. Otherwise you would overwrite files
            in your current installation.


    == Installing the sources ==

        === Unpack this archive ===
          This will create the directory tree
          %(release)s/
                     %(dirprefix)s_ORG
                     %(dirprefix)s_DEV

          %(dirprefix)s_ORG contains all the sources
          %(dirprefix)s_DEV will contain the results
            of the compilation: object files, libraries, executables

        === create initialization scripts ===
          Windows:
            c:\> cd %(release)s
            c:\%(release)s\> perl installsources.pl
            This will create a file initDev_%(dirprefix)s.bat

          UNIX/Linux
            $ cd %(release)s
            $ perl installsources.pl
            This will create a file initDev_%(dirprefix)s

            You can copy that file to a directory in your PATH.

= Building %(prodname)s =

    == Initialize the environment variables ==
      Windows:
        Execute the batch file initDev_%(dirprefix)s.bat
        c:\> initDev_%(dirprefix)s.bat
      UNIX/Linux:
        Source the file initDev_%(dirprefix)s
        $ . initDev_%(dirprefix)s

    == Execute build commands ==

        To build all the software, execute
        imf.pl all

    == Protocol files ==

        The directory $WRK/fast/prot (Windows: %WRK%\fast\prot)
        will contain the following files:
        all.mac.p0: the protocol of the build
        all.mac.x0: the extended protocol contains also
            timestamps of the files involved
        all.mac.e0: the error protocol contains only errors
            that occurred during the build

    == Results ==

        The results of the compilation will be copied to
        %(dirprefix)s/usr. The directory %(dirprefix)s/usr/bin
        has been added to your PATH by the initialisation
        script. This allows you to create databases, use the
        clients with existing databases etc.

= Variations =

    == creating individual targets ==

        You can use vmake to build subprojects or
        individual files. This is useful if you want to
        - build only a specific component
            -- 'imf.pl odbc' for the ODBC driver
            -- 'imf.pl loader' for the Loader
            -- 'imf.pl dbm' for the Database Manager
            -- 'imf.pl allknl' for very everthing required
                to install a database
        - recompile a component with debugging information
          enabled: 'imf.pl -U -e odbc' , see below for
          information on options
        - to check for compilation errors after
          you changed a source

        Targets must be specified in 'source notation' (see
        below in glossary)

    == compile with debug ==

        imf.pl -e <target>
        will compile and link with debug inforation enabled

    == compile unconditional ==

        imf -u <target>
        will rebuild <target> (recompile if <target>
        is a source, relink if <target> is the
        vmake description for an executable

        imf -U <target>
        will recompile and relink all the targets that make
        up <target>. This is useful if you want to rebuild
        everything with or without debug information

        imf -IU <target>
        will additionally touch all the header files. This
        does not affect the building of <target>, but it
        could trigger additional compilations on
        subsequent builds for unrelated targets

    == Information about dependencies ==

        imf -n <target>
        will display all the modules that require compilation

        imf -m <target>
        will display all the modules required for <target>

        imf -c <target>
        will display a list of all the subtargets and modules
        of <target>. This output is useful to create
        dependency graphs.

= Changing sources =

    All the sources are located in %(release)s/%(dirprefix)s_ORG.
    We recommend the following (using sys/src/ak/vak01 as an example):
    - icp.pl vak01
    - this creates a file %(release)s/%(dirprefix)s_DEV/sys/src/ak/vak01
    - because all changes are in a separate directory tree, you can
      easily transfer those changes to a new release
    - if you remove %(release)s/%(dirprefix)s_DEV/sys/src/ak/vak01,
      vmake will rebuild vak01 because it detects that the object file
      was created from a different source

    Arguments to icp.pl are given in 'source notation' (see
        below in glossary)

= Glossary =

    description:: a file describing a target. This is similar
        to a make file, but each file describes only one
        target

    source notation:: for most descriptions and modules, tools
        like imf.pl require only the filename without any
        directories. Because of the naming conventions used,
        the tools can deduce the directory from the filename.
        If a filename doesn't follow these conventions,
        the following notation can be used
        - for a module: imf.pl :ak/vak01
        - for a description: imf.pl ::all
        a : will be replaced by $SRC, a :: will create
        a search in both $DESC and $SRC.
        Absolute or relative pathnames will not work.

    target:: something that can be build by vmake. This can be
        object files, libraries, shared objects, executables
        and macros (groups of targets)

    VMAKE:: The build tool to create %(prodname)s. The manual
        can be found at
        http://dev.mysql.com/doc/maxdb/en/43/c62c3a11f3bf31e10000000a11402f/frameset.htm

