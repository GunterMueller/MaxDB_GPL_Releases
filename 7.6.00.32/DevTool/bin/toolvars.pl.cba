
#
#    ========== licence begin  GPL
#    Copyright (C) 2001 SAP AG
#
#    This program is free software; you can redistribute it and/or
#    modify it under the terms of the GNU General Public License
#    as published by the Free Software Foundation; either version 2
#    of the License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#    ========== licence end
#
#!/usr/bin/perl
# toolvars      *** included perl script
#
# @(#)toolvars  12-11-1997
#
# 1996-11-27: add 'mfconcom'-var 'REL' for 'cbackup'
# 1994-01-20: let "OPTIMIZE" depend on "VMAKE_VERSION"
#
# included by several shell scripts, defines system specific values
#
use Env;
use Config;
use CCVers;
use POSIX;

if ($RELVER eq "")
{
	print "\n!!! WARNING:  RELVER not set!!!\n";
	exit 1;
}

if (! $ENV{INSTROOT})
{
	print "\n!!! WARNING:  INSTROOT not set!!!\n";
	exit 1;
}

$ADABAS_COPYRIGHT="Copyright © SAP AG 1997";
if ($RELVER eq "R61") {
	$ADABAS_VERSION="6.1";
}
elsif ($RELVER eq "R62") {
	$ADABAS_VERSION="6.2";
}
elsif ($RELVER eq "R70") {
	$ADABAS_VERSION="7.0";
}
elsif ($RELVER eq "R71") {
	$ADABAS_VERSION="7.1";
}
elsif ($RELVER eq "R72") {
	$ADABAS_VERSION="7.2";
}
elsif ($RELVER eq "R73") {
	$ADABAS_VERSION="7.3";
}
elsif ($RELVER eq "R74") {
	$ADABAS_VERSION="7.4";
}
elsif ($RELVER eq "R80") {
	$ADABAS_VERSION="8.0";
}


$SQLVERSION="REL30";$ENV{SQLVERSION} = $SQLVERSION; # export $SQLVERSION

$OSSPEC=LINUX;
$ENV{OSSPEC} = $OSSPEC;		# export $OSSPEC
$MACH = "I386";
$ENV{MACH} = $MACH;		# export $MACH
$OS = "UNIX";
$ENV{OS}         = $OS;			# export $OS



# CTS 1106697
unless ( $ENV{OS_VER} && $ENV{OS_REL} )
{
    local ($os_sysname, $os_nodename, $os_release, $os_version, $os_machine ) = POSIX::uname();
    $ENV{OS_VER} = $os_version;
    $ENV{OS_REL} = $os_release;
}
$OS_VER = $ENV{OS_VER};
$OS_REL = $ENV{OS_REL};


if ($ENV{BIT64} eq "1") {
	$TOOL_LIB = "$TOOL/lib/lib64";
} else {
	$TOOL_LIB = "$TOOL/lib";
}
$ENV{TOOL_LIB} = $TOOL_LIB;

$COMP="PTOC";
if ($RELVER eq "R61") {
	#@CONCOMOPTS = ( "-REL=R61" );
	@CONCOMOPTS = ( "-$SQLVERSION=1", "-REL=R61" );
	#@CONCOMOPTS = ( "-SAG=1", "-$SQLVERSION=1", "-REL=R61" );
}
else
{
	#@CONCOMOPTS = ( );
	@CONCOMOPTS = ( "-$SQLVERSION=1" );
	#@CONCOMOPTS = ( "-SAG=1", "-$SQLVERSION=1" );
}
push @CONCOMOPTS, "-RELVER=$RELVER";
push @CONCOMOPTS, "-DIAGNOSE=1" if defined( $ENV{DIAGNOSE} );
#
# Used for all systems using 64 bit compilation!
#
if ( $ENV{BIT64} eq "1" )
{
	push @CONCOMOPTS, "-BIT64=1";
}
# jrg 2.9.1999

if ( not $CC )
{
    $CC = "cc";
}
#else take CC from the environment
if ( not $CXX )
{
	$CXX = "c++";
}

# CTS 1107045
# $LDDLL_C         - command of link c objects to shared lib
# $LDDLL_CXX       - command of link c++ shared lib
# $LDDLL_CXX_C     - command of link c++ objects to c shared lib
# to initialize $LDDLL
$LDDLL_C = $CC;
$LDDLL_CXX = $CXX;
$LDDLL_CXX_C = $CXX;
#else take CXX from the environment PTS 1001861

if (($RELVER ge "R72") && ($RELVER ne "RTOOL"))  # &gar PTS 1002110
{
	$LD = $CXX;
	$LDDLL_TYPE = "LDDLL_CXX";
}
else
{
	$LD	= $CC;
	$LDDLL_TYPE = "LDDLL_C";
}

# jrg 2.9.1999
# For relocatable objects (collection of object files) a different linker is used
# These definitions replace former system dependend setting in linkrel.pl!
#
# WIN32 uses $AR and $ARFLAGS...
$LDREL = "ld";

$AS		= $CC;
$AR		= "ar";
$NULL = "/dev/null";
# set C and CXX as environment variable
$ENV{CC}=$CC;
$ENV{CXX}=$CXX;

#
# Additional compiler flags may be set temporary in the environment
# before calling vmake.
#

@ASFLAGS = ();

# 98/06/19 &gar: for differences between C and C++-Compiling in UNIX !
# @CCFLAGS   -> FLAGS for both ( C, C++ )
# @CFLAGS    -> FLAGS for C only
# @CXXFLAGS  -> FLAGS for C++ only
  @CXXFLAGS = split /\s+/, $CXXFLAGS;
  @CFLAGS = split /\s+/, $CFLAGS;
@CCFLAGS = split /\s+/, $CCFLAGS;
push @CCFLAGS, "-D$SQLVERSION",  "-D$OSSPEC", "-D$MACH", "-DSAG";
push @CCFLAGS, "-DDIAGNOSE" if defined( $ENV{DIAGNOSE} );
@CCMODEANSI = ();
@CCMODENORM = ();
@CCMODELINT = ();

# RTS 1000166
@EXCEPT_FLAG = ();


  if ( ($RELVER ge "R72") && (RELVER ne "RTOOL")){

       push @CCFLAGS, "-D_REENTRANT", "-I$INSTROOT/incl", "-I$WRK/incl";

#
# 24.3.2000 Additional include directories for 80...
#
	  if ( $RELVER ge "R80" ) {
#
# This is the STL_Port include directory. It replaces the systems own STL definitions and headers
#
		push @CXXFLAGS, "-I$WRK/incl/STL";
	  }

  } else {
#
# older versions ( < V7.2 ) do not support multithreading in any way...
#
    push @CCFLAGS, "-I$INSTROOT/incl", "-I$WRK/incl";

  }

#
# Some day this can be removed again if we can use src/SAPDB as new src...
#
  if ( $RELVER ge "R73" ) {
  		push @CCFLAGS, "-I$WRK/incl/SAPDB";
    }



    push @CCFLAGS, "-DSYSV", "-D_SVID";
	push @CCFLAGS, "-I/usr/include/ncurses";
	push @CCFLAGS, "-D_FILE_OFFSET_BITS=64";
    @LINTFLAGS = @CCFLAGS;


# "OPTIMIZE" now depends on "VMAKE_VERSION" (needed on AIX)
if ($CURR_VERSION =~ /^f/i) {
    # the old value, it was used for everything
	@OPTIMIZE = ("-O3");
	push @OPTIMIZE, "-march=pentium", "-mcpu=pentiumpro";
}
else {
    # VMAKE_VERSION is quick or slow
    # one level less than fast - not yet really tested
    # the idea is to combine range checks with less risky code
	@OPTIMIZE = "-O2";
}

# CTS 1103440
@DEBUG_FLAGS = ("-g");


# CTS 1108431
@NO_FLAGS = ();



# cba 98/07/16 : cause of differeces of C- and C++-Linker
# we may have different linker options on some UNIX-platforms
# we use @LDFLAGS for C-linking and @LDXXFLAGS for C++-Linking
# &gar 99/06/03: for linkdll new variable DLDFLAGS and DLDXXFLAGS
# ( PTS 1103001 )
# initialize
# CTS 1107045
# @DLD_CXX_C_FLAGS_START, DLD_CXX_C_FLAGS_END
# @DLD_CXX_C_FLAGS_START  options before objects
# @DLD_CXX_C_FLAGS_END    options after objects
@LDFLAGS = @LDXXFLAGS = ();
@DLDFLAGS = @DLDXXFLAGS = ("-shared");
@DLD_CXX_C_FLAGS_START = ("-shared");
@DLD_CXX_C_FLAGS_END = ();

#
# For relocatable objects (collection of object files) a different linker is used
# These definitions replace system dependend setting in linkrel.pl!
#
# WIN32 uses AR and AS_FLAGS
#
# SUN:
# There is no specific option that tells ld   to  link  64-bit
# objects;  the  class of the first object that gets processed
# by ld  determines whether it is to perform  a  32-bit  or  a
# 64-bit link edit.
# AIX:
# 32bit and 64bit relocatable object may even coexist...
#
	@LDREL_FLAGS = ( "-r", "-L$TOOL_LIB" );

# &jrg 14.9.1999
#
# C++ compilation sometimes needs to setup a path to a directory for the template
# cache. In this template cache instances of template functions with external
# linkage are stored.
# Since template instances may differ depending on VMAKE_VERSION (fast,slow...)
# for each version a seperate template cache is forced
#
#
# gcc...nothing needed. If REALLY wanted smaller code is producable with
# -fexternal-templates and #pragma implementation / #pragma interface...
# I would not recomment this even whit producing LOTs of code now...
#

# &gar PTS 1001828
@PRF_FLAGS = "-pg";

# &gar OFLAGS for call options
# used in link... and comp...
# always initialize here with ()
@OFLAGS=();

$SR_ID = "static char ident_sr[] =";
$MF_ID = "static char ident_mf[] =";
$PC_ID = "static char ident_pc[] =";
$CC_ID = "static char ident_cc[] =";
$ID_END= ";";

@PCFLAGS= ( "-qn", "-e" );
@ARFLAGS = ( "rcs" );
$RANLIB = "ar ts";

@LIBPC = ( "$TOOL_LIB/libsqlptc.a" );	# static, not dynamic lib
@LIBPC_PROF = ( "$TOOL_LIB/libsqlptc_p.a" );	# static, not dynamic lib
@LIBSCR = "-lncurses";
@LIBMATH = "-lm";
@DYNAMIC_LIB = ();
@LIBNET = ();
@LIBCSCI    = ();

#
# PTS 1002837 jrg 26.5.1999
@LIBMPROC = ();
#
# obsolete License Management Library...
#
# @LIBCLMGR = "-lclmgr";

# CTS 1106257
@LIBLD=();

if (( $RELVER ge "R72") && ($RELVER ne "RTOOL")){
	@LIBAIO = ("-lpthread");
} else {
	@LIBAIO = ();
}

# &gar PTS 1106517
@LDSHMFLAGS=();


if ( $SQLVERSION eq "REL30" )  { $TRACETYPE = "tsp_trace" }
	else { $TRACETYPE = "tracetext" }


#################################################
# vmake environment variables must be set by hand
#################################################

if ( ! $DEVENV ) {
#   $DEVENV = "YES";		# Pascal vsp-modules
    $DEVENV = "NO";			# Assembler or C vsp-modules
}
$ENV{DEVENV} = $DEVENV; # export $DEVENV



# ================================================================

$DLL_TYPE = "so";
$ENV{DLL_TYPE} = $DLL_TYPE;		# can be exported even if not set

$ARCH_TYPE = ".a";
$ENV{ARCH_TYPE} = $ARCH_TYPE;		# can be exported even if not set



unless ( defined $ENV{PYTHON} )
{
	$ENV{PYTHON}="$TOOL/Python";
}

# PTS 1103820 jrg
# since it can be expected to have python and/or perl already installed
# on the machine, the location of includes and libraries needed can be
# overwritten by environment.
#
if ($ENV{SAPDB_INTERNAL})
{
	if (! $ENV{PYTHON_INCLUDE})
	{
		$PYTHON_INCLUDE = $ENV{PYTHON}."/include";
		$ENV{PYTHON_INCLUDE} = $PYTHON_INCLUDE;
	}
}
else
{
	if (! $ENV{PYTHON_INCLUDE})
	{
		$ENV{PYTHON_INCLUDE} = "NO";
	}
}
if (! $ENV{ACTIVEPERL_INCLUDE})
{
	$ACTIVEPERL_INCLUDE = "";
	$ENV{ACTIVEPERL_INCLUDE} = $ACTIVEPERL_INCLUDE;
}
if (! $ENV{ACTIVEPERL_LIB})
{
	$ACTIVEPERL_LIB = "";
	$ENV{ACTIVEPERL_LIB} = $ACTIVEPERL_LIB;
}
if (! $ENV{COREPERL_INCLUDE})
{
	$COREPERL_INCLUDE = $Config{'archlib'} . "/CORE";
	$ENV{COREPERL_INCLUDE} = $COREPERL_INCLUDE;
}
if (! $ENV{COREPERL_LIB})
{
	$COREPERL_LIB = $Config{'archlib'} . "/CORE";
	$ENV{COREPERL_LIB} = $COREPERL_LIB;
}



# set installation directory for libraries and scripting interfaces
if ($ENV{BIT64} eq "1")
{
	#all 64-bit-platforms should use lib/lib64
	$ENV{INSTLIB} = $INSTROOT."/lib/lib64";
    $ENV{INSTMISC} = $INSTROOT."/misc/lib64";
} else {
    $ENV{INSTLIB} = $INSTROOT."/lib";
    $ENV{INSTMISC} = $INSTROOT."/misc";
}

$TraceFile = "$WRK/$VMAKE_VERSION/prot/trace.prot";
sub ToolTrace {
	# usage ToolTrace($string, \@daten)
	if ( $ENV{TOOLTRACE}) {
		local( $string, $r_daten ) = @_;
		open( TOOLTRACE, ">>$TraceFile") || die "Can't open $TraceFile (append): $!\n";
		print TOOLTRACE sprintf($string, @$r_daten);
		close(TOOLTRACE);
	}
}


# initializing flush of output buffer
$|=1; print "";
