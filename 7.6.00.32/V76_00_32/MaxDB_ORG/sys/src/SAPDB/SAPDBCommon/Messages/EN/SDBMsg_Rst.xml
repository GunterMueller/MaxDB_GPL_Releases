<?xml version="1.0" encoding="ISO-8859-1"?>
<MessageDefinitions>
<Metadata generated="2006-05-15 15:18:56" releaseGlobal="YES" versionnr="3951"/>
<MSG COMP="Rst" ID="1" VERSION="1">
<DefineName>
REDO_READ_GET_TRANSENTRY_FAILED
</DefineName>
<ShortText>
The transaction entry $TRANS_INDEX$ in the lock list for the transaction $TRANS_ID$ could not be found
</ShortText>
<Action><![CDATA[
]]></Action>
</MSG>
<MSG COMP="Rst" ID="2" VERSION="1">
<DefineName>
REDO_EXECUTE_FAILED
</DefineName>
<ShortText>
Transaction $TRANS_ID$ failed during the execution of $REASON$ with $RETURNCODE$ ($ERRORTEXT$)
</ShortText>
<Action><![CDATA[
]]></Action>
</MSG>
<MSG COMP="Rst" ID="3" VERSION="1">
<DefineName>
DROP_AUX_FILE_FAILED
</DefineName>
<ShortText>
Starting job to drop aux files for transaction $TRANS_ID$ failed.
</ShortText>
<Action><![CDATA[
]]></Action>
</MSG>
<MSG COMP="Rst" ID="4" VERSION="1">
<DefineName>
REDO_CONTROL_INFO1
</DefineName>
<ShortText>
RedoControl: OldestCommitSeq: $LOG_IO_SEQUENCE$, MaxNumTrans: $MAX_NUM_TRANS$, MaxRedoTrans: $MAX_NUM_REDO_TRANS$
</ShortText>
<Description><![CDATA[
This describes how the redo is controlled. These values are known at the beginning.
oldestCommitSeq is necessary to detect a log sequence overflow.
MaxNumTrans is the maximum online user count, and MaxNumRedoTrans is the maximum allowed redo transaction count.
]]></Description>
</MSG>
<MSG COMP="Rst" ID="4" VERSION="2">
<DefineName>
REDO_CONTROL_INFO1
</DefineName>
<ShortText>
RedoControl: OldestCommitSeq: $LOG_IO_SEQUENCE$, RedoTasks: $TASKS_AVAILABLE$ , MaxRedoTrans: $MAX_NUM_REDO_TRANS$
</ShortText>
<Description><![CDATA[
The following values determine how Redo is controlled:
OldestCommitSeq is the oldest used IO sequence of the transactions open in the restart save point.
RedoTasks indicates the number of server tasks started, which are used for the Redo.
MaxRedoTrans indicates the maximum number of transactions that can be executed in parallel in the Redo.
]]></Description>
</MSG>
<MSG COMP="Rst" ID="5" VERSION="1">
<DefineName>
REDO_CONTROL_INFO_TITLE
</DefineName>
<ShortText>
RedoControl: $TITLE$
</ShortText>
</MSG>
<MSG COMP="Rst" ID="6" VERSION="1">
<DefineName>
REDO_CONTROL_INFO2
</DefineName>
<ShortText>
RedoControl: EndOfLogReached: $END_OF_LOG$, RedoIsAborted: $REDO_ABORTED$, RedoProcessingDisabled: $REDO_DISABLED$
</ShortText>
<Description><![CDATA[
The following three states provide more detailed information regarding Redo:
If EndOfLogReached is 1 then all available log entries were read.
If RedoIsAborted is 1 then the Redo was aborted, whereby the database kernel is set to the OFFLINE state.
If RedoProcessingDisabled is 1 then the Redo could not be started, because other transactions, which were open in the save point, had to be handled.
]]></Description>
</MSG>
<MSG COMP="Rst" ID="8" VERSION="1">
<DefineName>
REDO_CONTROL_INFO4
</DefineName>
<ShortText>
RedoControlInfo: Transactions processed: $NUMBER$
</ShortText>
</MSG>
<MSG COMP="Rst" ID="8" VERSION="2">
<DefineName>
REDO_CONTROL_INFO4
</DefineName>
<ShortText>
RedoControl: Transactions processed: $NUMBER$ ($NUMBER1$)
</ShortText>
</MSG>
<MSG COMP="Rst" ID="9" VERSION="1">
<DefineName>
REDO_TASK_COUNTER_MISMATCH
</DefineName>
<ShortText>
Info:Counter mismatch: Resumed $TASKID_WAITING_1$ redo tasks but only $TASKID_WAITING_2$ were waiting.
</ShortText>
<Description><![CDATA[
This is an error message which identifies a flaw but ultimately does not produce problems and is automatically corrected.
]]></Description>
<Action><![CDATA[
]]></Action>
</MSG>
<MSG COMP="Rst" ID="10" VERSION="1">
<DefineName>
REDO_TASK_DEADLOCK
</DefineName>
<ShortText>
Deadlock of redo tasks detected. All redo execution tasks and the redo reader are waiting
</ShortText>
<Description><![CDATA[
The redo reader is to wait for the end of a redo execution. However all redo execution tasks are also waiting. 
The restart has become deadlocked, therefore the restart is terminated.
]]></Description>
<Action><![CDATA[
]]></Action>
</MSG>
<MSG COMP="Rst" ID="11" VERSION="1">
<DefineName>
MORE_USER_THEN_REDO_TASKS
</DefineName>
<ShortText>
$TASKS_WANTED$ redo transactions readable and $TASKS_AVAILABLE$ redo tasks available.
</ShortText>
<Description><![CDATA[
It may not be a problem if fewer redo tasks are available for a restart than user tasks are possible. However if it is a problem, then the parameter MAXSERVERTASKS must be increased.
]]></Description>
<Action><![CDATA[
]]></Action>
</MSG>
<MSG COMP="Rst" ID="12" VERSION="1">
<DefineName>
REDO_CONTROL_INFO3
</DefineName>
<ShortText>
RedoControl: redo reader T$TASK_ID$ wait reason: $REASON$
</ShortText>
</MSG>
<MSG COMP="Rst" ID="12" VERSION="2">
<DefineName>
REDO_CONTROL_INFO3
</DefineName>
<ShortText>
RedoControl: redo reader T$TASK_ID$ wait reason:  $REASON$, waiting redo executer:  $NUMBER$
</ShortText>
</MSG>
<MSG COMP="Rst" ID="13" VERSION="1">
<DefineName>
REDOABORTDETAIL
</DefineName>
<ShortText>
The Redo has been aborted due to $REASON$
</ShortText>
</MSG>
</MessageDefinitions>
