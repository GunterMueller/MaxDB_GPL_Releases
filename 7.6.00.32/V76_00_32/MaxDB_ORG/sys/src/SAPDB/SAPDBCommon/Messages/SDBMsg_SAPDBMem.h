/*
        ========== licence begin  GPL
        Copyright (c) 2005 SAP AG

        This program is free software; you can redistribute it and/or
        modify it under the terms of the GNU General Public License
        as published by the Free Software Foundation; either version 2
        of the License, or (at your option) any later version.

        This program is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU General Public License for more details.

        You should have received a copy of the GNU General Public License
        along with this program; if not, write to the Free Software
        Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
        ========== licence end

*/

#ifndef SDBMSG_SAPDBMEM_H
#define SDBMSG_SAPDBMEM_H
/*
This header file was generated by buildmsg.pl
--- Do not edit....
*/
#ifdef __cplusplus
#ifndef MSG_LIST_HPP
#include "SAPDB/Messages/Msg_List.hpp"
#endif
#ifndef MSG_ARG_HPP
#include "SAPDB/Messages/Msg_Arg.hpp"
#endif
#ifndef MSG_SIMPLEARG_HPP
#include "SAPDB/Messages/Msg_SimpleArg.hpp"
#endif
#endif

#ifndef SDB_RELEASE_070600  /* don't merge this define - only this date: 2005-02-23 16:26:48 */
#error SDBMsg_SAPDBMem.h was probably integrated between releases, do not integrate this header file, \
use buildmsg
#endif


#define SDBMSG_SAPDBMEM_COMPONENT "SAPDBMem"
/* Begin of all message defines for component SAPDBMem -> */
/* Begin of defines for message ALLOCATOR_OUT_OF_MEMORY: ID = 1, VERSION = 1, TAGS = 4 -> */
#define SDBMSG_SAPDBMEM_ALLOCATOR_OUT_OF_MEMORY 1, "SAPDBMem", __FILE__, __LINE__, "Out of memory needed $BYTES_NEEDED$ for $DESCRIPTION$", (Msg_Has4Args*)0, Msg_SimpleArg("_MESSAGEVERSION", reinterpret_cast<const SAPDB_UTF8*>("1"))
#define SDBMSGTAG_SAPDBMEM_ALLOCATOR_OUT_OF_MEMORY__ALLOCATOR "ALLOCATOR"
#define SDBMSGTAG_SAPDBMEM_ALLOCATOR_OUT_OF_MEMORY__BYTES_NEEDED "BYTES_NEEDED"
#define SDBMSGTAG_SAPDBMEM_ALLOCATOR_OUT_OF_MEMORY__DESCRIPTION "DESCRIPTION"
/* <- End of defines for message ALLOCATOR_OUT_OF_MEMORY */
/* Begin of defines for message OVERLAPPING_CHUNK: ID = 2, VERSION = 1, TAGS = 6 -> */
#define SDBMSG_SAPDBMEM_OVERLAPPING_CHUNK 2, "SAPDBMem", __FILE__, __LINE__, "Memory area [$ADDRESS$-$ENDADDRESS$] overlaps chunk [$CHUNKSTART$-$CHUNKEND$]", (Msg_Has6Args*)0, Msg_SimpleArg("_MESSAGEVERSION", reinterpret_cast<const SAPDB_UTF8*>("1"))
#define SDBMSGTAG_SAPDBMEM_OVERLAPPING_CHUNK__ADDRESS "ADDRESS"
#define SDBMSGTAG_SAPDBMEM_OVERLAPPING_CHUNK__CHUNKEND "CHUNKEND"
#define SDBMSGTAG_SAPDBMEM_OVERLAPPING_CHUNK__CHUNKSTART "CHUNKSTART"
#define SDBMSGTAG_SAPDBMEM_OVERLAPPING_CHUNK__DESCRIPTION "DESCRIPTION"
#define SDBMSGTAG_SAPDBMEM_OVERLAPPING_CHUNK__ENDADDRESS "ENDADDRESS"
/* <- End of defines for message OVERLAPPING_CHUNK */
/* <- End of message defines for component SAPDBMem */

/* some helpful enumerations (created by buildmsg.pl) -> */

#define SDBMSG_SAPDBMEM_ENUMERATION \
                    SAPDBMem_ALLOCATOR_OUT_OF_MEMORY=1, \
                    SAPDBMem_OVERLAPPING_CHUNK=2
#define SDBMSG_SAPDBMEM_INITIALIZATIONLIST(x) \
                    x(SDBMSG_SAPDBMEM_ALLOCATOR_OUT_OF_MEMORY, "ALLOCATOR_OUT_OF_MEMORY"), \
                    x(SDBMSG_SAPDBMEM_OVERLAPPING_CHUNK, "OVERLAPPING_CHUNK")
/* <- some helpful enumerations */

#endif /* SDBMSG_SAPDBMEM_H */
