<?xml version="1.0" encoding="ISO-8859-1" standalone="yes" ?>

<IDL2XML xmlns="CppApplInterface"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

&if $OS = WIN32
<TYPEDEF UUID="" NAME="OmsTypeInt64" TYPE="hyper"/>
&else
&if $OS in [ UNIX ] and defined BIT64
<TYPEDEF UUID="" NAME="OmsTypeInt64" TYPE="long"/>
&else
<TYPEDEF UUID="" NAME="OmsTypeInt64" TYPE="long long"/>
&endif
&endif

&if $OS = WIN32
<TYPEDEF UUID="" NAME="OmsTypeUInt64" TYPE="unsigned hyper"/>
&else
&if $OS in [ UNIX ] and defined BIT64
<TYPEDEF UUID="" NAME="OmsTypeUInt64" TYPE="unsigned long"/>
&else
<TYPEDEF UUID="" NAME="OmsTypeUInt64" TYPE="unsigned long long"/>
&endif
&endif

<TYPEDEF UUID="" NAME="OmsTypeInt8" TYPE="OmsTypeInt64"/>

<TYPEDEF UUID="" NAME="OmsTypeUInt8" TYPE="OmsTypeUInt64"/>

<TYPEDEF UUID="00489FD1-87B7-11d4-B2E4-0050DAE0298C" NAME="DbpTypeUnicode" TYPE="unsigned short"/>

<TYPEDEF UUID="A6DE9A83-6173-11d1-A943-00A0C94311A5" NAME="OmsTypeChar" TYPE="char"/>

<TYPEDEF UUID="A6DE9A85-6173-11d1-A943-00A0C94311A5" NAME="OmsTypeByte" TYPE="unsigned char"/>

<TYPEDEF UUID="09D9CE43-88D5-478a-99EA-00AD11A144FF" NAME="OmsTypeAscii7" TYPE="unsigned char"/>

<TYPEDEF UUID="32DFBA48-0218-4a2f-AFF5-B6AFCB19E6B9" NAME="OmsTypeUTF8" TYPE="unsigned char"/>

<TYPEDEF UUID="4A523F86-2315-4e0c-BF9B-95F447742344" NAME="OmsTypeWyde" TYPE="unsigned short"/>

<TYPEDEF UUID="7B0A5BD0-68F1-11d2-A980-00A0C9430731" NAME="OmsTypeInt1" TYPE="signed char"/>

<TYPEDEF UUID="92F1D481-A63E-11d3-A997-00A0C94311A5" NAME="OmsTypeUInt1" TYPE="unsigned char"/>

<TYPEDEF UUID="25EB01B1-0454-11d3-A994-00A0C94311A5" NAME="OmsTypeInt4" TYPE="int"/>

<TYPEDEF UUID="B02B1C11-09D3-11d3-A994-00A0C94311A5" NAME="OmsTypeUInt4" TYPE="unsigned int"/>

<TYPEDEF UUID="A6DE9A87-6173-11d1-A943-00A0C94311A5" NAME="OmsTypeBool" TYPE="unsigned char"/>

<UNION NAME="OmsTypeDouble">
  <INTRINSICMEMBER NAME="d" TYPE="double"/>
  <ALIGNMENTMEMBER NAME="int8" TYPE="OmsTypeInt8"/>
  <CPP STRING="  OmsTypeDouble() {d = 0;}"/>
</UNION>

<STRUCT NAME="OmsTypeABAPTimeStamp" UUID="2C791281-E895-11d1-A95C-00A0C9430731">
  <MEMBER NAME="m_timeStamp" TYPE="unsigned char" DIMENSION="8"/>
</STRUCT>

<TYPEDEF UUID="F2AD8221-A641-11d3-A997-00A0C94311A5" NAME="OmsSchemaHandle" TYPE="unsigned int"/>

<TYPEDEF UUID="F2AD8222-A641-11d3-A997-00A0C94311A5" NAME="OmsContainerNo" TYPE="unsigned int"/>

<STRUCT NAME="TParamDescriptor" UUID="74F2C121-27EC-11d3-A996-00A0C9430731">
  <MEMBER NAME="len" TYPE="OmsTypeInt4"/>
  <MEMBER NAME="val" TYPE="unsigned char*"/>
</STRUCT>

<CPP STRING=""/>
<CPP STRING="#ifdef OID_8BYTE_ALIGNED"/>
<STRUCT NAME="OmsTypeOid4BA">
  <MEMBER NAME="pno" TYPE="OmsTypeUInt4"/>
  <MEMBER NAME="pagePos" TYPE="unsigned short"/>
  <MEMBER NAME="generation" TYPE="unsigned short"/>
</STRUCT>
<UNION NAME="OmsTypeOid">
  <INTRINSICMEMBER NAME="OidAsStruct" TYPE="OmsTypeOid4BA"/>
  <ALIGNMENTMEMBER NAME="OidAs8ByteInt" TYPE="OmsTypeInt8"/>
</UNION>
<CPP STRING=""/>
<CPP STRING="#else"/>
<STRUCT NAME="OmsTypeOid">
  <MEMBER NAME="pno" TYPE="OmsTypeUInt4"/>
  <MEMBER NAME="pagePos" TYPE="unsigned short"/>
  <MEMBER NAME="generation" TYPE="unsigned short"/>
</STRUCT>
<CPP STRING=""/>
<CPP STRING="#endif"/>

<STRUCT NAME="OmsTypePacked_8_3" UUID="4DEA22DD-0417-11d2-A961-00A0C9430731">
  <MEMBER NAME="m_packed" TYPE="unsigned char" DIMENSION="8"/>
</STRUCT>

<STRUCT NAME="OmsTypePacked_15_3" UUID="0B9BD0FC-A7AB-4178-B566-71C697B85E66">
  <MEMBER NAME="m_packed" TYPE="unsigned char" DIMENSION="15"/>
</STRUCT>

<TYPEDEF UUID="0FAF0BA8-F4FD-4083-9BF8-1C386630B3AB" NAME="OmsTypeNumc" TYPE="char"/>

<TYPEDEF UUID="" NAME="OmsVersionId" TYPE="OmsTypeChar" DIMENSION="22"/>

<STRUCT NAME="OmsLockHandle" UUID="968084C1-54BC-11d5-B330-0050DADE3427">
  <MEMBER NAME="m_handle" TYPE="unsigned char" DIMENSION="8"/>
</STRUCT>

<STRUCT NAME="OmsMonitorData" UUID="968084C1-54BC-11d5-B330-0050DADE3427">
  <MEMBER NAME="m_methodName" TYPE="OmsTypeChar" DIMENSION="32"/>
  <MEMBER NAME="m_runTime" TYPE="OmsTypeUInt4"/>
  <MEMBER NAME="m_cntNewObject" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_cntNewKeyedObject" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_cntNewVarObject" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_cntDeref" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_cntDerefLCBase" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_cntKeyDeref" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_cntDerefVarObj" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_cntDerefVarObjLCBase" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_cntOmsStore" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_cntStoreVarObj" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_cntOmsStoreLCBase" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_cntStoreVarObjLCBase" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_cntOmsDelete" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_cntOmsDeleteVarObject" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_cntOmsDeleteLC" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_cntOmsDeleteVarObjectLC" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_cntOmsLock" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_logHops" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_logHopsIter" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_cntExceptions" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_cntOutOfDate" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_cntOutOfMemory" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_cntSubtransRollback" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_cntSubtransCommit" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_maxSubtransLevel" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_cntNewConsistentView" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_avgWaitNewConsView" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_cntOperatorNew" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_maxChunkAllocated" TYPE="OmsTypeUInt4"/>
  <MEMBER NAME="m_minChunkAllocated" TYPE="OmsTypeUInt4"/>
  <MEMBER NAME="m_avgChunkAllocated" TYPE="OmsTypeUInt4"/>
  <MEMBER NAME="m_cntOperatorDelete" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_maxChunkDeleted" TYPE="OmsTypeUInt4"/>
  <MEMBER NAME="m_minChunkDeleted" TYPE="OmsTypeUInt4"/>
  <MEMBER NAME="m_avgChunkDeleted" TYPE="OmsTypeUInt4"/>
  <MEMBER NAME="m_maxHeapUsage" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_memoryDelta" TYPE="OmsTypeInt64"/>
  <MEMBER NAME="m_OmsLVCBaseCalls" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_cntSelfSuspends" TYPE="OmsTypeUInt4"/>
  <MEMBER NAME="m_cntDispatcher" TYPE="OmsTypeUInt4"/>
  <MEMBER NAME="m_cntIO" TYPE="OmsTypeUInt4"/>
  <MEMBER NAME="m_IORelTime" TYPE="OmsTypeInt4"/>
  <MEMBER NAME="m_IOAbsTime" TYPE="OmsTypeInt4"/>
  <MEMBER NAME="m_cntReplyReceive" TYPE="OmsTypeUInt4"/>
  <MEMBER NAME="m_ReplyReceiveRelTime" TYPE="OmsTypeInt4"/>
  <MEMBER NAME="m_ReplyReceiveAbsTime" TYPE="OmsTypeInt4"/>
  <MEMBER NAME="m_cntReceiveReply" TYPE="OmsTypeUInt4"/>
  <MEMBER NAME="m_ReceiveReplyRelTime" TYPE="OmsTypeInt4"/>
  <MEMBER NAME="m_ReceiveReplyAbsTime" TYPE="OmsTypeInt4"/>
  <MEMBER NAME="m_cntWaits" TYPE="OmsTypeUInt4"/>
  <MEMBER NAME="m_WaitsRelTime" TYPE="OmsTypeInt4"/>
  <MEMBER NAME="m_WaitsAbsTime" TYPE="OmsTypeInt4"/>
  <MEMBER NAME="m_cntSleep" TYPE="OmsTypeUInt4"/>
  <MEMBER NAME="m_SleepRelTime" TYPE="OmsTypeInt4"/>
  <MEMBER NAME="m_SleepAbsTime" TYPE="OmsTypeInt4"/>
  <MEMBER NAME="m_OmsReadCacheHit" TYPE="OmsTypeInt4"/>
  <MEMBER NAME="m_OmsReadCacheMiss" TYPE="OmsTypeInt4"/>
  <MEMBER NAME="m_OmsReadVersion" TYPE="OmsTypeInt4"/>
  <MEMBER NAME="m_OmsMaxHashChainLen" TYPE="OmsTypeInt4"/>
  <MEMBER NAME="m_OmsRehash" TYPE="OmsTypeInt4"/>
  <MEMBER NAME="m_cntStreamRowsRead" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_cntStreamRowsWritten" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="m_cntWaitForOmsLockObj" TYPE="OmsTypeInt4"/>
  <MEMBER NAME="m_avgWaitForOmsLockObj" TYPE="OmsTypeInt4"/>
  <MEMBER NAME="m_taskId" TYPE="OmsTypeInt4"/>
</STRUCT>

<STRUCT NAME="SqlMonitorData" UUID="968084C1-54BC-11d5-B330-0050DADE3427">
  <MEMBER NAME="m_MethodName" TYPE="OmsTypeChar" DIMENSION="32"/>
  <MEMBER NAME="m_Runtime" TYPE="OmsTypeUInt4"/>
  <MEMBER NAME="m_cntPrepare" TYPE="OmsTypeUInt4"/>
  <MEMBER NAME="m_cntInsert" TYPE="OmsTypeUInt4"/>
  <MEMBER NAME="m_cntSelect" TYPE="OmsTypeUInt4"/>
  <MEMBER NAME="m_cntUpdate" TYPE="OmsTypeUInt4"/>
  <MEMBER NAME="m_cntDelete" TYPE="OmsTypeUInt4"/>
  <MEMBER NAME="m_cntFetch" TYPE="OmsTypeUInt4"/>
  <MEMBER NAME="m_cntDropParseid" TYPE="OmsTypeUInt4"/>
  <MEMBER NAME="m_cntOther" TYPE="OmsTypeUInt4"/>
  <MEMBER NAME="m_lenInsertData" TYPE="OmsTypeUInt4"/>
  <MEMBER NAME="m_lenUpdateData" TYPE="OmsTypeUInt4"/>
  <MEMBER NAME="m_lenDeleteData" TYPE="OmsTypeUInt4"/>
  <MEMBER NAME="m_lenFetchData" TYPE="OmsTypeUInt4"/>
</STRUCT>

<ENUM NAME="ABTypes">
  <MEMBER NAME="ABTYPC" VALUE="0"/>
  <MEMBER NAME="ABTYPDATE" VALUE="1"/>
  <MEMBER NAME="ABTYPP" VALUE="2"/>
  <MEMBER NAME="ABTYPTIME" VALUE="3"/>
  <MEMBER NAME="ABTYPX" VALUE="4"/>
  <MEMBER NAME="ABTYPTABH" VALUE="5"/>
  <MEMBER NAME="ABTYPNUM" VALUE="6"/>
  <MEMBER NAME="ABTYPFLOAT" VALUE="7"/>
  <MEMBER NAME="ABTYPINT" VALUE="8"/>
  <MEMBER NAME="ABTYPINT2" VALUE="9"/>
  <MEMBER NAME="ABTYPINT1" VALUE="10"/>
  <MEMBER NAME="ABTYPW" VALUE="11"/>
  <MEMBER NAME="ABTYP1" VALUE="12"/>
  <MEMBER NAME="ABTYP2" VALUE="13"/>
  <MEMBER NAME="ABTYPSTRUC1" VALUE="14"/>
  <MEMBER NAME="ABTYPSTRUC2" VALUE="15"/>
  <MEMBER NAME="ABTYPREF" VALUE="16"/>
  <MEMBER NAME="ABTYPOBJ1" VALUE="17"/>
  <MEMBER NAME="ABTYPOBJ2" VALUE="18"/>
  <MEMBER NAME="ABTYPnull" VALUE="19"/>
  <MEMBER NAME="ABTYPWYDE" VALUE="100"/>
</ENUM>

<STRUCT NAME="OmsVersionInfo" UUID="D6AFDBA8-69B9-4108-B6D5-7FA3DB04D558">
  <MEMBER NAME="createDate" TYPE="OmsTypeByte" DIMENSION="8"/>
  <MEMBER NAME="createTime" TYPE="OmsTypeByte" DIMENSION="8"/>
  <MEMBER NAME="openDate" TYPE="OmsTypeByte" DIMENSION="8"/>
  <MEMBER NAME="openTime" TYPE="OmsTypeByte" DIMENSION="8"/>
  <MEMBER NAME="consistentView" TYPE="OmsTypeInt4"/>
  <MEMBER NAME="isMarked" TYPE="OmsTypeBool"/>
  <MEMBER NAME="isOpen" TYPE="OmsTypeBool"/>
  <MEMBER NAME="isUnloaded" TYPE="OmsTypeBool"/>
  <MEMBER NAME="heapUsage" TYPE="OmsTypeInt8"/>
  <MEMBER NAME="hashSize" TYPE="OmsTypeInt4"/>
</STRUCT>

<STRUCT NAME="OmsTypeABAPColDesc" UUID="D6AFDBA8-69B9-4108-B6D5-7FA3DB04D558">
  <MEMBER NAME="inout" TYPE="unsigned char"/>
  <MEMBER NAME="abap_type" TYPE="unsigned char"/>
  <MEMBER NAME="dec" TYPE="unsigned short"/>
  <MEMBER NAME="length" TYPE="unsigned short"/>
  <MEMBER NAME="offset" TYPE="unsigned short"/>
</STRUCT>

<STRUCT NAME="OmsTypeABAPTabHandle" UUID="33B799A1-85BD-11d1-A93F-00A0C944907B">
&if $BIT64
&else
  <MEMBER NAME="reserved" TYPE="OmsTypeInt4"/>
&endif
  <MEMBER NAME="rowSize" TYPE="unsigned short"/>
  <MEMBER NAME="colCount" TYPE="unsigned short"/>
  <MEMBER NAME="rowCount" TYPE="OmsTypeInt4"/>
  <MEMBER NAME="ABAPTabId" TYPE="OmsTypeInt4"/>
  <MEMBER NAME="colDesc" TYPE="OmsTypeABAPColDesc" DIMENSION="256"/>
</STRUCT>

<ENUM NAME="OmsStreamTypes">
  <MEMBER NAME="STYPE_BOOL" VALUE="0"/>
  <MEMBER NAME="STYPE_I1" VALUE="1"/>
  <MEMBER NAME="STYPE_UI1" VALUE="2"/>
  <MEMBER NAME="STYPE_I2" VALUE="3"/>
  <MEMBER NAME="STYPE_UI2" VALUE="4"/>
  <MEMBER NAME="STYPE_I4" VALUE="5"/>
  <MEMBER NAME="STYPE_UI4" VALUE="6"/>
  <MEMBER NAME="STYPE_I8" VALUE="7"/>
  <MEMBER NAME="STYPE_UI8" VALUE="8"/>
  <MEMBER NAME="STYPE_R4" VALUE="9"/>
  <MEMBER NAME="STYPE_R8" VALUE="10"/>
  <MEMBER NAME="STYPE_INT" VALUE="12"/>
  <MEMBER NAME="STYPE_UINT" VALUE="13"/>
  <MEMBER NAME="STYPE_CHAR" VALUE="14"/>
  <MEMBER NAME="STYPE_WCHAR" VALUE="15"/>
  <MEMBER NAME="STYPE_UDT" VALUE="16"/>
  <MEMBER NAME="STYPE_WYDE" VALUE="17"/>
</ENUM>

<STRUCT NAME="OmsTypeStreamMemberDesc" UUID="33B799A1-85BD-11d1-A93F-00A0C944907B">
  <MEMBER NAME="inout" TYPE="unsigned char"/>
  <MEMBER NAME="memberType" TYPE="unsigned char"/>
  <MEMBER NAME="dec" TYPE="unsigned short"/>
  <MEMBER NAME="length" TYPE="unsigned short"/>
  <MEMBER NAME="offset" TYPE="unsigned short"/>
</STRUCT>

<STRUCT NAME="OmsTypeStreamHandle" UUID="EE4B31FB-CF89-11d1-A955-00A0C9430731">
&if $BIT64
&else
  <MEMBER NAME="reserved" TYPE="OmsTypeInt4"/>
&endif
  <MEMBER NAME="size" TYPE="unsigned short"/>
  <MEMBER NAME="memberCount" TYPE="unsigned short"/>
  <MEMBER NAME="filler" TYPE="OmsTypeInt4"/>
  <MEMBER NAME="ABAPTabId" TYPE="OmsTypeInt4"/>
  <MEMBER NAME="colDesc" TYPE="OmsTypeStreamMemberDesc" DIMENSION="256"/>
</STRUCT>
<CPPSQLDBC STRING="#if defined (SQLDBC_TYPES_H) || defined (SQLODBC) || defined (LC_STREAMS_ENABLED)"/>
<CPPSQLDBC STRING="#include &lt;stdlib.h&gt;"/>
<CPPSQLDBC STRING="/* returncodes for callbackfunktions */"/>
<CPPSQLDBC STRING="#define SQL_STREAM_OK 0"/>
<CPPSQLDBC STRING="#define SQL_STREAM_ERROR (-1)"/>
<CPPSQLDBC STRING="#define SQL_STREAM_EXCEPTION (-2)"/>
<CPPSQLDBC STRING="#define SQL_STREAM_NO_MORE_DATA (100)"/>
<CPPSQLDBC STRING=" "/>
<CPPSQLDBC STRING="typedef struct _ABAPTab {"/>
<CPPSQLDBC STRING="  void* nilPointer;"/>
<CPPSQLDBC STRING="  OmsTypeABAPTabHandle hABAPTab;"/>
<CPPSQLDBC STRING="} ABAPTabStruct;"/>
<CPPSQLDBC STRING=" "/>
<CPPSQLDBC STRING="typedef struct _Stream {"/>
<CPPSQLDBC STRING="  void* nilPointer;"/>
<CPPSQLDBC STRING="  OmsTypeStreamHandle hStream;"/>
<CPPSQLDBC STRING="} StreamStruct;"/>
<CPPSQLDBC STRING=" "/>
<CPPSQLDBC STRING="typedef struct _SQL_LC_StreamParm {"/>
<CPPSQLDBC STRING="  union"/>
<CPPSQLDBC STRING="  {"/>
<CPPSQLDBC STRING="    ABAPTabStruct ABAPTab;"/>
<CPPSQLDBC STRING="    StreamStruct Stream;"/>
<CPPSQLDBC STRING="  }"/>
<CPPSQLDBC STRING="#ifndef __cplusplus"/>
<CPPSQLDBC STRING="  C_1"/>
<CPPSQLDBC STRING="#endif"/>
<CPPSQLDBC STRING=";"/>
<CPPSQLDBC STRING="} SQL_LC_StreamParm;"/>
<CPPSQLDBC STRING=" "/>
<CPPSQLDBC STRING="/**"/>
<CPPSQLDBC STRING=" * @brief Call back function for reading stream data from the client and"/>
<CPPSQLDBC STRING=" *        sending it to the database."/>
<CPPSQLDBC STRING=" *"/>
<CPPSQLDBC STRING=" *        The stream data is written directly to the order interface and send "/>
<CPPSQLDBC STRING=" *        to the database system. The length of the stream data is unlimited "/>
<CPPSQLDBC STRING=" *        but it will be send in pieces. For sending some pieces of data to the"/>
<CPPSQLDBC STRING=" *        database the SQLStreamReadProc function should return"/>
<CPPSQLDBC STRING=" *        #SQL_ABAP_OK for each call. For the last piece the function should "/>
<CPPSQLDBC STRING=" *        return #SQL_ABAP_NO_MORE_DATA."/>
<CPPSQLDBC STRING=" *"/>
<CPPSQLDBC STRING=" * @param TabParm      [in]  The table or stream id to read from."/>
<CPPSQLDBC STRING=" * @param rgbOutStream [in]  A pointer to the buffer to where the client has  "/>
<CPPSQLDBC STRING=" *                           to write the stream data."/>
<CPPSQLDBC STRING=" * @param cbStreamMax  [in]  The size in bytes of the rgbOutStream "/>
<CPPSQLDBC STRING=" *                           buffer."/>
<CPPSQLDBC STRING=" * @param pcbStreamLen [out] The number of bytes written to the "/>
<CPPSQLDBC STRING=" *                           rgbOutStream buffer."/>
<CPPSQLDBC STRING=" * @param pcbNoOfRowsRead [out] If the stream data is portioned into equal "/>
<CPPSQLDBC STRING=" *                           pieces (table rows) the client should returns the "/>
<CPPSQLDBC STRING=" *                           number of pieces written to the rgbOutStream buffer."/>
<CPPSQLDBC STRING=" * @param pMask [in]         Compression mask."/>
<CPPSQLDBC STRING=" *"/>
<CPPSQLDBC STRING=" * @return  #SQL_ABAP_OK if the rgbOutStream buffer was filled and "/>
<CPPSQLDBC STRING=" *          the data is ready to send. The client can send more data to the "/>
<CPPSQLDBC STRING=" *          database."/>
<CPPSQLDBC STRING=" *          #SQL_ABAP_NO_MORE_DATA if the rgbOutStream buffer was "/>
<CPPSQLDBC STRING=" *          filled and the stream processing should be finished."/>
<CPPSQLDBC STRING=" *          #SQL_ABAP_EXCEPTION if the call back function runs into an "/>
<CPPSQLDBC STRING=" *          unhandled exception during processing the data."/>
<CPPSQLDBC STRING=" *          Any other returncode will end the processing of the stream and send *          the returncode to the database. "/>
<CPPSQLDBC STRING=" */"/>
<CPPSQLDBC STRING="typedef int (SQLStreamReadProc)(SQL_LC_StreamParm *TabParm, void *rgbOutStream, int cbStreamMax, int *pcbStreamLen, int *pcbNoOfRowsRead, void* pMask);"/>
<CPPSQLDBC STRING=" "/>
<CPPSQLDBC STRING="/**"/>
<CPPSQLDBC STRING=" * @brief Call back function for getting stream data from database."/>
<CPPSQLDBC STRING=" *"/>
<CPPSQLDBC STRING=" *        The stream data is reading directly from the order interface "/>
<CPPSQLDBC STRING=" *        and past to the call back function. "/>
<CPPSQLDBC STRING=" *        The length of the stream data is unlimited but it will be read in"/>
<CPPSQLDBC STRING=" *        pieces. The function is called each time the database has send on "/>
<CPPSQLDBC STRING=" *        portion of data."/>
<CPPSQLDBC STRING=" *        The SQLStreamWriteProc function should return"/>
<CPPSQLDBC STRING=" *        #SQL_ABAP_OK after processing the data."/>
<CPPSQLDBC STRING=" *"/>
<CPPSQLDBC STRING=" * @param TabParm     [in] The table or stream id to write to."/>
<CPPSQLDBC STRING=" * @param rgbInStream [in] A pointer to the buffer from where the client has  "/>
<CPPSQLDBC STRING=" *                         to read the stream data."/>
<CPPSQLDBC STRING=" * @param cbStreamMax [in] The size in bytes of the rgbInStream "/>
<CPPSQLDBC STRING=" *                         buffer."/>
<CPPSQLDBC STRING=" * @param cbNoRows   [out] The stream data is portioned into equal pieces"/>
<CPPSQLDBC STRING=" *                          (table rows) the client has to interpret this"/>
<CPPSQLDBC STRING=" *                          value to calculate the length of the "/>
<CPPSQLDBC STRING=" *                          rgbInStream buffer."/>
<CPPSQLDBC STRING=" * @param pMask      [out] Compression mask."/>
<CPPSQLDBC STRING=" *"/>
<CPPSQLDBC STRING=" * @note For reading variable length of data use the extended write call back "/>
<CPPSQLDBC STRING=" *       function described later in this document."/>
<CPPSQLDBC STRING=" * @return  #SQL_ABAP_OK if the rgbInStream buffer was processed"/>
<CPPSQLDBC STRING=" *          by the client and the next portion of data may be read from the "/>
<CPPSQLDBC STRING=" *          database."/>
<CPPSQLDBC STRING=" *          #SQL_ABAP_EXCEPTION if the call back function runs into an "/>
<CPPSQLDBC STRING=" *          unhandled exception during processing the data."/>
<CPPSQLDBC STRING=" *          Any other returncode will end the processing of the stream and send *          the returncode to the database. "/>
<CPPSQLDBC STRING=" */"/>
<CPPSQLDBC STRING="typedef int (SQLStreamWriteProc)(SQL_LC_StreamParm *TabParm, void *rgbInStream, int cbNoOfRows, int cbStreamLen, void* pMask);"/>
<CPPSQLDBC STRING=" "/>
<CPPSQLDBC STRING="typedef struct _SQLStreamDesc {"/>
<CPPSQLDBC STRING="  SQLStreamReadProc  *ReadProc;"/>
<CPPSQLDBC STRING="  SQLStreamWriteProc *WriteProc;"/>
<CPPSQLDBC STRING="  SQL_LC_StreamParm  *StreamParam;   "/>
<CPPSQLDBC STRING="} SQLStreamDesc;"/>
<CPPSQLDBC STRING=" "/>
<CPPSQLDBC STRING=""/>
<CPPSQLDBC STRING="#ifdef __cplusplus"/>
<CPPSQLDBC STRING="template &lt;class T, long MCOUNT&gt; class CStreamDescriptor : public SQLStreamDesc {"/>
<CPPSQLDBC STRING="public :"/>
<CPPSQLDBC STRING="    int currMember;"/>
<CPPSQLDBC STRING="    void describeMember (OmsStreamTypes memberType, short length) {"/>
<CPPSQLDBC STRING="        if (currMember &lt; MCOUNT) {"/>
<CPPSQLDBC STRING="            StreamParam-&gt;Stream.hStream.colDesc[currMember].memberType = memberType;"/>
<CPPSQLDBC STRING="            StreamParam-&gt;Stream.hStream.colDesc[currMember].length     = length;"/>
<CPPSQLDBC STRING="            if (0 == currMember) {"/>
<CPPSQLDBC STRING="              StreamParam-&gt;Stream.hStream.colDesc[currMember].offset = 0;"/>
<CPPSQLDBC STRING="            }"/>
<CPPSQLDBC STRING="            else {"/>
<CPPSQLDBC STRING="              StreamParam-&gt;Stream.hStream.colDesc[currMember].offset ="/>
<CPPSQLDBC STRING="                StreamParam-&gt;Stream.hStream.colDesc[currMember-1].offset +"/>
<CPPSQLDBC STRING="                StreamParam-&gt;Stream.hStream.colDesc[currMember-1].length;"/>
<CPPSQLDBC STRING="            }"/>
<CPPSQLDBC STRING="            currMember++;"/>
<CPPSQLDBC STRING="        }"/>
<CPPSQLDBC STRING="    }"/>
<CPPSQLDBC STRING="public :"/>
<CPPSQLDBC STRING="    CStreamDescriptor(long streamId) {"/>
<CPPSQLDBC STRING="        ReadProc    = 0;"/>
<CPPSQLDBC STRING="        WriteProc   = 0;"/>
<CPPSQLDBC STRING="        currMember  = 0;"/>
<CPPSQLDBC STRING=" if (MCOUNT == 0) {"/>
<CPPSQLDBC STRING="   /* allocate the maximum if the membercount is not set */"/>
<CPPSQLDBC STRING="   StreamParam = (SQL_LC_StreamParm*) malloc(sizeof(SQL_LC_StreamParm) - sizeof (OmsTypeStreamMemberDesc) * 256 + sizeof (OmsTypeStreamMemberDesc) * 256);"/>
<CPPSQLDBC STRING=" }"/>
<CPPSQLDBC STRING=" else {"/>
<CPPSQLDBC STRING="   StreamParam = (SQL_LC_StreamParm*) malloc(sizeof(SQL_LC_StreamParm) - sizeof (OmsTypeStreamMemberDesc) * 256 + sizeof (OmsTypeStreamMemberDesc) * MCOUNT);"/>
<CPPSQLDBC STRING=" }"/>
<CPPSQLDBC STRING="        if (StreamParam) {"/>
<CPPSQLDBC STRING="            StreamParam-&gt;Stream.nilPointer          = (void*) 0;"/>
&if $BIT64
&else
<CPPSQLDBC STRING="            StreamParam-&gt;Stream.hStream.reserved    = 0;"/>
&endif
<CPPSQLDBC STRING="            StreamParam-&gt;Stream.hStream.ABAPTabId   = streamId;"/>
<CPPSQLDBC STRING="            StreamParam-&gt;Stream.hStream.size        = sizeof(T);"/>
<CPPSQLDBC STRING="            StreamParam-&gt;Stream.hStream.memberCount = MCOUNT;"/>
<CPPSQLDBC STRING="        }"/>
<CPPSQLDBC STRING="    }"/>
<CPPSQLDBC STRING=" "/>
<CPPSQLDBC STRING=""/>
<CPPSQLDBC STRING="    void Describe(short x)                   { describeMember (STYPE_I2,  sizeof(x)); }"/>
<CPPSQLDBC STRING="    void Describe(unsigned short x)          { describeMember (STYPE_UI2, sizeof(x)); }"/>
<CPPSQLDBC STRING="    void Describe(OmsTypeInt4 x)             { describeMember (STYPE_I4,  sizeof(x)); }"/>
<CPPSQLDBC STRING="    void Describe(OmsTypeUInt4 x )           { describeMember (STYPE_UI4, sizeof(x)); }"/>
<CPPSQLDBC STRING="    void Describe(float x)                   { describeMember (STYPE_R4,  sizeof(x)); }"/>
<CPPSQLDBC STRING="    void Describe(double x)                  { describeMember (STYPE_R8,  sizeof(x)); }"/>
<CPPSQLDBC STRING="    void Describe(OmsTypeInt64 x)            { describeMember (STYPE_I8,  sizeof(x)); }"/>
<CPPSQLDBC STRING="    void Describe(OmsTypeUInt64 x)           { describeMember (STYPE_UI8, sizeof(x)); }"/>
<CPPSQLDBC STRING="    void Describe(const char* x, short size) { describeMember (STYPE_CHAR, size); }"/>
<CPPSQLDBC STRING="    void Describe(OmsTypeByte* x, short size) { describeMember (STYPE_CHAR, size); }"/>
<CPPSQLDBC STRING=" "/>
<CPPSQLDBC STRING="protected :"/>
<CPPSQLDBC STRING="    ~CStreamDescriptor() {"/>
<CPPSQLDBC STRING="        if (StreamParam)"/>
<CPPSQLDBC STRING="            free (StreamParam);"/>
<CPPSQLDBC STRING="    }"/>
<CPPSQLDBC STRING="};"/>
<CPPSQLDBC STRING=" "/>
<CPPSQLDBC STRING="template &lt; class T, long MCOUNT&gt; class COStreamDescriptor : public CStreamDescriptor&lt;T,MCOUNT&gt; {"/>
<CPPSQLDBC STRING="public :"/>
<CPPSQLDBC STRING="    COStreamDescriptor(long streamId, SQLStreamWriteProc pWriteProc) : "/>
<CPPSQLDBC STRING="        CStreamDescriptor&lt;T,MCOUNT&gt;(streamId) "/>
<CPPSQLDBC STRING="    {"/>
<CPPSQLDBC STRING="        CStreamDescriptor&lt;T,MCOUNT&gt;::WriteProc = pWriteProc;"/>
<CPPSQLDBC STRING="    }"/>
<CPPSQLDBC STRING="};"/>
<CPPSQLDBC STRING=" "/>
<CPPSQLDBC STRING="template &lt;class T, long MCOUNT&gt; class CIStreamDescriptor : public CStreamDescriptor&lt;T,MCOUNT&gt; {"/>
<CPPSQLDBC STRING="public :"/>
<CPPSQLDBC STRING="    CIStreamDescriptor(long streamId, SQLStreamReadProc pReadProc) : "/>
<CPPSQLDBC STRING="        CStreamDescriptor&lt;T,MCOUNT&gt;(streamId) "/>
<CPPSQLDBC STRING="    {"/>
<CPPSQLDBC STRING="        CStreamDescriptor&lt;T,MCOUNT&gt;::ReadProc = pReadProc;"/>
<CPPSQLDBC STRING="    }"/>
<CPPSQLDBC STRING="}; "/>
<CPPSQLDBC STRING="#endif"/>

<CPPSQLDBC STRING ="#define SQL_ABAP_OK           SQL_STREAM_OK"/>
<CPPSQLDBC STRING ="#define SQL_ABAP_ERROR        SQL_STREAM_ERROR"/>
<CPPSQLDBC STRING ="#define SQL_ABAP_EXCEPTION    SQL_STREAM_EXCEPTION"/>
<CPPSQLDBC STRING ="#define SQL_ABAP_NO_MORE_DATA SQL_STREAM_NO_MORE_DATA"/>
<CPPSQLDBC STRING ="#define SQLABAPReadProc       SQLStreamReadProc"/>
<CPPSQLDBC STRING ="#define SQLABAPWriteProc      SQLStreamWriteProc"/>
<CPPSQLDBC STRING ="#define SQLABAPDesc           SQLStreamDesc"/>
<CPPSQLDBC STRING ="#define SQL_LC_ABAPTabParm    SQL_LC_StreamParm"/>
<CPPSQLDBC STRING ="#endif"/>
</IDL2XML>
