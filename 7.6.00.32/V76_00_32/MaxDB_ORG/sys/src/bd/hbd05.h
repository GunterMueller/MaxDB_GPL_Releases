/*!******************************************************************************

  @file         hbd05.h

  ------------------------------------------------------------------------------

  @author       <unknown>

  @brief        <unknown topic>

\if EMIT_LICENCE

    ========== licence begin  GPL
    Copyright (c) 2000-2005 SAP AG
 
    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.
 
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
 
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
    ========== licence end
\endif

********************************************************************************/

#ifndef HBD05_H
#define HBD05_H


/*===========================================================================*
 *     RefType: Both                                                         *
 *===========================================================================*/

/*===========================================================================*
 *     MD5: '\x7c\xeb\x26\x83\x02\x6b\xeb\x14\xae\xc5\x34\xfc\xc5\xf4\x94\xf5'
 *===========================================================================*/


/*===========================================================================*
 *  INCLUDES                                                                 *
 *===========================================================================*/

#include "gsp00.h"
#include "ggg00.h"
#include "gbd00.h"


/*===========================================================================*
 *  FUNCTION PROTOTYPES                                                      *
 *===========================================================================*/

externPascal void b05copy_bytestr (
    tgg00_TransContext    VAR_VALUE_REF  t,
    tgg00_FileId          VAR_VALUE_REF  sourceFileId,
    tsp00_Int4                           from_pos,
    tgg00_FileId          VAR_VALUE_REF  targetFileId,
    tsp00_Int4                           to_pos,
    const tgg00_Surrogate&                 parentFileNo,
    tsp00_Int4                           length,
    tsp00_Int4                           new_str_version);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void b05expand_bytestr (
    tgg00_TransContext    VAR_VALUE_REF  t,
    tgg00_FileId          VAR_VALUE_REF  fileId,
    tsp00_Int4                           length,
    char                                 fillChar,
    tsp00_Int4                           newLobVersion);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void b05get_str_version (
    tgg00_TransContext    VAR_VALUE_REF  t,
    tgg00_FileId          VAR_VALUE_REF  fileId,
    tsp00_Int4            VAR_VALUE_REF  lobVersion);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void b05length_bytestr (
    tgg00_TransContext    VAR_VALUE_REF  t,
    tgg00_FileId          VAR_VALUE_REF  fileId,
    tsp00_Int4            VAR_VALUE_REF  filelength,
    tsp00_Int4            VAR_VALUE_REF  pageCount,
    tsp00_Int4            VAR_VALUE_REF  lobVersion);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void bd05ReadLob (
    tgg00_TransContext    VAR_VALUE_REF  t,
    tgg00_FileId          VAR_VALUE_REF  fileId,
    tsp00_Int4                           pos,
    tsp00_Int4            VAR_VALUE_REF  length,
    tsp00_Int4                           bufferSize,
    tsp00_Byte* const                    pBuffer,
    tsp00_Int4                           bufpos);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void b05trunc_bytestr (
    tgg00_TransContext    VAR_VALUE_REF  t,
    tgg00_FileId          VAR_VALUE_REF  fileId,
    const tgg00_Surrogate&                 parentFileNo,
    tsp00_Int4                           newFileLength,
    tsp00_Int4                           newLobVersion);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void b05write_bytestr (
    tgg00_TransContext    VAR_VALUE_REF  t,
    tgg00_FileId          VAR_VALUE_REF  fileId,
    const tgg00_Surrogate&                 parentFileNo,
    tsp00_Int4                           pos,
    tsp00_Int4                           length,
    tsp00_Int4                           bufferSize,
    const tsp00_Byte*                    pBuffer,
    tsp00_Int4                           bufpos,
    tsp00_Int4                           newLobVersion);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void bd05DropLob (
    tgg00_TransContext    VAR_VALUE_REF  trans,
    tgg00_FileId          VAR_VALUE_REF  fileId,
    tgg00_Surrogate       VAR_ARRAY_REF  parentFileNo);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void bd05PrefetchLob (
    tgg00_TransContext    VAR_VALUE_REF  trans,
    tgg00_FileId          VAR_VALUE_REF  fileId,
    tsp00_Int4                           lobPosition,
    tsp00_Int4                           bytesToRead);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void bd05ExtractLob (
    tgg00_TransContext    VAR_VALUE_REF  trans,
    tsp00_PageNo                         root,
    tsp00_VFilename       VAR_ARRAY_REF  hostFileName);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void b05finish_load (
    tgg00_TransContext    VAR_VALUE_REF  t,
    tgg00_FileId          VAR_VALUE_REF  fileId,
    tsp00_PageNo                         rightmostLeaf);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void b05load_string (
    tbd_node_ptrs         VAR_VALUE_REF  lnptr,
    tbd_node_ptrs         VAR_VALUE_REF  nptr,
    tsp00_PageNo          VAR_VALUE_REF  leftPageNo,
    tbd_current_tree      VAR_VALUE_REF  current,
    tgg00_Surrogate       VAR_ARRAY_REF  parentFileNo);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void bd05ModifyFdirLength (
    tgg00_TransContext    VAR_VALUE_REF  trans,
    const pasbool                        bDoIncrement,
    tgg00_FileId          VAR_VALUE_REF  fileId,
    const tgg00_Surrogate&                 parentFileNo);

/* Don't edit this file by hand, it is generated by ptocProto.py */


#endif

