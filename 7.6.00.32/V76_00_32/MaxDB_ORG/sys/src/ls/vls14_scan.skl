/* 
  -----------------------------------------------------------------------------

  module: vls14_scan.skl

  -----------------------------------------------------------------------------

  responsible:  SteffenS and TimW
  
  special area: Replication Manager
 
  description:  source code of flex generated scanner class
                
  version:      7.4.

  -----------------------------------------------------------------------------
 
  Copyright (c) 1999-2004 SAP AG-2001
 
  -----------------------------------------------------------------------------
*/
#include <stdlib.h>
#include <stdio.h>

#include "gls00.h"
#include "hls98msg.h"
#include "hls14_scan.h"
#include "vls14_parse_gen.h"    // by bison generated header-file containing token definitions

#include "hls99.h"

%% yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here

#define _INTERNAL_FILE_ID_    _T("14_SCAN_SKL")

/* Done after the current pattern has been matched and before the
* corresponding action - sets up yytext.
*/
#define YY_DO_BEFORE_ACTION \
   yytext = yy_bp; \
%% code to fiddle yytext and yyleng for yymore() goes here
yy_hold_char = *yy_cp; \
*yy_cp = '\0'; \
%% code to copy yytext to yytext[] goes here, if %array
yy_c_buf_p = yy_cp;

%% data tables for the DFA and the user's section 1 definitions go here

%%

%% YY_RULE_SETUP definition goes here




//*****************************************************************************
// KONSTRUKTOR  : LoaderScanner::LoaderScanner
//    
// Erzeugt einen leeren Scanner
// ****************************************************************************/
LoaderScanner::LoaderScanner(tls00_Command*   SvrCmd, ErrorNumbers& Error )
{
    ROUTINE_DBG_MEO00 ("LoaderScanner Constructor");

    pLoaderCommand = SvrCmd;

    /* Es gibt nur noch strings zu bearbeiten. Keine include- oder kommandodateien mehr */
    /* Aber achtung, der string ist NICHT notwendigerweise null-terminiert. Deshalb muss in
       jedem fall die laenge des strings bei der initialisierung des puffers weiter unten
       mit angegeben werden. */
    yyin = pLoaderCommand->cmdReqDat_ls00;

    
    TRACE_PRNF_MLS99 (("LoaderScanner Constructor", "Load-Command-Scanner started.\n"));

    // Fehlerobjekt, das vom parser uebergeben wird initialisieren
    ScanError = Error;                  // Uebergebene fehlervariable und private zeigen auf gleichen bereich
    ScanError = STATIC_CAST(ErrorNumbers, 0);
    
    yy_c_buf_p                              = 0;
    yy_start                                = 1;
    yy_flex_debug                           = 0;
    yylineno                                = 1;
    
    yy_did_buffer_switch_on_eof             = 0;
    
    yy_looking_for_trail_begin              = 0;
    yy_more_flag                            = 0;
    yy_more_len                             = 0;
    yy_more_offset = yy_prev_more_offset    = 0;
    
    yy_start_stack_ptr                      = yy_start_stack_depth = 0;
    yy_start_stack                          = 0;
    
    yy_current_buffer                       = new yy_buffer_state( yyin, (int)strlen(pLoaderCommand->cmdReqDat_ls00) );
    
    yy_load_buffer_state();
    
    // Die Alloziierung des State-Buffers ist vermutlich nicht nötig,
    // wenn kein  in der Grammatik auftaucht, wird aber aus
    // Sicherheitsgründen doch durchgeführt
    yy_state_buf = new yy_state_type[strlen(pLoaderCommand->cmdReqDat_ls00) + 2];
}


//****************************************************************************
// METHODE      : LoaderScanner::~LoaderScanner
// 
// Terminiert den Scanner
//****************************************************************************
LoaderScanner::~LoaderScanner()
{
    delete yy_state_buf;
    delete yy_current_buffer;
}


//****************************************************************************
// METHODE      : LoaderScanner::yylex
// 
// Haupt-Scan-Routine der Scanner-Klasse
// Implementiert die ´den Algorithmus, der aus einem Zeichen-Strom gemäß
// der egulären Grammatik einen Token-Strom generiert
//****************************************************************************
int LoaderScanner::yylex(ScanReturn& ReturnStructure)
{
    register yy_state_type yy_current_state;
    register char *yy_cp, *yy_bp;
    register int yy_act;
%% user's declarations go here
 
    yylex_return = -1;     
      
    while ( 1 )     /* loops until end-of-file is reached */
    {
%% yymore()-related code goes here
        yy_cp = yy_c_buf_p;
         
        *yy_cp = yy_hold_char;  /* Support of yytext. */
         
        /* yy_bp points to the position in yy_ch_buf of the start of the current run. */
        yy_bp = yy_cp;
         
%% code to set up and find next match goes here
            
yy_find_action:
%% code to find the action number goes here
            
            YY_DO_BEFORE_ACTION;
         
%% code for yylineno update goes here
            
do_action:  /* This label is used only to access EOF actions. */
         
%% debug code goes here
            
        switch ( yy_act )
        { /* beginning of action switch */
%% actions go here
               
            case YY_END_OF_BUFFER:
            {
                /* Amount of text matched not including the EOB char. */
                int yy_amount_of_matched_text = (int) (yy_cp - yytext) - 1;
               
                /* Undo the effects of YY_DO_BEFORE_ACTION. */
                *yy_cp = yy_hold_char;
                YY_RESTORE_YY_MORE_OFFSET

                if ( yy_current_buffer->yy_buffer_status == yy_buffer_state::YY_BUFFER_NEW )
                {
                    /* We're scanning a new file or input source.  It's
                     * possible that this happened because the user
                     * just pointed yyin at a new source and called
                     * yylex().  If so, then we have to assure
                     * consistency between yy_current_buffer and our
                     * globals.  Here is the right place to do so, because
                     * this is the first action (other than possibly a
                     * back-up) that will match for the new input source.
                     */
                    yy_n_chars                          = yy_current_buffer->yy_n_chars;
                    yy_current_buffer->yy_input_file    = yyin;
                    yy_current_buffer->yy_buffer_status = yy_buffer_state::YY_BUFFER_NORMAL;
                }

                /* Note that here we test for yy_c_buf_p "<=" to the position
                 * of the first EOB in the buffer, since yy_c_buf_p will
                 * already have been incremented past the NUL character
                 * (since all states make transitions on EOB to the
                 * end-of-buffer state).  Contrast this with the test
                 * in input().
                 */
                if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
                { /* This was really a NUL. */
                    yy_state_type yy_next_state;

                    yy_c_buf_p = yytext + yy_amount_of_matched_text;

                    yy_current_state = yy_get_previous_state();

                    /* Okay, we're now positioned to make the NUL
                     * transition.  We couldn't have
                     * yy_get_previous_state() go ahead and do it
                     * for us because it doesn't know how to deal
                     * with the possibility of jamming (and we don't
                     * want to build jamming into it because then it
                     * will run more slowly).
                     */

                    yy_next_state = yy_try_NUL_trans( yy_current_state );

                    yy_bp = yytext + YY_MORE_ADJ;

                    if ( yy_next_state )
                    {
                        /* Consume the NUL. */
                        yy_cp = ++yy_c_buf_p;
                        yy_current_state = yy_next_state;
                        goto yy_match;
                    }
                    else
                    {
%% code to do back-up for compressed tables and set up yy_cp goes here
                        goto yy_find_action;
                    }
                }
                else
                    switch ( yy_get_next_buffer() )
                    {
                        case EOB_ACT_END_OF_FILE:
                        {
                            yy_did_buffer_switch_on_eof = 0;

                            if ( wrap() )
                            {
                                /* Note: because we've taken care in yy_get_next_buffer() to have set up
                                 * yytext, we can now set up yy_c_buf_p so that if some total
                                 * hoser (like flex itself) wants to call the scanner after we return the
                                 * YY_NULL, it'll still work - another YY_NULL will get returned.
                                 */
                                yy_c_buf_p = yytext + YY_MORE_ADJ;

                                yy_act = YY_STATE_EOF(YY_START);
                                goto do_action;
                            }
                            else
                            {
                                if ( ! yy_did_buffer_switch_on_eof )
                                {
                                    YY_NEW_FILE;
                                }
                            }
                            break;
                        }
                        case EOB_ACT_CONTINUE_SCAN:
                        {
                            yy_c_buf_p = yytext + yy_amount_of_matched_text;

                            yy_current_state = yy_get_previous_state();

                            yy_cp = yy_c_buf_p;
                            yy_bp = yytext + YY_MORE_ADJ;
                            goto yy_match;
                        }
                        case EOB_ACT_LAST_MATCH:
                        {
                            yy_c_buf_p = &yy_current_buffer->yy_ch_buf[yy_n_chars];
                            
                            yy_current_state = yy_get_previous_state();
                            
                            yy_cp = yy_c_buf_p;
                            yy_bp = yytext + YY_MORE_ADJ;
                            goto yy_find_action;
                        }
                    }

                break;  // breaks case YY_END_OF_BUFFER
            }
            default:
            {
                LoaderMessages::Instance()->ls98MsgToString(layScanner_els98, pLoaderCommand->cmdRpyDat_ls00,
                                                                               errInternal_els98,
                                                                               _INTERNAL_FILE_ID_,
                                                                               __LINE__,
                                                                               errScanNoAction_els98);
                ScanError = errInternal_els98;
                yylex_return = SCANNER_ERROR; /* return SCANNER_ERROR; */
                break;
            }
      } /* end of action switch */

      if (-1 != yylex_return)
      {
          break;
      }

   } /* end of scanning one token */

   return yylex_return;     /* THIS VALUES IS SET IN USER ACTIONS DEFINED IN THE GRAMMAR FILE! */
}
//  yylex()
   
 
   
//****************************************************************************
// METHODE      : LoaderScanner::yy_get_next_buffer
// 
// RETURN       : int
// 
// try to read in a new buffer
// 
//  Returns a code representing an action:
//      EOB_ACT_LAST_MATCH -
//      EOB_ACT_CONTINUE_SCAN - continue scanning from current position
//      EOB_ACT_END_OF_FILE - end of file
//****************************************************************************
int LoaderScanner::yy_get_next_buffer()
{
    register char *dest = yy_current_buffer->yy_ch_buf;
    register char *source = yytext;
    register int number_to_move, i;
    int ret_val;
   
    if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
    {
        LoaderMessages::Instance()->ls98MsgToString(layScanner_els98, pLoaderCommand->cmdRpyDat_ls00,
                                                                       errInternal_els98,
                                                                       _INTERNAL_FILE_ID_,
                                                                       __LINE__,
                                                                       errScanNoBuffer_els98);
        ScanError = errInternal_els98;
        return SCANNER_ERROR;
    }
 

    // Da im konstruktor des puffers schon yy_fill_buffer auf = gesetzt ist (der puffer wird
    // bereits im konstruktor gefuellt und muss hier nicht noch mal gefuellt werden), ist das
    // hier die stelle, an der wir diese funktion verlassen. Alles was danach kommt, wird
    // nicht abgearbeitet.
    if ( yy_current_buffer->yy_fill_buffer == 0 )
    { /* Don't try to fill the buffer, so this is an EOF. */
     
        if ( yy_c_buf_p - yytext - YY_MORE_ADJ == 1 )
        {
            /* We matched a single character, the EOB, so treat this as a final EOF. */
            return EOB_ACT_END_OF_FILE;
        }
        else
        {
            /* We matched some text prior to the EOB, first process it. */
            return EOB_ACT_LAST_MATCH;
        }
    }
   
    /* Try to read more data. */
   
    /* First move last chars to start of buffer. */
    number_to_move = (int) (yy_c_buf_p - yytext) - 1;
   
    for ( i = 0; i < number_to_move; ++i )
        *(dest++) = *(source++);
   
    if ( yy_current_buffer->yy_buffer_status == yy_buffer_state::YY_BUFFER_EOF_PENDING )
    {
        /* don't do the read, it's not guaranteed to return an EOF, just force an EOF */
        yy_current_buffer->yy_n_chars = yy_n_chars = 0;
    }
    else
    {
        int num_to_read = yy_current_buffer->yy_buf_size - number_to_move - 1;

        if( num_to_read <= 0 )
        {
            LoaderMessages::Instance()->ls98MsgToString(layScanner_els98, pLoaderCommand->cmdRpyDat_ls00,
                                                                           errInternal_els98,
                                                                           _INTERNAL_FILE_ID_,
                                                                           __LINE__,
                                                                           errScanBufOverflow_els98);
            ScanError = errInternal_els98;
            return SCANNER_ERROR;
        }

        if ( num_to_read > YY_READ_BUF_SIZE )
        {
            num_to_read = YY_READ_BUF_SIZE;
        }

        yy_n_chars = LexerInput( (char *)(&yy_current_buffer->yy_ch_buf[number_to_move]), num_to_read );
        if( yy_n_chars < 0 )
        {
            LoaderMessages::Instance()->ls98MsgToString(layScanner_els98, pLoaderCommand->cmdRpyDat_ls00,
                                                                           errInternal_els98,
                                                                           _INTERNAL_FILE_ID_,
                                                                           __LINE__,
                                                                           errScanInputFailed_els98);
            ScanError = errInternal_els98;
            return SCANNER_ERROR;
        }

        yy_current_buffer->yy_n_chars = yy_n_chars;
    }
   
    if ( yy_n_chars == 0 )
    {
        if ( number_to_move == YY_MORE_ADJ )
        {
            ret_val = EOB_ACT_END_OF_FILE;
            yyrestart( yyin );
        }
        else
        {
            ret_val = EOB_ACT_LAST_MATCH;
            yy_current_buffer->yy_buffer_status = yy_buffer_state::YY_BUFFER_EOF_PENDING;
        }
    }
    else
    {
        ret_val = EOB_ACT_CONTINUE_SCAN;
    }
   
    yy_n_chars += number_to_move;
    yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;
   
    yytext = &yy_current_buffer->yy_ch_buf[0];
   
    return ret_val;
}
//  yy_get_next_buffer()


//****************************************************************************
// METHODE      : LoaderScanner::yy_get_previous_state
// 
// RETURN       : yy_state_type
// 
// get the state just before the EOB char was reached 
//****************************************************************************
yy_state_type LoaderScanner::yy_get_previous_state()
{
    register yy_state_type yy_current_state;
    register char *yy_cp;
   
%% code to get the start state into yy_current_state goes here
      
    for ( yy_cp = yytext + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
    {
%% code to find the next state goes here
    }
   
    return yy_current_state;
} // yy_get_previous_state
   
   
//****************************************************************************
// METHODE      : LoaderScanner::yy_try_NUL_trans
// 
// PARAMETER    : IN yy_state_type yy_current_state
// 
// RETURN       : yy_state_type
//
// try to make a transition on the NUL character
// synopsis:
//    next_state = yy_try_NUL_trans( current_state );
//****************************************************************************
yy_state_type LoaderScanner::yy_try_NUL_trans( yy_state_type yy_current_state )
{
    register int yy_is_jam;
%% code to find the next state, and perhaps do backing up, goes here
      
    return yy_is_jam ? 0 : yy_current_state;
}


//****************************************************************************
// METHODE      : LoaderScanner::yyunput
// 
// PARAMETER    : IN int c, 
//                INOUT register char* yy_bp
// 
// backs up one action
//****************************************************************************
void LoaderScanner::yyunput( int c, register char* yy_bp )
{
    register char *yy_cp = yy_c_buf_p;
   
    *yy_cp = yy_hold_char;  /* undo effects of setting up yytext */
   
    if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
    { /* need to shift things up to make room +2 for EOB chars. */

        register int number_to_move = yy_n_chars + 2;
        register char *dest         = &yy_current_buffer->yy_ch_buf[yy_current_buffer->yy_buf_size + 2];
        register char *source       = &yy_current_buffer->yy_ch_buf[number_to_move];
      
        while ( source > yy_current_buffer->yy_ch_buf )
        {
            *--dest = *--source;
        }

        yy_cp += (int) (dest - source);
        yy_bp += (int) (dest - source);
        yy_current_buffer->yy_n_chars = yy_n_chars = yy_current_buffer->yy_buf_size;

        if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
        {
            LoaderMessages::Instance()->ls98MsgToString(layScanner_els98, pLoaderCommand->cmdRpyDat_ls00,
                                                                           errInternal_els98,
                                                                           _INTERNAL_FILE_ID_,
                                                                           __LINE__,
                                                                           errScanNoAction_els98);
            ScanError = errInternal_els98;
        }
    }
   
    *--yy_cp = (char) c;
   
%% update yylineno here
      
    yytext = yy_bp;
    yy_hold_char = *yy_cp;
    yy_c_buf_p = yy_cp;

}
//  yyunput()
      
      
//****************************************************************************
// METHODE      : LoaderScanner::yyinput
// 
// RETURN       : int
// 
// Wird bei der momentan vorhandenen Grammatik nicht benutzt; vermutlich 
// bei einem veränderten Flex-Parameter 
//****************************************************************************
int LoaderScanner::yyinput()
{
    int c;
   
    *yy_c_buf_p = yy_hold_char;
   
    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
    {
        /* yy_c_buf_p now points to the character we want to return.
         * If this occurs *before* the EOB characters, then it's a
         * valid NUL; if not, then we've hit the end of the buffer.
        */
        if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
        {
            /* This was really a NUL. */
            *yy_c_buf_p = '\0';
        }
        else
        { /* need more input */
         
            int offset = (int)(yy_c_buf_p - yytext);
            ++yy_c_buf_p;

            switch ( yy_get_next_buffer() )
            {
                case EOB_ACT_LAST_MATCH:
                {
                    /* This happens because yy_g_n_b() sees that we've accumulated a
                     * token and flags that we need to try matching the token before
                     * proceeding.  But for input(), there's no matching to consider.
                     * So convert the EOB_ACT_LAST_MATCH to EOB_ACT_END_OF_FILE.
                     */

                    /* Reset buffer status. */
                    yyrestart( yyin );

                    /* fall through */
                }
                case EOB_ACT_END_OF_FILE:
                {
                    if ( wrap() )
                        return EOF;

                    if ( ! yy_did_buffer_switch_on_eof )
                        YY_NEW_FILE;
                    
                    return yyinput();
                }
                case EOB_ACT_CONTINUE_SCAN:
                    yy_c_buf_p = yytext + offset;
                    break;
            }
        }
    }
   
    c = *(unsigned char *) yy_c_buf_p;  /* cast for 8-bit char's */
    *yy_c_buf_p = '\0'; /* preserve yytext */
    yy_hold_char = *++yy_c_buf_p;
   
%% update BOL and yylineno
      
    return c;
}
//  yyinput()
   

   
//****************************************************************************
// METHODE      : LoaderScanner::switch_streams
// 
// PARAMETER    : IN istream InputStream
// 
// Ordnet dem Buffer einen neuen Eingabestrom zu. Wird nicht benutzt!!!
//****************************************************************************
// Diese funktion wird eigentlich nicht benutzt und koennte somit auskommentiert werden
void LoaderScanner::switch_streams( char *new_in )
{
    if ( new_in )
    {
        delete yy_current_buffer;
        yy_current_buffer = new yy_buffer_state( new_in, (int)strlen(pLoaderCommand->cmdReqDat_ls00) );
        yy_load_buffer_state();

        // We don't actually know whether we did this switch during
        // EOF (wrap()) processing, but the only time this flag
        // is looked at is after wrap() is called, so it's safe
        // to go ahead and always set it.
        yy_did_buffer_switch_on_eof = 1;
    }
} // switch_streams()
   

   
//****************************************************************************
// METHODE      :  LoaderScanner::LexerInput
// 
// PARAMETER    : IN char *buf, int max_size
// 
// Stream auslesen
//****************************************************************************
// Das hier wird momentan nicht ausgefuehrt, da der puffer nicht auf diese weise
// gefuellt werden muss. Er wird bereits im konstruktor von yy_buffer_state gefuellt.
// Fuer den fall, dass das hier doch mal aktuell werden sollte, muss gewaehrleistet
// werden, dass der zu scannende und in den puffer zu ladende teil von yyin auch
// null-terminiert ist.
int LoaderScanner::LexerInput( char* buf, int max_size )
{
    if ('\0' == *yyin)      // end of string reached
        return 0;

    *buf = *yyin;
    
    if ('\0' == *yyin)      // end of string reached
        return 0;

    return 1;
}
   

//****************************************************************************
// METHODE      : LoaderScanner::yyrestart
// 
// PARAMETER    : IN istream* InputStream
// 
// 
//****************************************************************************
void LoaderScanner::yyrestart( char *input_source )
{
    yy_current_buffer->init( input_source );
    yy_load_buffer_state();
}


//****************************************************************************
// METHODE      : LoaderScanner::yy_load_buffer_state
// 
// PARAMETER    : IN
// 
// 
//****************************************************************************
void LoaderScanner::yy_load_buffer_state()
{
    yy_n_chars  = yy_current_buffer->yy_n_chars;
    yytext      = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
    yyin        = yy_current_buffer->yy_input_file;
    yy_hold_char= *yy_c_buf_p;
}


//****************************************************************************
// METHODE      : LoaderScanner::ls11ExecUnscan
// 
// PARAMETER    : 
// 
// 
//****************************************************************************
void LoaderScanner::ls14ExecUnscan()
{
    ROUTINE_DBG_MEO00 ("ls14ExecUnscan");

    for (int i=yyleng; i>0; i--)
    {
        yyunput (yytext[i-1], yytext);
    }
    pLoaderCommand->cmdReqPos_ls00 -= yyleng;
}
/* ls14ExecUnscan */


