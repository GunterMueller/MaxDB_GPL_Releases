/*!
@file           SQLDBC.cpp
@author         DL SAP DB INTERFACES
@ingroup        SQLDBC
@brief          SAP Database Connectivity
@see            

\if EMIT_LICENCE

	========== licence begin  GPL
	Copyright (c) 2001-2005 SAP AG

	This program is free software; you can redistribute it and/or
	modify it under the terms of the GNU General Public License
	as published by the Free Software Foundation; either version 2
	of the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
	========== licence end


\endif
*/
#include "SAPDB/Interfaces/SQLDBC/SQLDBC.h"
using namespace SQLDBC; 
#include "SAPDB/Interfaces/SQLDBC/SQLDBC-sqldbc_c.h"

#ifdef __cplusplus
extern "C" {
#endif

/*some special coding that cannot be generated by the wrapper generator script*/
  SQLDBC_ConnectProperties* SQLDBC_ConnectProperties_new_SQLDBC_ConnectProperties(){
    return (SQLDBC_ConnectProperties*) new SQLDBC_ConnectProperties();
  }

  void  SQLDBC_ConnectProperties_delete_SQLDBC_ConnectProperties(  SQLDBC_ConnectProperties* hdl){
    SQLDBC_ConnectProperties* tmpVar1 = (SQLDBC_ConnectProperties*)hdl;
    delete tmpVar1;
  }

  SQLDBC_Environment* SQLDBC_Environment_new_SQLDBC_Environment(SQLDBC_IRuntime* runtime){
    return (SQLDBC_Environment*) new SQLDBC_Environment(runtime);
  }

  void  SQLDBC_Environment_delete_SQLDBC_Environment(  SQLDBC_Environment* hdl){
    SQLDBC_Environment* tmpVar1 = (SQLDBC_Environment*)hdl;
    delete tmpVar1;
  }
  SQLDBC_IRuntime* ClientRuntime_GetClientRuntime(char *errorText,SQLDBC_Int4 errorTextSize){
    return GetClientRuntime(errorText, errorTextSize);
  }  
  char *getSDKVersion()
  {
    return SQLDBC_CHeaderVersion;
  }

  SQLDBC_LOB* SQLDBC_LOB_new_SQLDBC_LOB(){
    return (SQLDBC_LOB*) new SQLDBC_LOB();
  }

  void SQLDBC_LOB_delete_SQLDBC_LOB(  SQLDBC_LOB* lob){
    SQLDBC_LOB* tmpVar1 = (SQLDBC_LOB*)lob;
    delete tmpVar1;
  }
  /*end special coding*/

  SQLDBC_Int4  SQLDBC_ErrorHndl_getErrorCode(  SQLDBC_ErrorHndl* hdl){
    SQLDBC_ErrorHndl* tmpVar1 = (SQLDBC_ErrorHndl*)hdl;
    return (SQLDBC_Int4 ) tmpVar1->getErrorCode();
  }

  char* SQLDBC_ErrorHndl_getSQLState(  SQLDBC_ErrorHndl* hdl){
    SQLDBC_ErrorHndl* tmpVar1 = (SQLDBC_ErrorHndl*)hdl;
    return (char*) tmpVar1->getSQLState();
  }

  char * SQLDBC_ErrorHndl_getErrorText(  SQLDBC_ErrorHndl* hdl){
    SQLDBC_ErrorHndl* tmpVar1 = (SQLDBC_ErrorHndl*)hdl;
    return (char *) tmpVar1->getErrorText();
  }

  SQLDBC_SQLWarning* SQLDBC_SQLWarning_getNextWarning(  SQLDBC_SQLWarning* hdl){
    SQLDBC_SQLWarning* tmpVar1 = (SQLDBC_SQLWarning*)hdl;
    return (SQLDBC_SQLWarning*) tmpVar1->getNextWarning();
  }

  SQLDBC_SQLWarningCode  SQLDBC_SQLWarning_getWarningCode(  SQLDBC_SQLWarning* hdl){
    SQLDBC_SQLWarning* tmpVar1 = (SQLDBC_SQLWarning*)hdl;
    return (SQLDBC_SQLWarningCode ) tmpVar1->getWarningCode();
  }

  SQLDBC_Retcode  SQLDBC_LOB_putData(  SQLDBC_LOB* hdl, void *paramAddr, SQLDBC_Length  *paramLengthIndicator){
    SQLDBC_LOB* tmpVar1 = (SQLDBC_LOB*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->putData(paramAddr, paramLengthIndicator);
  }

  SQLDBC_Retcode  SQLDBC_LOB_close(  SQLDBC_LOB* hdl){
    SQLDBC_LOB* tmpVar1 = (SQLDBC_LOB*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->close();
  }

  SQLDBC_Retcode  SQLDBC_LOB_getData(  SQLDBC_LOB* hdl, void                 *paramAddr,
                                            SQLDBC_Length        *LengthIndicator,
                                            SQLDBC_Length   Size,
                                            SQLDBC_Bool     Terminate){
    SQLDBC_LOB* tmpVar1 = (SQLDBC_LOB*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->getData(paramAddr, LengthIndicator, Size, Terminate);
  }

  SQLDBC_Retcode  SQLDBC_LOB_getDataByPos(  SQLDBC_LOB* hdl, void                 *paramAddr,
                                            SQLDBC_Length        *LengthIndicator,
                                            SQLDBC_Length   Size,
                                            SQLDBC_Length   position,
                                            SQLDBC_Bool     Terminate){
    SQLDBC_LOB* tmpVar1 = (SQLDBC_LOB*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->getData(paramAddr, LengthIndicator, Size, position, Terminate);
  }

  SQLDBC_Length  SQLDBC_LOB_getLength(  SQLDBC_LOB* hdl){
    SQLDBC_LOB* tmpVar1 = (SQLDBC_LOB*)hdl;
    return (SQLDBC_Length ) tmpVar1->getLength();
  }

  SQLDBC_Length  SQLDBC_LOB_getPosition(  SQLDBC_LOB* hdl){
    SQLDBC_LOB* tmpVar1 = (SQLDBC_LOB*)hdl;
    return (SQLDBC_Length ) tmpVar1->getPosition();
  }

  SQLDBC_Length  SQLDBC_LOB_getPreferredDataSize(  SQLDBC_LOB* hdl){
    SQLDBC_LOB* tmpVar1 = (SQLDBC_LOB*)hdl;
    return (SQLDBC_Length ) tmpVar1->getPreferredDataSize();
  }

  SQLDBC_Int2  SQLDBC_ParameterMetaData_getParameterCount(  SQLDBC_ParameterMetaData* hdl){
    SQLDBC_ParameterMetaData* tmpVar1 = (SQLDBC_ParameterMetaData*)hdl;
    return (SQLDBC_Int2 ) tmpVar1->getParameterCount();
  }

  SQLDBC_Retcode  SQLDBC_ParameterMetaData_getParameterName(  SQLDBC_ParameterMetaData* hdl, SQLDBC_Int2    param,
                                  char *buffer,
                                  SQLDBC_StringEncodingType_Encoding encoding,
                                  SQLDBC_Length  bufferSize,
                                  SQLDBC_Length *bufferLength){
    SQLDBC_ParameterMetaData* tmpVar1 = (SQLDBC_ParameterMetaData*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->getParameterName(param, buffer,  (SQLDBC_StringEncoding ) encoding, bufferSize, bufferLength);
  }

  SQLDBC_SQLType  SQLDBC_ParameterMetaData_getParameterType(  SQLDBC_ParameterMetaData* hdl, SQLDBC_Int2 param){
    SQLDBC_ParameterMetaData* tmpVar1 = (SQLDBC_ParameterMetaData*)hdl;
    return (SQLDBC_SQLType ) tmpVar1->getParameterType(param);
  }

  ParameterMode  SQLDBC_ParameterMetaData_getParameterMode(  SQLDBC_ParameterMetaData* hdl, SQLDBC_Int2 param){
    SQLDBC_ParameterMetaData* tmpVar1 = (SQLDBC_ParameterMetaData*)hdl;
    return (ParameterMode ) tmpVar1->getParameterMode(param);
  }

  SQLDBC_Int4  SQLDBC_ParameterMetaData_getParameterLength(  SQLDBC_ParameterMetaData* hdl, SQLDBC_Int2 param){
    SQLDBC_ParameterMetaData* tmpVar1 = (SQLDBC_ParameterMetaData*)hdl;
    return (SQLDBC_Int4 ) tmpVar1->getParameterLength(param);
  }

  SQLDBC_Int4  SQLDBC_ParameterMetaData_getPrecision(  SQLDBC_ParameterMetaData* hdl, SQLDBC_Int2 param){
    SQLDBC_ParameterMetaData* tmpVar1 = (SQLDBC_ParameterMetaData*)hdl;
    return (SQLDBC_Int4 ) tmpVar1->getPrecision(param);
  }

  SQLDBC_Int4  SQLDBC_ParameterMetaData_getScale(  SQLDBC_ParameterMetaData* hdl, SQLDBC_Int2 param){
    SQLDBC_ParameterMetaData* tmpVar1 = (SQLDBC_ParameterMetaData*)hdl;
    return (SQLDBC_Int4 ) tmpVar1->getScale(param);
  }

  SQLDBC_Int4  SQLDBC_ParameterMetaData_getPhysicalLength(  SQLDBC_ParameterMetaData* hdl, SQLDBC_Int2 param){
    SQLDBC_ParameterMetaData* tmpVar1 = (SQLDBC_ParameterMetaData*)hdl;
    return (SQLDBC_Int4 ) tmpVar1->getPhysicalLength(param);
  }

  ParameterNullBehavior  SQLDBC_ParameterMetaData_isNullable(  SQLDBC_ParameterMetaData* hdl, SQLDBC_Int2 param){
    SQLDBC_ParameterMetaData* tmpVar1 = (SQLDBC_ParameterMetaData*)hdl;
    return (ParameterNullBehavior ) tmpVar1->isNullable(param);
  }

  SQLDBC_Int2  SQLDBC_ResultSetMetaData_getColumnCount(  SQLDBC_ResultSetMetaData* hdl){
    SQLDBC_ResultSetMetaData* tmpVar1 = (SQLDBC_ResultSetMetaData*)hdl;
    return (SQLDBC_Int2 ) tmpVar1->getColumnCount();
  }

  SQLDBC_Retcode  SQLDBC_ResultSetMetaData_getColumnName(  SQLDBC_ResultSetMetaData* hdl, SQLDBC_Int2 column,
                                 char *buffer,
                                 SQLDBC_StringEncodingType_Encoding encoding,
                                 SQLDBC_Length  bufferSize,
                                 SQLDBC_Length *bufferLength){
    SQLDBC_ResultSetMetaData* tmpVar1 = (SQLDBC_ResultSetMetaData*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->getColumnName(column, buffer,  (SQLDBC_StringEncoding ) encoding, bufferSize, bufferLength);
  }

  SQLDBC_SQLType  SQLDBC_ResultSetMetaData_getColumnType(  SQLDBC_ResultSetMetaData* hdl, SQLDBC_Int2 column){
    SQLDBC_ResultSetMetaData* tmpVar1 = (SQLDBC_ResultSetMetaData*)hdl;
    return (SQLDBC_SQLType ) tmpVar1->getColumnType(column);
  }

  SQLDBC_Int4  SQLDBC_ResultSetMetaData_getColumnLength(  SQLDBC_ResultSetMetaData* hdl, SQLDBC_Int2 column){
    SQLDBC_ResultSetMetaData* tmpVar1 = (SQLDBC_ResultSetMetaData*)hdl;
    return (SQLDBC_Int4 ) tmpVar1->getColumnLength(column);
  }

  SQLDBC_Int4  SQLDBC_ResultSetMetaData_getPrecision(  SQLDBC_ResultSetMetaData* hdl, SQLDBC_Int2 column){
    SQLDBC_ResultSetMetaData* tmpVar1 = (SQLDBC_ResultSetMetaData*)hdl;
    return (SQLDBC_Int4 ) tmpVar1->getPrecision(column);
  }

  SQLDBC_Int4  SQLDBC_ResultSetMetaData_getScale(  SQLDBC_ResultSetMetaData* hdl, SQLDBC_Int2 column){
    SQLDBC_ResultSetMetaData* tmpVar1 = (SQLDBC_ResultSetMetaData*)hdl;
    return (SQLDBC_Int4 ) tmpVar1->getScale(column);
  }

  SQLDBC_Int4  SQLDBC_ResultSetMetaData_getPhysicalLength(  SQLDBC_ResultSetMetaData* hdl, SQLDBC_Int2 column){
    SQLDBC_ResultSetMetaData* tmpVar1 = (SQLDBC_ResultSetMetaData*)hdl;
    return (SQLDBC_Int4 ) tmpVar1->getPhysicalLength(column);
  }

  ColumnNullBehavior  SQLDBC_ResultSetMetaData_isNullable(  SQLDBC_ResultSetMetaData* hdl, SQLDBC_Int2 column){
    SQLDBC_ResultSetMetaData* tmpVar1 = (SQLDBC_ResultSetMetaData*)hdl;
    return (ColumnNullBehavior ) tmpVar1->isNullable(column);
  }

  SQLDBC_Bool  SQLDBC_ResultSetMetaData_isWritable(  SQLDBC_ResultSetMetaData* hdl, SQLDBC_Int2 column){
    SQLDBC_ResultSetMetaData* tmpVar1 = (SQLDBC_ResultSetMetaData*)hdl;
    return (SQLDBC_Bool ) tmpVar1->isWritable(column);
  }

  SQLDBC_ErrorHndl* SQLDBC_RowSet_getError(  SQLDBC_RowSet* hdl){
    SQLDBC_RowSet* tmpVar1 = (SQLDBC_RowSet*)hdl;
    return (SQLDBC_ErrorHndl*) &tmpVar1->error();
  }

  void  SQLDBC_RowSet_clearError(  SQLDBC_RowSet* hdl){
    SQLDBC_RowSet* tmpVar1 = (SQLDBC_RowSet*)hdl;
    tmpVar1->clearError();
  }

  SQLDBC_SQLWarning* SQLDBC_RowSet_getWarning(  SQLDBC_RowSet* hdl){
    SQLDBC_RowSet* tmpVar1 = (SQLDBC_RowSet*)hdl;
    return (SQLDBC_SQLWarning*) tmpVar1->warning();
  }

  void  SQLDBC_RowSet_clearWarnings(  SQLDBC_RowSet* hdl){
    SQLDBC_RowSet* tmpVar1 = (SQLDBC_RowSet*)hdl;
    tmpVar1->clearWarnings();
  }

  SQLDBC_Retcode  SQLDBC_RowSet_setPos(  SQLDBC_RowSet* hdl, SQLDBC_UInt4 pos){
    SQLDBC_RowSet* tmpVar1 = (SQLDBC_RowSet*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->setPos(pos);
  }

  SQLDBC_Retcode  SQLDBC_RowSet_fetch(  SQLDBC_RowSet* hdl){
    SQLDBC_RowSet* tmpVar1 = (SQLDBC_RowSet*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->fetch();
  }

  SQLDBC_Int4  SQLDBC_RowSet_getRowsAffected(  SQLDBC_RowSet* hdl){
    SQLDBC_RowSet* tmpVar1 = (SQLDBC_RowSet*)hdl;
    return (SQLDBC_Int4 ) tmpVar1->getRowsAffected();
  }

  SQLDBC_Int4 * SQLDBC_RowSet_getRowStatus(  SQLDBC_RowSet* hdl){
    SQLDBC_RowSet* tmpVar1 = (SQLDBC_RowSet*)hdl;
    return (SQLDBC_Int4 *) tmpVar1->getRowStatus();
  }

  SQLDBC_Retcode  SQLDBC_RowSet_getObject(  SQLDBC_RowSet* hdl, SQLDBC_Int4     Index,
                           SQLDBC_HostType Type,
                           void                 *paramAddr,
                           SQLDBC_Length        *LengthIndicator,
                           SQLDBC_Length   Size,
                           SQLDBC_Bool     Terminate){
    SQLDBC_RowSet* tmpVar1 = (SQLDBC_RowSet*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->getObject(Index, Type, paramAddr, LengthIndicator, Size, Terminate);
  }

  SQLDBC_Retcode  SQLDBC_RowSet_getObjectByPos(  SQLDBC_RowSet* hdl, SQLDBC_Int4     Index,
                           SQLDBC_HostType Type,
                           void                 *paramAddr,
                           SQLDBC_Length        *LengthIndicator,
                           SQLDBC_Length   Size,
                           SQLDBC_Length         StartPos,
                           SQLDBC_Bool     Terminate){
    SQLDBC_RowSet* tmpVar1 = (SQLDBC_RowSet*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->getObject(Index, Type, paramAddr, LengthIndicator, Size, StartPos, Terminate);
  }

  SQLDBC_ErrorHndl* SQLDBC_UpdatableRowSet_getError(  SQLDBC_UpdatableRowSet* hdl){
    SQLDBC_UpdatableRowSet* tmpVar1 = (SQLDBC_UpdatableRowSet*)hdl;
    return (SQLDBC_ErrorHndl*) &tmpVar1->error();
  }

  void  SQLDBC_UpdatableRowSet_clearError(  SQLDBC_UpdatableRowSet* hdl){
    SQLDBC_UpdatableRowSet* tmpVar1 = (SQLDBC_UpdatableRowSet*)hdl;
    tmpVar1->clearError();
  }

  SQLDBC_SQLWarning* SQLDBC_UpdatableRowSet_getWarning(  SQLDBC_UpdatableRowSet* hdl){
    SQLDBC_UpdatableRowSet* tmpVar1 = (SQLDBC_UpdatableRowSet*)hdl;
    return (SQLDBC_SQLWarning*) tmpVar1->warning();
  }

  void  SQLDBC_UpdatableRowSet_clearWarnings(  SQLDBC_UpdatableRowSet* hdl){
    SQLDBC_UpdatableRowSet* tmpVar1 = (SQLDBC_UpdatableRowSet*)hdl;
    tmpVar1->clearWarnings();
  }

  SQLDBC_Retcode  SQLDBC_UpdatableRowSet_setPos(  SQLDBC_UpdatableRowSet* hdl, SQLDBC_UInt4 pos){
    SQLDBC_UpdatableRowSet* tmpVar1 = (SQLDBC_UpdatableRowSet*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->setPos(pos);
  }

  SQLDBC_Retcode  SQLDBC_UpdatableRowSet_fetch(  SQLDBC_UpdatableRowSet* hdl){
    SQLDBC_UpdatableRowSet* tmpVar1 = (SQLDBC_UpdatableRowSet*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->fetch();
  }

  SQLDBC_Int4  SQLDBC_UpdatableRowSet_getRowsAffected(  SQLDBC_UpdatableRowSet* hdl){
    SQLDBC_UpdatableRowSet* tmpVar1 = (SQLDBC_UpdatableRowSet*)hdl;
    return (SQLDBC_Int4 ) tmpVar1->getRowsAffected();
  }

  SQLDBC_Int4 * SQLDBC_UpdatableRowSet_getRowStatus(  SQLDBC_UpdatableRowSet* hdl){
    SQLDBC_UpdatableRowSet* tmpVar1 = (SQLDBC_UpdatableRowSet*)hdl;
    return (SQLDBC_Int4 *) tmpVar1->getRowStatus();
  }

  SQLDBC_Retcode  SQLDBC_UpdatableRowSet_getObject(  SQLDBC_UpdatableRowSet* hdl, SQLDBC_Int4     Index,
                           SQLDBC_HostType Type,
                           void                 *paramAddr,
                           SQLDBC_Length        *LengthIndicator,
                           SQLDBC_Length   Size,
                           SQLDBC_Bool     Terminate){
    SQLDBC_UpdatableRowSet* tmpVar1 = (SQLDBC_UpdatableRowSet*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->getObject(Index, Type, paramAddr, LengthIndicator, Size, Terminate);
  }

  SQLDBC_Retcode  SQLDBC_UpdatableRowSet_getObjectByPos(  SQLDBC_UpdatableRowSet* hdl, SQLDBC_Int4     Index,
                           SQLDBC_HostType Type,
                           void                 *paramAddr,
                           SQLDBC_Length        *LengthIndicator,
                           SQLDBC_Length   Size,
                           SQLDBC_Length         StartPos,
                           SQLDBC_Bool     Terminate){
    SQLDBC_UpdatableRowSet* tmpVar1 = (SQLDBC_UpdatableRowSet*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->getObject(Index, Type, paramAddr, LengthIndicator, Size, StartPos, Terminate);
  }

  SQLDBC_Retcode  SQLDBC_UpdatableRowSet_insertAllRows(  SQLDBC_UpdatableRowSet* hdl){
    SQLDBC_UpdatableRowSet* tmpVar1 = (SQLDBC_UpdatableRowSet*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->insertAllRows();
  }

  SQLDBC_Retcode  SQLDBC_UpdatableRowSet_insertOneRow(  SQLDBC_UpdatableRowSet* hdl){
    SQLDBC_UpdatableRowSet* tmpVar1 = (SQLDBC_UpdatableRowSet*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->insertOneRow();
  }

  SQLDBC_Retcode  SQLDBC_UpdatableRowSet_insertRow(  SQLDBC_UpdatableRowSet* hdl, SQLDBC_UInt4 position){
    SQLDBC_UpdatableRowSet* tmpVar1 = (SQLDBC_UpdatableRowSet*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->insertRow(position);
  }

  SQLDBC_Retcode  SQLDBC_UpdatableRowSet_updateRow(  SQLDBC_UpdatableRowSet* hdl, SQLDBC_UInt4 position){
    SQLDBC_UpdatableRowSet* tmpVar1 = (SQLDBC_UpdatableRowSet*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->updateRow(position);
  }

  SQLDBC_Retcode  SQLDBC_UpdatableRowSet_deleteRow(  SQLDBC_UpdatableRowSet* hdl, SQLDBC_UInt4 position){
    SQLDBC_UpdatableRowSet* tmpVar1 = (SQLDBC_UpdatableRowSet*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->deleteRow(position);
  }

  SQLDBC_Retcode  SQLDBC_UpdatableRowSet_nextParameterByIndex(  SQLDBC_UpdatableRowSet* hdl, SQLDBC_Int2* /*#cast **/paramIndex, void** /*#cast **/paramAddr){
    SQLDBC_UpdatableRowSet* tmpVar1 = (SQLDBC_UpdatableRowSet*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->nextParameterByIndex(*paramIndex, *paramAddr);
  }

  SQLDBC_Retcode  SQLDBC_UpdatableRowSet_putData(  SQLDBC_UpdatableRowSet* hdl, void *paramAddr, SQLDBC_Length  *paramLengthIndicator){
    SQLDBC_UpdatableRowSet* tmpVar1 = (SQLDBC_UpdatableRowSet*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->putData(paramAddr, paramLengthIndicator);
  }

  SQLDBC_ErrorHndl* SQLDBC_ResultSet_getError(  SQLDBC_ResultSet* hdl){
    SQLDBC_ResultSet* tmpVar1 = (SQLDBC_ResultSet*)hdl;
    return (SQLDBC_ErrorHndl*) &tmpVar1->error();
  }

  void  SQLDBC_ResultSet_clearError(  SQLDBC_ResultSet* hdl){
    SQLDBC_ResultSet* tmpVar1 = (SQLDBC_ResultSet*)hdl;
    tmpVar1->clearError();
  }

  SQLDBC_SQLWarning* SQLDBC_ResultSet_getWarning(  SQLDBC_ResultSet* hdl){
    SQLDBC_ResultSet* tmpVar1 = (SQLDBC_ResultSet*)hdl;
    return (SQLDBC_SQLWarning*) tmpVar1->warning();
  }

  void  SQLDBC_ResultSet_clearWarnings(  SQLDBC_ResultSet* hdl){
    SQLDBC_ResultSet* tmpVar1 = (SQLDBC_ResultSet*)hdl;
    tmpVar1->clearWarnings();
  }

  SQLDBC_ResultSetMetaData* SQLDBC_ResultSet_getResultSetMetaData(  SQLDBC_ResultSet* hdl){
    SQLDBC_ResultSet* tmpVar1 = (SQLDBC_ResultSet*)hdl;
    return (SQLDBC_ResultSetMetaData*) tmpVar1->getResultSetMetaData();
  }

  SQLDBC_Int4  SQLDBC_ResultSet_getResultCount(  SQLDBC_ResultSet* hdl){
    SQLDBC_ResultSet* tmpVar1 = (SQLDBC_ResultSet*)hdl;
    return (SQLDBC_Int4 ) tmpVar1->getResultCount();
  }

  SQLDBC_Retcode  SQLDBC_ResultSet_bindColumn(  SQLDBC_ResultSet* hdl, SQLDBC_UInt4    Index,
                             SQLDBC_HostType Type,
                             void                 *paramAddr,
                             SQLDBC_Length        *LengthIndicator,
                             SQLDBC_Length   Size,
                             SQLDBC_Bool     Terminate){
    SQLDBC_ResultSet* tmpVar1 = (SQLDBC_ResultSet*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->bindColumn(Index, Type, paramAddr, LengthIndicator, Size, Terminate);
  }

  SQLDBC_Retcode  SQLDBC_ResultSet_bindColumnByPos(  SQLDBC_ResultSet* hdl, SQLDBC_UInt4    Index,
                             SQLDBC_HostType Type,
                             void                 *paramAddr,
                             SQLDBC_Length        *LengthIndicator,
                             SQLDBC_Length        *PositionIndicator,
                             SQLDBC_Length   Size,
                             SQLDBC_Bool     Terminate){
    SQLDBC_ResultSet* tmpVar1 = (SQLDBC_ResultSet*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->bindColumn(Index, Type, paramAddr, LengthIndicator, PositionIndicator, Size, Terminate);
  }

  SQLDBC_Retcode  SQLDBC_ResultSet_setBindingType(  SQLDBC_ResultSet* hdl, SQLDBC_size_t size){
    SQLDBC_ResultSet* tmpVar1 = (SQLDBC_ResultSet*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->setBindingType(size);
  }

  SQLDBC_Retcode  SQLDBC_ResultSet_clearColumns(  SQLDBC_ResultSet* hdl){
    SQLDBC_ResultSet* tmpVar1 = (SQLDBC_ResultSet*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->clearColumns();
  }

  void  SQLDBC_ResultSet_setFetchSize(  SQLDBC_ResultSet* hdl, SQLDBC_Int2 fetchsize){
    SQLDBC_ResultSet* tmpVar1 = (SQLDBC_ResultSet*)hdl;
    tmpVar1->setFetchSize(fetchsize);
  }

  void  SQLDBC_ResultSet_setRowSetSize(  SQLDBC_ResultSet* hdl, SQLDBC_UInt4 rowsetsize){
    SQLDBC_ResultSet* tmpVar1 = (SQLDBC_ResultSet*)hdl;
    tmpVar1->setRowSetSize(rowsetsize);
  }

  SQLDBC_UInt4  SQLDBC_ResultSet_getRowSetSize(  SQLDBC_ResultSet* hdl){
    SQLDBC_ResultSet* tmpVar1 = (SQLDBC_ResultSet*)hdl;
    return (SQLDBC_UInt4 ) tmpVar1->getRowSetSize();
  }

  SQLDBC_RowSet * SQLDBC_ResultSet_getRowSet(  SQLDBC_ResultSet* hdl){
    SQLDBC_ResultSet* tmpVar1 = (SQLDBC_ResultSet*)hdl;
    return (SQLDBC_RowSet *) tmpVar1->getRowSet();
  }

  SQLDBC_UpdatableRowSet * SQLDBC_ResultSet_getUpdatableRowSet(  SQLDBC_ResultSet* hdl){
    SQLDBC_ResultSet* tmpVar1 = (SQLDBC_ResultSet*)hdl;
    return (SQLDBC_UpdatableRowSet *) tmpVar1->getUpdatableRowSet();
  }

  SQLDBC_Statement * SQLDBC_ResultSet_getStatement(  SQLDBC_ResultSet* hdl){
    SQLDBC_ResultSet* tmpVar1 = (SQLDBC_ResultSet*)hdl;
    return (SQLDBC_Statement *) tmpVar1->getStatement();
  }

  SQLDBC_Bool * SQLDBC_ResultSet_isUpdatable(  SQLDBC_ResultSet* hdl){
    SQLDBC_ResultSet* tmpVar1 = (SQLDBC_ResultSet*)hdl;
    return (SQLDBC_Bool *) tmpVar1->isUpdatable();
  }

  SQLDBC_Retcode  SQLDBC_ResultSet_first(  SQLDBC_ResultSet* hdl){
    SQLDBC_ResultSet* tmpVar1 = (SQLDBC_ResultSet*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->first();
  }

  SQLDBC_Retcode  SQLDBC_ResultSet_next(  SQLDBC_ResultSet* hdl){
    SQLDBC_ResultSet* tmpVar1 = (SQLDBC_ResultSet*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->next();
  }

  SQLDBC_Retcode  SQLDBC_ResultSet_previous(  SQLDBC_ResultSet* hdl){
    SQLDBC_ResultSet* tmpVar1 = (SQLDBC_ResultSet*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->previous();
  }

  SQLDBC_Retcode  SQLDBC_ResultSet_last(  SQLDBC_ResultSet* hdl){
    SQLDBC_ResultSet* tmpVar1 = (SQLDBC_ResultSet*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->last();
  }

  SQLDBC_Retcode  SQLDBC_ResultSet_absolute(  SQLDBC_ResultSet* hdl, int row){
    SQLDBC_ResultSet* tmpVar1 = (SQLDBC_ResultSet*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->absolute(row);
  }

  SQLDBC_Retcode  SQLDBC_ResultSet_relative(  SQLDBC_ResultSet* hdl, int relativePos){
    SQLDBC_ResultSet* tmpVar1 = (SQLDBC_ResultSet*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->relative(relativePos);
  }

  void  SQLDBC_ResultSet_close(  SQLDBC_ResultSet* hdl){
    SQLDBC_ResultSet* tmpVar1 = (SQLDBC_ResultSet*)hdl;
    tmpVar1->close();
  }

  SQLDBC_UInt4  SQLDBC_ResultSet_getRowNumber(  SQLDBC_ResultSet* hdl){
    SQLDBC_ResultSet* tmpVar1 = (SQLDBC_ResultSet*)hdl;
    return (SQLDBC_UInt4 ) tmpVar1->getRowNumber();
  }

  SQLDBC_Retcode  SQLDBC_ResultSet_getObject(  SQLDBC_ResultSet* hdl, SQLDBC_Int4     Index,
                           SQLDBC_HostType Type,
                           void                 *paramAddr,
                           SQLDBC_Length        *LengthIndicator,
                           SQLDBC_Length   Size,
                           SQLDBC_Bool     Terminate){
    SQLDBC_ResultSet* tmpVar1 = (SQLDBC_ResultSet*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->getObject(Index, Type, paramAddr, LengthIndicator, Size, Terminate);
  }

  SQLDBC_Retcode  SQLDBC_ResultSet_getObjectByPos(  SQLDBC_ResultSet* hdl, SQLDBC_Int4     Index,
                           SQLDBC_HostType Type,
                           void                 *paramAddr,
                           SQLDBC_Length        *LengthIndicator,
                           SQLDBC_Length   Size,
                           SQLDBC_Length         StartPos,
                           SQLDBC_Bool     Terminate){
    SQLDBC_ResultSet* tmpVar1 = (SQLDBC_ResultSet*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->getObject(Index, Type, paramAddr, LengthIndicator, Size, StartPos, Terminate);
  }

  SQLDBC_ErrorHndl* SQLDBC_Statement_getError(  SQLDBC_Statement* hdl){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    return (SQLDBC_ErrorHndl*) &tmpVar1->error();
  }

  void  SQLDBC_Statement_clearError(  SQLDBC_Statement* hdl){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    tmpVar1->clearError();
  }

  SQLDBC_SQLWarning* SQLDBC_Statement_getWarning(  SQLDBC_Statement* hdl){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    return (SQLDBC_SQLWarning*) tmpVar1->warning();
  }

  void  SQLDBC_Statement_clearWarnings(  SQLDBC_Statement* hdl){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    tmpVar1->clearWarnings();
  }

  SQLDBC_Retcode  SQLDBC_Statement_execute(  SQLDBC_Statement* hdl, char *sql,
                         SQLDBC_Length sqlLength,
                         SQLDBC_StringEncodingType_Encoding encoding){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->execute(sql, sqlLength,  (SQLDBC_StringEncoding ) encoding);
  }

  SQLDBC_Retcode  SQLDBC_Statement_executeNTS(  SQLDBC_Statement* hdl, char *sql,
                         SQLDBC_StringEncodingType_Encoding encoding){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->execute(sql,  (SQLDBC_StringEncoding ) encoding);
  }

  SQLDBC_Retcode  SQLDBC_Statement_executeASCII(  SQLDBC_Statement* hdl, char *sql){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->execute(sql);
  }

  void  SQLDBC_Statement_setResultSetFetchSize(  SQLDBC_Statement* hdl, SQLDBC_Int2 rows){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    tmpVar1->setResultSetFetchSize(rows);
  }

  void  SQLDBC_Statement_setMaxRows(  SQLDBC_Statement* hdl, SQLDBC_UInt4 rows){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    tmpVar1->setMaxRows(rows);
  }

  SQLDBC_UInt4  SQLDBC_Statement_getMaxRows(  SQLDBC_Statement* hdl){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    return (SQLDBC_UInt4 ) tmpVar1->getMaxRows();
  }

  SQLDBC_ResultSet * SQLDBC_Statement_getResultSet(  SQLDBC_Statement* hdl){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    return (SQLDBC_ResultSet *) tmpVar1->getResultSet();
  }

  void  SQLDBC_Statement_setCursorName(  SQLDBC_Statement* hdl, char    *buffer,
                     SQLDBC_Length  bufferLength,
                     SQLDBC_StringEncodingType_Encoding encoding){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    tmpVar1->setCursorName(buffer, bufferLength,  (SQLDBC_StringEncoding ) encoding);
  }

  SQLDBC_Retcode  SQLDBC_Statement_setCommandInfo(  SQLDBC_Statement* hdl, const char *buffer,
                               SQLDBC_Length bufferLength,
                               SQLDBC_Int4 lineNumber){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->setCommandInfo(buffer, bufferLength, lineNumber);
  }

  SQLDBC_Retcode  SQLDBC_Statement_getCursorName(  SQLDBC_Statement* hdl, char         *buffer,
                               SQLDBC_StringEncodingType_Encoding encoding,
                               SQLDBC_Length bufferSize,
                               SQLDBC_Length *bufferLength){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->getCursorName(buffer,  (SQLDBC_StringEncoding ) encoding, bufferSize, bufferLength);
  }

  SQLDBC_Retcode  SQLDBC_Statement_getTableName(  SQLDBC_Statement* hdl, char          *buffer,
                              SQLDBC_StringEncodingType_Encoding encoding,
                              SQLDBC_Length  bufferSize,
                              SQLDBC_Length *bufferLength){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->getTableName(buffer,  (SQLDBC_StringEncoding ) encoding, bufferSize, bufferLength);
  }

  SQLDBC_Bool  SQLDBC_Statement_isQuery(  SQLDBC_Statement* hdl){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    return (SQLDBC_Bool ) tmpVar1->isQuery();
  }

  SQLDBC_Int4  SQLDBC_Statement_getKernelVersion(  SQLDBC_Statement* hdl){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    return (SQLDBC_Int4 ) tmpVar1->getKernelVersion();
  }

  SQLDBC_Int4  SQLDBC_Statement_getRowsAffected(  SQLDBC_Statement* hdl){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    return (SQLDBC_Int4 ) tmpVar1->getRowsAffected();
  }

  void  SQLDBC_Statement_setResultSetType(  SQLDBC_Statement* hdl, SQLDBC_Statement_ResultSetType type ){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    tmpVar1->setResultSetType( (SQLDBC_Statement::ResultSetType ) type);
  }

  SQLDBC_Statement_ResultSetType  SQLDBC_Statement_getResultSetType(  SQLDBC_Statement* hdl){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    return (SQLDBC_Statement_ResultSetType ) tmpVar1->getResultSetType();
  }

  void  SQLDBC_Statement_setResultSetConcurrencyType(  SQLDBC_Statement* hdl, SQLDBC_Statement_ConcurrencyType type){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    tmpVar1->setResultSetConcurrencyType( (SQLDBC_Statement::ConcurrencyType ) type);
  }

  SQLDBC_Statement_ConcurrencyType  SQLDBC_Statement_getResultSetConcurrencyType(  SQLDBC_Statement* hdl){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    return (SQLDBC_Statement_ConcurrencyType ) tmpVar1->getResultSetConcurrencyType();
  }

  SQLDBC_Int4 * SQLDBC_Statement_getRowStatus(  SQLDBC_Statement* hdl){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    return (SQLDBC_Int4 *) tmpVar1->getRowStatus();
  }

  SQLDBC_UInt4  SQLDBC_Statement_getBatchSize(  SQLDBC_Statement* hdl){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    return (SQLDBC_UInt4 ) tmpVar1->getBatchSize();
  }

  SQLDBC_Retcode  SQLDBC_Statement_addBatch(  SQLDBC_Statement* hdl, char *sql,
                                  SQLDBC_Length sqlLength,
                                  SQLDBC_StringEncodingType_Encoding encoding){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->addBatch(sql, sqlLength,  (SQLDBC_StringEncoding ) encoding);
  }

  SQLDBC_Retcode  SQLDBC_Statement_addBatchNTS(  SQLDBC_Statement* hdl, char *sql,
                                  SQLDBC_StringEncodingType_Encoding encoding){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->addBatch(sql,  (SQLDBC_StringEncoding ) encoding);
  }

  SQLDBC_Retcode  SQLDBC_Statement_addBatchASCII(  SQLDBC_Statement* hdl, char *sql){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->addBatch(sql);
  }

  SQLDBC_Retcode  SQLDBC_Statement_executeBatch(  SQLDBC_Statement* hdl){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->executeBatch();
  }

  void  SQLDBC_Statement_clearBatch(  SQLDBC_Statement* hdl){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    tmpVar1->clearBatch();
  }

  SQLDBC_Retcode  SQLDBC_Statement_getLastInsertedKey(  SQLDBC_Statement* hdl, SQLDBC_Int4      tag,
                                                      SQLDBC_HostType type,
                                                      void            *paramAddr,
                                                      SQLDBC_Length   *lengthIndicator,
                                                      SQLDBC_Length    size,
                                                      SQLDBC_Bool      terminate){
    SQLDBC_Statement* tmpVar1 = (SQLDBC_Statement*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->getLastInsertedKey(tag, type, paramAddr, lengthIndicator, size, terminate);
  }

  SQLDBC_ErrorHndl* SQLDBC_PreparedStatement_getError(  SQLDBC_PreparedStatement* hdl){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_ErrorHndl*) &tmpVar1->error();
  }

  void  SQLDBC_PreparedStatement_clearError(  SQLDBC_PreparedStatement* hdl){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    tmpVar1->clearError();
  }

  SQLDBC_SQLWarning* SQLDBC_PreparedStatement_getWarning(  SQLDBC_PreparedStatement* hdl){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_SQLWarning*) tmpVar1->warning();
  }

  void  SQLDBC_PreparedStatement_clearWarnings(  SQLDBC_PreparedStatement* hdl){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    tmpVar1->clearWarnings();
  }

  void  SQLDBC_PreparedStatement_setResultSetFetchSize(  SQLDBC_PreparedStatement* hdl, SQLDBC_Int2 rows){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    tmpVar1->setResultSetFetchSize(rows);
  }

  void  SQLDBC_PreparedStatement_setMaxRows(  SQLDBC_PreparedStatement* hdl, SQLDBC_UInt4 rows){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    tmpVar1->setMaxRows(rows);
  }

  SQLDBC_UInt4  SQLDBC_PreparedStatement_getMaxRows(  SQLDBC_PreparedStatement* hdl){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_UInt4 ) tmpVar1->getMaxRows();
  }

  SQLDBC_ResultSet * SQLDBC_PreparedStatement_getResultSet(  SQLDBC_PreparedStatement* hdl){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_ResultSet *) tmpVar1->getResultSet();
  }

  void  SQLDBC_PreparedStatement_setCursorName(  SQLDBC_PreparedStatement* hdl, const char    *buffer,
                     SQLDBC_Length  bufferLength,
                     const SQLDBC_StringEncodingType_Encoding encoding){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    tmpVar1->setCursorName(buffer, bufferLength,  (SQLDBC_StringEncoding ) encoding);
  }

  SQLDBC_Retcode  SQLDBC_PreparedStatement_setCommandInfo(  SQLDBC_PreparedStatement* hdl, const char *buffer,
                               SQLDBC_Length bufferLength,
                               SQLDBC_Int4 lineNumber){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->setCommandInfo(buffer, bufferLength, lineNumber);
  }

  SQLDBC_Retcode  SQLDBC_PreparedStatement_getCursorName(  SQLDBC_PreparedStatement* hdl, char         *buffer,
                               const SQLDBC_StringEncodingType_Encoding encoding,
                               const SQLDBC_Length bufferSize,
                               SQLDBC_Length *bufferLength){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->getCursorName(buffer,  (SQLDBC_StringEncoding ) encoding, bufferSize, bufferLength);
  }

  SQLDBC_Retcode  SQLDBC_PreparedStatement_getTableName(  SQLDBC_PreparedStatement* hdl, char          *buffer,
                              const SQLDBC_StringEncodingType_Encoding encoding,
                              const SQLDBC_Length  bufferSize,
                              SQLDBC_Length *bufferLength){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->getTableName(buffer,  (SQLDBC_StringEncoding ) encoding, bufferSize, bufferLength);
  }

  SQLDBC_Bool  SQLDBC_PreparedStatement_isQuery(  SQLDBC_PreparedStatement* hdl){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_Bool ) tmpVar1->isQuery();
  }

  SQLDBC_Int4  SQLDBC_PreparedStatement_getRowsAffected(  SQLDBC_PreparedStatement* hdl){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_Int4 ) tmpVar1->getRowsAffected();
  }

  void  SQLDBC_PreparedStatement_setResultSetType(  SQLDBC_PreparedStatement* hdl, SQLDBC_Statement_ResultSetType type ){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    tmpVar1->setResultSetType( (SQLDBC_Statement::ResultSetType ) type);
  }

  SQLDBC_Statement_ResultSetType  SQLDBC_PreparedStatement_getResultSetType(  SQLDBC_PreparedStatement* hdl){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_Statement_ResultSetType ) tmpVar1->getResultSetType();
  }

  void  SQLDBC_PreparedStatement_setResultSetConcurrencyType(  SQLDBC_PreparedStatement* hdl, SQLDBC_Statement_ConcurrencyType type){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    tmpVar1->setResultSetConcurrencyType( (SQLDBC_Statement::ConcurrencyType ) type);
  }

  SQLDBC_Statement_ConcurrencyType  SQLDBC_PreparedStatement_getResultSetConcurrencyType(  SQLDBC_PreparedStatement* hdl){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_Statement_ConcurrencyType ) tmpVar1->getResultSetConcurrencyType();
  }

  SQLDBC_Int4 * SQLDBC_PreparedStatement_getRowStatus(  SQLDBC_PreparedStatement* hdl){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_Int4 *) tmpVar1->getRowStatus();
  }

  SQLDBC_UInt4  SQLDBC_PreparedStatement_getBatchSize(  SQLDBC_PreparedStatement* hdl){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_UInt4 ) tmpVar1->getBatchSize();
  }

  SQLDBC_Retcode  SQLDBC_PreparedStatement_executeBatch(  SQLDBC_PreparedStatement* hdl){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->executeBatch();
  }

  void  SQLDBC_PreparedStatement_clearBatch(  SQLDBC_PreparedStatement* hdl){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    tmpVar1->clearBatch();
  }

  SQLDBC_Retcode  SQLDBC_PreparedStatement_getLastInsertedKey(  SQLDBC_PreparedStatement* hdl, SQLDBC_Int4      tag,
                                                               SQLDBC_HostType type,
                                                               void            *paramAddr,
                                                               SQLDBC_Length   *lengthIndicator,
                                                               SQLDBC_Length    size,
                                                               SQLDBC_Bool      terminate){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->getLastInsertedKey(tag, type, paramAddr, lengthIndicator, size, terminate);
  }

  SQLDBC_Retcode  SQLDBC_PreparedStatement_prepare(  SQLDBC_PreparedStatement* hdl, const char *sql,
                         const SQLDBC_Length sqlLength,
                         const SQLDBC_StringEncodingType_Encoding encoding){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->prepare(sql, sqlLength,  (SQLDBC_StringEncoding ) encoding);
  }

  SQLDBC_Retcode  SQLDBC_PreparedStatement_prepareNTS(  SQLDBC_PreparedStatement* hdl, const char *sql,
                         const SQLDBC_StringEncodingType_Encoding encoding){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->prepare(sql,  (SQLDBC_StringEncoding ) encoding);
  }

  SQLDBC_Retcode  SQLDBC_PreparedStatement_prepareASCII(  SQLDBC_PreparedStatement* hdl, const char *sql){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->prepare(sql);
  }

  SQLDBC_Retcode  SQLDBC_PreparedStatement_executeASCII(  SQLDBC_PreparedStatement* hdl){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->execute();
  }

  SQLDBC_ParameterMetaData* SQLDBC_PreparedStatement_getParameterMetaData(  SQLDBC_PreparedStatement* hdl){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_ParameterMetaData*) tmpVar1->getParameterMetaData();
  }

  SQLDBC_ResultSetMetaData* SQLDBC_PreparedStatement_getResultSetMetaData(  SQLDBC_PreparedStatement* hdl){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_ResultSetMetaData*) tmpVar1->getResultSetMetaData();
  }

  SQLDBC_Retcode  SQLDBC_PreparedStatement_setBatchSize(  SQLDBC_PreparedStatement* hdl, SQLDBC_UInt4 rowarraysize){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->setBatchSize(rowarraysize);
  }

  SQLDBC_UInt4  SQLDBC_PreparedStatement_getPreferredBatchSize(  SQLDBC_PreparedStatement* hdl){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_UInt4 ) tmpVar1->getPreferredBatchSize();
  }

  SQLDBC_Retcode  SQLDBC_PreparedStatement_clearParameters(  SQLDBC_PreparedStatement* hdl){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->clearParameters();
  }

  SQLDBC_Retcode  SQLDBC_PreparedStatement_bindParameter(  SQLDBC_PreparedStatement* hdl, const SQLDBC_UInt2     Index,
                                const SQLDBC_HostType  Type,
                                void                  *paramAddr,
                                SQLDBC_Length         *LengthIndicator,
                                const SQLDBC_Length    Size,
                                const SQLDBC_Bool      Terminate){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->bindParameter(Index, Type, paramAddr, LengthIndicator, Size, Terminate);
  }

  SQLDBC_Retcode  SQLDBC_PreparedStatement_bindParameterAddr(  SQLDBC_PreparedStatement* hdl, const SQLDBC_UInt2    Index,
                                   const SQLDBC_HostType Type,
                                   void                 *paramAddr,
                                   SQLDBC_Length        *LengthIndicator,
                                   const SQLDBC_Length   Size,
                                   const SQLDBC_Bool     Terminate){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->bindParameterAddr(Index, Type, paramAddr, LengthIndicator, Size, Terminate);
  }

  SQLDBC_Retcode  SQLDBC_PreparedStatement_setBindingType(  SQLDBC_PreparedStatement* hdl, SQLDBC_size_t size){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->setBindingType(size);
  }

  SQLDBC_Retcode  SQLDBC_PreparedStatement_nextParameterByIndex(  SQLDBC_PreparedStatement* hdl, SQLDBC_Int2* /*#cast **/paramIndex, void** /*#cast **/paramAddr){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->nextParameterByIndex(*paramIndex, *paramAddr);
  }

  SQLDBC_Retcode  SQLDBC_PreparedStatement_putData(  SQLDBC_PreparedStatement* hdl, void *paramAddr, SQLDBC_Length  *paramLengthIndicator){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->putData(paramAddr, paramLengthIndicator);
  }

  SQLDBC_Retcode  SQLDBC_PreparedStatement_getObject(  SQLDBC_PreparedStatement* hdl, SQLDBC_Int4     Index,
                           SQLDBC_HostType Type,
                           void                 *paramAddr,
                           SQLDBC_Length        *LengthIndicator,
                           SQLDBC_Length   Size,
                           SQLDBC_Bool     Terminate){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->getObject(Index, Type, paramAddr, LengthIndicator, Size, Terminate);
  }

  SQLDBC_Retcode  SQLDBC_PreparedStatement_getObjectByPos(  SQLDBC_PreparedStatement* hdl, SQLDBC_Int4     Index,
                           SQLDBC_HostType Type,
                           void                 *paramAddr,
                           SQLDBC_Length        *LengthIndicator,
                           SQLDBC_Length   Size,
                           SQLDBC_Length         StartPos,
                           SQLDBC_Bool     Terminate){
    SQLDBC_PreparedStatement* tmpVar1 = (SQLDBC_PreparedStatement*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->getObject(Index, Type, paramAddr, LengthIndicator, Size, StartPos, Terminate);
  }

  void  SQLDBC_ConnectProperties_setProperty(  SQLDBC_ConnectProperties* hdl, const char *key, const char *value){
    SQLDBC_ConnectProperties* tmpVar1 = (SQLDBC_ConnectProperties*)hdl;
    tmpVar1->setProperty(key, value);
  }

  char * SQLDBC_ConnectProperties_getProperty(  SQLDBC_ConnectProperties* hdl, const char *key, const char *defaultvalue){
    SQLDBC_ConnectProperties* tmpVar1 = (SQLDBC_ConnectProperties*)hdl;
    return (char *) tmpVar1->getProperty(key, defaultvalue);
  }

  SQLDBC_ErrorHndl* SQLDBC_Connection_getError(  SQLDBC_Connection* hdl){
    SQLDBC_Connection* tmpVar1 = (SQLDBC_Connection*)hdl;
    return (SQLDBC_ErrorHndl*) &tmpVar1->error();
  }

  void  SQLDBC_Connection_clearError(  SQLDBC_Connection* hdl){
    SQLDBC_Connection* tmpVar1 = (SQLDBC_Connection*)hdl;
    tmpVar1->clearError();
  }

  SQLDBC_SQLWarning* SQLDBC_Connection_getWarning(  SQLDBC_Connection* hdl){
    SQLDBC_Connection* tmpVar1 = (SQLDBC_Connection*)hdl;
    return (SQLDBC_SQLWarning*) tmpVar1->warning();
  }

  void  SQLDBC_Connection_clearWarnings(  SQLDBC_Connection* hdl){
    SQLDBC_Connection* tmpVar1 = (SQLDBC_Connection*)hdl;
    tmpVar1->clearWarnings();
  }

  SQLDBC_Retcode  SQLDBC_Connection_connect(  SQLDBC_Connection* hdl, const char* servernode,
                         SQLDBC_Length servernodeLength,
                         const char* serverdb,
                         SQLDBC_Length serverdbLength,
                         const char* username,
                         SQLDBC_Length usernameLength,
                         const char* password,
                         SQLDBC_Length passwordLength,
                         const SQLDBC_StringEncodingType_Encoding userpwdEncoding,
                         const SQLDBC_ConnectProperties* /*#cast **/ properties){
    SQLDBC_Connection* tmpVar1 = (SQLDBC_Connection*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->connect(servernode, servernodeLength, serverdb, serverdbLength, username, usernameLength, password, passwordLength,  (SQLDBC_StringEncoding ) userpwdEncoding, *properties);
  }

  SQLDBC_Retcode  SQLDBC_Connection_connectNTS(  SQLDBC_Connection* hdl, const char* servernode,
                         const char* serverdb,
                         const char* username,
                         const char* password,
                         const SQLDBC_StringEncodingType_Encoding userpwdEncoding,
                         const SQLDBC_ConnectProperties* /*#cast **/ properties){
    SQLDBC_Connection* tmpVar1 = (SQLDBC_Connection*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->connect(servernode, serverdb, username, password,  (SQLDBC_StringEncoding ) userpwdEncoding, *properties);
  }

  SQLDBC_Retcode  SQLDBC_Connection_connectASCII(  SQLDBC_Connection* hdl, const char* servernode,
                         const char* serverdb,
                         const char* username,
                         const char* password,
                         const SQLDBC_ConnectProperties* /*#cast **/ properties){
    SQLDBC_Connection* tmpVar1 = (SQLDBC_Connection*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->connect(servernode, serverdb, username, password, *properties);
  }

  SQLDBC_Retcode  SQLDBC_Connection_connectPROP(  SQLDBC_Connection* hdl, const SQLDBC_ConnectProperties* /*#cast **/ properties){
    SQLDBC_Connection* tmpVar1 = (SQLDBC_Connection*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->connect(*properties);
  }

  SQLDBC_Statement * SQLDBC_Connection_createStatement(  SQLDBC_Connection* hdl){
    SQLDBC_Connection* tmpVar1 = (SQLDBC_Connection*)hdl;
    return (SQLDBC_Statement *) tmpVar1->createStatement();
  }

  SQLDBC_PreparedStatement * SQLDBC_Connection_createPreparedStatement(  SQLDBC_Connection* hdl){
    SQLDBC_Connection* tmpVar1 = (SQLDBC_Connection*)hdl;
    return (SQLDBC_PreparedStatement *) tmpVar1->createPreparedStatement();
  }

  SQLDBC_Retcode  SQLDBC_Connection_commit(  SQLDBC_Connection* hdl){
    SQLDBC_Connection* tmpVar1 = (SQLDBC_Connection*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->commit();
  }

  SQLDBC_Retcode  SQLDBC_Connection_rollback(  SQLDBC_Connection* hdl){
    SQLDBC_Connection* tmpVar1 = (SQLDBC_Connection*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->rollback();
  }

  void  SQLDBC_Connection_releaseStatement(  SQLDBC_Connection* hdl, SQLDBC_Statement *stmt){
    SQLDBC_Connection* tmpVar1 = (SQLDBC_Connection*)hdl;
    tmpVar1->releaseStatement(stmt);
  }

  void  SQLDBC_Connection_releasePreparedStatement(  SQLDBC_Connection* hdl, SQLDBC_PreparedStatement *stmt){
    SQLDBC_Connection* tmpVar1 = (SQLDBC_Connection*)hdl;
    tmpVar1->releaseStatement(stmt);
  }

  SQLDBC_Retcode  SQLDBC_Connection_cancel(  SQLDBC_Connection* hdl){
    SQLDBC_Connection* tmpVar1 = (SQLDBC_Connection*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->cancel();
  }

  SQLDBC_Retcode  SQLDBC_Connection_close(  SQLDBC_Connection* hdl){
    SQLDBC_Connection* tmpVar1 = (SQLDBC_Connection*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->close();
  }

  SQLDBC_Retcode  SQLDBC_Connection_commitWorkRelease(  SQLDBC_Connection* hdl){
    SQLDBC_Connection* tmpVar1 = (SQLDBC_Connection*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->commitWorkRelease();
  }

  SQLDBC_Retcode  SQLDBC_Connection_disconnect(  SQLDBC_Connection* hdl){
    SQLDBC_Connection* tmpVar1 = (SQLDBC_Connection*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->disconnect();
  }

  void  SQLDBC_Connection_setAutoCommit(  SQLDBC_Connection* hdl, SQLDBC_Bool autocommit){
    SQLDBC_Connection* tmpVar1 = (SQLDBC_Connection*)hdl;
    tmpVar1->setAutoCommit(autocommit);
  }

  SQLDBC_Bool  SQLDBC_Connection_getAutoCommit(  SQLDBC_Connection* hdl){
    SQLDBC_Connection* tmpVar1 = (SQLDBC_Connection*)hdl;
    return (SQLDBC_Bool ) tmpVar1->getAutoCommit();
  }

  void  SQLDBC_Connection_setSQLMode(  SQLDBC_Connection* hdl, SQLDBC_SQLMode sqlmode){
    SQLDBC_Connection* tmpVar1 = (SQLDBC_Connection*)hdl;
    tmpVar1->setSQLMode(sqlmode);
  }

  SQLDBC_Retcode  SQLDBC_Connection_setTransactionIsolation(  SQLDBC_Connection* hdl, SQLDBC_Int4 isolationlevel){
    SQLDBC_Connection* tmpVar1 = (SQLDBC_Connection*)hdl;
    return (SQLDBC_Retcode ) tmpVar1->setTransactionIsolation(isolationlevel);
  }

  SQLDBC_Int4  SQLDBC_Connection_getTransactionIsolation(  SQLDBC_Connection* hdl){
    SQLDBC_Connection* tmpVar1 = (SQLDBC_Connection*)hdl;
    return (SQLDBC_Int4 ) tmpVar1->getTransactionIsolation();
  }

  SQLDBC_Bool  SQLDBC_Connection_isConnected(  SQLDBC_Connection* hdl){
    SQLDBC_Connection* tmpVar1 = (SQLDBC_Connection*)hdl;
    return (SQLDBC_Bool ) tmpVar1->isConnected();
  }

  SQLDBC_Int4  SQLDBC_Connection_getKernelVersion(  SQLDBC_Connection* hdl){
    SQLDBC_Connection* tmpVar1 = (SQLDBC_Connection*)hdl;
    return (SQLDBC_Int4 ) tmpVar1->getKernelVersion();
  }

  SQLDBC_Bool  SQLDBC_Connection_isUnicodeDatabase(  SQLDBC_Connection* hdl){
    SQLDBC_Connection* tmpVar1 = (SQLDBC_Connection*)hdl;
    return (SQLDBC_Bool ) tmpVar1->isUnicodeDatabase();
  }

  SQLDBC_DateTimeFormat_Format  SQLDBC_Connection_getDateTimeFormat(  SQLDBC_Connection* hdl){
    SQLDBC_Connection* tmpVar1 = (SQLDBC_Connection*)hdl;
    return (SQLDBC_DateTimeFormat_Format ) tmpVar1->getDateTimeFormat();
  }

  void  SQLDBC_Profile_resetCounters(  SQLDBC_Profile* hdl){
    SQLDBC_Profile* tmpVar1 = (SQLDBC_Profile*)hdl;
    tmpVar1->resetCounters();
  }

  void  SQLDBC_Profile_collectCounters(  SQLDBC_Profile* hdl){
    SQLDBC_Profile* tmpVar1 = (SQLDBC_Profile*)hdl;
    tmpVar1->collectCounters();
  }

  SQLDBC_UInt8  SQLDBC_Profile_getCounter(  SQLDBC_Profile* hdl, SQLDBC_ProfileCountValues counter){
    SQLDBC_Profile* tmpVar1 = (SQLDBC_Profile*)hdl;
    return (SQLDBC_UInt8 ) tmpVar1->getCounter(counter);
  }

  SQLDBC_Connection * SQLDBC_Environment_createConnection(  SQLDBC_Environment* hdl){
    SQLDBC_Environment* tmpVar1 = (SQLDBC_Environment*)hdl;
    return (SQLDBC_Connection *) tmpVar1->createConnection();
  }

  void  SQLDBC_Environment_releaseConnection(  SQLDBC_Environment* hdl, SQLDBC_Connection *connection){
    SQLDBC_Environment* tmpVar1 = (SQLDBC_Environment*)hdl;
    tmpVar1->releaseConnection(connection);
  }

  char * SQLDBC_Environment_getLibraryVersion(  SQLDBC_Environment* hdl){
    SQLDBC_Environment* tmpVar1 = (SQLDBC_Environment*)hdl;
    return (char *) tmpVar1->getLibraryVersion();
  }

  void  SQLDBC_Environment_setTraceOptions(  SQLDBC_Environment* hdl, const SQLDBC_ConnectProperties* /*#cast **/ traceoptions){
    SQLDBC_Environment* tmpVar1 = (SQLDBC_Environment*)hdl;
    tmpVar1->setTraceOptions(*traceoptions);
  }

  void  SQLDBC_Environment_getTraceOptions(  SQLDBC_Environment* hdl, SQLDBC_ConnectProperties* /*#cast **/ traceoptions){
    SQLDBC_Environment* tmpVar1 = (SQLDBC_Environment*)hdl;
    tmpVar1->getTraceOptions(*traceoptions);
  }

  SQLDBC_Profile* SQLDBC_Environment_getProfile(  SQLDBC_Environment* hdl){
    SQLDBC_Environment* tmpVar1 = (SQLDBC_Environment*)hdl;
    return (SQLDBC_Profile*) tmpVar1->getProfile();
  }

#ifdef __cplusplus
}
#endif
