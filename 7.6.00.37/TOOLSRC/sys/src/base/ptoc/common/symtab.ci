/* @(#)common/symtab.ci

    ========== licence begin LGPL
    Copyright (C) 2002 SAP AG

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
    ========== licence end
*/

/* symtab.ci */


/* primitive types */

# define SubRangeType		0
# define ShortType		-1
# define UshortType             -2
# define LongType		-3
# define UlongType              -4
# define IntegerType		-5
# define UnsignedType		-6
# define BooleanType		-7
# define CharType		-8
# define UcharType              -9
# define EnumerativeType	-10
# define FloatType		-11
# define DoubleType		-12
# define ArrayType		-13
# define RecordType		-14
# define FileType		-15
# define SetType		-16
# define PointerType		-17
# define FunctionType		-18
# define UnionType		-19
# define StringType		-20
# define VoidType		-21
# define BlockType		-22
# define ProcedureType		-23
# define CharacterType		-24
# define LastType               -24


/* primitive sizes */

# define ShortSize		16
# define UshortSize             16
# define LongSize		64
# define UlongSize              64
# define IntegerSize		32
# define UnsignedSize		32
# define CharSize		8
# define UcharSize              8
# define FloatSize		32
# define DoubleSize		64
# define PointerSize		32
# define CharacterSize		8


/* primitive alignments */

# define ShortAlignment		16
# define UshortAlignment        16

# define LongAlignment		LongSize
# define UlongAlignment         UlongSize
# define IntegerAlignment	32
# define UnsignedAlignment	32

# define CharAlignment		8
# define UcharAlignment         8

# define FloatAlignment		32
# define DoubleAlignment	DoubleSize
# define RecordAlignment	32
# define FileAlignment		32
# define PointerAlignment	32

# define CharacterAlignment	8


/* entry kinds */

typedef int KINDTYPE;

# define DummyDcl		0
# define ModuleDcl		2
# define ProcDcl		3
# define FuncDcl		4
# define ForwardProcDcl		5
# define ForwardFuncDcl		6
# define TypeDcl		7
# define ConDcl			8
# define VarDcl			9
# define LabelDcl		10
# define RecordElementDcl	11
# define RecordVariantDcl	12
# define PackedTypeDcl		13
# define ParmDcl		14
# define SysProcDcl		15
# define TypeNameDcl		16
# define CBlockDcl		17
# define CBlockElementDcl	18
# define FuncParmDcl		19
# define ProcParmDcl		20
# define BlockDcl               21
# define NameListDcl            22
# define TagNameDcl             23


/* storage class */

typedef int CLASSTYPE;

# define SNULL			0
# define AUTO 			1
# define EXTERN			2
# define FILESTATIC		3
# define LOCALSTATIC		4
# define REGISTER		5
# define EXTDEF			6
# define PARAM			7
# define AUTONR			10

/* parameter subclasses */

# define ByValueParm   1
# define ByRefParm     2
# define InitializedVar	 	4
# define UninitializedVar	0


/* symbol table entry */

typedef struct {
   int SNext;
   int SName;
   int SLink;
   int SFile;
   int SType;
   int SFlags;
   int SCard;
   int SLevel;
   int STname;
   int SOrder;
   int SFeld1;
   int SFeld2;
   int SRecVar;
   int SFeld3;
   int SFeld4;
   int SFeld5;
   int STmyname;
   KINDTYPE SKind;
   union {
      struct {
         int dummy1;
         int dummy2;
         int dummy3;
	 } dummy_info, con_info, type_name_info;
      struct {
         int SAlign;
         int SSize;
         int SOffset;
         } type_info, element_info;
      struct {
         int STempIndex;
         } alloc_info;
      struct {
         int SRegister;
         } addr_info;
   } S;
   struct {
      int s_depend1;
      int s_depend2;
      int s_depend3;
   } T;
} SYMTAB;

# define DummyInfo	S.dummy_info
# define TypeInfo	S.type_info
# define AllocInfo	S.alloc_info
# define AddrInfo	S.addr_info
# define ElementInfo	S.element_info
# define SysProcInfo    S.sys_proc_info
# define TypeNameInfo	S.type_name_info

# define SLowRange	T.s_depend1
# define SHighRange	T.s_depend2
# define SFirstEnum	T.s_depend3

# define SIndex		T.s_depend1
# define SElement	T.s_depend2

# define SFirstField	T.s_depend1
# define SFirstVariant	T.s_depend2
# define SNextVariant	T.s_depend3

# define SComponent	T.s_depend1

# define SBase		T.s_depend1

# define SDomain	T.s_depend1

# define SLength	T.s_depend1
# define SElem     	T.s_depend2

# define SBlockLen	T.s_depend1
# define SElemAlign     T.s_depend2

# define SResult	T.s_depend1
# define SParmCnt	T.s_depend2
# define SBlock		T.s_depend3

# define SFuncBlock	T.s_depend1
# define SLastEntry	T.s_depend2

# define SClass		T.s_depend1
# define SSubClass	T.s_depend2
# define SParent	T.s_depend3

# define SNextField	T.s_depend1

# define SCon1val	T.s_depend1
# define SCon2val	T.s_depend2
# define SNextEnum	T.s_depend3

# define SSysSpecific	T.s_depend1


# define SymSize		32768
# define SymLast		(SymSize - 1)

typedef int SymbolTableRange;

extern int SymPtr;
extern SYMTAB STab [SymSize];
