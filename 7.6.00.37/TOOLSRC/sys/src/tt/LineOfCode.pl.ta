#
#       @(#)LineOfCode     Version: 7.2           1999-02-17
#		AdminTool!		
#
#       Axel Mosle SAP AG
#
#package differvp;
#
#    ========== licence begin  GPL
#    Copyright (C) 2001 SAP AG
#
#    This program is free software; you can redistribute it and/or
#    modify it under the terms of the GNU General Public License
#    as published by the Free Software Foundation; either version 2
#    of the License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#    ========== licence end
#

use Env;
use ICopy;
use File::Find;
use File::Basename;

die "use this script in the development environment\n" if ! $OWN;
$DevelopDir = shift;

$DevelopDir = "$OWN" unless defined($DevelopDir);
$DevelopSrc = "$DevelopDir\\sys\\src";
$DevelopDesc = "$DevelopDir\\sys\\desc";

unlink "$OWN/Lines_of_Code.prot";
open(TOTAL, ">$OWN/Lines_of_Code.prot") || die "Can't open $OWN/differ_total.prot (output): $!\n";

print STDOUT "LINES OF CODE:\n\n";

opendir(DIR_IN, $DevelopSrc);
@src_layer = grep(-d "$DevelopSrc\\$_" && !/^\.$|^\.\.$/, readdir(DIR_IN));
closedir(DIR_IN);
foreach $layer ( @src_layer )
{
	$HSRC=$SRC;
    $HSRC=~ tr[\\][/];
	find(\&findsrc,"$DevelopSrc\\$layer");
}

$HDESC=$DESC;
$HDESC=~ tr[\\][/];
find(\&finddesc,"$DevelopDesc");

close(TOTAL);

#----------------------------------------------------------
sub finddesc
{
    $file= $File::Find::name;
    $file=~ tr[\\][/];
    $file=~ s/$HDESC\///;
	if ( -f "$File::Find::name" ) 
	{
		desc_file_lookup($file);
	}
}

#----------------------------------------------------------
sub findsrc
{
    $file= $File::Find::name;
    $file=~ tr[\\][/];
    $file=~ s/$HSRC\///;
	if ( -f "$File::Find::name" ) 
	{
		src_file_lookup($file);
	}
}

#----------------------------------------------------------
sub src_file_lookup
{
	$source = shift;
    $lastlevel = "",
	
	$source =~ tr[/][\\];

    open(FILE_IN, "<$SRC/$source");
    open(FILE_OUT1,">$TMP/FILE01");
    open(FILE_OUT2,">$TMP/FILE02");
    $flag  = 0;
    $count1= 0;
    $count2= 0;
    while(<FILE_IN>)
    {
       $_ =~ s/\t//g;
       $_ =~ s/ //g;
       if ( $_ !~ /^$/ )
       {
          if ( $flag eq 0 )
          {
             print FILE_OUT1 $_;
             $count1++;
             if ( $_ =~ /lll/)
             {
                $flag=1;
             }
          }
          else
          {
             print FILE_OUT2 $_;
             $count2++;
          }
       }
    }
    close(FILE_IN);
    close(FILE_OUT1);
    close(FILE_OUT2);
    if ( $flag eq 0 )
    {
       printf "%-45s %6d\n", $source , $count1;   
    }
    else
    {
       printf "%-45s %6d\n", $source , $count2;
    }	

}



#----------------------------------------------------------
sub desc_file_lookup
{
	$source = shift;
    $lastlevel = "",
	
	$source =~ tr[/][\\];

    open(FILE_IN, "<$DESC/$source");
    open(FILE_OUT1,">$TMP/FILE01");
    open(FILE_OUT2,">$TMP/FILE02");
    $flag  = 0;
    $count1= 0;
    $count2= 0;
    while(<FILE_IN>)
    {
       $_ =~ s/\t//g;
       $_ =~ s/ //g;
       if ( $_ !~ /^$/ )
       {
          if ( $flag eq 0 )
          {
             print FILE_OUT1 $_;
             $count1++;
             if ( $_ =~ /lll/)
             {
                $flag=1;
             }
          }
          else
          {
             print FILE_OUT2 $_;
             $count2++;
          }
       }
    }
    close(FILE_IN);
    close(FILE_OUT1);
    close(FILE_OUT2);
    if ( $flag eq 0 )
    {
       printf "%-45s %6d\n", $source , $count1;   
    }
    else
    {
       printf "%-45s %6d\n", $source , $count2;   
    }	
}

__END__
