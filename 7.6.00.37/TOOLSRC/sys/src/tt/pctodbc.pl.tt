
#
#    ========== licence begin  GPL
#    Copyright (C) 2001 SAP AG
#
#    This program is free software; you can redistribute it and/or
#    modify it under the terms of the GNU General Public License
#    as published by the Free Software Foundation; either version 2
#    of the License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#    ========== licence end
#
$Trace=0; # Switch to 1 to enable trace
$Trace++ if ($Trace);
package pctodbc;
use Env;
$USAGE ="USAGE: pctodbc [options]\n";
$USAGE.="   \noptions  :\n";
$USAGE.="      -cleanup   : Cleans the output from previous runs.\n";
$USAGE.="      -nodrop    : Keeps the testuser on database.\n";
$USAGE.="      -nomail    : Don't send E-mail with protfile.\n";
$\="\n";  # Output seperator fuer print */
sub startpctest;
sub _pctest;

sub _pctest
{
    $SQLOPT=$_[0];
    @ARGV = ($_[1], $_[2]);
    do "$TOOL/bin/pctest.pl";
}

sub startpctest
{
    $OPT="";
    $MAIL="Yes";
    $INFILE="$TEST/pc/wrk/winhead.h";
    open(FILE_IN, "<$INFILE") || die "Can't open $INFILE (input): $!";
    if (s/(.*DBNODE)(.*)//g) {	
	$DSN=$2;
    }
    close(FILE_IN);
    
    $DROP="Yes";
    
}

# --- begin perl script ---

while ($_ = $ARGV[0], /^-/) {
    shift;
    last if /^--$/;
    if ( /^-cleanup$/ || /^-dynamic$/ ) {
	$OPT.= $_;
	next;
    }
    if ( /^-nomail$/ ) {
	$MAIL="No";
	next;
    }
    if ( /^-nodrop$/ ) {
	$DROP="No";
	next;
    }
    if ( /^-h$/ || /^-help$/) {
	print $USAGE;
	exit;
    }
}

sub opttest
{
    if ( "$ALLTEST" eq "odbc" ) {
	$SQLOPT="-X".@ARGV;
    }
}


#pctodbcb.pl;

$APITRACE="";

startpctest;

$SYSODBC="";
_pctest ( "-X", "$OPT", "odbc/initodbc" );  # init the odbc user and tables; may be differ
_pctest ( "-X", "$OPT",  "odbc/connect" );   # connect tests
_pctest ( "-X", "$OPT",  "odbc/gettinf" );   # SQLGetTypeInfo
_pctest ( "-X", "$OPT",  "odbc/tables" );    # SQLTables
_pctest ( "", "$OPT",  "odbc/tablecom"); # Comments on TABLES, SYNONYMS an COLUMNS
_pctest ( "-X", "$OPT",  "odbc/columns"); # SQLColumns
_pctest ( "-X", "$OPT",  "odbc/colall"); # SQLColumns with all columntypes
_pctest ( "-X", "$OPT",  "odbc/cola"); # SQLColAttribute
_pctest ( "-X", "$OPT",  "odbc/utility");
_pctest ( "-X", "$OPT",  "odbc/xcancel");
_pctest ( "-X", "$OPT",  "odbc/column1"); # SQLColumns "%" and "" returns the same.
_pctest ( "-X", "$OPT",  "odbc/colsyn"); # SQLColumns with a SYNONYM
#=====================================================
_pctest ( "-X", "$OPT",  "odbc/bindparm"); # SQLBindParameter
_pctest ( "-X", "$OPT",  "odbc/browsecn"); # SQLBrowseConnect
_pctest ( "-X", "$OPT",  "odbc/colattrb"); # SQLColAttributes
_pctest ( "-X", "$OPT",  "odbc/columprv"); # SQLColumnPrivileges
_pctest ( "-X", "$OPT",  "odbc/descrcol"); # SQLDescribeCol
_pctest ( "-X", "$OPT",  "odbc/foreigk1"); # SQLForeignKeys
_pctest ( "-X", "$OPT",  "odbc/getconop"); # SQLGetConnectOption
_pctest ( "-X", "$OPT",  "odbc/getstmop"); # SQLGetStmtOption
_pctest ( "-X", "$OPT",  "odbc/getfunc"); # SQLGetFunctions
_pctest ( "-X", "$OPT",  "odbc/getinfo1"); # SQLGetInfo
_pctest ( "-X", "$OPT",  "odbc/nativsql"); # SQLNativeSql
_pctest ( "-X", "$OPT",  "odbc/paramopt"); # SQLParamOptions
_pctest ( "-X", "$OPT",  "odbc/procedur"); # SQLProcedures
_pctest ( "-X", "$OPT",  "odbc/proccolm"); # SQLProcedureColumns
_pctest ( "-X", "$OPT",  "odbc/scrollop"); # SQLSetScrollOptions
_pctest ( "-X", "$OPT",  "odbc/setpos"); # SQLSetPos
_pctest ( "-X", "$OPT",  "odbc/speccolm"); # SQLSpecialColumns
_pctest ( "-X", "$OPT",  "odbc/tableprv"); # SQLTablePrivileges

_pctest ( "-X", "$OPT",  "odbc/dbproc"); # Call DBPROC's
_pctest ( "-X", "$OPT",  "odbc/floatnmd"); # Float-Datatype
_pctest ( "-X", "$OPT",  "odbc/resltmax"); # Resulset Maximum
#=====================================================
_pctest ( "-X", "$OPT",  "odbc/longsel"); # Dynamic allocate of the sql-da
_pctest ( "-X", "$OPT",  "odbc/execdsel"); # runs ExecDirect with few commands test the prepare describe mechnism
_pctest ( "-X", "$OPT",  "odbc/errtst"); # runs invalid SQL statements
_pctest ( "-X", "$OPT",  "odbc/transist"); # test transistion states (SQLFreeStmt behavior)
_pctest ( "-X", "$OPT",  "odbc/execdual"); # runs an ExecDirect with the dual table
_pctest ( "-X", "$OPT",  "odbc/statstc"); # runs SQLStatistic with different parameters
_pctest ( "-X", "$OPT",  "odbc/descsys");
_pctest ( "-X", "$OPT",  "odbc/statst1"); # runs SQLStatistic with named index on a table
_pctest ( "-X", "$OPT",  "odbc/statgrnt"); # runs SQLStatistic with granted table
_pctest ( "-X", "$OPT",  "odbc/trunc");
_pctest ( "-X", "$OPT",  "odbc/types");
_pctest ( "-X", "$OPT",  "odbc/dattim"); # Date and Time Conversion
_pctest ( "-X", "$OPT", "odbc/dattim1"); # Date and Time Conversion
_pctest ( "-X", "$OPT", "odbc/datcnv"); # Date and Time Conversion
_pctest ( "-X", "$OPT",  "odbc/muconn"); # Multiple Connections
_pctest ( "-X", "$OPT",  "odbc/muenv"); # Multiple Environment
_pctest ( "", "$OPT", "odbc/async");
_pctest ( "", "$OPT", "odbc/asyncmt");
_pctest ( "-X", "$OPT",  "odbc/transact"); # SQLTransact
_pctest ( "-X", "$OPT",  "odbc/muconn8"); # Test Eight Sessions
_pctest ( "-X", "$OPT",  "odbc/conmix"); # Mix from Connections
_pctest ( "-X", "$OPT",  "odbc/subtrans"); # Subtransactionen (BEGIN TRAN, END TRAN)
_pctest ( "-X", "$OPT",  "odbc/parmput"); # Inputparameter
_pctest ( "-X", "$OPT",  "odbc/parmpu1"); # Insert into ?, ?, ?
_pctest ( "-X", "$OPT",  "odbc/inspar"); # Test binding of Parameter (sqlstate=07001)
_pctest ( "-X", "$OPT",  "odbc/getset"); # Test SQLSetStmtOption an SQLGetStmtOption
_pctest ( "-X", "$OPT",  "odbc/getinfo"); # Gets driverversion and sqlcasize
_pctest ( "-X", "$OPT",  "odbc/passtr"); # Test SQL_PASSTHROUGH
_pctest ( "-X", "$OPT",  "odbc/passtr1"); # Test SQL_PASSTHROUGH
_pctest ( "-X", "$OPT",  "odbc/passtr2"); # Test SQL_PASSTHROUGH with row not found
_pctest ( "-X", "$OPT",  "odbc/speccol"); # Test SQLSpecialColumns
_pctest ( "-X", "$OPT",  "odbc/unbind"); # Test SQLSFreeStmt (SQL_UNBIND)
_pctest ( "-X", "$OPT",  "odbc/cursor"); # Test SQLSetCursorName
_pctest ( "-X", "$OPT",  "odbc/mfetch"); # Mfetch on and off
_pctest ( "-X", "$OPT",  "odbc/update1"); # select update for (switches mfetch off)
_pctest ( "-X", "$OPT",  "odbc/vchar");
_pctest ( "-X", "$OPT",  "odbc/parseag"); # reparsing after a alter table
_pctest ( "-X", "$OPT",  "odbc/col1"); # Columns with length one
_pctest ( "-X", "$OPT",  "odbc/lonchar"); # Longcolumns
_pctest ( "-X", "$OPT",  "odbc/lonbchar"); # Longcolumns (Byte)
_pctest ( "-X", "$OPT",  "odbc/lonchar1"); # 2 Longcolumns with nullvalues
_pctest ( "-X", "$OPT",  "odbc/lonchar2"); # 2 Longcolumns with nullvalues
_pctest ( "-X", "$OPT",  "odbc/lon1"); # Longcolumns > 32k with SQLBindParameter
_pctest ( "-X", "$OPT",  "odbc/lon2"); # Longcolumns > 32k 1 SQLGetData
_pctest ( "-X", "$OPT",  "odbc/lon3"); # Longcolumns > 32k n SQLGetData
_pctest ( "-X", "$OPT",  "odbc/inslong"); # Longcolumns insert (SQLPutData)
_pctest ( "-X", "$OPT",  "odbc/ins1"); # Longcolumns mix 2 long (SQLPutData, SQLParamData)
_pctest ( "-X", "$OPT",  "odbc/23000"); # Checks Constraint violation on NOT NULL Columns
_pctest ( "-X", "$OPT",  "odbc/numexcep"); # Division by zero
_pctest ( "-X", "$OPT",  "odbc/cnvchar"); # Converts all types SQL_* (Char and Binary)
_pctest ( "-X", "$OPT",  "odbc/cnvnum"); # Converts all types to SQL_* (Numeric)
_pctest ( "-X", "$OPT",  "odbc/cnvdate"); # Converts all types to SQL_* (Date)
_pctest ( "-X", "$OPT",  "odbc/values"); # Test Converting of numeric values
_pctest ( "-X", "$OPT",  "odbc/real"); # Test Converting of real and float
_pctest ( "-X", "$OPT",  "odbc/reale"); # Test Converting of real and float
_pctest ( "-X", "$OPT",  "odbc/fixed"); # Test Converting of fixed
_pctest ( "-X", "$OPT",  "odbc/pcbval"); # Returns length for pcbValues (SQLBindCol, SQLGetData)
_pctest ( "-X", "$OPT",  "odbc/getdata"); # SQL_NO_DATA_FOUND for all types
_pctest ( "-X", "$OPT",  "odbc/extfrow"); # SQLExtendedFetch (rowwise binding)
_pctest ( "-X", "$OPT",  "odbc/extendfc"); # SQLExtendedFetch (columnwise binding)
_pctest ( "-X", "$OPT",  "odbc/ext750"); # SQLExtendedFetch (with to many fetch statements )
_pctest ( "-X", "$OPT",  "odbc/extelong"); # SQLExtendedFetch with long columns
_pctest ( "-X", "$OPT",  "odbc/extesing"); # SQLExtendedFetch single user
_pctest ( "-X", "$OPT",  "odbc/extemut"); # SQLExtendedFetch updates and deletes from different handle
_pctest ( "-X", "$OPT",  "odbc/compon");
if ( "$DROP" eq "Yes" ) {
    $SQLOPT="-X"; _pctest ( "", "$OPT", "odbc/endodbc" );
}

