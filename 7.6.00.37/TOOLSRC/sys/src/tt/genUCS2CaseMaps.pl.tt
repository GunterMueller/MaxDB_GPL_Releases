#!/bin/perl
# array of indicator, that page contains any lowercase mapping
#
#    ========== licence begin  GPL
#    Copyright (C) 2001 SAP AG
#
#    This program is free software; you can redistribute it and/or
#    modify it under the terms of the GNU General Public License
#    as published by the Free Software Foundation; either version 2
#    of the License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#    ========== licence end
#

@lowerPage = ();
# array of all lowercase mappings
@lowerTable = ();
# array of indicator, that page contains any uppercase mapping
@upperPage = ();
# array of all uppercase mappings
@upperTable = ();
$Version = "genUCS2CaseMaps 1.0";

while (<>)
{
  @unicodeEntry = ();
  @unicodeEntry = split /;/ , $_ , 15 ;

  $entry      = hex "0".$unicodeEntry[0];

  if ( length($unicodeEntry[13]) > 0 )
  {
    $entry      = hex "0".$unicodeEntry[0];
    $page       = int $entry / 256;
    $upperPage[$page] = 1;
    $upperTable[$entry] = hex "0".$unicodeEntry[13];
  }

  if ( length($unicodeEntry[12]) > 0 )
  {
    $entry      = hex "0".$unicodeEntry[0];
    $page       = int $entry / 256;
    $lowerPage[$page] = 1;
    $lowerTable[$entry] = hex "0".$unicodeEntry[12];
  }

}

open( TABLE, ">UnicodeCaseTable.cpp" ) || die ( "Can't create UnicodeCaseTable.cpp" );

print TABLE "// Generated UnicodeCaseTable.cpp.\n";
print TABLE "// Generated by $Version DO NOT EDIT\n\n";
print TABLE "#include \"SAPDBCommon/SAPDB_UnicodeCaseTable.hpp\"\n\n";

for ( $i = 0; $i < 256; $i++ )
{
  if ( $upperPage[$i] > 0 )
  {
     printf TABLE "\nstatic SAPDB_UCS2Map UMap_%02X = {\n ",$i;
     for ( $j = 0; $j < 256; $j = $j + 8 )
     {
       for ( $k = 0; $k < 8; $k++ )
       {
         $entry = $i * 256 + $j + $k;
         $val = $upperTable[$entry] + 0;
         if ( $val == "0" )
         {
           $val = $entry;
         }
         printf TABLE "0x%04X,",$val;
       }
       print TABLE "\n ";
     }
     printf TABLE "//End of UMap_%02X\n};\n",$i;
  }

  if ( $lowerPage[$i] > 0 )
  {
     printf TABLE "\nstatic SAPDB_UCS2Map LMap_%02X = {\n ",$i;
     for ( $j = 0; $j < 256; $j = $j + 8 )
     {
       for ( $k = 0; $k < 8; $k++ )
       {
         $entry = $i * 256 + $j + $k;
         $val = $lowerTable[$entry] + 0;
         if ( $val == "0" )
         {
           $val = $entry;
         }
         printf TABLE "0x%04X,",$val;
       }
       print TABLE "\n ";
     }
     printf TABLE "//End of LMap_%02X\n};\n",$i;
  }
}
    
print TABLE "\n// Exported mapping table for uppercase\n";
print TABLE "SAPDB_UCS2Map *SAPDB_UCS2UpperCaseMap[256] =\n{\n ";
for ( $j = 0; $j < 256; $j = $j + 8 )
{
  for ( $k = 0; $k < 8; $k++ )
  {
    if ( $upperPage[$j+$k] > 0 )
    {
      printf TABLE "UMap_%02X,",$j+$k;
    }
    else
    {
      print TABLE "      0,";
    }
  }
  print TABLE "\n ";
}
print TABLE "// End of UCS2UpperCaseMap\n};\n";

print TABLE "\n// Exported mapping table for lowercase\n";
print TABLE "SAPDB_UCS2Map *SAPDB_UCS2LowerCaseMap[256] =\n{\n ";
for ( $j = 0; $j < 256; $j = $j + 8 )
{
  for ( $k = 0; $k < 8; $k++ )
  {
    if ( $lowerPage[$j+$k] > 0 )
    {
      printf TABLE "LMap_%02X,",$j+$k;
    }
    else
    {
      print TABLE "      0,";
    }
  }
  print TABLE "\n ";
}
print TABLE "// End of UCS2LowerCaseMap\n};\n";

close (TABLE);

open( HEADER, ">UnicodeCaseTable.hpp" ) || die ( "Can't create UnicodeCaseTable.hpp" );

print HEADER "#ifndef SAPDB_UNICODECASETABLE_HPP\n";
print HEADER "#define SAPDB_UNICODECASETABLE_HPP\n\n";

print HEADER "// Generated UnicodeCaseTable.cpp.\n";
print HEADER "// Generated by UniCaseGen.pl DO NOT EDIT\n\n";
print HEADER "// This file was generated using $Version\n";
print HEADER "// Inputfile was UnicodeData.txt Version of 18.11.1999\n";
print HEADER "// For latest version of this file see http://www.unicode.org\n\n\n";
print HEADER "// This file explictly does ignore 'SpecialCasing.txt' information!!!\n";
print HEADER "//  Candidates for wrong mapping are:\n";
print HEADER "//   'german sharp sz' capitalizes to 2 'capital S'\n";
print HEADER "//   'ligatures' capitalize into two separated characters\n";
print HEADER "//   some 'precomposed characters' have no counterpart\n";
print HEADER "//   all letters with 'iota-subscript' or 'iota-adjust'\n";
print HEADER "//  Things that are not realizable here but must be handled by application are:\n";
print HEADER "//   special case for final forms (Greek capital letter sigma)\n";
print HEADER "//   locale sensitive character mapping (Turkish mapping of Capital Letter I)\n";
print HEADER "// This file finally also does not support TitleCaseMapping\n\n";

print HEADER "// So using these tables you are limited to those unicode characters, that\n";
print HEADER "// map into a single unicode character...\n\n\n";

print HEADER "// Needed for SAPDB_UInt2 only: Defined as an 16bit unsigned data type\n";
print HEADER "#include \"SAPDBCommon/SAPDB_Types.hpp\"\n\n";

print HEADER "// two stages of mappings are used...\n";
print HEADER "struct SAPDB_UCS2Map { SAPDB_UInt2 mapping[256]; };\n\n";

print HEADER "//----------------------------------------------------\n";
print HEADER "// Reference to generated first stage mapping tables\n";
print HEADER "//----------------------------------------------------\n";
print HEADER "extern SAPDB_UCS2Map *SAPDB_UCS2UpperCaseMap[256];\n";
print HEADER "extern SAPDB_UCS2Map *SAPDB_UCS2LowerCaseMap[256];\n\n";

print HEADER "//----------------------------------------------------\n";
print HEADER "// Inline functions for single character mapping\n";
print HEADER "// !!!Ignoring special multicharacter mapping cases!!!\n";
print HEADER "//----------------------------------------------------\n";
print HEADER "inline SAPDB_UInt2 UCS2ToUpper(SAPDB_UInt2 KeyToMap)\n";
print HEADER "{\n";
print HEADER "  register SAPDB_UCS2Map *Map = UCS2UpperCaseMap[KeyToMap>>8];\n";
print HEADER "  return ( Map != 0 ? Map->mapping[KeyToMap%256] : KeyToMap );\n";
print HEADER "}\n\n";

print HEADER "inline SAPDB_UInt2 UCS2ToLower(SAPDB_UInt2 KeyToMap)\n";
print HEADER "{\n";
print HEADER "  register SAPDB_UCS2Map *Map = UCS2LowerCaseMap[KeyToMap>>8];\n";
print HEADER "  return ( Map != 0 ? Map->mapping[KeyToMap%256] : KeyToMap );\n";
print HEADER "}\n\n";


print HEADER "#endif /* SAPDB_UNICODECASETABLE_HPP */\n";

close (HEADER);
