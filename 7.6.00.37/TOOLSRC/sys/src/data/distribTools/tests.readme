
Readme: Testing %(prodname)s
============================

= Prerequisites =

    - Java 1.3 runtime
    - Perl 5.6
    - Perl Module XML::Parser
    - the %(prodname)s build environment
    - the %(prodname)s sources for the same release

= Installation =

    - unpack this archive in the same location that
      you unpacked the package with the database sources.
      You should have only one directory %(release)s/.
    - initialize the development environment by
      calling the script initDev_%(dirprefix)s
    - build the tests
      imf.pl alltest

= Running Tests =

    == Preparations ==

        - initialize the development environment
          if you haven't done already by
          calling the script initDev_%(dirprefix)s
        - $ cd $JTEST_ROOT (Windows: c:\> cd %JTEST_ROOT%)
        - start the x_server if it isn't already running

    == Listing available tests sequences ==

        perl jtrun.pl
        At the end of the output appears a list of
        names. These are names of test sequences that
        can be run. See below for a description of the
        existing tests

    == Running a test sequence ==

        perl jtrun.pl <sequencename>
        This will create a new database and run
        a series of tests. Although it is possible
        to specify several <sequencename>, this
        will use the same database configuration
        for all the tests. Some test require a specific
        databasse configuration.

        Some of the test will require a long time
        to run and will require a lot of disk
        activity. This could prevent the machine
        from executing other tasks.

    == Checking results ==

        - The test driver will write a summary to stdout
          containing the names of the tests run and
          the number of errors and warnings for each test.
        - The test driver will also write a protocol file
          protocols/TestOut.prt. Search for
          the word ERROR at the start of the line to
          locate tests that failed. There is also a summary
          at the end of the file. There will also be a copy
          of this file with the name TestOut<number>.prt
          so that protocols of previous runs are still
          available.
        - the analysis of errors and warnings depends
          on the test sequence. Please use the mailing
          list (see below: Support) to report any problems

= Variations =

    == Reusing databases ==

        Because initializing a database takes a long time,
        you can create a database once and reuse it for
        subsequent runs
        - perl jtrun.pl -G KEEP <sequencename>
          The database will not be dropped after the test
          has been run
        - perl jtrun.pl -G OFF,KEEP <sequencename>
          The database will not be dropped and created *before*
          the test is run

        Although it is possible to run tests using specific
        databases, this is not recommended as some
        test require certain database configurations.

    == Running individual tests ==

        perl jtrun.pl -G OFF -c tests/<sequencename>.cfg <package.class>
        - <sequencename> is the same name that you specified in
          the original call perl jtrun.pl <sequencename>
        - <package.class> can be taken from stdout:
          From: jtest--> Running test 1(1) com.sap.sapdb.oltptest.interfaces.Odbc ...
          Exec: perl jtrun.pl -G OFF -c tests/odbc.cfg com.sap.sapdb.oltptest.interfaces.Odbc

= Existing test sequences =

    - DBMTest: tests the Database Manager and
        Backup/Restore
    - sut (single user tests): tests mainly the SQL layer
    - mut (multi user test): test concurrent access
        to the database.
    - sqltest: tests the SQL layer (to replace sut).
        This sequence is also part of the sequence oltptest
    - oltptest: JDBC, Precompiler, SQL
    - oltptest_unicode: JDBC, Precompiler, SQL with
        a unicode database
    - odbc: test the ODBC library
    - odbc_unicode: tests the ODBC library with
        a unicode database

= Features not yet implemented

    - An option to run all the test sequences, each with
      it's specific database configuration

    - A protocol file of the summary information, which
      is currently written only to stdout

= Support =

    Please address questions regarding running the tests or
    interpreting the results to the %(prodname)s mailing
    list: maxdb@lists.mysql.com (http://list.mysql.com/#maxdb)

    A suitable subjectline would be:
    jtest <sequencename> ...
    Other useful information:
    - the release
    - whether you were using the sources from a published
      release or from cvs/BitKeeper
    - the platform (operating system, compiler version,
        distribution, etc.)

    If you are using a development branch, then please wait
    at least one working day before reporting problems.
    As these tests are run every night, most problems
    will have been noticed and fixed already.

