.ad 8
.bm 8
.fm 4
.bt $Copyright by   Software AG, 1994$$Page %$
.tm 12
.hm 6
.hs 3
.tt 1 $NME$Project Distributed Database System$VOS04U$
.tt 2 $$$
.tt 3 $R.Roedling$Laufzeitumgebung_Virtuelles_Terminal$1995-05-16$
***********************************************************
.nf


    ========== licence begin LGPL
    Copyright (C) 2002 SAP AG

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
    ========== licence end

.fo
.nf
.sp
Module  :       virtual_terminal_mapper
=========
.sp
Purpose : Wrapper von Pascal (T/31) auf C (virtuelles Terminal
          mit "screenlib").
.CM *-END-* purpose -------------------------------------
.sp
.cp 3
Define  :

        PROCEDURE
              sqlton    ( multi_task    : boolean ;
                    VAR term_ref : tsp_int4 ;
                    VAR desc : tsp_terminal_description ;
                    VAR ok   : boolean ) ;

        PROCEDURE
              sqltio ( term_ref : tsp_int4 ;
                    VAR   screen_buf      : tsp_screenbufaddr ;
                    VAR   attributes_buf  : tsp_screenbufaddr ;
                    refresh         : boolean ;
                    VAR   cursorline      : tsp_int2 ;
                    VAR   cursorcolumn    : tsp_int2 ;
                    VAR   hif             : tsp_hif_parms ;
                    VAR   options         : tsp_vt_options ;
                    VAR   result          : tsp_vt_result ;
                    VAR   ok              : boolean ) ;

        PROCEDURE
              sqlttable
                    ( i             : tsp_int2 ;
                    att             : tsp_vt_attrib ;
                    foreground      : tsp_vt_color ;
                    background      : tsp_vt_color ) ;

        PROCEDURE
              sqlwindow
                    ( parent_ref    : tsp_int4 ;
                    VAR position    : tsp_rectangle ;
                    VAR desc        : tsp_terminal_description;
                    VAR ok          : boolean ) ;

        PROCEDURE
              sqlwsplit (
                    term_ref        : tsp_int4 ;
                    nr_screens      : tsp_int2 ;
                    VAR desc        : tsp_terminal_description;
                    VAR offset      : tsp_int2 ;
                    VAR ok          : boolean ) ;

        PROCEDURE
              sqlwoff (
                    term_ref        : tsp_int4 ;
                    VAR screen_buf  : tsp_screenbufaddr ;
                    VAR attribute_buf : tsp_screenbufaddr ;
                    VAR color_buf   : tsp_screenbufaddr ) ;

        PROCEDURE
              sqlwdgswitch (
                    box_id          : tsp_int2 ;
                    trigger         : tsp_vt_keys ;
                    retrn           : tsp_vt_key ;
                    VAR ok          : boolean ) ;

        PROCEDURE
              sqlwdgclear (
                    box_id          : tsp_int2 ) ;

        PROCEDURE
              sqlwdgset (
                    box_id          : tsp_int2 ;
                    item_id         : tsp_int2 ;
                    VAR text        : screenline ;
                    text_len        : tsp_int2 ;
                    VAR ok          : boolean ) ;

        PROCEDURE
              sqlwdgget (
                    box_id          : tsp_int2 ;
                    item_id         : tsp_int2 ;
                    VAR text        : screenline ;
                    VAR text_len    : tsp_int2 ;
                    VAR ok          : boolean ) ;

        PROCEDURE
              sqlwtitle (
                    term_ref        : tsp_int4 ;
                    screen_nr       : tsp_int2 ;
                    VAR text        : screenline ;
                    text_len        : tsp_int2 ;
                    VAR ok          : boolean ) ;

        PROCEDURE
              sqlwscroll (
                    term_ref        : tsp_int4 ;
                    VAR rect        : tsp_rectangle ;
                    displ_x         : tsp_int2 ;
                    displ_y         : tsp_int2 ;
                    VAR ok          : boolean ) ;

        PROCEDURE
              sqlwscbar (
                    term_ref        : tsp_int4 ;
                    screen_nr       : tsp_int2 ;
                    t               : tsp_scroll ;
                    range_beg       : tsp_int2 ;
                    range_end       : tsp_int2 ;
                    pos             : tsp_int2 ;
                    VAR ok          : boolean ) ;

.CM *-END-* define --------------------------------------
.sp;.cp 3
Use     :

        FROM
              VEN04C : VEN04C ;

        PROCEDURE
              sqlcton ( VAR returnkeys_array    : c100 ;
                    VAR size_returnkeys     : tsp_int2 ;
                    VAR attributes_array    : tsp_c20;
                    VAR size_attributes     : tsp_int2 ;
                    VAR color_array         : tsp_c20 ;
                    VAR size_color          : tsp_int2 ;
                    VAR has_sysline_char    : boolean ;
                    VAR label_char          : char ;
                    VAR maxlines            : tsp_int2 ;
                    VAR maxcols             : tsp_int2 ;
                    VAR ccontent_buf        : tsp_screenbufaddr;
                    VAR cattribute_buf      : tsp_screenbufaddr;
                    VAR cgraphic            : boolean ;
                    VAR cmark               : boolean ;
                    VAR cwindows            : boolean ;
                    VAR cvton_ok            : boolean ) ;

        PROCEDURE
              sqlctio (
                    VAR  screen             : tsp_screenbufaddr ;
                    VAR  attributes         : tsp_screenbufaddr ;
                    VAR  cursorline         : tsp_int2 ;
                    VAR  cursorcolumn       : tsp_int2 ;
                    VAR  c_sk_text          : c200 ;
                    VAR  c_sys_text         : tsp_line ;
                    VAR  c_sys_attr         : tsp_line ;
                    VAR  insert_text        : tsp_vtlabel ;
                    VAR  insert_pos         : i2_2 ;
                    VAR  insert_opt         : tsp_c2 ;
                    VAR  c_vt_options       : option_string ;
                    VAR  c_returnkeys       : vt_key_string ;
                    VAR  c_reject_keys      : vt_key_string ;
                    VAR  num_of_lines       : tsp_int2 ;
                    VAR  num_of_cols        : tsp_int2 ;
                    VAR  mark_begin         : tsp_int2 ;
                    VAR  mark_end           : tsp_int2 ;
                    VAR  screen_changed     : boolean ;
                    VAR  c_keystroke        : vt_keystroke ;
                    c_refresh          : boolean ;
                    VAR  c_ok               : boolean ) ;

        PROCEDURE
              sqlcttable (
                    i                  : tsp_int2 ;
                    VAR  att_array          : tsp_c5 ;
                    foreground         : tsp_vt_color ;
                    background         : tsp_vt_color ) ;

.CM *-END-* use -----------------------------------------
.sp;.cp 3
Synonym :

.CM *-END-* synonym -------------------------------------
.sp;.cp 3
Author  : J. Hartmann
.sp
.cp 3
Created : 1987-12-01
.sp
.cp 3
Version : 1994-06-08
.sp
.cp 3
Release :  6.1.1.13 	 Date : 1995-06-14
.sp
***********************************************************
.sp
.cp 10
.fo
.oc _/1
Specification:
.sp
Die Routinen des virtuellen Terminals sind im Papier "Laufzeitumgebung"
spezifiziert.
.sp
Dieser Modul wird sowohl fuer Release 2.4.xx als auch fuer 3.y.zz
benutzt, die jeweils richtige Version wird ueber die Definition
des Symbols REL24 bzw. REL30 erzeugt.
.CM *-END-* specification -------------------------------
.sp 2
***********************************************************
.sp
.cp 10
.fo
.oc _/1
Description:

Das virtuelle Terminal ist eine Schnittstelle zwischen den betriebssystem-
unabhaengigen Komponenten und der betriebssystemabhaengigen
physikalischen Terminal.
.sp
Es ermoeglicht die Ausgabe eines kompletten Bildschirminhalts, der in
einem Bildschirmpuffer uebergeben wurde, das Einlesen von druckbaren
Zeichen von der Tastatur sowie die Reaktion auf die Betaetigung
bestimmter Tasten. Die Art der Ausgabe von Zeichen auf dem Bildschirm
(blinkend, unsichtbar ... ) wird ueber Attribute gesteuert.
.sp
Da die Nixdorf-UNIX-Bildschirmbibliothek "screenlib" nicht von Pascal
aus angesprochen werden kann, erfolgt zunaechst ein Mapping zwischen
den vom Anwenderprogramm angelieferten Datenstrukturen, wie sie im
Dokument "Laufzeitumgebung" spezifiziert wurden, und Datenstrukturen,
die problemlos an ein C-Programm uebergeben werden koennen. Insbesondere
ist es notwendig, Pascal-Records, Pascal-Sets und Pascal-Aufzaehlungsvariable
umzuwandeln, da die interne Darstellung dieser Datentypen stark vom
verwendeten Pascal-Compiler abhaengig ist.
.sp
Nach dem Mapping der Datenstrukturen erfolgt eine Verzweigung in eine
C-Prozedur, in der die eigentlichen Aufgaben der virtuellen Terminals
erfuellt werden. Nach dem Verlassen dieser Prozedur muessen die hoch-
gereichten Datenstrukturen zunaechst wieder in die spezifizierten
Pascal-Datenstrukturen umgewandelt werden, bevor die Kontrolle an die
Komponente zurueckgegeben werden kann.

.CM *-END-* description ---------------------------------
.sp 2
***********************************************************
.sp
.cp 10
.nf
.oc _/1
Structure:

.CM *-END-* structure -----------------------------------
.sp 2
**********************************************************
.sp
.cp 10
.nf
.oc _/1
.CM -lll-
Code    :


CONST
      vt_key_number           = 100 ;
      vt_option_number        = 6 ;

TYPE
      c200          = PACKED ARRAY [ 1 .. 200 ]              OF char ;
      c100          = PACKED ARRAY [ 1 .. 100 ]              OF char ;
      i2_2          = ARRAY        [ 1 .. 2 ]                OF tsp_int2 ;
      insert_string = PACKED ARRAY [ 1 .. mxsp_vtlabel ]     OF char ;
      option_string = PACKED ARRAY [ 1 .. vt_option_number ] OF char ;
      vt_key_string = PACKED ARRAY [ 1 .. vt_key_number ]    OF char ;
      screenline    = c100 ;
      vt_keystroke  = RECORD
            vt_key           : char;
            ch               : char;
            mouse_x          : tsp_int4;
            mouse_y          : tsp_int4;
      END ;


VAR

      sql04_vt_record : RECORD
            hif_old          : tsp_hif_parms ;
            options_old      : tsp_vt_options ;
            insert_label_old : tsp_vt_field ;
            returnkeys_old   : tsp_vt_keys ;
            reject_keys_old  : tsp_vt_keys ;
            sk_label_kind    : tsp_sk_label ;
            insert_text      : tsp_vtlabel ;
            insert_pos       : i2_2 ;
            insert_opt       : tsp_c2 ;
            c_sys_text       : tsp_line ;
            c_sys_attr       : tsp_line ;
            c_vt_options     : option_string ;
            c_returnkeys     : vt_key_string ;
            c_reject_keys    : vt_key_string ;
            c_sk_text        : c200 ;
      END ;

      (* Initilisieren des hif-Backup-Records "hif_old" mit Nullen ( soweit
      moeglich ) *)


(*------------------------------*)

PROCEDURE
      sql04_init_old_records ;

VAR
      i : integer ;

BEGIN
WITH sql04_vt_record DO
    BEGIN
    WITH hif_old DO
        BEGIN
        (* Softkey-Labels fehlen *)
        FOR i := 1 TO mxsp_line DO
            BEGIN
            sys_text  [i] := chr (0) ;
            sys_attr  [i] := chr (0) ;
            END ;
        (*ENDFOR*)
        FOR i := 1 TO mxsp_vtlabel DO
            BEGIN
            insert_label.text [i] := chr (0) ;
            END ;
        (*ENDFOR*)
        insert_label.lno   := 0 ;
        insert_label.colnr := 0 ;
        insert_label.att [1] := chr(0) ;
        END;
    (*ENDWITH*)
    WITH options_old DO
        BEGIN
        wait_for_input  := false ;
        usage_mode      := vt_form ;
        return_on_last  := false ;
        return_on_first := false ;
        returnkeys      := [] ;
        reject_keys     := [] ;
        bell            := false ;
        END;
    (*ENDWITH*)
    insert_label_old    := hif_old.insert_label ;
    returnkeys_old      := options_old.returnkeys ;
    reject_keys_old     := options_old.reject_keys ;
    END ;
(*ENDWITH*)
END ;

(* knack_hif zerlegt den hif-Record des sqltinout in Typen, die ohne
      Probleme an ein c-Modul uebergeben werden koennen *)
(*------------------------------*)

PROCEDURE
      sql04_knack_hif ( VAR hif : tsp_hif_parms ) ;

VAR
      i , l   : integer ;

BEGIN
WITH sql04_vt_record DO
    BEGIN
    WITH hif DO
        BEGIN
        (*      IF  hif_old.insert_label <> insert_label
              THEN    *)
        BEGIN
        (* Setzen der Position und der Attribute fuer das
              INSERT-Label *)
        insert_pos [1] := insert_label.lno ;
        insert_pos [2] := insert_label.colnr ;
        (*
              writeln ('===== insert_label.lno   = ' , insert_label.lno ) ;
              writeln ('===== insert_label.colnr = ' , insert_label.colnr ) ;
              *)
        insert_opt [1] := insert_label.att [1];
        END ;
        (* Speichern der Softkey-Beschriftungen in einem char-Array *)
        IF  sk_label_kind <> no_sk_labels
        THEN
            BEGIN
            FOR i := 1 TO csp_sk_number * 2 * mxsp_vtlabel DO
                c_sk_text [i] := ' ' ;
            (*ENDFOR*)
            IF  sk_label_kind = short_sk_labels
            THEN
                BEGIN
                (* kurze Softkey-Labels *)
                FOR l := 1 TO csp_sk_number DO
                    FOR i := 1 TO 8 DO
                        c_sk_text[(l-1)*2*mxsp_vtlabel+i] := slabels [l][i] ;
                    (*ENDFOR*)
                (*ENDFOR*)
                END
            ELSE
                BEGIN
                (* lange Softkey-Labels *)
                FOR l := 1 TO csp_sk_number DO
                    BEGIN
                    FOR i := 1 TO 8 DO
                        c_sk_text[(l-1)*2*mxsp_vtlabel+i] := llabels [l][1][i] ;
                    (*ENDFOR*)
                    FOR i := 9 TO 16 DO
                        c_sk_text[(l-1)*2*mxsp_vtlabel+i] := llabels [l][2][i-8] ;
                    (*ENDFOR*)
                    END ;
                (*ENDFOR*)
                END ;
            (*ENDIF*)
            END ;
        (*ENDIF*)
        END ;
    (*ENDWITH*)
    END ;
(*ENDWITH*)
END ;

(*------------------------------*)

PROCEDURE
      sql04_knack_options ( VAR options : tsp_vt_options ) ;
      (* Aufbereiten der Optionen fuer cvtinout, d.h. umspeichern in
      eine fuer ein c-Modul problemlos verarbeitbare Form *)

VAR
      i : integer ;
      k : tsp_vt_key ;
      returnkeys_vt : tsp_vt_keys ;

BEGIN
WITH sql04_vt_record DO
    WITH options DO
        BEGIN
        c_vt_options [1] := chr ( ord ( wait_for_input  ) ) ;
        c_vt_options [2] := chr ( ord ( usage_mode      ) ) ;
        c_vt_options [3] := chr ( ord ( return_on_last  ) ) ;
        c_vt_options [4] := chr ( ord ( return_on_first ) ) ;
        c_vt_options [5] := chr ( ord ( bell            ) ) ;
        c_vt_options [6] := chr ( ord ( mark            ) ) ;
        (* Einfuehren einer neuen Option; ist vt_character_key in dem
              returnkeys-Set enthalten, wird bei dem ersten druckbaren Zeichen
              die Kontrolle an das aufrufende Modul zurueckgegeben *)
        IF  returnkeys <> returnkeys_old
        THEN
            BEGIN
            (* Umspeichern des returnkey-Sets in ein character-Array;
                  das Ende des Arrays wird durch eine binaere Null
                  gekennzeichnet.*)
            returnkeys_vt := returnkeys - [vt_unknown] ;
            i := 1 ;
            FOR k := vt_character_key TO vt_last_key DO
                BEGIN
                IF  k IN returnkeys_vt
                THEN
                    BEGIN
                    c_returnkeys [i] := chr ( ord (k) - ord (vt_unknown) ) ;
                    i := succ (i) ;
                    END ;
                (*ENDIF*)
                END ;
            (*ENDFOR*)
            c_returnkeys [i] := chr ( 0 ) ;
            END ;
        (*ENDIF*)
        IF  reject_keys <> reject_keys_old
        THEN
            BEGIN
            i := 1 ;
            (* Umspeichern des reject_key-Sets in ein character-Array;
                  das Ende des Arrays wird durch eine binaere Null
                  gekennzeichnet.*)
            FOR k := vt_character_key TO vt_last_key DO
                BEGIN
                IF  k IN reject_keys
                THEN
                    BEGIN
                    c_reject_keys [i] := chr (ord (k) - ord (vt_unknown)) ;
                    i := succ (i) ;
                    END ;
                (*ENDIF*)
                END ;
            (*ENDFOR*)
            c_reject_keys [i] := chr ( 0 ) ;
            END ;
        (*ENDIF*)
        END ;
    (*ENDWITH*)
(*ENDWITH*)
END ;

(*------------------------------*)

PROCEDURE
      sqlton ( multi_task   : boolean ;
            VAR term_ref : tsp_int4 ;
            VAR desc     : tsp_terminal_description ;
            VAR ok       : boolean ) ;
      (* In sqlton wird das virtuelle Terminal initialisiert und dem
      aufrufenden Programm mitgeteilt, welche Eigenschaften das
      Terminal (z.B. dap4x, vt220 ...  ) hat.
      Folgende Eigenschaften werden im Record 'desc' von sqlton
      zurueckgeliefert :
      - Anzahl Zeilen auf dem Bildschirm
      - Anzahl Spalten pro Bildschirmzeile
      - Tastenbelegung ( welche Tasten gibt es ? )
      - Attributmoeglichkeiten ( welche Attribute gibt es ? )
      - gibt es Softkeys auf dem Terminal ?
      - hat das Terminal eine Status-Zeile ?
      Da die Benutzung der Bildschirm-Bibliothek
      screenlib von Pascal aus nicht moeglich ist, dient sqlton vor
      allem als Schnittstelle zwischen Pascal und dem in c geschriebenen
      Unterprogramm cvton. sqlton wandelt die von cvton hochgereichten
      Arrays in die Komponenten des Types 'terminal_description' um.
      *)

VAR
      x1                      : tsp_vt_key ;
      x2                      : tsp_vt_mode ;
      x3                      : tsp_vt_color ;
      size_returnkeys         : tsp_int2 ;
      size_attributes         : tsp_int2 ;
      size_color              : tsp_int2 ;
      returnkeys_array        : c100 ;
      attributes_array        : tsp_c20 ;
      color_array             : tsp_c20 ;
      has_sysline_char        : boolean ;
      label_char              : char ;
      cmaxlines               : tsp_int2 ;
      cmaxcols                : tsp_int2 ;
      ccontent_buf            : tsp_screenbufaddr;
      cattribute_buf          : tsp_screenbufaddr;
      cgraphic                : boolean ;
      cmark                   : boolean ;
      cwindows                : boolean ;
      cok                     : boolean ;
      i                       : integer ;

BEGIN
WITH sql04_vt_record DO
    BEGIN
    size_returnkeys := ord ( vt_last_key )   - ord ( vt_unknown ) ;
    size_attributes := ord ( vt_last_mode )  - ord ( vt_bright ) ;
    size_color      := ord ( vt_last_color ) - ord ( vt_default_color ) ;
    (* Initialisierung des Return-Parameters *)
    ok := false ;
    (* Aufruf der c-Prozedur cvton, die die eigentliche Initialisierung
          des Terminals vornimmt *)
    sqlcton ( returnkeys_array , size_returnkeys , attributes_array ,
          size_attributes , color_array , size_color, desc.has_sysline ,
          label_char , cmaxlines , cmaxcols , ccontent_buf , cattribute_buf ,
          cgraphic , cmark , cwindows , cok ) ;
    (* Es folgt nun die Umwandlung der von cvton hochgereichten Arrays
          in die entsprechenden Komponenten des Records desc *)
    IF  cok
    THEN
        BEGIN
        ok := true ;
        sql04_init_old_records ;      (* Backups initialisieren *)
        ok := true ;
        WITH desc DO
            BEGIN
            content_buf   := ccontent_buf ;
            attribute_buf := cattribute_buf ;
            num_of_lines  := cmaxlines ;
            num_of_cols   := cmaxcols  ;
            mark          := cmark ;
            windows       := cwindows ;
            (* Fuellen des Sets mit den auf dem aktuellen
                  Terminal vorhandenen Tasten *)
            returnkeys := [] ;
            FOR x1 := vt_unknown TO vt_last_key DO
                BEGIN
                IF  returnkeys_array [ ord(x1) - ord ( vt_unknown ) + 1] = chr (1)
                THEN
                    BEGIN
                    returnkeys   := returnkeys + [x1] ;
                    END;
                (*ENDIF*)
                END ;
            (*ENDFOR*)
            (* Fuellen des Sets mit den auf dem aktuellen
                  Terminal vorhandenen Attributen *)
            attributes := [] ;
            FOR x2 := vt_bright TO vt_last_mode  DO
                BEGIN
                IF  attributes_array[ ord(x2) - ord ( vt_unknown ) + 1 ] = chr (1)
                THEN
                    BEGIN
                    attributes   := attributes   + [x2] ;
                    END;
                (*ENDIF*)
                END ;
            (*ENDFOR*)
            (* Fuellen des Sets mit den auf dem aktuellen
                  Terminal vorhandenen Farben *)
            colors     := [] ;
            FOR x3 := vt_default_color TO vt_last_color DO
                BEGIN
                IF  color_array [ ord (x3) - ord ( vt_default_color ) + 1 ] = chr (1)
                THEN
                    BEGIN
                    colors  := colors + [x3] ;
                    END;
                (*ENDIF*)
                END ;
            (*ENDFOR*)
            (* has_sysline wird true, wenn das Terminal
                  eine Statuszeile besitzt *)
            (* Die Aufzaehlungsvariable sk_label_kind gibt an, ob
                  das Terminal Softkeys besitzt und wie lang gegebenen-
                  falls der Softkey-Text ist *)
            (*x       writeln ( 'label_char = ' , ord ( label_char )    ) ; *)
            CASE ord (label_char) OF
                0 :
                    labels := no_sk_labels ;
                1 :
                    labels := short_sk_labels ;
                2 :
                    labels := long_sk_labels ;
                OTHERWISE :
                    ok := false ;
                END;
            (*ENDCASE*)
            sk_label_kind := labels ;
            (*x     writeln ( 'sk_label_kind = ' , sk_label_kind ) ;        *)
            (* Anzahl Zeilen auf dem Bildschirm *)
            (*JH        maxlines := cmaxlines ;     *)
            (* Anzahl Spalten pro Zeile *)
            (*JH        maxcols  := cmaxcols ;      *)
            (*x
                  writeln ('sqlton : desc.maxlines =',desc.maxlines ) ;
                  writeln ('sqlton : desc.maxcols  =',desc.maxcols  ) ;
                  *)
            END;
        (*ENDWITH*)
        END
    ELSE
        BEGIN
        (* bool auf false ; *)
        ok := false ;
        (*  writeln('cvton nicht korrekt verlaufen') ;          *)
        END ;
    (*ENDIF*)
    sqlttable ( 0 , [              ] , vt_black , vt_white ) ;
    sqlttable ( 1 , [ vt_bright    ] , vt_black , vt_white ) ;
    sqlttable ( 2 , [ vt_invisible ] , vt_black , vt_white ) ;
    FOR i := 3 TO 15 DO
        sqlttable ( i , [            ] , vt_black , vt_white ) ;
    (*ENDFOR*)
    END;
(*ENDWITH*)
END;

(* sqltio  beschreibt die eigentliche Aufgabe des virtuellen Terminals.
      Da die Bildschirmbibliothek screenlib von Pascal aus nicht angesprochen
      werden kann, erschoepft sich die Aufgabe von sqltio vor allem im
      Umspeichern von Pascal-Records in Datenstrukturen, die die
      c-Prozedur cvtinout problemlos verarbeiten kann.
      *)
(*------------------------------*)

PROCEDURE
      sqltio ( term_ref : tsp_int4 ;
            VAR   screen_buf      : tsp_screenbufaddr ;
            VAR   attributes_buf  : tsp_screenbufaddr ;
            refresh         : boolean ;
            VAR   cursorline      : tsp_int2 ;
            VAR   cursorcolumn    : tsp_int2 ;
            VAR   hif             : tsp_hif_parms ;
            VAR   options         : tsp_vt_options ;
            VAR   result          : tsp_vt_result ;
            VAR   ok              : boolean ) ;

VAR
      i : integer ;
      c_keystroke : vt_keystroke ;
      x1 : tsp_vt_key ;

BEGIN
WITH sql04_vt_record DO
    BEGIN
    sql04_knack_hif (hif ) ;
    hif_old := hif ;
    IF  options <> options_old
    THEN
        BEGIN
        sql04_knack_options ( options ) ;
        options_old := options ;
        END ;
    (*ENDIF*)
    sqlctio ( screen_buf , attributes_buf , cursorline, cursorcolumn,
          c_sk_text,
          hif.sys_text, hif.sys_attr, hif.insert_label.text, insert_pos,
          insert_opt, c_vt_options, c_returnkeys, c_reject_keys,
          result.num_of_lines, result.num_of_cols , result.mark_begin,
          result.mark_end, result.screen_changed, c_keystroke,
          refresh, ok ) ;
    (* Belegen des Records mit der zuletzt gedrueckten Taste oder dem
          letzten
          Zeichen *)
    result.keystroke.key := vt_unknown;

    FOR x1 := vt_unknown TO vt_last_key
          DO
        IF  c_keystroke.vt_key = chr ( ord (x1) - ord ( vt_unknown ) )
        THEN
            result.keystroke.key := x1;
        (*ENDIF*)
    (*ENDFOR*)
    IF result.keystroke.key IN [ vt_mouse_down, vt_mouse_up, vt_mouse_dbl ]
    THEN
      BEGIN
      result.keystroke.mouse_x := c_keystroke.mouse_x;
      result.keystroke.mouse_y := c_keystroke.mouse_y;
      END
    ELSE
      BEGIN
      result.keystroke.ch := c_keystroke.ch ;
      END;
    END;
(*ENDWITH*)
END ;

(*------------------------------*)

PROCEDURE
      sqlttable
            ( i             : tsp_int2 ;
            att             : tsp_vt_attrib ;
            foreground      : tsp_vt_color ;
            background      : tsp_vt_color ) ;

VAR
      att_array       : tsp_c5 ;

BEGIN
WITH sql04_vt_record DO
    BEGIN
    att_array [1] := chr ( ord ( vt_bright      IN att ) ) ;
    att_array [2] := chr ( ord ( vt_inverse     IN att ) );
    att_array [3] := chr ( ord ( vt_underline   IN att ) );
    att_array [4] := chr ( ord ( vt_blink       IN att ) );
    att_array [5] := chr ( ord ( vt_invisible   IN att ) );
    sqlcttable ( i , att_array , foreground , background ) ;
    END;
(*ENDWITH*)
END ;

(*------------------------------*)

PROCEDURE
      sqlwindow
            ( parent_ref    : tsp_int4 ;
            VAR position    : tsp_rectangle ;
            VAR desc        : tsp_terminal_description;
            VAR ok          : boolean ) ;

BEGIN
ok := false ;
END ;

(*------------------------------*)

PROCEDURE
      sqlwsplit (
            term_ref        : tsp_int4 ;
            nr_screens      : tsp_int2 ;
            VAR desc        : tsp_terminal_description;
            VAR offset      : tsp_int2 ;
            VAR ok          : boolean ) ;

BEGIN
ok := false ;
END ;

(*------------------------------*)

PROCEDURE
      sqlwoff (
            term_ref        : tsp_int4 ;
            VAR screen_buf  : tsp_screenbufaddr ;
            VAR attribute_buf : tsp_screenbufaddr ;
            VAR color_buf   : tsp_screenbufaddr ) ;

BEGIN
END ;

(*------------------------------*)

PROCEDURE
      sqlwdgswitch (
            box_id          : tsp_int2 ;
            trigger         : tsp_vt_keys ;
            retrn           : tsp_vt_key ;
            VAR ok          : boolean ) ;

BEGIN
ok := false ;
END ;

(*------------------------------*)

PROCEDURE
      sqlwdgclear (
            box_id          : tsp_int2 ) ;

BEGIN
END ;

(*------------------------------*)

PROCEDURE
      sqlwdgset (
            box_id          : tsp_int2 ;
            item_id         : tsp_int2 ;
            VAR text        : screenline ;
            text_len        : tsp_int2 ;
            VAR ok          : boolean ) ;

BEGIN
ok := false ;
END ;

(*------------------------------*)

PROCEDURE
      sqlwdgget (
            box_id          : tsp_int2 ;
            item_id         : tsp_int2 ;
            VAR text        : screenline ;
            VAR text_len    : tsp_int2 ;
            VAR ok          : boolean ) ;

BEGIN
ok := false ;
END ;

(*------------------------------*)

PROCEDURE
      sqlwtitle (
            term_ref        : tsp_int4 ;
            screen_nr       : tsp_int2 ;
            VAR text        : screenline ;
            text_len        : tsp_int2 ;
            VAR ok          : boolean ) ;

BEGIN
ok := false ;
END ;

(*------------------------------*)

PROCEDURE
      sqlwscroll (
            term_ref        : tsp_int4 ;
            VAR rect        : tsp_rectangle ;
            displ_x         : tsp_int2 ;
            displ_y         : tsp_int2 ;
            VAR ok          : boolean ) ;

BEGIN
ok := false ;
END ;

(*------------------------------*)

PROCEDURE
      sqlwscbar (
            term_ref        : tsp_int4 ;
            screen_nr       : tsp_int2 ;
            t               : tsp_scroll ;
            range_beg       : tsp_int2 ;
            range_end       : tsp_int2 ;
            pos             : tsp_int2 ;
            VAR ok          : boolean ) ;

BEGIN
ok := false ;
END ;

.CM *-END-* code ----------------------------------------
.SP 2
***********************************************************
*-PRETTY-*  statements    :        129
*-PRETTY-*  lines of code :        604        PRETTY  3.09
*-PRETTY-*  lines in file :        880         1992-11-23
.PA
