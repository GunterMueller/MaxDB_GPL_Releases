.CM *ID* VCT00    VDN      changed on 1992-06-03-16.24.56 by CARSTEN   *
.CM
.ad 8
.bm 8
.fm 4
.bt $Copyright by   Software AG, 1996$$Page %$
.tm 12
.hm 6
.hs 3
.tt 1 $SQL$Project Distributed Database System$VCT00$
.tt 2 $$$
.tt 3 $Nemack/Segieth/Zimmer$Const- and Typedefinitons$1996-11-13$
***********************************************************
.nf


    ========== licence begin LGPL
    Copyright (C) 2002 SAP AG

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
    ========== licence end

.fo
.nf
.sp
Module  : CONST and TYPE Definitions for Tools
=========
.sp
Purpose : Definition of all Const and Types for VCT-Modules
.CM *-END-* purpose -------------------------------------
.sp
.cp 3
Define  :
 
.CM *-END-* define --------------------------------------
.sp;.cp 3
Use     :
 
.CM *-END-* use -----------------------------------------
.sp;.cp 3
Synonym :
 
.CM *-END-* synonym -------------------------------------
.sp;.cp 3
Author  : Ch. Nemack / C. Segieth / N. Zimmer
.sp
.cp 3
Created : 1988-07-18
.sp
.cp 3
Version : 1996-11-13
.sp
.cp 3
Release :  6.2 	 Date : 1996-11-13
.sp
***********************************************************
.sp
.cp 10
.fo
.oc _/1
Specification:
 
.CM *-END-* specification -------------------------------
.sp 2
***********************************************************
.sp
.cp 10
.fo
.oc _/1
Description:
 
.CM *-END-* description ---------------------------------
.sp 2
***********************************************************
.sp
.cp 10
.nf
.oc _/1
Structure:
 
.CM *-END-* structure -----------------------------------
.sp 2
**********************************************************
.sp
.cp 10
.nf
.oc _/1
.CM -lll-
Code    :
 
 
CONST
      cct_ampersand        = '&';
      cct_asterisk         = '*' ;
      cct_colon            = ':';
      cct_dollar           = '$';
      cct_equal            = '=';
      cct_hyphen           = '-';
      cct_komma            = ',';
      cct_l_brace          = '{' ;   (*   ( *   *)
      cct_l_parenth        = '(';
&     IF $OS = VMSP
      (* So wird vermieden, dass bei der Portierung aus einer eckigen *)
      (* Klammer die Ersatzdarstellung 'runde Klammer + Punkt' wird.  *)
      cct_l_sq_bracket     = 'ad'xc; (*   ( .   *)
      cct_r_sq_bracket     = 'bd'xc; (*   . )   *)
&     ELSE
      cct_l_sq_bracket     = '[' ;   (*   ( .   *)
      cct_r_sq_bracket     = ']' ;   (*   . )   *)
&     ENDIF
      cct_period           = '.';
      cct_plus             = '+';
      cct_quote            = '''';
      cct_r_brace          = '}' ;   (*   * )   *)
      cct_r_parenth        = ')';
      cct_semicolon        = ';';
      cct_slash            = '/' ;
      cct_underline        = '_';
      cct_what_beg         = '@(#)';
      cct_what_end         = '\00';
      cct_datelen          =     10;
      cct_maxchars         =      3;
      cct_maxcode          = 960000;
      cct_maxfromtab       =    400;
      mxct_line            = 72;
      mxct_longline        =        200;
      mxct_ulongline       =        140;
      cct_maxlines         =        400;
      cct_maxlinesofcode   =       9000;
      cct_maxlistelement   =       4000;
      cct_maxlistlength    =         10;
      cct_maxlongint       = 2147483647;
      cct_maxnum           =       1000;
      cct_maxnummodule     =         10;
      cct_maxpageno        =         10;
      cct_maxsignificants  =         16;
      cct_maxspeed         =      30000;
      cct_maxtablelength   =        350;
      cct_maxusekey        = mxsp_c28;
      cct_maxuseproc       =        100;
      cct_maxwlength       =         30;
      cct_n_author         = 'Author  :         ';
      cct_n_begin          = 'BEGIN             ';
      cct_n_changed        = 'changed           ';
      cct_n_cm             = '.CM               ';
      cct_n_code           = 'Code    :         ';
      cct_n_combeg         = '(*                ';
      cct_n_comend         = '*)                ';
      cct_n_const          = 'CONST             ';
      cct_n_define         = 'Define  :         ';
      cct_n_end            = 'END               ';
      cct_n_endpart        = '*-END-*           ';
      cct_n_error          = '+++ERROR+++       ';
      cct_n_error_in_use   = 'ERROR IN USE-PART ';
      cct_n_from           = 'FROM              ';
      cct_n_function       = 'FUNCTION          ';
      cct_n_lines_in_file  = 'lines in file :   ';
      cct_n_lines_of_code  = 'lines of code :   ';
      cct_n_modn_n_eq      = 'MODULNAME N. EQUAL';
      cct_n_module         = 'Module            ';
      cct_n_modulename     = 'Modname           ';
      cct_n_pa             = '.PA               ';
      cct_n_param_n_eq     = 'NUM PARAMS N.EQUAL';
      cct_n_prettydate     = 'Pretty            ';
      cct_n_prettyspec     = '*-PRETTY-*        ';
      cct_n_private        = 'PRIVATE           ';
      cct_n_procedure      = 'PROCEDURE         ';
      cct_n_program        = 'PROGRAM           ';
      cct_n_routine        = 'ROUTINE           ';
      cct_n_statements     = 'statements    :   ';
      cct_n_struct_lc      = 'structure         ';
      cct_n_structure      = 'Structure:        ';
      cct_n_synonym        = 'Synonym :         ';
      cct_n_tdbegin        = '(*TDBEGIN*        ';
      cct_n_tdend          = '(*TDEND*          ';
      cct_n_sp             = '.SP               ';
      cct_n_sp2            = '.SP 2             ';
      cct_n_tt1            = '.tt 1             ';
      cct_n_tt3            = '.tt 3             ';
      cct_n_type           = 'TYPE              ';
      cct_n_typn_n_eq      = 'TYPE_DEF NOT EQUAL';
      cct_n_typpar_n_eq    = 'PARAM TYPE n.EQUAL';
      cct_n_u_line         = '------------------';
      cct_n_use            = 'Use     :         ';
      cct_n_var            = 'VAR               ';
      cct_n_version        = 'Version :         ';
      cct_n_vgg00          = 'VGG00             ';
      cct_begcode          =   1;
      cct_begdef           =   9;
 
TYPE
      tct_vdn_name      = tsp_c8;
      tct_usekey        = PACKED ARRAY [ 1..74 ] OF char;
      tct_from_table    = ARRAY [ 1..cct_maxfromtab,1..2 ] OF tsp_name;
      tct_lineaddr      = ^tsp_line;
 
      tct_line          = RECORD
            adr        : tct_lineaddr;
            len        : tsp_int4;
            l          : tsp_line
      END;
 
      tct_longline = PACKED ARRAY [ 1..mxct_longline ] OF char;
      tct_long_lineaddr = ^tct_longline;
 
      tct_long_line     = RECORD
            adr        : tct_long_lineaddr;
            len        : tsp_int4;
            l          : tct_longline;
      END;
 
      tct_ulongline = PACKED ARRAY [ 1..mxct_ulongline ] OF tsp_c2;
      tct_ulong_lineaddr = ^tct_ulongline;
 
      tct_ulong_line     = RECORD
            adr        : tct_ulong_lineaddr;
            len        : tsp_int4;
            l          : tct_ulongline;
      END;
 
      tct_linepointer   = ^tct_linenode;
 
      tct_linenode      = RECORD
            d_line     : tct_line;
            next       : tct_linepointer
      END;
 
      tct_tablepointer  = ^tct_table_code;
      tct_table_code    = ARRAY [ 1..cct_maxlinesofcode ] OF tct_line;
      tct_do            = (
            do_searchvdn,
            do_searchmod,
            do_searchdef,
            do_workdef,
            do_searchuse,
            do_workuse,
            do_searchsyn,
            do_worksyn,
            do_searchdate,
            do_searchversion,
            do_searchstruct,
            do_workstruct,
            do_searchcode,
            do_workcode,
            do_prettyresult,
            do_workend
            );
      tct_vcsymb        = (
            vcs_co,
            vcs_ty,
            vcs_va,
            vcs_pr,
            vcs_fu,
            vcs_fr,
            vcs_be,
            vcs_en,
            vcs_main,
            vcs_empty);
      tct_delim         = SET OF char;
      tct_usepointer    = ^tct_usenode;
 
      tct_usenode       = RECORD
            n_key      : tct_usekey;
            line_p     : tct_linepointer;
            left       : tct_usepointer;
            right      : tct_usepointer
      END;
 
 
      tct_param         = RECORD
            ok         : boolean;
            va         : boolean;
            n          : tsp_knl_identifier;
            ty         : tsp_knl_identifier;
      END;
 
      tct_tab           = ARRAY [ 1..200 ] OF tct_param;
 
      tct_paramtab      = RECORD
            numt       : tsp_int4;
            pt         : tct_tab;
      END;
 
      tct_z_arr         = ARRAY [ 1..100 ] OF tct_line;
      tct_syn_table     = ARRAY [ 1..200, 1..3 ] OF tsp_knl_identifier;
 
      tct_result        = RECORD
            e_nam      : tsp_name;
            e_vdn      : tsp_name;
            e_artn     : tsp_name;
            e_artv     : tsp_name;
            e_art      : tsp_name;
      END;
 
      (*=======================================*)
 
CONST
      mxct_token    = mxsp_c8;
      mxct_errtxt   = mxsp_c60;
      (* Predefined symbols *)
      cct_c_mach    = 'MACH    ' ;
      cct_c_kind    = 'KIND    ' ;
      cct_c_trace   = 'TRACE   ' ;
      cct_c_comp    = 'COMP    ' ;
      cct_c_os      = 'OS      ' ;
      cct_c_osspec  = 'OSSPEC  ' ;
      cct_c_mode    = 'MODE    ' ;
 
TYPE
      (* Targon/35 *)
      tct_token     = tsp_c8;
      tct_errortext = tsp_c60;
 
.CM *-END-* code ----------------------------------------
.SP 2 
***********************************************************
*-PRETTY-*  statements    :          0
*-PRETTY-*  lines of code :        212        PRETTY  3.09 
*-PRETTY-*  lines in file :        317         1992-11-23 
.PA 
