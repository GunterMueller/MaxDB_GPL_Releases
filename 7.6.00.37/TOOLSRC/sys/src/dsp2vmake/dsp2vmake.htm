<HTML>
<HEAD>
  <TITLE>dsp =&gt; vmake</TITLE>
</HEAD>
<BODY>
<H1>
  dsp =&gt; vmake
</H1>
<P>
  <HR>
<H3>
  Installation:
</H3>
<OL>
  <LI>
    es ist Teil der normalen SAP DB Entwicklungstools
</OL>
<H3>
  Aufruf-Optionen:
</H3>
<P>
zus&auml;tzlich zur Kommandozeile k&ouml;nnen diese auch in einer
Environment-Variablen DSP2VMAKE_OPTION angegeben werde.
<P>
<DL>
  <DT>
    -inDEV &lt;directory&gt;
  <DD>
    das oberste Source-Verzeichnis (im allgemeinen $SRC)
  <DT>
    -outSys &lt;directory&gt;
  <DD>
    $OWN/sys
  <DT>
    -config &lt;configFile&gt;
  <DD>
    format: Python source. kann defaults f&uuml;r -inDEC und -outSys enthalten
  <DT>
    -v
  <DD>
    verbose, schreibt die Namen der generierten Dateien nach Standardout.
  <DT>
    -ignore &lt;filename&gt;
  <DD>
    eine Textdatei. F&uuml;r alle Treffer in dieser Datei werden keine
    vmake-Descriptions generiert<BR>
    Der Treffer kann irgendwo innerhalb des Dateinamens erfolgen:
    <UL>
      <LI>
	\aps\ ber&uuml;cksichtigt keine Verzeichnisse unterhalb von aps
      <LI>
	xyz.dsp would exclude any file named xyz.dsp
    </UL>
  <DT>
    -nodep
  <DD>
    generiert nicht #include-Anh&auml;ngigkeiten (sollte nur zum Debugging verwendet
    werden)
  <DT>
    -projectfiles &lt;filename&gt;
  <DD>
    add projects in file &lt;filename&gt;.
    <UL>
      <LI>
	&lt;filename&gt; is relative to -inDEV
      <LI>
	filenames inside this file are relative to -inDEV
      <LI>
	# (hashmark) can be used as a comment
      <LI>
	non-existant files abort the script
    </UL>
  <DT>
    -globals &lt;vmake def&gt;
  <DD>
    generiert &lt;vmake def&gt; in every .com-Description (default: *.cpp -except)
  <DT>
    -warn
  <DD>
    generiert Warnungen, wenn die gleiche Source-Datei mit unterschiedlichen
    Optionen benutzt wird.
  <DT>
    -smartVariants
  <DD>
    Varianten wie ReleaseSim werden als eine Kombination der Varianten Release
    und Sim interpretiert. Dies funktioniert nur f&uuml;r Release und Debug.
  <DT>
    -ignoreVariant &lt;variant name&gt;
  <DD>
    alles, was im Zusammenhang mit &lt;variant name&gt; steht, wird nicht in
    die generierten Dateien &uuml;bernommen
  <DT>
    -onlyVariant &lt;variant name&gt;
  <DD>
    nur hier angegebene Varianten werden generiert
  <DT>
    -unifiedSys
  <DD>
    (veraltet, da $SRC == $DESC nunmehr der Default ist)
  <DT>
    -cache
  <DD>
    (veraltet)
  <DT>
    -dumbVariants
  <DD>
    (veraltet, siehe -smartVariants)
</DL>
<H3>
  Link-Descriptions:
</H3>
<UL>
  <LI>
    f&uuml;r jede .dsp-Datei in einem Verzeichnisbaum wird ein vmake-Description
    erzeugt (je nach # TARGTYPE .lib, .dll, .lnk, .mac), aus ltt\LTT.dps wird
    sys/desc/ltt/LTT.lib
  <LI>
    Es k&ouml;nnen auch Workspace-Dateien (.dsw) in der Kommandozeile angegeben
    werden, in diesem Fall werden alle in der Datei referenzierten .dsp-Dateien
    konvertiert
  <LI>
    Es k&ouml;nnen auch Projekt-Dateien (.dsp) in der Kommandozeile angegeben
    werden. Dies ist aber nur zum Debugging sinnvoll, da andernfalls die erzeugten
    .com-Descriptions nicht vollst&auml;ndig sind.
  <LI>
    Source-Dateien aus dem gleichen Verzeichnis werden &uuml;ber die
    'defaultlayer'-Notation aufgef&uuml;hrt. Alle anderen Dateien werden
    vmake-absolut aufgef&uuml;hrt (d.h.relativ zu $SRC), die Dateien sind sortiert.
  <LI>
    von einer DLL genutzte .lib-Dateien werden
    <UL>
      <LI>
	per '-lib=...' angegeben, wenn es sich um Systemlibs handelt
      <LI>
	per '::path' angegeben, wenn es sich um eine selbst zu erzeugende Lib handelt.
	Dies wird dadurch entschieden, da&szlig; in einem ersten Schritt die namen
	und Typen von allen angesprochenen .dsp-Dateien ermittelt wird.
    </UL>
  <LI>
    das Kopieren der .lst-Dateien wird bislang nicht in die Descriptions
    &uuml;bernommen.
</UL>
<H3>
  .com-Descriptions
</H3>
<UL>
  <LI>
    f&uuml;r jedes Verzeichnis wird eine .com-Description erzeugt, die alle
    .cpp-Dateien enth&auml;lt
  <LI>
    intern wird imkdep aufgerufen, um die Abh&auml;ngigkeiten zu pflegen.
  <LI>
    /I-Optionen werden nicht &uuml;bernommen, wenn sie sich auf relative
    Verzeichnisse beziehen. Es wird davon ausgegangen, da&szlig; alle
    #include-Anweisungen k&uuml;nftig den Dateinamen relativ zu $SRC oder $SRC/APO
    enthalten.
  <LI>
    Sonstige Optionen werden auf den allgemeinen Fall (*) &uuml;bertragen, wenn
    sie f&uuml;r alle Sourcen dieses Verzeichnisses gelten.(z.B. sys\desc\lcsim.com)
</UL>
<H3>
  Anpassungen
</H3>
<P>
Die Datei $SRC/specialCases.py (alternative $TOOL/bin/specialCases.py)
enth&auml;lt zus&auml;tzliche Regeln, mit der man die Generierung der
Descriptions beinflussen kann. Diese Datei ist eine Python-Source und exportiert
die folgenden Variablen und Funktionen:
<DL>
  <DT>
    getAdditionalLayer ():
  <DD>
    liefert ein List von Verzeichnissen, f&uuml;r die .com-Description angelegt
    werden sollen, Dies sind z.B. Verzeichnisse, die nur Header-Dateien enthalten.
  <DT>
    cases
  <DD>
    eine List mit Python-Objekten. Diese enthalten ein Attribut filename (auf
    diese Datei wird der case angewandt) und eine Methode apply. So sorgt z.B.
    ein Append-Objekt daf&uuml;r, da&szlig; an bestimmte Descriptions noch ein
    festgelegter Text angeh&auml;ngt wird.
  <DT>
    optionsToIgnore
  <DD>
    Compiler-Optionen, die nicht mit in die Descriptions &uuml;bernommen werden
    (sie sind so allgemein, da&szlig; dsie in toolvars.pl gesetzt werden)
  <DT>
    shortOptionsToIgnore
  <DD>
    siehe oben. Diese Optionen haben in der Regel noch ein angeh&auml;ngtes Argument
    ('/W' gilt f&uuml;r /W3, /W4 etc.
  <DT>
    definesToIgnore
  <DD>
    /D Optionen, die nicht mit in die Descriptions &uuml;bernommen werden sollen
  <DT>
    specialLibraries
  <DD>
    eine Liste von Paaren (regular expression, replacement). Entspricht ein in
    der .dsp-Datei referenzierte Library einer der regular expression, so wird
    der Eintrag in der generierten Description durch das entsprechende replacement
    ersetzt:<BR>
    <CODE>(r'(?P&lt;dir&gt;.*)[/\\]liboms.lib', '-lib=%(dir)s/liboms')</CODE><BR>
    aus <CODE>$(LC_LIB)/liboms.lib</CODE> wird <CODE>-lib=$(LC_LIB)/liboms</CODE>
  <DT>
    filesToIgnore
  <DD>
    eine Liste von Filename-Pattern wie sie auch in der Datei f&uuml;r die Option
    -ignore angegeben werden k&ouml;nnen.<BR>
</DL>
<P>
  <HR>
<P>
2002-03-12 Daniel Dittmar
</BODY></HTML>
