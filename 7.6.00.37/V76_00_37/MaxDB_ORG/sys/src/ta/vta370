/* @lastChanged: "1998-02-16 12:00"
 
 * @filename:   vta370
 * @purpose:    "TA_driver_testroutines"
 * @release:    7.1.0.0
 * @see:        "-.-"
 *
 * @Copyright (c) 1998-2005 SAP AG"
 */
 
.tt 1 $SAP$LiveCache$VTA370$
.tt 3 $$TA_driver_testroutines$2000-07-24$
 
.nf
 
 .nf

    ========== licence begin  GPL
    Copyright (c) 1998-2005 SAP AG

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
    ========== licence end
.fo

 
.fo
***********************************************************
 
Module  : TA_driver_testroutines
 
Define  :
 
        PROCEDURE
              t370tests (VAR upg : tta_user_proc_globals;
                    VAR first      : tsp00_Sname;
                    VAR second     : tsp00_Sname;
                    command        : tsp1_packet_ptr;
                    VAR rcv_packet : tsp1_packet_ptr;
                    VAR returncode : tsp00_Int2);
 
.CM *-END-* define --------------------------------------
.sp;.cp 3
Use     :
 
        FROM
              TA_driver_procedures : VTA320;
 
        PROCEDURE
              t320readterminal (VAR upg : tta_user_proc_globals;
                    VAR lineinfo  : tsp00_DataLine;
                    VAR last_line : boolean);
 
        PROCEDURE
              t320buildbuffer (VAR line1 : tsp00_DataLine;
                    VAR cmd_segm : tsp1_segment);
 
        PROCEDURE
              t320finish_part (VAR upg : tta_user_proc_globals;
                    packet_ptr : tsp1_packet_ptr;
                    VAR part   : tsp1_part);
 
        PROCEDURE
              t320parseid_part (VAR upg : tta_user_proc_globals;
                    snd_packet   : tsp1_packet_ptr;
                    VAR snd_segm : tsp1_segment;
                    VAR parsid   : tsp00_C12);
 
        PROCEDURE
              t320dbs_send (VAR upg : tta_user_proc_globals;
                    snd_packet     : tsp1_packet_ptr;
                    VAR rcv_packet : tsp1_packet_ptr;
                    VAR returncode : tsp00_Int2);
&       ifdef TRACE
 
      ------------------------------ 
 
        FROM
              TA_test_procedures : VTA02;
 
        PROCEDURE
              t02int4 (debug : tut_debug;
                    nam      : tsp00_Sname;
                    int      : tsp00_Int4);
 
        PROCEDURE
              t02switch (VAR pfkey : tut_pfkey);
 
        PROCEDURE
              t02limited_switch (VAR pfkey : tut_pfkey);
 
        PROCEDURE
              t02maxbuflength (VAR pfkey : tut_pfkey);
 
        PROCEDURE
              t02minbuf (min_wanted : boolean);
 
        PROCEDURE
              t02moveobj (debug  : tut_debug;
                    VAR moveobj  : tut_param_ln;
                    moveobj_size : tsp00_Int4;
                    startpos     : tsp00_Int4;
                    endpos       : tsp00_Int4);
&       endif
 
      ------------------------------ 
 
        FROM
              TA_RTE_functions : VTA05;
 
        PROCEDURE
              t05sqlexec (VAR term : tut_terminal;
                    VAR cmd_ln     : tsp00_Line;
                    VAR errtext    : tsp00_ErrText;
                    VAR retcode    : tsp00_Int2);
 
      ------------------------------ 
 
        FROM
              TA_terminal_IO : VTA09;
 
        PROCEDURE
              t09fileinput (VAR term : tut_terminal;
                    VAR batch_fn     : tsp00_VFilename;
                    VAR param_line   : tut_param_ln;
                    VAR errtext      : tsp00_ErrText;
                    VAR return_code  : tsp00_Int2);
 
        PROCEDURE
              t09holding (VAR term   : tut_terminal;
                    VAR pf_key : tut_pfkey);
 
        PROCEDURE
              t09put20 (VAR term : tut_terminal;
                    text : tsp00_C20; text_attr : char);
 
        PROCEDURE
              t09putmsg (VAR t09      : tut_terminal;
                    VAR msg           : tsp00_Line;
                    is_warning        : boolean;
                    immediate_display : boolean);
 
        PROCEDURE
              t09returncode_set (VAR t09 : tut_terminal;
                    retcode : integer);
 
      ------------------------------ 
 
        FROM
              TA_write_protfile : VTA12;
 
        PROCEDURE
              t12write_prot (VAR refer : tut_vf_fileref;
                    VAR ln    : tsp00_Line;
                    length    : integer;
                    VAR error : integer);
 
      ------------------------------ 
 
        FROM
              GG_edit_routines : VGG17;
 
        PROCEDURE
              g17int4to_line (int : tsp00_Int4;
                    with_zero     : boolean;
                    int_len       : integer;
                    ln_pos        : integer;
                    VAR ln        : tsp00_Line);
 
      ------------------------------ 
 
        FROM
              UT_auxiliary_procedures : VUT05;
 
        PROCEDURE
              u05sqlexec_errmsg (VAR term : tut_terminal;
                    VAR protfile : tut_vf_fileref;
                    VAR errtext  : tsp00_ErrText;
                    retcode      : tsp00_Int2);
 
        PROCEDURE
              u05switch (VAR term   : tut_terminal;
                    VAR protfile    : tut_vf_fileref;
                    sql_packet      : tsp1_packet_ptr;
                    VAR sql_ref     : tsp00_Int4;
                    switch_cmd      : tsp00_C20;
                    VAR pfkey       : tut_pfkey;
                    VAR sql_retcode : tsp00_Int2);
 
      ------------------------------ 
 
        FROM
              UT_hostfile : VUT06;
 
        PROCEDURE
              u06hostfile_err (VAR term : tut_terminal;
                    VAR protfile : tut_vf_fileref;
                    write_prot   : boolean;
                    VAR errtext  : tsp00_ErrText);
 
      ------------------------------ 
 
        FROM
              RTE_driver : VEN102;
 
        PROCEDURE
              sqlaconnect (uid      : tsp00_TaskId;
                    VAR servernode  : tsp00_NodeId;
                    VAR serverdb    : tsp00_DbName;
                    service         : tsp00_Service;
                    packet_cnt      : tsp00_Int4;
                    VAR reference   : tsp00_Int4;
                    VAR packet_size : tsp00_Int4;
                    VAR packet_list : tsp1_packet_list;
                    VAR errtext     : tsp00_ErrText;
                    VAR returncode  : tsp1_comm_error);
 
        PROCEDURE
              sqlarelease (reference : tsp00_Int4);
 
      ------------------------------ 
 
        FROM
              Kernel_move_and_fill : VGG101;
 
        PROCEDURE
              SAPDB_PascalForcedMove (
                    source_upb  : tsp00_Int4;
                    destin_upb  : tsp00_Int4;
                    source      : tsp00_MoveObjPtr;
                    source_pos  : tsp00_Int4;
                    destin      : tsp00_MoveObjPtr;
                    destin_pos  : tsp00_Int4;
                    length      : tsp00_Int4);
 
        PROCEDURE
              SAPDB_PascalForcedFill (
                    size        : tsp00_Int4;
                    m           : tsp00_MoveObjPtr;
                    pos         : tsp00_Int4;
                    len         : tsp00_Int4;
                    fillchar    : char);
 
      ------------------------------ 
 
        FROM
              Packet_handling : VSP26;
 
        PROCEDURE
              s26first_segment_init (packet_ptr : tsp1_packet_ptr;
                    segm_kind                   : tsp1_segment_kind;
                    VAR first_segm_ptr          : tsp1_segment_ptr);
 
        PROCEDURE
              s26new_part_init (packet_ptr : tsp1_packet_ptr;
                    VAR cmd_segm           : tsp1_segment;
                    VAR new_part_ptr       : tsp1_part_ptr);
 
      ------------------------------ 
 
        FROM
              RTE-Extension-30 : VSP30;
 
        PROCEDURE
              s30map (VAR code_t : tsp00_Ctable;
                    VAR source   : tsp00_MoveObj;
                    spos         : tsp00_Int4;
                    VAR dest     : tsp00_MoveObj;
                    dpos         : tsp00_Int4;
                    length       : tsp00_Int4);
 
.CM *-END-* use -----------------------------------------
.sp;.cp 3
Synonym :
 
        PROCEDURE
              t02moveobj;
 
              tsp00_MoveObj tut_param_ln
 
.CM *-END-* synonym -------------------------------------
.sp;.cp 3
Author  : ElkeZ
.sp
.cp 3
Created : 1983-08-26
.sp
.cp 3
.sp
.cp 3
Release :      Date : 2000-07-24
.sp
***********************************************************
.sp
.cp 10
.fo
.oc _/1
Specification:
 
.oc _/1;1.Allgemeines
.sp
Dieses Modul stellt die Teile f?ur den Driver VTA31 zur Verf?ugung,
die nur f?ur den Testbetrieb, also nicht f?ur eine Kundenversion
gedacht sind.
.br
Das betrifft die M?oglichkeiten, die Befehle aus einem File zu lesen,
die Initialisierung der Datenbank mittels eines Files zu machen,
das getrennte Parsen und Ausf?uhren eines Befehls und die M?oglichkeit
der Dateneingabe.
.sp 2;.oc _/1;2.Prozeduren
.sp
FILE_HANDLER
.sp
Setzt mit Hilfe der Prozedur t09set_screen_input das Eingabemedium
auf das angegebene File.
.sp 2
V_INIT
.sp
Diese Prozedur liest aus dem angegebenen File den Configuration-Record,
tr?agt ihn in den Auftragsblock ein und schickt diesen an das VDN-System.
.sp 2
T37_NICHT_MOEGLICH
.sp
Gibt eine Meldung aus, da?z das gew?ahlte Testkommando in der
aktuellen Version nicht zur Verf?ugung steht.
.sp 2
T37TESTHILFEN
.sp;Alle Testkommandos werden durch diese Prozedur behandelt.
.br
In den meisten F?allen werden nur die von VTA31 verwendeten Variablen
umgesetzt, ansonsten eine der oben genannten Prozeduren
bzw. eine aus VTA35 oder VTA36 aufgerufen.
.CM *-END-* specification -------------------------------
.sp 2
***********************************************************
.sp
.cp 10
.fo
.oc _/1
Description:
 
.CM *-END-* description ---------------------------------
.sp 2
***********************************************************
.sp
.cp 10
.nf
.oc _/1
Structure:
 
.CM *-END-* structure -----------------------------------
.sp 2
**********************************************************
.sp
.cp 10
.nf
.oc _/1
.CM -lll-
Code    :
 
 
CONST
      n_cms        = 'CMS         ';
      n_count      = 'COUNT       ';
      n_unix       = 'UNIX        ';
      n_statistics = 'STATISTICS  ';
 
 
(*------------------------------*) 
 
PROCEDURE
      ta370call_os (VAR upg : tta_user_proc_globals;
            VAR term     : tut_terminal;
            VAR cmd_segm : tsp1_segment);
 
VAR
      i         : integer;
      retcode   : tsp00_Int2;
      errtext   : tsp00_ErrText;
      ln        : tsp00_Line;
      char_size : integer;
      offset    : integer;
 
BEGIN
IF  upg.term_simulation = tasim_unicode
THEN
    BEGIN
    char_size := 2;
    IF  upg.swap = sw_normal
    THEN
        offset := 0
    ELSE
        offset := -1
    (*ENDIF*) 
    END
ELSE
    BEGIN
    char_size := 1;
    offset    := 0
    END;
(*ENDIF*) 
ln := term.blankline;
i  := 1;
WITH cmd_segm DO
    WHILE (i*char_size <= sp1p_buf_len) AND (i <= LINE_MXSP00) DO
        BEGIN
        ln[ i ] := sp1p_buf[ i*char_size + offset ];
        i       := succ (i)
        END;
    (*ENDWHILE*) 
(*ENDWITH*) 
t05sqlexec (term, ln, errtext, retcode);
u05sqlexec_errmsg (term, upg.prot.refer, errtext, retcode)
END;
 
(*------------------------------*) 
 
PROCEDURE
      ta370file_handler (VAR upg : tta_user_proc_globals;
            VAR cmd     : tsp00_MoveObj;
            cmdlength   : tsp00_Int4;
            VAR retcode : tsp00_Int2);
 
CONST
      c_write_prot = true;
 
VAR
      i, k     : integer;
      blankfn  : tsp00_VFilename;
      param_ln : tut_param_ln;
      errtext  : tsp00_ErrText;
 
BEGIN
i:= 1;
WHILE (cmd [ i ] = ' ') AND (i < cmdlength) DO
    i := i + 1;
(*ENDWHILE*) 
(* skip "FILE"/"RUN" *)
WHILE (cmd[ i ] <> ' ') AND (i < cmdlength) DO
    i := i + 1;
(*ENDWHILE*) 
k := 1;
SAPDB_PascalForcedFill (sizeof (param_ln), @param_ln, 1, sizeof (param_ln), ' ');
WHILE (i <= cmdlength) AND (k <= sizeof (param_ln)) DO
    BEGIN
    param_ln [ k ] := cmd [ i ];
    i := i + 1;
    k := k + 1
    END;
(*ENDWHILE*) 
t09returncode_set (upg.term^, 0);
blankfn := upg.term^.blankfilename;
&ifdef trace
t02moveobj (debug_ta, param_ln, sizeof (param_ln), 1, sizeof(param_ln));
&endif
t09fileinput (upg.term^, blankfn, param_ln, errtext, retcode);
IF  retcode <> 0
THEN
    u06hostfile_err (upg.term^, upg.prot.refer, c_write_prot, errtext)
(*ENDIF*) 
END;
 
(*------------------------------*) 
 
PROCEDURE
      ta37kernel_switch (VAR upg : tta_user_proc_globals;
            snd_packet    : tsp1_packet_ptr;
            VAR first_str : tsp00_Sname);
 
VAR
      to_release      : boolean;
      sql_comm_err    : tsp1_comm_error;
      dummy_retcode   : tsp00_Int2;
      i               : integer;
      snd_packet_size : tsp00_Int4;
      packet_list     : tsp1_packet_list;
      switch_cmd      : tsp00_C20;
      errt            : tsp00_ErrText;
 
BEGIN
upg.pfkey    := pf_none;
to_release   := false;
sql_comm_err := sp1ce_ok;
IF  upg.reference = 0
THEN
    BEGIN
    sqlaconnect (upg.procid, upg.servernode, upg.serverdb,
          sql_user, 1, upg.reference, snd_packet_size, packet_list,
          errt, sql_comm_err);
    IF  sql_comm_err <> sp1ce_ok
    THEN
        BEGIN
        t09put20 (upg.term^, 'SQLACONNECT NOT OK  ', cut_bright_protected);
        upg.reference := 0
        END
    ELSE
        BEGIN
        snd_packet := packet_list [1];
&       ifdef trace
        t02int4 (debug_ta, 'packet size ', snd_packet_size);
&       endif
        snd_packet^.sp1_header.sp1h_varpart_size :=  snd_packet_size -
              sizeof (snd_packet^.sp1_header);
        to_release := true;
        END;
    (*ENDIF*) 
    END;
(*ENDIF*) 
IF  sql_comm_err = sp1ce_ok
THEN
    BEGIN
    switch_cmd := bsp_c20;
    FOR i := 1 TO SNAME_MXSP00 DO
        switch_cmd [i] := first_str [i];
    (*ENDFOR*) 
    u05switch (upg.term^, upg.prot.refer, snd_packet, upg.reference,
          switch_cmd, upg.pfkey, dummy_retcode)
    END;
(*ENDIF*) 
IF  (sql_comm_err = sp1ce_ok) AND to_release
THEN
    BEGIN
    sqlarelease (upg.reference);
    IF  sql_comm_err = sp1ce_ok
    THEN
        upg.reference := 0
    (*ENDIF*) 
    END
(*ENDIF*) 
END;
 
(* PTS 1106167 E.Z. *)
(*------------------------------*) 
 
PROCEDURE
      ta370drop_old_parsids (VAR upg    : tta_user_proc_globals;
            snd_packet     : tsp1_packet_ptr;
            VAR rcv_packet : tsp1_packet_ptr;
            VAR returncode : tsp00_Int2);
 
VAR
      i                  : integer;
      snd_segm           : tsp1_segment_ptr;
      cmd_part           : tsp1_part_ptr;
      c12                : tsp00_C12;
      in_line            : tsp00_DataLine;
 
BEGIN
IF  (snd_packet <> NIL)
    AND (upg.reference > 0)
THEN
    FOR i := 1 TO upg.p_count DO
        BEGIN
        s26first_segment_init (snd_packet, sp1sk_cmd, snd_segm);
        upg.curr_segm := snd_segm;
        snd_segm^.sp1c_mess_type := sp1m_dbs;
        snd_segm^.sp1c_with_info := false;
        s26new_part_init (snd_packet, snd_segm^, cmd_part);
        cmd_part^.sp1p_part_kind := sp1pk_command;
        c12 := 'DROP PARSEID';
        SAPDB_PascalForcedMove (sizeof(c12), sizeof(tsp00_Line),
              @c12, 1, @in_line.text, 1, sizeof(c12));
        in_line.pos    := 12;
        in_line.length := 12;
        t320buildbuffer (in_line, snd_segm^);
        t320finish_part (upg, snd_packet, cmd_part^);
        t320parseid_part (upg, snd_packet, snd_segm^, upg.parsing[ i ]);
        t320dbs_send (upg, snd_packet, rcv_packet, returncode)
        END
    (*ENDFOR*) 
(*ENDIF*) 
END;
 
(*------------------------------*) 
 
PROCEDURE
      t370tests (VAR upg    : tta_user_proc_globals;
            VAR first      : tsp00_Sname;
            VAR second     : tsp00_Sname;
            command        : tsp1_packet_ptr;
            VAR rcv_packet : tsp1_packet_ptr;
            VAR returncode : tsp00_Int2);
 
VAR
      done       : boolean;
      l          : tsp00_DataLine;
      b          : boolean;
      i          : integer;
      virt       : tsp00_C8;
 
BEGIN
upg.pfkey := pf_none;
done      := true;
IF  first = cta_n_file
THEN
    WITH upg.curr_segm^ DO
        ta370file_handler (upg,
              sp1p_buf, sp1p_buf_len, returncode)
    (*ENDWITH*) 
ELSE
    BEGIN
    IF  (first = cta_n_switch        ) OR
        (first = cta_n_switch_limited) OR
        (first = cta_n_minbuf        ) OR
        (first = cta_n_maxbuf        ) OR
        (first = cta_n_buflimit      )
    THEN
        ta37kernel_switch (upg, command, first)
    ELSE
        BEGIN
&       ifdef TRACE
        IF  (first = cta_n_tswitch        ) OR
            (first = cta_n_tswitch_limited) OR
            (first = cta_n_tminbuf        ) OR
            (first = cta_n_tmaxbuf        ) OR
            (first = cta_n_tbuflimit      )
        THEN
            BEGIN
            IF  first = cta_n_tswitch
            THEN
                t02switch (upg.pfkey)
            ELSE
                IF  first = cta_n_tswitch_limited
                THEN
                    t02limited_switch (upg.pfkey)
                ELSE
                    IF  first = cta_n_tminbuf
                    THEN
                        t02minbuf (true)
                    ELSE
                        IF  first = cta_n_tmaxbuf
                        THEN
                            t02minbuf (false)
                        ELSE
                            IF  first = cta_n_tbuflimit
                            THEN
                                t02maxbuflength (upg.pfkey)
                            (*ENDIF*) 
                        (*ENDIF*) 
                    (*ENDIF*) 
                (*ENDIF*) 
            (*ENDIF*) 
            END
        ELSE
&           endif
            IF  (first = n_cms) OR (first = n_unix)
            THEN
                ta370call_os (upg, upg.term^, upg.curr_segm^)
            ELSE
                done:= false
            (*ENDIF*) 
        (*ENDIF*) 
        END;
    (*ENDIF*) 
    returncode := 0
    END;
(*ENDIF*) 
IF  NOT done AND (upg.pfkey = pf_none)
THEN
    BEGIN
    done:= true;
    IF  first = cta_n_tswitch
    THEN
        FOR i:= 1 TO 4 DO
            t320readterminal (upg, l, b)
        (*ENDFOR*) 
    ELSE
        IF  first = cta_n_parsing
        THEN
            (* PTS 1106167 E.Z. *)
            BEGIN
            IF  second <> 'NOINIT      '
            THEN
                BEGIN
                ta370drop_old_parsids (upg, command, rcv_packet, returncode);
                upg.p_count:= 0
                END;
            (*ENDIF*) 
            upg.execution:= tek_only_parsing;
            END
        ELSE
            IF  first = cta_n_pars_execute
            THEN
                upg.execution:= tek_parsing_executing
            ELSE
                IF  first = cta_n_pars_then_ex
                THEN
                    upg.execution:= tek_pars_then_execute
                ELSE
                    IF  first = cta_n_executing
                    THEN
                        upg.execution:= tek_only_executing
                    ELSE
                        IF  first = cta_n_syntax
                        THEN
                            upg.execution:= tek_only_syntax
                        ELSE
                            (* PTS 1111575 E.Z. *)
                            IF  (first = cta_n_load) AND
                                (second <> n_statistics)
                            THEN
                                upg.execution:= tek_dbsload
                            ELSE
                                done:= false;
                            (*ENDIF*) 
                        (*ENDIF*) 
                    (*ENDIF*) 
                (*ENDIF*) 
            (*ENDIF*) 
        (*ENDIF*) 
    (*ENDIF*) 
    IF  NOT done
    THEN
        BEGIN
        done:= true;
        IF  first = cta_n_time
        THEN
            BEGIN
            upg.time:= true;
            (* vcinit (upg.procid) *)
            END
        ELSE
            IF  first = cta_n_notime
            THEN
                upg.time:= false
            ELSE
                IF  first = cta_n_real
                THEN
                    upg.rtime:= true
                ELSE
                    IF  first = cta_n_noreal
                    THEN
                        upg.rtime:= false
                    ELSE
                        IF  first = cta_n_sum
                        THEN
                            BEGIN
                            upg.sum:= true;
                            upg.virt:= 0;
                            END
                        ELSE
                            IF  first = cta_n_endsum
                            THEN
                                BEGIN
                                upg.sum:= false;
                                virt:= 'virtual:';
                                l.text   := upg.term^.blankline;
                                l.pos    := 0;
                                l.length := 1;
                                FOR i:= 1 TO 8 DO
                                    l.text[ i ]:= virt[ i ];
                                (*ENDFOR*) 
                                l.pos:= 10;
                                l.length:= 11;
                                g17int4to_line (upg.virt, false, 11,
                                      l.pos, l.text);
                                l.pos:= l.pos + 11;
                                l.length:= l.length + 11;
                                t09putmsg (upg.term^, l.text, false, false);
                                t09holding (upg.term^, upg.pfkey);
                                (*t begin*)
                                t12write_prot (upg.prot.refer,
                                      l.text, 23, i);
                                (*t end*)
                                END
                            ELSE
                                IF  first = n_count
                                THEN
                                    BEGIN
                                    virt:= 'ANZAHL :';
                                    l.text   := upg.term^.blankline;
                                    l.pos    := 0;
                                    l.length := 1;
                                    FOR i:= 1 TO 8 DO
                                        l.text[ i ]:= virt[ i ];
                                    (*ENDFOR*) 
                                    l.pos:= 10;
                                    l.length:= 11;
                                    g17int4to_line (upg.cnt, false, 11,
                                          l.pos, l.text);
                                    l.pos:= l.pos + 11;
                                    l.length:= l.length + 11;
                                    t09putmsg (upg.term^, l.text,false,false);
                                    t09holding (upg.term^, upg.pfkey);
                                    (*t begin*)
                                    t12write_prot (upg.prot.refer,
                                          l.text,23,i);
                                    (*t end*)
                                    END
                                ELSE
                                    IF  first = cta_n_data_input
                                    THEN
                                        upg.is_data_input:= true
                                    ELSE
                                        IF  first = cta_n_no_data_input
                                        THEN
                                            upg.is_data_input:= false
                                        ELSE
                                            done := false;
                                        (*ENDIF*) 
                                    (*ENDIF*) 
                                (*ENDIF*) 
                            (*ENDIF*) 
                        (*ENDIF*) 
                    (*ENDIF*) 
                (*ENDIF*) 
            (*ENDIF*) 
        (*ENDIF*) 
        END;
    (*ENDIF*) 
    IF  NOT done
    THEN
        BEGIN
        done:= true;
        IF  first = cta_n_parameter
        THEN
            upg.appl_param_infos := true
        ELSE
            IF  first = cta_n_no_parameter
            THEN
                upg.appl_param_infos := false
            ELSE
                IF  first = cta_n_masscmd
                THEN
                    upg.mass_cmd := true
                ELSE
                    IF  first = cta_n_no_masscmd
                    THEN
                        upg.mass_cmd := false
                    (*ENDIF*) 
                (*ENDIF*) 
            (*ENDIF*) 
        (*ENDIF*) 
        END
    (*ENDIF*) 
    END
(*ENDIF*) 
END;
 
.CM *-END-* code ----------------------------------------
.SP 2 
***********************************************************
.PA 
