MASSCMD.vdnts
 
Enter command:
FILE XINITDBK !
 
Enter command:
FILE XRESTORE !
 
Enter command:
DBMCLI SUPERDBA,COLDUSER!
UTIL_CONNECT SUPERDBA,COLDUSER!
OK
 
BACKUP_RESTORE XINITDB DATA!
OK
Returncode           0
Date                 DATEXXXX
Time                 TIMEYYYY
Server               <servernode>
Database             <serverdb>
Kernel Version       KERNEL    vv.vv.vv Build bbb-bbb-bbb-bbb
Pages Transferred    000
Pages Left           0
Volumes              1
Medianame            xinitdb
Location             xinitdb.sav
Errortext
Label                <label>
Is Consistent        true
First LOG Page       000
Last LOG Page
DB Stamp 1 Date      DATEXXXX
DB Stamp 1 Time      TIMEYYYY
DB Stamp 2 Date
DB Stamp 2 Time
Page Count           000
Devices Used         1
Database ID          <servernode>:<serverdb>_DATEXXXX_<timestamp>
Max Used Data Page  000
Converter Page Count 8
 
UTIL_EXECUTE CLEAR LOG!
OK
 
DB_ONLINE!
OK
 
UTIL_RELEASE!
OK
 
UTIL_CONNECT SUT,SUT!
OK
 
UTIL_RELEASE!
OK
 
BYE!
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT!
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T ( A CHAR ( 8) KEY, B CHAR (12), C DATE) !
 
Enter command:
CREATE TABLE T_SHADOW LIKE T !
 
Enter command:
CREATE TRIGGER TINS FOR T AFTER INSERT EXECUTE (
INSERT KERN.T_SHADOW VALUES (:A,:B,:C);
) !
 
Enter command:
 
PARSING !
 
Enter command:
MSELECT A,B,C INTO :A,:B,:C FROM T WHERE A > :D!
parsing idnr :       1
 
Enter command:
 
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MSELECT T!
32767
2
Parsing idnr :      1
 
c 8 'aaa'
 
***ERROR    100 Row not found                                              0001
 
Enter command:
PARSING !
 
Enter command:
MINSERT T VALUES (:A, :B, :C) !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MINSERT    T!
32767
4
Parsing idnr :      1
 
c 8 'aaa' c 12 'eins' C 10 '19940824'
c 8 'bbb' c 12 'zwei' C 10 '19940824'
c 8 'ccc' c 12 'drei' C 10 '19940824'
c 8 'ddd' c 12 'vier' C 10 '19940824'
 
resultcount :                     4
 
Enter command:
NODATA !
 
Enter command:
PARS_EXECUTE !
 
Enter command:
SELECT * FROM T !
 
resultcount :               unknown
 
Enter command:
FETCH!
 
A        | B            | C
---------+--------------+-----------
aaa      | eins         | 19940824
bbb      | zwei         | 19940824
ccc      | drei         | 19940824
ddd      | vier         | 19940824
 
resultcount :                     4
 
Enter command:
SELECT * FROM T_SHADOW !
 
resultcount :               unknown
 
Enter command:
FETCH!
 
A        | B            | C
---------+--------------+-----------
aaa      | eins         | 19940824
bbb      | zwei         | 19940824
ccc      | drei         | 19940824
ddd      | vier         | 19940824
 
resultcount :                     4
 
Enter command:
PARSING !
 
Enter command:
MUPDATE T SET C = DATE WHERE B = :A !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MUPDATE    T!
32767
-5
Parsing idnr :      1
 
c 12 'neun'
c 12 'neun'
c 12 'neun'
c 12 'neun'
c 12 'neun'
 
resultcount :                     0
 
Enter command:
MUPDATE    T!
32767
5
Parsing idnr :      1
 
c 12 'neun'
c 12 'neun'
c 12 'neun'
c 12 'neun'
c 12 'neun'
 
***ERROR    100 Row not found                                              0005
 
Enter command:
PARS_EXECUTE!
 
Enter command:
NODATA !
 
Enter command:
SELECT * FROM T !
 
resultcount :               unknown
 
Enter command:
FETCH !
 
A        | B            | C
---------+--------------+-----------
aaa      | eins         | 19940824
bbb      | zwei         | 19940824
ccc      | drei         | 19940824
ddd      | vier         | 19940824
 
resultcount :                     4
 
Enter command:
DROP TABLE T !
 
Enter command:
DIAGNOSE SHARE PARSE DROP !
 
Enter command:
CREATE TABLE T ( A CHAR ( 4) BYTE KEY, B CHAR (12) DEFAULT 'def-val') !
 
Enter command:
PARSING !
 
Enter command:
MINSERT T VALUES (:A, :B) !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MINSERT    T!
32767
4
Parsing idnr :      1
 
b 4 61616161 D
b 4 62626262 D
b 4 63636363 D
b 4 64646464 D
 
resultcount :                     4
 
Enter command:
NODATA !
 
Enter command:
PARS_EXECUTE !
 
Enter command:
SELECT * FROM T !
 
resultcount :               unknown
 
Enter command:
FETCH!
 
A        | B
---------+-------------
61616161 | def-val
62626262 | def-val
63636363 | def-val
64646464 | def-val
 
resultcount :                     4
 
Enter command:
DROP TABLE T !
 
Enter command:
DIAGNOSE SHARE PARSE DROP!
 
Enter command:
CREATE TABLE T ( A CHAR ( 8) KEY, B CHAR (12)) !
 
Enter command:
PARSING !
 
Enter command:
MINSERT T VALUES (:A, :B) !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MINSERT    T!
32767
1
Parsing idnr :      1
 
c 8 'ccc' c 12 'drei'
 
resultcount :                     1
 
Enter command:
NODATA !
 
Enter command:
PARS_EXECUTE !
 
Enter command:
SELECT * FROM T !
 
resultcount :               unknown
 
Enter command:
FETCH!
 
A        | B
---------+-------------
ccc      | drei
 
resultcount :                     1
 
Enter command:
PARSING !
 
Enter command:
MINSERT T VALUES (:A, :B) !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MINSERT    T!
32767
4
Parsing idnr :      1
 
c 8 'aaa' c 12 'eins'
c 8 'bbb' c 12 'zwei'
c 8 'ccc' c 12 'drei'
c 8 'ddd' c 12 'vier'
 
***ERROR    200 Duplicate key                                              0003
 
Enter command:
NODATA !
 
Enter command:
PARS_EXECUTE !
 
Enter command:
SELECT * FROM T !
 
resultcount :               unknown
 
Enter command:
FETCH!
 
A        | B
---------+-------------
aaa      | eins
bbb      | zwei
ccc      | drei
 
resultcount :                     3
 
Enter command:
PARSING !
 
Enter command:
MINSERT T VALUES (:A, :B) !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MINSERT    T!
32767
2
Parsing idnr :      1
 
c 8 'aaa' c 12 'eins'
c 8 'bbb' c 12 'zwei'
 
***ERROR    200 Duplicate key                                              0001
 
Enter command:
PARSING !
 
Enter command:
MSELECT COUNT(*) FROM T WHERE A > :A !
parsing idnr :       1
 
Enter command:
SELECT COUNT(*) FROM T WHERE A > :A !
parsing idnr :       2
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MSELECT    T!
32767
2
Parsing idnr :      1
wrong number for array command
 
c 8 'aaa'
 
***ERROR  -3005 Invalid SQL statement                                      0001
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MSELECT    T!
32767
1
Parsing idnr :      1
 
c 8 'aaa'
 
resultcount :                     1
 
Enter command:
PARSING!
 
Enter command:
MSELECT B FROM T WHERE A > :A GROUP BY B HAVING MAX(A) > 's'!
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MSELECT    T!
32767
2
Parsing idnr :      1
wrong number for array command
 
c 8 'ccc'
 
***ERROR  -3005 Invalid SQL statement                                      0001
 
Enter command:
NODATA !
 
Enter command:
PARSING!
 
Enter command:
MSELECT * FROM T WHERE A > :A UNION SELECT * FROM T WHERE B <> :B !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MSELECT    T!
32767
2
Parsing idnr :      1
wrong number for array command
 
c 8 'ccc'
 
***ERROR  -3005 Invalid SQL statement                                      0001
 
Enter command:
PARSING !
 
Enter command:
MSELECT * FROM T, T T1 WHERE T.A = :A AND T.A = T1.A ORDER BY 1 !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MSELECT    T!
32767
2
Parsing idnr :      1
 
c 8 'aaa'
c 8 'bbb'
 
resultcount :                     2
 
Enter command:
NODATA !
 
Enter command:
PARS_THEN_EX !
 
Enter command:
FETCH INTO :A, :B, :C, :D !
 
A        | B            | A        | B
---------+--------------+----------+-------------
aaa      | eins         | aaa      | eins
bbb      | zwei         | bbb      | zwei
 
resultcount :                     2
 
Enter command:
SELECT * FROM T, T T1 WHERE T.A IN ('aaa', 'bbb') AND T.A=T1.A
       ORDER BY 1 !
 
resultcount :                     2
 
Enter command:
FETCH INTO :A, :B, :C, :D !
 
A        | B            | A        | B
---------+--------------+----------+-------------
aaa      | eins         | aaa      | eins
bbb      | zwei         | bbb      | zwei
 
resultcount :                     2
 
Enter command:
PARSING !
 
Enter command:
MSELECT * FROM T T1 WHERE A = :A AND A =
      ANY (SELECT A FROM T WHERE T.A = T1.A)
      ORDER BY 1 !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MSELECT    T!
32767
2
Parsing idnr :      1
wrong number for array command
 
c 8 'aaa'
c 8 'bbb'
 
***ERROR  -3005 Invalid SQL statement                                      0001
 
Enter command:
PARSING !
 
Enter command:
NODATA !
 
Enter command:
MSELECT * FROM T WHERE A >= :A !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MSELECT    T!
32767
-2
Parsing idnr :      1
 
c 8 'aaa'
c 8 'ddd'
 
resultcount :                     3
 
Enter command:
MSELECT    T!
3
2
Parsing idnr :      1
 
c 8 'ccc'
c 8 'bbb'
 
resultcount :                     6
 
Enter command:
NODATA !
 
Enter command:
PARS_THEN_EX !
 
Enter command:
FETCH INTO :A, :B !
 
A        | B
---------+-------------
aaa      | eins
bbb      | zwei
ccc      | drei
ccc      | drei
bbb      | zwei
ccc      | drei
 
resultcount :                     6
 
Enter command:
FETCH POS (1) INTO :A, :B !
 
A                 :  aaa
B                 :  eins
 
Enter command:
FETCH POS (6) INTO :A, :B !
 
A                 :  ccc
B                 :  drei
 
Enter command:
FETCH POS (7) INTO :A, :B !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
PARSING !
 
Enter command:
MDECLARE ERG CURSOR FOR SELECT COUNT(*) FROM T WHERE A > :A !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MDECLARE   T!
32767
1
Parsing idnr :      1
 
c 8 'aaa'
 
resultcount :                     1
 
Enter command:
PARSING!
 
Enter command:
MDECLARE ERG1 CURSOR FOR
    SELECT * FROM T, T T1 WHERE T.A = :A AND T.A = T1.A ORDER BY 1 !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MDECLARE   T!
32767
2
Parsing idnr :      1
 
c 8 'aaa'
c 8 'bbb'
 
resultcount :                     2
 
Enter command:
NODATA !
 
Enter command:
PARS_THEN_EX !
 
Enter command:
FETCH ERG1 INTO :A, :B, :C, :D !
 
A        | B            | EXPRESSION1 | EXPRESSION2
---------+--------------+-------------+-------------
aaa      | eins         | aaa         | eins
bbb      | zwei         | bbb         | zwei
 
resultcount :                     2
 
Enter command:
PARSING !
 
Enter command:
MDECLARE ERG2 CURSOR FOR SELECT * FROM T WHERE A >= :A !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MDECLARE   T!
32767
-1
Parsing idnr :      1
 
c 8 'aaa'
 
resultcount :                     3
 
Enter command:
MDECLARE   T!
3
-2
Parsing idnr :      1
 
c 8 'ccc'
c 8 'bbb'
 
resultcount :                     6
 
Enter command:
MDECLARE   T!
6
-2
Parsing idnr :      1
 
c 8 'aaa'
c 8 'ddd'
 
resultcount :                     9
 
Enter command:
MDECLARE   T!
9
2
Parsing idnr :      1
 
c 8 'ccc'
c 8 'bbb'
 
resultcount :                    12
 
Enter command:
NODATA !
 
Enter command:
PARS_THEN_EX !
 
Enter command:
FETCH ERG2 INTO :A, :B !
 
A        | B
---------+-------------
aaa      | eins
bbb      | zwei
ccc      | drei
ccc      | drei
bbb      | zwei
ccc      | drei
aaa      | eins
bbb      | zwei
ccc      | drei
ccc      | drei
bbb      | zwei
ccc      | drei
 
resultcount :                    12
 
Enter command:
FETCH POS (1) ERG2 INTO :A, :B !
 
A                 :  aaa
B                 :  eins
 
Enter command:
FETCH POS (6) ERG2 INTO :A, :B !
 
A                 :  ccc
B                 :  drei
 
Enter command:
FETCH POS (7) ERG2 INTO :A, :B !
 
A                 :  aaa
B                 :  eins
 
Enter command:
PARSING !
 
Enter command:
MINSERT T VALUES (:A, :B) !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MINSERT    T!
32767
2
Parsing idnr :      1
 
c 8 'ddd' c 12 'vier'
c 8 'eee' c 12 'fuenf'
 
resultcount :                     2
 
Enter command:
NODATA !
 
Enter command:
PARS_EXECUTE !
 
Enter command:
SELECT * FROM T !
 
resultcount :               unknown
 
Enter command:
FETCH!
 
A        | B
---------+-------------
aaa      | eins
bbb      | zwei
ccc      | drei
ddd      | vier
eee      | fuenf
 
resultcount :                     5
 
Enter command:
PARSING !
 
Enter command:
MUPDATE T SET B = :B KEY A = :A !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MUPDATE    T!
32767
3
Parsing idnr :      1
 
c 12 'neua' c 8 'yyy'
c 12 'neub' c 8 'bbb'
c 12 'neuc' c 8 'ccc'
 
resultcount :                     2
 
Enter command:
NODATA !
 
Enter command:
PARS_EXECUTE !
 
Enter command:
SELECT * FROM T !
 
resultcount :               unknown
 
Enter command:
FETCH!
 
A        | B
---------+-------------
aaa      | eins
bbb      | neub
ccc      | neuc
ddd      | vier
eee      | fuenf
 
resultcount :                     5
 
Enter command:
CREATE UNIQUE INDEX "t.b"
 ON T( B ) !
 
Enter command:
DIAGNOSE SHARE PARSE DROP!
 
Enter command:
PARSING !
 
Enter command:
MUPDATE T SET B = :B KEY A = :A !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MUPDATE    T!
32767
3
Parsing idnr :      1
 
c 12 'neud' c 8 'aaa'
c 12 'neud' c 8 'bbb'
c 12 'neue' c 8 'ccc'
 
***ERROR    250 Duplicate secondary key:t.b                                0002
 
Enter command:
NODATA !
 
Enter command:
PARS_EXECUTE !
 
Enter command:
SELECT * FROM T !
 
resultcount :               unknown
 
Enter command:
FETCH!
 
A        | B
---------+-------------
aaa      | neud
bbb      | neub
ccc      | neuc
ddd      | vier
eee      | fuenf
 
resultcount :                     5
 
Enter command:
DROP INDEX "t.b" !
 
Enter command:
DIAGNOSE SHARE PARSE DROP!
 
Enter command:
PARSING !
 
Enter command:
MUPDATE T SET B = :B KEY A = :A !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MUPDATE    T!
32767
2
Parsing idnr :      1
 
c 12 'neu1' c 8 'bbb'
c 12 'neu2' c 8 'ccc'
 
resultcount :                     2
 
Enter command:
NODATA !
 
Enter command:
PARS_EXECUTE !
 
Enter command:
SELECT * FROM T !
 
resultcount :               unknown
 
Enter command:
FETCH!
 
A        | B
---------+-------------
aaa      | neud
bbb      | neu1
ccc      | neu2
ddd      | vier
eee      | fuenf
 
resultcount :                     5
 
Enter command:
PARSING !
 
Enter command:
MUPDATE T SET B = :B WHERE A > :A !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MUPDATE    T!
32767
2
Parsing idnr :      1
 
c 12 'upd1' c 8 'aaa'
c 12 'upd2' c 8 'bbb'
 
resultcount :                     7
 
Enter command:
NODATA !
 
Enter command:
PARS_EXECUTE !
 
Enter command:
SELECT * FROM T !
 
resultcount :               unknown
 
Enter command:
FETCH!
 
A        | B
---------+-------------
aaa      | neud
bbb      | upd1
ccc      | upd2
ddd      | upd2
eee      | upd2
 
resultcount :                     5
 
Enter command:
PARSING !
 
Enter command:
MDELETE T KEY A = :A !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MDELETE    T!
32767
2
Parsing idnr :      1
 
c 8 'ccc'
c 8 'ddd'
 
resultcount :                     2
 
Enter command:
NODATA !
 
Enter command:
PARS_EXECUTE !
 
Enter command:
SELECT * FROM T !
 
resultcount :               unknown
 
Enter command:
FETCH!
 
A        | B
---------+-------------
aaa      | neud
bbb      | upd1
eee      | upd2
 
resultcount :                     3
 
Enter command:
CREATE TABLE T1 LIKE T !
 
Enter command:
SELECT * FROM T !
 
resultcount :               unknown
 
Enter command:
FETCH!
 
A        | B
---------+-------------
aaa      | neud
bbb      | upd1
eee      | upd2
 
resultcount :                     3
 
Enter command:
PARSING!
 
Enter command:
MINSERT T1 SELECT * FROM T WHERE A > :A IGNORE DUPLICATES !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MINSERT    T!
32767
2
Parsing idnr :      1
 
c 8 'aaa'
c 8 'ccc'
 
resultcount :                     2
 
Enter command:
PARS_EXECUTE !
 
Enter command:
SELECT * FROM T1 !
 
resultcount :               unknown
 
Enter command:
FETCH !
 
A        | B
---------+-------------
bbb      | upd1
eee      | upd2
 
resultcount :                     2
 
Enter command:
DELETE T1 !
 
resultcount :                     2
 
Enter command:
DIAGNOSE SHARE PARSE DROP!
 
Enter command:
PARSING!
 
Enter command:
MINSERT T1 SELECT DISTINCT * FROM T WHERE A > :A !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MINSERT    T!
32767
2
Parsing idnr :      1
wrong number for array command
 
c 8 'aaa'
c 8 'ccc'
 
***ERROR  -3005 Invalid SQL statement                                      0001
 
Enter command:
PARS_EXECUTE !
 
Enter command:
DELETE T1 !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
DIAGNOSE SHARE PARSE DROP!
 
Enter command:
PARSING!
 
Enter command:
MINSERT T1 (A) SELECT MAX(A) FROM T WHERE A > :A !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MINSERT    T!
32767
2
Parsing idnr :      1
wrong number for array command
 
c 8 'aaa'
c 8 'ccc'
 
***ERROR  -3005 Invalid SQL statement                                      0001
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MINSERT    T!
32767
1
Parsing idnr :      1
 
c 8 'aaa'
 
resultcount :                     1
 
Enter command:
PARS_EXECUTE !
 
Enter command:
SELECT * FROM T1 !
 
resultcount :               unknown
 
Enter command:
FETCH !
 
A        | B
---------+-------------
eee      | ????????????
 
resultcount :                     1
 
Enter command:
DELETE T1 !
 
resultcount :                     1
 
Enter command:
DROP TABLE T !
 
Enter command:
DROP TABLE T1 !
 
Enter command:
DIAGNOSE SHARE PARSE DROP!
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T ( A CHAR ( 8) KEY, B CHAR (12), S LONG) !
 
Enter command:
COMMIT !
 
Enter command:
PARSING !
 
Enter command:
MINSERT T VALUES (:A, :B, :S) !
parsing idnr :       1
 
Enter command:
PARSING !
 
Enter command:
MINSERT T (A,B,S) VALUES (:A, :B, :S) !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MINSERT    T!
32767
-2
Parsing idnr :      1
 
c 8 'aaa' c 12 'eins' l 120 'Das ist der "aaa"-String'
c 8 'bbb' c 12 'zwei' l 150 'laber bbb blubber usw.  '
 
resultcount :                     2
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MINSERT    T!
2
-2
Parsing idnr :      1
 
c 8 'ccc' c 12 'drei' c 32
c 8 'ddd' c 12 'vier' l 200 'd soll auch noch was abkriegen '
 
resultcount :                     4
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MINSERT    T!
4
4
Parsing idnr :      1
 
c 8 'eee' c 12 'eins' l 120 'Das ist der "eee"-String'
c 8 'fff' c 12 'zwei' l 150 'lafer fff bluffer usw.  '
c 8 'ccc' c 12 'drei' l 100 'wird sowieso nix draus'
c 8 'hhh' c 12 'vier' l 200 'h soll auch noch was abkriegen '
 
***ERROR    200 Duplicate key                                              0003
 
Enter command:
NODATA !
 
Enter command:
PARS_EXECUTE !
 
Enter command:
SELECT *, S FROM T !
 
resultcount :               unknown
 
Enter command:
FETCH!
 
A                 :  aaa
B                 :  eins
S                 :  Das ist der "aaa"-StringDas ist der "aaa"-StringDa
S                 :  Das ist der "aaa"-StringDas ist der "aaa"-StringDa
-----------------------------------------------------------------------
A                 :  bbb
B                 :  zwei
S                 :  laber bbb blubber usw.  laber bbb blubber usw.  la
S                 :  laber bbb blubber usw.  laber bbb blubber usw.  la
-----------------------------------------------------------------------
A                 :  ccc
B                 :  drei
S                 :  ?????
S                 :  ?????
-----------------------------------------------------------------------
A                 :  ddd
B                 :  vier
S                 :  d soll auch noch was abkriegen d soll auch noch wa
S                 :  d soll auch noch was abkriegen d soll auch noch wa
-----------------------------------------------------------------------
A                 :  eee
B                 :  eins
S                 :  Das ist der "eee"-StringDas ist der "eee"-StringDa
S                 :  Das ist der "eee"-StringDas ist der "eee"-StringDa
-----------------------------------------------------------------------
A                 :  fff
B                 :  zwei
S                 :  lafer fff bluffer usw.  lafer fff bluffer usw.  la
S                 :  lafer fff bluffer usw.  lafer fff bluffer usw.  la
 
resultcount :                     6
 
Enter command:
PARS_THEN_EX !
 
Enter command:
SELECT *, S FROM T !
 
resultcount :               unknown
 
Enter command:
FETCH INTO :A, :B, :S, :S1 !
 
A                 :  aaa
B                 :  eins
S                 :  Das ist der "aaa"-StringDas ist der "aaa"-StringDa
S                 :  Das ist der "aaa"-StringDas ist der "aaa"-StringDa
-----------------------------------------------------------------------
A                 :  bbb
B                 :  zwei
S                 :  laber bbb blubber usw.  laber bbb blubber usw.  la
S                 :  laber bbb blubber usw.  laber bbb blubber usw.  la
-----------------------------------------------------------------------
A                 :  ccc
B                 :  drei
S                 :  ?????
S                 :  ?????
-----------------------------------------------------------------------
A                 :  ddd
B                 :  vier
S                 :  d soll auch noch was abkriegen d soll auch noch wa
S                 :  d soll auch noch was abkriegen d soll auch noch wa
-----------------------------------------------------------------------
A                 :  eee
B                 :  eins
S                 :  Das ist der "eee"-StringDas ist der "eee"-StringDa
S                 :  Das ist der "eee"-StringDas ist der "eee"-StringDa
-----------------------------------------------------------------------
A                 :  fff
B                 :  zwei
S                 :  lafer fff bluffer usw.  lafer fff bluffer usw.  la
S                 :  lafer fff bluffer usw.  lafer fff bluffer usw.  la
 
resultcount :                     6
 
Enter command:
PARS_EXECUTE !
 
Enter command:
ROLLBACK !
 
Enter command:
SELECT COUNT(*) INTO :A FROM T !
 
EXPRESSION1       :            0
 
Enter command:
PARSING !
 
Enter command:
MINSERT T VALUES (:A, :B, :S) !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MINSERT    T!
32767
1
Parsing idnr :      1
 
c 8 'ccc' c 12 'drei' l 120 'Das ist der urspruengliche "ccc"-String'
 
resultcount :                     1
 
Enter command:
NODATA !
 
Enter command:
PARS_EXECUTE !
 
Enter command:
SELECT *, S FROM T !
 
resultcount :               unknown
 
Enter command:
FETCH!
 
A                 :  ccc
B                 :  drei
S                 :  Das ist der urspruengliche "ccc"-StringDas ist der
S                 :  Das ist der urspruengliche "ccc"-StringDas ist der
 
resultcount :                     1
 
Enter command:
PARSING !
 
Enter command:
MINSERT T VALUES (:A, :B, :S) !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MINSERT    T!
32767
4
Parsing idnr :      1
 
c 8 'aaa' c 12 'eins' c 32
c 8 'bbb' c 12 'zwei' c 32
c 8 'ccc' c 12 'drei' c 32
c 8 'ddd' c 12 'vier' c 32
 
***ERROR    200 Duplicate key                                              0003
 
Enter command:
NODATA !
 
Enter command:
PARS_EXECUTE !
 
Enter command:
SELECT *, S FROM T !
 
resultcount :               unknown
 
Enter command:
FETCH!
 
A                 :  aaa
B                 :  eins
S                 :  ?????
S                 :  ?????
-----------------------------------------------------------------------
A                 :  bbb
B                 :  zwei
S                 :  ?????
S                 :  ?????
-----------------------------------------------------------------------
A                 :  ccc
B                 :  drei
S                 :  Das ist der urspruengliche "ccc"-StringDas ist der
S                 :  Das ist der urspruengliche "ccc"-StringDas ist der
 
resultcount :                     3
 
Enter command:
PARS_THEN_EX !
 
Enter command:
SELECT *, S FROM T !
 
resultcount :               unknown
 
Enter command:
FETCH INTO :A, :B, :S, :S1 !
 
A                 :  aaa
B                 :  eins
S                 :  ?????
S                 :  ?????
-----------------------------------------------------------------------
A                 :  bbb
B                 :  zwei
S                 :  ?????
S                 :  ?????
-----------------------------------------------------------------------
A                 :  ccc
B                 :  drei
S                 :  Das ist der urspruengliche "ccc"-StringDas ist der
S                 :  Das ist der urspruengliche "ccc"-StringDas ist der
 
resultcount :                     3
 
Enter command:
SYNTAX !
 
Enter command:
MINSERT T SET A = :A !
 
Enter command:
PARS_EXECUTE !
 
Enter command:
DROP TABLE T !
 
Enter command:
DIAGNOSE SHARE PARSE DROP!
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE TBTCP(S1 INT, S2 INT) !
 
Enter command:
CREATE TABLE TRIGTAB(TABNAME  CHAR(32), FLAGTRIG CHAR) !
 
Enter command:
CREATE TRIGGER TTT FOR TBTCP AFTER DELETE, INSERT, UPDATE
EXECUTE (
SELECT TABNAME FROM USER.TRIGTAB WHERE TABNAME = 'TBTCP';
IF $RC = 100
THEN
BEGIN
INSERT INTO USER.TRIGTAB VALUES('TBTCP','X');
END
ELSE
UPDATE USER.TRIGTAB SET FLAGTRIG='X'
   WHERE TABNAME='TBTCP' AND FLAGTRIG= 'X';
IF $RC <> 0 AND $RC <> 100 THEN
STOP($RC, 'SHADOW UPGRADE TRIGGER ON TABLE TBTCP FAILED');
) !
 
Enter command:
COMMIT !
 
Enter command:
PARSING !
 
Enter command:
MINSERT TBTCP VALUES (:A, :B) !
parsing idnr :       1
 
Enter command:
INSERT TBTCP VALUES (:A, :B) !
parsing idnr :       2
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
INSERT T!
Parsing idnr :      2
 
n 10 1   n 10 2
 
Enter command:
MINSERT    T!
32767
4
Parsing idnr :      1
 
n 10 1   n 10 2
n 10 2   n 10 2
n 10 3   n 10 2
n 10 4   n 10 2
 
resultcount :                     4
 
Enter command:
 
PARS_EXECUTE !
 
Enter command:
NODATA !
 
Enter command:
SELECT * FROM TRIGTAB!
 
resultcount :               unknown
 
Enter command:
FETCH!
 
TABNAME                          | FLAGTRIG
---------------------------------+---------
TBTCP                            | X
 
resultcount :                     1
 
Enter command:
SELECT * FROM TBTCP !
 
resultcount :               unknown
 
Enter command:
FETCH!
 
S1          | S2
------------+------------
          1 |           2
          1 |           2
          2 |           2
          3 |           2
          4 |           2
 
resultcount :                     5
 
Enter command:
DROP TABLE TBTCP!
 
Enter command:
DROP TABLE TRIGTAB!
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T ( K INT PRIMARY KEY, A CHAR (40) )!
 
Enter command:
INSERT INTO T VALUES (1, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')!
 
Enter command:
INSERT INTO T VALUES (2, 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb')!
 
Enter command:
DECLARE C CURSOR FOR SELECT * FROM T FOR UPDATE !
tablename    : "KERN"."T"
 
resultcount :               unknown
 
Enter command:
MFETCH C !
3
 
K           | A
------------+-----------------------------------------
          1 | aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
          2 | bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
 
Enter command:
FETCH FIRST C !
 
K                 :            1
A                 :  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
 
Enter command:
MFETCH C !
1
 
K           | A
------------+-----------------------------------------
          2 | bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
 
Enter command:
UPDATE T SET A = 'new not physical built' WHERE CURRENT OF C!
 
resultcount :                     1
 
Enter command:
SELECT * FROM T !
 
resultcount :               unknown
 
Enter command:
FETCH!
 
K           | A
------------+-----------------------------------------
          1 | aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
          2 | new not physical built
 
resultcount :                     2
 
Enter command:
 
DECLARE C CURSOR FOR SELECT * FROM T FOR UPDATE FOR REUSE!
tablename    : "KERN"."T"
 
resultcount :                     2
 
Enter command:
MFETCH C !
3
 
K           | A
------------+-----------------------------------------
          1 | aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
          2 | new not physical built
 
Enter command:
FETCH FIRST C !
 
K                 :            1
A                 :  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
 
Enter command:
MFETCH C !
1
 
K           | A
------------+-----------------------------------------
          2 | new not physical built
 
Enter command:
UPDATE T SET A = 'new for reuse' WHERE CURRENT OF C!
 
resultcount :                     1
 
Enter command:
SELECT * FROM T !
 
resultcount :               unknown
 
Enter command:
FETCH!
 
K           | A
------------+-----------------------------------------
          1 | aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
          2 | new for reuse
 
resultcount :                     2
 
Enter command:
ROLLBACK RELEASE !
 
Enter command:
FILE SHUTDWNK !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE SHUTDOWN !
 
Enter command:
DBMCLI SUPERDBA,COLDUSER!
UTIL_CONNECT SUT,SUT!
OK
 
DB_OFFLINE!
OK
 
BYE!
 
Enter command:
VDNEXIT !
SESSION END
 
