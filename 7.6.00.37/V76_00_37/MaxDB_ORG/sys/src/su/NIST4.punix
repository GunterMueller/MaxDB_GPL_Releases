NIST4.vdnts
 
Enter command:
FILE XINITDBK !
 
Enter command:
FILE XRESTORE !
 
Enter command:
DBMCLI SUPERDBA,COLDUSER!
UTIL_CONNECT SUPERDBA,COLDUSER!
OK
 
BACKUP_RESTORE XINITDB DATA!
OK
Returncode           0
Date                 DATEXXXX
Time                 TIMEYYYY
Server               <servernode>
Database             <serverdb>
Kernel Version       KERNEL    vv.vv.vv Build bbb-bbb-bbb-bbb
Pages Transferred    000
Pages Left           0
Volumes              1
Medianame            xinitdb
Location             xinitdb.sav
Errortext
Label                <label>
Is Consistent        true
First LOG Page       000
Last LOG Page
DB Stamp 1 Date      DATEXXXX
DB Stamp 1 Time      TIMEYYYY
DB Stamp 2 Date
DB Stamp 2 Time
Page Count           000
Devices Used         1
Database ID          <servernode>:<serverdb>_DATEXXXX_<timestamp>
Max Used Data Page  000
Converter Page Count 8
 
UTIL_EXECUTE CLEAR LOG!
OK
 
DB_ONLINE!
OK
 
UTIL_RELEASE!
OK
 
UTIL_CONNECT SUT,SUT!
OK
 
UTIL_RELEASE!
OK
 
BYE!
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT!
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER HU PASSWORD HU DBA !
 
Enter command:
CREATE USER CUGINI PASSWORD CUGINI DBA !
 
Enter command:
CREATE USER MCGINN PASSWORD MCGINN DBA !
 
Enter command:
CREATE USER SULLIVAN1 PASSWORD SULLIVAN1 DBA !
 
Enter command:
CREATE USER FLATER PASSWORD FLATER DBA !
 
Enter command:
CREATE USER SUN PASSWORD SUN DBA !
 
Enter command:
CREATE USER SULLIVAN PASSWORD SULLIVAN DBA !
 
Enter command:
CREATE USER SCHANZLE PASSWORD SCHANZLE DBA !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
CONNECT HU IDENTIFIED BY HU SQLMODE ANSI!
 
Enter command:
FILE N4SCH1 !
 
Enter command:
  CREATE SCHEMA
    AUTHORIZATION HU !
 
Enter command:
  CREATE TABLE B_TESTREP
   (TESTNO   CHAR(4),
    RESULT   CHAR(4),
    TESTTYPE  CHAR(3)) !
 
Enter command:
  CREATE TABLE B_TESTIND
    (TESTNO   CHAR(4) NOT NULL,
     PROGRAM  CHAR(6),
     AUTHID   CHAR(18),
     DESCRIPT CHAR(50),
     MCO      CHAR(3),
     MFO      CHAR(3),
     MC       CHAR(3),
     MPA      CHAR(3),
     MAD      CHAR(3),
     PCO      CHAR(3),
     PFO      CHAR(3),
     PC       CHAR(3),
     PPA      CHAR(3),
     PAD      CHAR(3),
     ISQL     CHAR(3),
     SYNVIO   CHAR(1),
     FLAGGER  CHAR(1),
     FIPMIN   CHAR(1),
     CONSTRAINT C1_B_TESTIND UNIQUE(TESTNO)) !
 
Enter command:
  CREATE TABLE HU.ECCO (C1 CHAR(2)) !
 
Enter command:
  CREATE TABLE STAFF
   (EMPNUM   CHAR(3) NOT NULL,
    EMPNAME  CHAR(20),
    GRADE    DECIMAL(4),
    CITY     CHAR(15),
    CONSTRAINT C1_STAFF UNIQUE(EMPNUM)) !
 
Enter command:
  CREATE TABLE PROJ
   (PNUM     CHAR(3) NOT NULL,
    PNAME    CHAR(20),
    PTYPE    CHAR(6),
    BUDGET   DECIMAL(9),
    CITY     CHAR(15),
    CONSTRAINT C1_PROJ UNIQUE(PNUM))  !
 
Enter command:
  CREATE TABLE WORKS
   (EMPNUM   CHAR(3) NOT NULL,
    PNUM     CHAR(3) NOT NULL,
    HOURS    DECIMAL(5),
    CONSTRAINT C1_WORKS UNIQUE(EMPNUM,PNUM)) !
 
Enter command:
  CREATE TABLE FIPS1
   (FIPS_TEST CHAR(20)) !
 
Enter command:
  CREATE TABLE STAFF1 (EMPNUM    CHAR(3) NOT NULL,
                EMPNAME  CHAR(20),
                GRADE DECIMAL(4),
                CITY   CHAR(15)) !
 
Enter command:
  CREATE TABLE PROJ1 (PNUM    CHAR(3) NOT NULL,
                PNAME  CHAR(20),
                PTYPE  CHAR(6),
                BUDGET DECIMAL(9),
                CITY   CHAR(15),
                CONSTRAINT C1_PROJ1 UNIQUE(PNUM)) !
 
Enter command:
  CREATE TABLE WORKS1(EMPNUM    CHAR(3) NOT NULL,
                PNUM    CHAR(3) NOT NULL,
                HOURS   DECIMAL(5),
                CONSTRAINT C1_WORKS1 UNIQUE(EMPNUM, PNUM)) !
 
Enter command:
  CREATE TABLE STAFF3 (EMPNUM    CHAR(3) NOT NULL,
                EMPNAME  CHAR(20),
                GRADE DECIMAL(4),
                CITY   CHAR(15)) !
 
Enter command:
  CREATE TABLE STAFF4 (EMPNUM    CHAR(3) NOT NULL,
                EMPNAME  CHAR(20),
                GRADE DECIMAL(4),
                CITY   CHAR(15)) !
 
Enter command:
  CREATE TABLE LONGINT (LONG_INT DECIMAL(15)) !
 
Enter command:
  CREATE TABLE TEMP_S
     (EMPNUM  CHAR(3),
      GRADE DECIMAL(4),
      CITY CHAR(15)) !
 
Enter command:
  CREATE TABLE TMP (T1 CHAR (10), T2 DECIMAL(2), T3 CHAR (10)) !
 
Enter command:
  CREATE TABLE AA (CHARTEST     CHAR(20)) !
 
Enter command:
  CREATE TABLE BB (CHARTEST     CHAR) !
 
Enter command:
  CREATE TABLE CC (CHARTEST     CHARACTER(20)) !
 
Enter command:
  CREATE TABLE DD (CHARTEST     CHARACTER) !
 
Enter command:
  CREATE TABLE EE (INTTEST     INTEGER) !
 
Enter command:
  CREATE TABLE FF (INTTEST     INT) !
 
Enter command:
  CREATE TABLE GG (REALTEST     REAL) !
 
Enter command:
  CREATE TABLE HH (SMALLTEST  SMALLINT) !
 
Enter command:
  CREATE TABLE II (DOUBLET  DOUBLE PRECISION) !
 
Enter command:
  CREATE TABLE JJ (FLOATTEST  FLOAT) !
 
Enter command:
  CREATE TABLE KK (FLOATTEST  FLOAT(32)) !
 
Enter command:
  CREATE TABLE LL (NUMTEST  NUMERIC(13,6)) !
 
Enter command:
  CREATE TABLE MM (NUMTEST  NUMERIC) !
 
Enter command:
  CREATE TABLE MM2 (NUMTEST NUMERIC(10)) !
 
Enter command:
  CREATE TABLE NN (NUMTEST  NUMERIC(9)) !
 
Enter command:
  CREATE TABLE OO (NUMTEST  NUMERIC(9)) !
 
Enter command:
  CREATE TABLE PP (NUMTEST  DECIMAL(13,6)) !
 
Enter command:
  CREATE TABLE QQ (NUMTEST  DECIMAL) !
 
Enter command:
  CREATE TABLE RR (NUMTEST  DECIMAL(8)) !
 
Enter command:
  CREATE TABLE SS (NUMTEST  DEC(13,6)) !
 
Enter command:
  CREATE TABLE P1 (NUMTEST  NUMERIC(1)) !
 
Enter command:
  CREATE TABLE P7 (NUMTEST  NUMERIC(7)) !
 
Enter command:
  CREATE TABLE P12 (NUMTEST  NUMERIC(12)) !
 
Enter command:
  CREATE TABLE P15 (NUMTEST  NUMERIC(15)) !
 
Enter command:
  CREATE TABLE VTABLE
         (COL1   INTEGER,
          COL2   INTEGER,
          COL3   INTEGER,
          COL4   INTEGER,
          COL5   DECIMAL(7,2)) !
 
Enter command:
  CREATE TABLE UPUNIQ (NUMKEY  DECIMAL(3) NOT NULL,
                           COL2    CHAR(2),
                           CONSTRAINT C1_UPUNIQ UNIQUE(NUMKEY)) !
 
Enter command:
  CREATE TABLE TEXT80  (TEXXT CHAR(80)) !
 
Enter command:
  CREATE TABLE TEXT132  (TEXXT CHAR(132)) !
 
Enter command:
  CREATE TABLE TEXT240  (TEXXT CHAR(240)) !
 
Enter command:
  CREATE TABLE TEXT256  (TEXXT CHAR(256)) !
 
*SQLSTATE I3020 Invalid length for this data type:TEXXT                    0035
 
Enter command:
  CREATE TABLE TEXT512  (TEXXT CHAR(512)) !
 
*SQLSTATE I3020 Invalid length for this data type:TEXXT                    0035
 
Enter command:
  CREATE TABLE TEXT1024  (TEXXT CHAR(1024)) !
 
*SQLSTATE I3020 Invalid length for this data type:TEXXT                    0036
 
Enter command:
 * THE FOLLOWING TABLES ARE USED TO TEST THE LIMITATIONS (12-14-88) !
 
Enter command:
  CREATE TABLE T240(STR240 CHAR(240)) !
 
Enter command:
  CREATE TABLE DEC15(COL1 DECIMAL(15,7)) !
 
Enter command:
  CREATE TABLE FLO15(COL1 FLOAT(15)) !
 
Enter command:
  CREATE TABLE INT10(COL1 INTEGER, COL2 SMALLINT) !
 
Enter command:
  CREATE TABLE T100(C1 CHAR(2),C2 CHAR(2),C3 CHAR(2),C4 CHAR(2),
                C5 CHAR(2),C6 CHAR(2),C7 CHAR(2),C8 CHAR(2),
                C9 CHAR(2),C10 CHAR(2),C11 CHAR(2),C12 CHAR(2),
                C13 CHAR(2),C14 CHAR(2),C15 CHAR(2),C16 CHAR(2),
                C17 CHAR(2),C18 CHAR(2),C19 CHAR(2),C20 CHAR(2),
                C21 CHAR(2),C22 CHAR(2),C23 CHAR(2),C24 CHAR(2),
                C25 CHAR(2),C26 CHAR(2),C27 CHAR(2),C28 CHAR(2),
                C29 CHAR(2),C30 CHAR(2),C31 CHAR(2),C32 CHAR(2),
                C33 CHAR(2),C34 CHAR(2),C35 CHAR(2),C36 CHAR(2),
                C37 CHAR(2),C38 CHAR(2),C39 CHAR(2),C40 CHAR(2),
                C41 CHAR(2),C42 CHAR(2),C43 CHAR(2),C44 CHAR(2),
                C45 CHAR(2),C46 CHAR(2),C47 CHAR(2),C48 CHAR(2),
                C49 CHAR(2),C50 CHAR(2),C51 CHAR(2),C52 CHAR(2),
                C53 CHAR(2),C54 CHAR(2),C55 CHAR(2),C56 CHAR(2),
                C57 CHAR(2),C58 CHAR(2),C59 CHAR(2),C60 CHAR(2),
                C61 CHAR(2),C62 CHAR(2),C63 CHAR(2),C64 CHAR(2),
                C65 CHAR(2),C66 CHAR(2),C67 CHAR(2),C68 CHAR(2),
                C69 CHAR(2),C70 CHAR(2),C71 CHAR(2),C72 CHAR(2),
                C73 CHAR(2),C74 CHAR(2),C75 CHAR(2),C76 CHAR(2),
                C77 CHAR(2),C78 CHAR(2),C79 CHAR(2),C80 CHAR(2),
                C81 CHAR(2),C82 CHAR(2),C83 CHAR(2),C84 CHAR(2),
                C85 CHAR(2),C86 CHAR(2),C87 CHAR(2),C88 CHAR(2),
                C89 CHAR(2),C90 CHAR(2),C91 CHAR(2),C92 CHAR(2),
                C93 CHAR(2),C94 CHAR(2),C95 CHAR(2),C96 CHAR(2),
                C97 CHAR(2),C98 CHAR(2),C99 CHAR(2),C100 CHAR(2)) !
 
Enter command:
  CREATE TABLE T2000(STR110 CHAR(110),STR120 CHAR(120),
                   STR130 CHAR(130),STR140 CHAR(140),
                   STR150 CHAR(150),STR160 CHAR(160),
                   STR170 CHAR(170),STR180 CHAR(180),
                   STR190 CHAR(190),STR200 CHAR(200),
                   STR210 CHAR(210),STR216 CHAR(216)) !
 
Enter command:
  CREATE TABLE T8(COL1 CHAR(2) NOT NULL,COL2 CHAR(4) NOT NULL,
                COL3 CHAR(6) NOT NULL,COL4 CHAR(8) NOT NULL,
                COL5 CHAR(10) NOT NULL,COL6 CHAR(12) NOT NULL,
                COL7 CHAR(14),COL8 CHAR(16),
                CONSTRAINT C1_T8 UNIQUE(COL1,COL2,COL3,COL4,COL5,COL6)) !
 
Enter command:
  CREATE TABLE T118(STR118 CHAR(118) NOT NULL,
    CONSTRAINT C1_T118 UNIQUE(STR118)) !
 
Enter command:
  CREATE TABLE T4(STR110 CHAR(110) NOT NULL,
                NUM6   NUMERIC(6) NOT NULL,
                COL3   CHAR(10),COL4 CHAR(20),
                CONSTRAINT C1_T4 UNIQUE(STR110,NUM6)) !
 
Enter command:
  CREATE TABLE T12(COL1 CHAR(1), COL2 CHAR(2),
                 COL3 CHAR(4), COL4 CHAR(6),
                 COL5 CHAR(8), COL6 CHAR(10),
                 COL7 CHAR(20), COL8 CHAR(30),
                 COL9 CHAR(40), COL10 CHAR(50),
                 COL11 INTEGER, COL12 INTEGER) !
 
Enter command:
  CREATE TABLE NEXTKEY (KEYNUM INTEGER, AUTHOR CHAR(1),
                         DOLLARS INTEGER) !
 
Enter command:
  CREATE TABLE SV (NUMTEST NUMERIC(8,3)) !
 
Enter command:
  CREATE TABLE JJ_20 (FLOATTEST  FLOAT(20)) !
 
Enter command:
  CREATE TABLE PP_15 (NUMTEST  DECIMAL(15,15)) !
 
Enter command:
  CREATE TABLE PP_7  (NUMTEST  DECIMAL(15,7)) !
 
Enter command:
  CREATE TABLE P15_15 (NUMTEST  NUMERIC(15,15)) !
 
Enter command:
  CREATE TABLE P15_7 (NUMTEST  NUMERIC(15,7)) !
 
Enter command:
  CREATE TABLE T_OBSERV
               (Y_OBSERV  NUMERIC(4),
                CITY         CHAR(10),
                MAX_TEMP     NUMERIC(5,2),
                MIN_TEMP     NUMERIC(5,2)) !
 
Enter command:
 * ************* CREATE VIEW STATEMENTS FOLLOW ************* !
 
Enter command:
CREATE VIEW TESTINDEX AS
    SELECT TESTNO, PROGRAM, AUTHID, DESCRIPT,
           MCO, MFO, MC, MPA, MAD, PCO, PFO, PC, PPA, PAD, ISQL,
           SYNVIO, FLAGGER, FIPMIN
    FROM B_TESTIND !
 
Enter command:
CREATE VIEW TESTREP AS
    SELECT TESTNO, RESULT, TESTTYPE
    FROM B_TESTREP !
 
Enter command:
   CREATE VIEW C_OBSERV (CITY, Y_OBSERV, MIN_C, MAX_C)
      AS SELECT CITY, Y_OBSERV, (MIN_TEMP - 32) * 5 / 9,
                (MAX_TEMP - 32) * 5 / 9
         FROM T_OBSERV !
 
Enter command:
   CREATE VIEW MY_OBSERV (CITY, HIGH, LOW)
      AS SELECT CITY, AVG(MAX_TEMP), AVG(MIN_TEMP)
            FROM T_OBSERV
            GROUP BY CITY !
 
Enter command:
   CREATE VIEW EXTR_TEMP (Y_OBSERV, HIGH, LOW)
      AS SELECT Y_OBSERV, MAX(MAX_TEMP), MIN(MIN_TEMP)
            FROM T_OBSERV
            GROUP BY Y_OBSERV !
 
Enter command:
       CREATE VIEW SET_TEST (EMP1, EMP_AVG, EMP_MAX) AS
           SELECT STAFF.EMPNUM, AVG(HOURS), MAX(HOURS)
           FROM STAFF, WORKS
           GROUP BY STAFF.EMPNUM !
 
Enter command:
       CREATE VIEW DUP_COL (EMP1, PNO, HOURS, HOURS_2) AS
           SELECT EMPNUM, PNUM, HOURS, HOURS * 2
           FROM WORKS !
 
Enter command:
  CREATE VIEW STAFFV1
           AS SELECT * FROM STAFF
              WHERE  GRADE >= 12 !
 
Enter command:
  CREATE VIEW STAFFV2
           AS SELECT * FROM STAFF
              WHERE  GRADE >= 12
           WITH CHECK OPTION !
 
Enter command:
  CREATE VIEW STAFFV2_V
           AS SELECT *
              FROM   STAFFV2
              WHERE  CITY = 'Vienna' !
 
Enter command:
  CREATE VIEW DOMAIN_V
           AS SELECT *
              FROM   WORKS
              WHERE  EMPNUM = 'E1' AND HOURS = 80
                  OR EMPNUM = 'E2' AND HOURS = 40
                  OR EMPNUM = 'E4' AND HOURS = 20
              WITH CHECK OPTION !
 
Enter command:
  CREATE VIEW STAFF2
           AS SELECT *
              FROM   STAFF
           WITH CHECK OPTION !
 
Enter command:
  CREATE VIEW ST_WO_DES (NAME,COST,PROJECT)
    AS SELECT EMPNAME,HOURS*2*GRADE,PNAME
     FROM   PROJ,STAFF,WORKS
     WHERE  STAFF.EMPNUM=WORKS.EMPNUM
        AND WORKS.PNUM=PROJ.PNUM
        AND PTYPE='Design' !
 
Enter command:
  CREATE VIEW SUBSP (EMPNUM,PNUM,HOURS)
     AS SELECT EMPNUM,PNUM,HOURS
        FROM   WORKS
        WHERE  EMPNUM='E3'
     WITH CHECK OPTION !
 
Enter command:
  CREATE VIEW TEMP_SS(EMPNUM,GRADE,CITY)
     AS SELECT EMPNUM,GRADE,CITY
        FROM   STAFF
        WHERE  GRADE > 12
     WITH CHECK OPTION !
 
Enter command:
  CREATE VIEW V_WORKS1
           AS SELECT * FROM WORKS
              WHERE HOURS > 15
           WITH CHECK OPTION !
 
Enter command:
  CREATE VIEW V_WORKS2
           AS SELECT * FROM V_WORKS1
              WHERE EMPNUM = 'E1'
                 OR EMPNUM = 'E6' !
 
Enter command:
  CREATE VIEW V_WORKS3
           AS SELECT * FROM V_WORKS2
              WHERE PNUM = 'P2'
                 OR PNUM = 'P7'
           WITH CHECK OPTION        !
 
Enter command:
  CREATE VIEW UPDATE_V1
            AS SELECT ALL CITY
                     FROM PROJ !
 
Enter command:
  CREATE VIEW UPDATE_V2
            AS SELECT HOURS, EMPNUM, PNUM
                     FROM WORKS
                     WHERE HOURS IN (10, 20, 40) !
 
Enter command:
  CREATE VIEW UPDATE_V3
            AS SELECT *
                     FROM WORKS
                     WHERE PNUM BETWEEN 'P2' AND 'P4'
                     AND EMPNUM NOT BETWEEN 'E2' AND 'E3' !
 
Enter command:
  CREATE VIEW UPDATE_V4
            AS SELECT PNUM, EMPNUM
                     FROM WORKS
                     WHERE PNUM LIKE '_2%' !
 
Enter command:
  CREATE VIEW UPDATE_V5
            AS SELECT *
                     FROM STAFF
                     WHERE EMPNAME IS NOT NULL AND CITY IS NULL !
 
Enter command:
  CREATE VIEW UPDATE_V6
            AS SELECT EMPNAME, CITY, GRADE
                     FROM STAFF
                     WHERE EMPNAME >= 'Betty' AND EMPNUM < 'E35'
                       OR CITY <= 'Deale' AND GRADE > 12
                       OR GRADE = 13 AND CITY <> 'Akron' !
 
Enter command:
  CREATE VIEW UPDATE_V7
            AS SELECT EMPNAME, CITY, GRADE
                     FROM STAFFV2
                     WHERE EMPNAME >= 'Betty' AND EMPNUM < 'E35'
                       OR CITY <= 'Deale' AND GRADE > 12
                       OR GRADE = 13 AND CITY <> 'Akron' !
 
Enter command:
  CREATE VIEW UPDATE_V8
            AS SELECT MYTABLE.EMPNUM, MYTABLE.EMPNAME
                     FROM STAFF MYTABLE
                     WHERE MYTABLE.GRADE = 12 !
 
Enter command:
  CREATE VIEW UPDATE_V9
            AS SELECT EMPNAME, CITY, GRADE
                     FROM STAFF
                     WHERE NOT EMPNAME >= 'Betty' AND EMPNUM <= 'E35'
                       OR NOT (CITY <= 'Deale') AND GRADE > 9
                       AND NOT (GRADE = 13 AND CITY <> 'Akron')
                       OR NOT CITY IN ('Vienna','New York','Deale') !
 
Enter command:
   CREATE VIEW VSTAFF3 AS SELECT * FROM STAFF3 !
 
Enter command:
 * ************* GRANT STATEMENTS FOLLOW ************* !
 
Enter command:
   GRANT SELECT ON HU.ECCO TO PUBLIC !
 
Enter command:
   GRANT INSERT ON TESTREP TO PUBLIC WITH GRANT OPTION !
 
Enter command:
   GRANT ALL PRIVILEGES ON TESTREP TO SUN WITH GRANT OPTION !
 
Enter command:
   GRANT SELECT ON STAFF TO SULLIVAN1 WITH GRANT OPTION !
 
Enter command:
   GRANT ALL PRIVILEGES ON STAFF
           TO PUBLIC !
 
Enter command:
   GRANT SELECT ON WORKS
           TO PUBLIC !
 
Enter command:
   GRANT SELECT ON PROJ
           TO PUBLIC !
 
Enter command:
   GRANT SELECT,UPDATE ON WORKS
           TO CUGINI
           WITH GRANT OPTION !
 
Enter command:
   GRANT SELECT,UPDATE ON STAFF2
           TO SULLIVAN !
 
Enter command:
   GRANT SELECT,UPDATE(EMPNUM,EMPNAME) ON STAFF3
           TO SULLIVAN, CUGINI, FLATER, SULLIVAN1
           WITH GRANT OPTION !
 
Enter command:
   GRANT SELECT,INSERT, DELETE ON STAFF4
           TO SULLIVAN, CUGINI, FLATER, SULLIVAN1 !
 
Enter command:
   GRANT INSERT ON UPUNIQ TO SULLIVAN !
 
Enter command:
   GRANT SELECT,UPDATE(EMPNUM,EMPNAME) ON VSTAFF3
    TO FLATER WITH GRANT OPTION !
 
Enter command:
   GRANT ALL PRIVILEGES ON HH TO SCHANZLE !
 
Enter command:
   GRANT ALL PRIVILEGES ON FF TO SCHANZLE !
 
Enter command:
   GRANT ALL PRIVILEGES ON P1 TO SCHANZLE !
 
Enter command:
 * ************* END OF SCHEMA ************* !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
CONNECT CUGINI IDENTIFIED BY CUGINI SQLMODE ANSI!
 
Enter command:
FILE N4SCH2 !
 
Enter command:
     CREATE SCHEMA AUTHORIZATION CUGINI !
 
Enter command:
     GRANT SELECT,UPDATE ON HU.WORKS
           TO SULLIVAN !
 
Enter command:
      CREATE TABLE VTABLE
            (COL1  INTEGER,
             COL2  INTEGER,
             COL3  INTEGER,
             COL4  INTEGER,
             COL5  DECIMAL(7,2)) !
 
Enter command:
     GRANT ALL PRIVILEGES ON VTABLE TO HU !
 
Enter command:
 *  TEST GRANT WITHOUT GRANT PERMISSION BELOW -- EXPECT ERROR MESSAGE
 *  "WITH GRANT OPTION" PURPOSEFULLY OMITTED FROM HU''S GRANT ON STAFF4.
 *  DO NOT CHANGE FILE SCHEMA1 TO ALLOW "WITH GRANT OPTION" ON STAFF4.!
 
Enter command:
     GRANT SELECT, INSERT, DELETE ON HU.STAFF4
           TO SCHANZLE !
 
*SQLSTATE 42000 Missing privilege                                          0015
 
Enter command:
  CREATE TABLE AA (CHARTEST     CHAR(20)) !
 
Enter command:
  CREATE VIEW VAA AS SELECT * FROM AA !
 
Enter command:
  CREATE TABLE BB (CHARTEST     CHAR) !
 
Enter command:
  CREATE VIEW VBB AS SELECT * FROM BB !
 
Enter command:
  CREATE TABLE CC (CHARTEST     CHARACTER(20)) !
 
Enter command:
  CREATE VIEW VCC AS SELECT * FROM CC !
 
Enter command:
  CREATE TABLE DD (CHARTEST     CHARACTER) !
 
Enter command:
  CREATE VIEW VDD AS SELECT * FROM DD !
 
Enter command:
  CREATE TABLE EE (INTTEST     INTEGER) !
 
Enter command:
  CREATE TABLE FF (INTTEST     INT) !
 
Enter command:
  CREATE TABLE GG (C1 INT) !
 
Enter command:
  CREATE TABLE HH (SMALLTEST  SMALLINT) !
 
Enter command:
  CREATE TABLE II (C1 INT) !
 
Enter command:
  CREATE VIEW VII AS SELECT * FROM II !
 
Enter command:
  CREATE TABLE JJ (C1 INT) !
 
Enter command:
  CREATE TABLE SRCH1 (C1 INT) !
 
Enter command:
  CREATE TABLE BADG1 (C1 INT) !
 
Enter command:
  CREATE TABLE BADG2 (C1 INT) !
 
Enter command:
  CREATE VIEW VBADG2 AS SELECT * FROM BADG2 !
 
Enter command:
  CREATE VIEW VVTABLE AS SELECT * FROM VTABLE !
 
Enter command:
   GRANT SELECT ON AA TO SCHANZLE !
 
Enter command:
   GRANT SELECT ON VAA TO SCHANZLE !
 
Enter command:
   GRANT INSERT ON BB TO SCHANZLE !
 
Enter command:
   GRANT INSERT ON VBB TO SCHANZLE !
 
Enter command:
   GRANT UPDATE ON CC TO SCHANZLE !
 
Enter command:
   GRANT UPDATE ON VCC TO SCHANZLE !
 
Enter command:
   GRANT DELETE ON DD TO SCHANZLE !
 
Enter command:
   GRANT DELETE ON VDD TO SCHANZLE !
 
Enter command:
   GRANT SELECT ON EE TO PUBLIC !
 
Enter command:
   GRANT INSERT ON FF TO PUBLIC !
 
Enter command:
   GRANT UPDATE ON GG TO PUBLIC !
 
Enter command:
   GRANT DELETE ON HH TO PUBLIC !
 
Enter command:
   GRANT ALL PRIVILEGES ON II TO SCHANZLE !
 
Enter command:
   GRANT ALL PRIVILEGES ON VII TO SCHANZLE !
 
Enter command:
   GRANT ALL PRIVILEGES ON JJ TO PUBLIC !
 
Enter command:
   GRANT INSERT, UPDATE, DELETE ON SRCH1 TO SCHANZLE !
 
Enter command:
   GRANT ALL PRIVILEGES ON BADG1 TO FLATER !
 
Enter command:
   GRANT SELECT ON VBADG2 TO FLATER WITH GRANT OPTION !
 
Enter command:
   GRANT ALL PRIVILEGES ON VVTABLE TO HU !
 
Enter command:
 * ************* END OF SCHEMA ************* !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
CONNECT MCGINN IDENTIFIED BY MCGINN SQLMODE ANSI !
 
Enter command:
FILE N4SCH3 !
 
Enter command:
     CREATE SCHEMA AUTHORIZATION MCGINN !
 
Enter command:
 *  THIS FILE CONTAINS EXTENSIONS TO THE SQL STANDARD.
 *  FAILURE TO CREATE THIS SCHEMA IS NOT A DEFICIENCY.
 *  THIS FILE TESTS EXTENSIONS TO SQL TO ALLOW NAMES LONGER THAN 18.
 *  IF A CREATE TABLE OR CREATE VIEW STATEMENT CAUSES A SYNTAX ERROR,
 *       DELETE THAT CREATE TABLE OR CREATE VIEW STATEMENT.!
 
Enter command:
CREATE TABLE TABLEFGHIJKLMNOPQ19
  (COL2  INTEGER)!
 
*SQLSTATE 42000 Identifier too long                                        0014
 
Enter command:
CREATE TABLE SHORTTAB
  (COLUMN123456789IS19  INTEGER)!
 
*SQLSTATE 42000 Identifier too long                                        0024
 
Enter command:
CREATE TABLE BASETAB1 (COL1  INTEGER)!
 
Enter command:
CREATE VIEW VIEWABCDEFGHIKLMN19 (COL3)
  AS SELECT COL1 FROM BASETAB1!
 
*SQLSTATE 42000 Identifier too long                                        0013
 
Enter command:
 *  ************* END OF SCHEMA ************* !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
CONNECT SULLIVAN1 IDENTIFIED BY SULLIVAN1 SQLMODE ANSI !
 
Enter command:
FILE N4SCH4 !
 
Enter command:
   CREATE SCHEMA AUTHORIZATION SULLIVAN1 !
 
Enter command:
   CREATE TABLE AUTH_TAB (FIRST1 INTEGER, SECOND2 CHAR) !
 
Enter command:
   CREATE VIEW MUL_SCH
       AS SELECT EMPNUM, SECOND2
          FROM HU.STAFF, AUTH_TAB
          WHERE GRADE = FIRST1 !
 
Enter command:
    GRANT ALL PRIVILEGES ON AUTH_TAB TO HU !
 
Enter command:
    GRANT SELECT ON MUL_SCH TO HU !
 
Enter command:
 * THE FOLLOWING TABLES ARE USED TO RUN CONCURRENCY PROGRAM PAIRS
 *    E.G MPA001 AND MPB001 USE THE TABLES WITH PREFIX MP1_  !
 
Enter command:
CREATE TABLE MP1_MM2 (NUMTEST NUMERIC(10)) !
 
Enter command:
CREATE TABLE MP1_NN (NUMTEST NUMERIC(9)) !
 
Enter command:
CREATE TABLE MP1NEXTK (KEYNUM INTEGER, AUTHOR CHAR(1),
                           DOLLARS INTEGER) !
 
Enter command:
CREATE TABLE MP2_MM2 (NUMTEST NUMERIC(10)) !
 
Enter command:
CREATE TABLE MP2_NN (NUMTEST NUMERIC(9)) !
 
Enter command:
CREATE TABLE MP2NEXTK (KEYNUM INTEGER, AUTHOR CHAR(1),
                           DOLLARS INTEGER) !
 
Enter command:
CREATE TABLE MP3_MM2 (NUMTEST NUMERIC(10)) !
 
Enter command:
CREATE TABLE MP3_NN (NUMTEST NUMERIC(9)) !
 
Enter command:
CREATE TABLE MP3NEXTK (KEYNUM INTEGER, AUTHOR CHAR(1),
                           DOLLARS INTEGER) !
 
Enter command:
CREATE TABLE MP4_MM2 (NUMTEST NUMERIC(10)) !
 
Enter command:
CREATE TABLE MP4_NN (NUMTEST NUMERIC(9)) !
 
Enter command:
CREATE TABLE MP4NEXTK (KEYNUM INTEGER, AUTHOR CHAR(1),
                           DOLLARS INTEGER) !
 
Enter command:
CREATE TABLE MP5_AA (ANUM NUMERIC(4)) !
 
Enter command:
CREATE TABLE MP5_A_IND (ANUM NUMERIC(4) NOT NULL,
    CONSTRAINT C1_MP5_A_IND UNIQUE(ANUM)) !
 
Enter command:
CREATE TABLE MP5_TT (TESTTYPE CHAR(3), KOUNT DECIMAL(4)) !
 
Enter command:
 * THE FOLLOWING TABLES ARE USED TO RUN INTERACTIVE CONCURRENCY PROGRAM PAIRS.
CREATE TABLE TTT (ANUM NUMERIC(4) NOT NULL, AUTHOR CHAR(1),
    CONSTRAINT C1_TTT UNIQUE(ANUM)) !
 
Enter command:
CREATE TABLE TT (DOLLARS NUMERIC(4), ANUM NUMERIC(4)) !
 
Enter command:
CREATE TABLE AA (ANUM NUMERIC(4)) !
 
Enter command:
CREATE TABLE BB (BNUM NUMERIC(4)) !
 
Enter command:
 *  TEST GRANT UPDATE FOR ADDITIONAL COLUMNS BEYOND THOSE WITH GRANT OPTION.
 *  EXPECT ERROR MESSAGE
 *  IN SCHEMA1 FOR USER HU IS THE FOLLOWING GRANT:
 *         GRANT SELECT,UPDATE(EMPNUM,EMPNAME) ON STAFF3
 *          TO ..., SULLIVAN1 WITH GRANT OPTION
 * IF THE FOLLOWING SELF-GRANT BY SULLIVAN1 WILL NOT COMPILE/EXECUTE,
 *                 DELETE IT. !
 
Enter command:
   GRANT SELECT,UPDATE ON HU.STAFF3
           TO SULLIVAN1
           WITH GRANT OPTION !
 
*SQLSTATE I7017 User not allowed                                           0037
 
Enter command:
CREATE TABLE MP6_MM2 (NUMTEST NUMERIC(10)) !
 
Enter command:
CREATE TABLE MP6_NN (NUMTEST NUMERIC(9)) !
 
Enter command:
CREATE TABLE MP6NEXTK (KEYNUM INTEGER, AUTHOR CHAR(1),
                           DOLLARS INTEGER) !
 
Enter command:
CREATE TABLE MP6_AA (ANUM NUMERIC(4)) !
 
Enter command:
CREATE TABLE MP6_BB (BNUM NUMERIC(4)) !
 
Enter command:
CREATE TABLE MP7_NN (NUMTEST NUMERIC(9)) !
 
Enter command:
CREATE TABLE MP7NEXTK (KEYNUM INTEGER, AUTHOR CHAR(1),
                           DOLLARS INTEGER) !
 
Enter command:
CREATE TABLE MP7_AA (ANUM NUMERIC(4)) !
 
Enter command:
CREATE TABLE MP7_BB (BNUM NUMERIC(4)) !
 
Enter command:
CREATE TABLE MP8_NN (NUMTEST NUMERIC(9)) !
 
Enter command:
CREATE TABLE MP8NEXTK (KEYNUM INTEGER, AUTHOR CHAR(1),
                           DOLLARS INTEGER) !
 
Enter command:
CREATE TABLE MP8_AA (ANUM NUMERIC(4) NOT NULL,
    AUTHOR CHAR(1), CONSTRAINT C1_MP8_AA UNIQUE (ANUM)) !
 
Enter command:
CREATE TABLE MP8_BB (NUMTEST NUMERIC(9)) !
 
Enter command:
 * ************* END OF SCHEMA ************* !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
CONNECT FLATER IDENTIFIED BY FLATER SQLMODE ANSI !
 
Enter command:
FILE N4SCH5 !
 
Enter command:
CREATE SCHEMA AUTHORIZATION FLATER !
 
Enter command:
   CREATE TABLE USIG (C1 INT, C_1 INT) !
 
Enter command:
   CREATE TABLE U_SIG (C1 INT, C_1 INT) !
 
Enter command:
   CREATE VIEW DV1 AS
     SELECT DISTINCT HOURS FROM HU.WORKS !
 
Enter command:
 * THIS SMALL ONE-COLUMN TABLE IS USED TO GENERATE AN
 * INDICATOR OVERFLOW DATA EXCEPTION FOR SQLSTATE TESTING.
 * IF THE TABLE CANNOT BE CREATED, THE TEST IS ASSUMED PASSED.
 * SAVE THE ERROR MESSAGE AND THEN USE TED TO DELETE THE NEXT LINE.
 * TEST NUMBER 0491 IN PROGRAMS DML082 MAY ALSO NEED TO BE DELETED. !
 
Enter command:
   CREATE TABLE TINY (C1 CHAR(33000)) !
 
*SQLSTATE I3020 Invalid length for this data type                          0028
 
Enter command:
 * FOR GENERATION OF "with check option violation" SQLSTATE. !
 
Enter command:
   CREATE TABLE BASE_WCOV (C1 INT) !
 
Enter command:
   CREATE VIEW WCOV AS SELECT * FROM BASE_WCOV WHERE
     C1 > 0 WITH CHECK OPTION !
 
Enter command:
   CREATE TABLE BASE_VS1 (C1 INT, C2 INT) !
 
Enter command:
   CREATE VIEW VS1 AS SELECT * FROM BASE_VS1 WHERE C1 = 0 !
 
Enter command:
   CREATE VIEW VS2 AS
     SELECT A.C1 FROM BASE_VS1 A WHERE EXISTS
       (SELECT B.* FROM BASE_VS1 B WHERE B.C2 = A.C1) !
 
*SQLSTATE 42000 Missing identifier                                         0071
 
Enter command:
   CREATE VIEW VS2 AS
     SELECT A.C1 FROM BASE_VS1 A WHERE EXISTS
       (SELECT * FROM BASE_VS1 B WHERE B.C2 = A.C1) !
 
Enter command:
   CREATE VIEW VS3 AS
     SELECT A.C2 FROM BASE_VS1 A WHERE A.C2 IN
       (SELECT B.C1 FROM BASE_VS1 B WHERE B.C1 < A.C2) !
 
Enter command:
   CREATE VIEW VS4 AS
     SELECT A.C1 FROM BASE_VS1 A WHERE A.C1 < ALL
       (SELECT B.C2 FROM BASE_VS1 B) !
 
Enter command:
   CREATE VIEW VS5 AS
     SELECT A.C1 FROM BASE_VS1 A WHERE A.C1 < SOME
       (SELECT B.C2 FROM BASE_VS1 B) !
 
Enter command:
   CREATE VIEW VS6 AS
     SELECT A.C1 FROM BASE_VS1 A WHERE A.C1 < ANY
       (SELECT B.C2 FROM BASE_VS1 B) !
 
Enter command:
   GRANT ALL PRIVILEGES ON TINY TO SCHANZLE !
 
*SQLSTATE 42000 Unknown table name:TINY                                    0025
 
Enter command:
   GRANT ALL ON BASE_WCOV TO SCHANZLE !
 
*SQLSTATE 42000 Missing keyword:PRIVILEGES                                 0011
 
Enter command:
   GRANT ALL ON WCOV TO SCHANZLE !
 
*SQLSTATE 42000 Missing keyword:PRIVILEGES                                 0011
 
Enter command:
   GRANT ALL ON VS1 TO SCHANZLE !
 
*SQLSTATE 42000 Missing keyword:PRIVILEGES                                 0011
 
Enter command:
 * TEST GRANTING OF PRIVILEGES THAT WE DO NOT HAVE TO START WITH.
 * WE HAVE GRANT OPTION, BUT WE SHOULD NOT BE ABLE TO GRANT UNRESTRICTED
 * UPDATE ON STAFF3 SINCE OUR OWN UPDATE IS RESTRICTED TO TWO COLUMNS.
 * DO NOT CHANGE SCHEMA1 TO GRANT UNRESTRICTED UPDATE.
 * * EXPECT ERROR MESSAGE * !
 
Enter command:
   GRANT SELECT, UPDATE ON HU.STAFF3 TO SCHANZLE !
 
Enter command:
 * SAME THING FOR VIEWS.
 * * EXPECT ERROR MESSAGE * !
 
Enter command:
   GRANT SELECT, UPDATE ON HU.VSTAFF3 TO SCHANZLE !
 
Enter command:
 * SEE WHETHER GRANT ALL PRIVILEGES GIVES YOU GRANT OPTION.
 * IT SHOULD NOT.  GRANT OPTION IS NOT TECHNICALLY A PRIVILEGE.
 * * EXPECT ERROR MESSAGE * !
 
Enter command:
   GRANT SELECT ON CUGINI.BADG1 TO SCHANZLE !
 
*SQLSTATE 42000 Missing privilege                                          0017
 
Enter command:
 * SEE WHETHER GRANT OPTION ON A VIEW GIVES YOU GRANT OPTION
 * ON THE BASE TABLE.
 * * EXPECT ERROR MESSAGE * !
 
Enter command:
   GRANT SELECT ON CUGINI.BADG2 TO SCHANZLE !
 
*SQLSTATE 42000 Unknown table name:BADG2                                   0024
 
Enter command:
 * DELIMITED IDENTIFIERS. !
 
Enter command:
   CREATE VIEW "SULLI.SEL" ("sulli.sel") AS
     SELECT C1 FROM BASE_VS1 !
 
Enter command:
   GRANT ALL PRIVILEGES ON "SULLI.SEL" TO SCHANZLE !
 
Enter command:
 * ************* END OF SCHEMA ************* !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
CONNECT SUN IDENTIFIED BY SUN SQLMODE ANSI !
 
Enter command:
FILE N4SCH8 !
 
Enter command:
  CREATE SCHEMA
      AUTHORIZATION SUN !
 
Enter command:
  CREATE TABLE SUN.ECCO (C1 CHAR(2)) !
 
Enter command:
  CREATE TABLE STAFF
   (EMPNUM   CHAR(3) NOT NULL,
    EMPNAME  CHAR(20),
    GRADE    DECIMAL(4),
    CITY     CHAR(15)) !
 
Enter command:
  CREATE TABLE PROJ
   (PNUM     CHAR(3) NOT NULL,
    PNAME    CHAR(20),
    PTYPE    CHAR(6),
    BUDGET   DECIMAL(9),
    CITY     CHAR(15))  !
 
Enter command:
  CREATE TABLE WORKS
   (EMPNUM   CHAR(3) NOT NULL,
    PNUM     CHAR(3) NOT NULL,
    HOURS    DECIMAL(5)) !
 
Enter command:
  CREATE TABLE STAFF3
   (EMPNUM   CHAR(3) NOT NULL,
    EMPNAME  CHAR(20),
    GRADE    DECIMAL(4),
    CITY     CHAR(15),
    CONSTRAINT C1_STAFF3 UNIQUE (EMPNUM)) !
 
Enter command:
  CREATE TABLE PROJ3
   (PNUM     CHAR(3) NOT NULL,
    PNAME    CHAR(20),
    PTYPE    CHAR(6),
    BUDGET   DECIMAL(9),
    CITY     CHAR(15),
    CONSTRAINT C1_PROJ3 UNIQUE (PNUM))  !
 
Enter command:
  CREATE TABLE WORKS3
   (EMPNUM   CHAR(3) NOT NULL,
    PNUM     CHAR(3) NOT NULL,
    HOURS    DECIMAL(5),
    FOREIGN KEY (EMPNUM) REFERENCES STAFF3(EMPNUM),
    FOREIGN KEY (PNUM) REFERENCES PROJ3(PNUM)) !
 
Enter command:
        CREATE TABLE STAFF4 (EMPNUM    CHAR(3) NOT NULL,
                EMPNAME  CHAR(20) DEFAULT NULL,
                GRADE DECIMAL(4) DEFAULT 0,
                CITY   CHAR(15) DEFAULT '               ') !
 
Enter command:
 * EMPNAME CHAR PRECISION MAY BE CHANGED TO IMPLEMENTATION-DEFINED
 *              PRECISION FOR VALUE OF USER !
 
Enter command:
        CREATE TABLE STAFF14 (EMPNUM    CHAR(3) NOT NULL,
                EMPNAME  CHAR(20) DEFAULT USER,
                GRADE DECIMAL(4),
                CITY   CHAR(15)) !
 
Enter command:
        CREATE TABLE STAFF5 (EMPNUM    CHAR(3) NOT NULL,
                EMPNAME  CHAR(20),
                GRADE DECIMAL(4),
                CITY   CHAR(15),
                PRIMARY KEY (EMPNUM),
                CHECK (GRADE > 0 AND GRADE < 20)) !
 
Enter command:
        CREATE TABLE STAFF6 (EMPNUM    CHAR(3) NOT NULL,
                EMPNAME  CHAR(20),
                GRADE DECIMAL(4) CHECK (GRADE > 0 AND GRADE < 20),
                CITY   CHAR(15)) !
 
Enter command:
        CREATE TABLE STAFF7 (EMPNUM    CHAR(3) NOT NULL,
                EMPNAME  CHAR(20),
                GRADE DECIMAL(4),
                CITY   CHAR(15),
                PRIMARY KEY (EMPNUM),
                CHECK (GRADE BETWEEN 1 AND 20)) !
 
Enter command:
        CREATE TABLE STAFF8 (EMPNUM    CHAR(3) NOT NULL,
                EMPNAME  CHAR(20),
                GRADE DECIMAL(4),
                CITY   CHAR(15),
                PRIMARY KEY (EMPNUM),
                CHECK (EMPNAME IS NOT NULL)) !
 
Enter command:
        CREATE TABLE STAFF9 (EMPNUM    CHAR(3) NOT NULL PRIMARY KEY,
                EMPNAME  CHAR(20),
                GRADE DECIMAL(4),
                CITY   CHAR(15),
                CHECK (EMPNAME NOT LIKE 'T%')) !
 
Enter command:
        CREATE TABLE STAFF10 (EMPNUM    CHAR(3) NOT NULL,
                EMPNAME  CHAR(20),
                GRADE DECIMAL(4),
                CITY   CHAR(15),
                PRIMARY KEY (EMPNUM),
                CHECK (GRADE NOT IN (5,22))) !
 
Enter command:
        CREATE TABLE STAFF11 (EMPNUM    CHAR(3) NOT NULL PRIMARY KEY,
                EMPNAME  CHAR(20),
                GRADE DECIMAL(4),
                CITY   CHAR(15),
                CHECK (GRADE NOT IN (5,22)
                            AND EMPNAME NOT LIKE 'T%')) !
 
Enter command:
        CREATE TABLE STAFF12 (EMPNUM    CHAR(3) NOT NULL,
                EMPNAME  CHAR(20),
                GRADE DECIMAL(4),
                CITY   CHAR(15),
                PRIMARY KEY (EMPNUM),
                CHECK (NOT GRADE IN (5,22)
                            AND NOT EMPNAME LIKE 'T%')) !
 
Enter command:
        CREATE TABLE STAFF13 (EMPNUM    CHAR(3) NOT NULL,
                EMPNAME  CHAR(20),
                GRADE DECIMAL(4),
                CITY   CHAR(15),
                PRIMARY KEY (EMPNUM),
                CHECK (NOT EMPNAME IS NULL)) !
 
Enter command:
        CREATE TABLE STAFF15 (EMPNUM    CHAR(3),
                EMPNAME  CHAR(20) NOT NULL,
                GRADE DECIMAL(4),
                CITY   CHAR(15)) !
 
Enter command:
        CREATE TABLE STAFF16 (EMPNUM    CHAR(3) NOT NULL,
                EMPNAME  CHAR(20) DEFAULT NULL,
                GRADE DECIMAL(4) NOT NULL CHECK (GRADE IN (100,150,200)),
                CITY   CHAR(15), PRIMARY KEY (GRADE,EMPNUM)) !
 
Enter command:
        CREATE TABLE SIZ1_P
           (S1   CHAR(3) NOT NULL,
            S2   CHAR(3) NOT NULL,
            S3   DECIMAL(4) NOT NULL,
            S4   CHAR(3) NOT NULL,
            S5   DECIMAL(4) NOT NULL,
            S6   CHAR(3) NOT NULL,
            R1   CHAR(3),
            R2   CHAR(3),
            R3   DECIMAL(4),
            CONSTRAINT C1_SIZ1_P UNIQUE   (S1,S2,S3,S4,S5,S6)) !
 
Enter command:
        CREATE TABLE SIZ1_F
           (F1   CHAR(3) NOT NULL,
            F2   CHAR(3),
            F3   DECIMAL(4),
            F4   CHAR(3),
            F5   DECIMAL(4),
            F6   CHAR(3),
            R1   CHAR(3),
            R2   DECIMAL(5),
            R3   DECIMAL(4),
            FOREIGN KEY   (F1,F2,F3,F4,F5,F6)
            REFERENCES SIZ1_P(S1,S2,S3,S4,S5,S6)) !
 
Enter command:
        CREATE TABLE SIZ2_P
           (P1   CHAR(3) NOT NULL,
            P2   CHAR(3) NOT NULL,
            P3   DECIMAL(4) NOT NULL,
            P4   CHAR(3) NOT NULL,
            P5   DECIMAL(4) NOT NULL,
            P6   CHAR(3) NOT NULL,
            P7   CHAR(3) NOT NULL,
            P8   DECIMAL(4) NOT NULL,
            P9   DECIMAL(4) NOT NULL,
            P10   DECIMAL(4) NOT NULL,
            P11   CHAR(4),
            CONSTRAINT C01_SIZ2_P UNIQUE (P1),
            CONSTRAINT C02_SIZ2_P UNIQUE (P2),
            CONSTRAINT C03_SIZ2_P UNIQUE (P3),
            CONSTRAINT C04_SIZ2_P UNIQUE (P4),
            CONSTRAINT C05_SIZ2_P UNIQUE (P5),
            CONSTRAINT C06_SIZ2_P UNIQUE (P6),
            CONSTRAINT C07_SIZ2_P UNIQUE (P7),
            CONSTRAINT C08_SIZ2_P UNIQUE (P8),
            CONSTRAINT C09_SIZ2_P UNIQUE (P9),
            CONSTRAINT C10_SIZ2_P UNIQUE (P10)) !
 
Enter command:
        CREATE TABLE SIZ2_F1
           (F1   CHAR(3) NOT NULL,
            F2   CHAR(8),
            FOREIGN KEY (F1)
            REFERENCES SIZ2_P(P1)) !
 
Enter command:
        CREATE TABLE SIZ2_F2
           (F1   CHAR(3) NOT NULL,
            F2   CHAR(8),
            FOREIGN KEY (F1)
            REFERENCES SIZ2_P(P2)) !
 
Enter command:
        CREATE TABLE SIZ2_F3
           (F1   DECIMAL(4) NOT NULL,
            F2   CHAR(8),
            FOREIGN KEY (F1)
            REFERENCES SIZ2_P(P3)) !
 
Enter command:
        CREATE TABLE SIZ2_F4
           (F1   CHAR(3) NOT NULL,
            F2   CHAR(8),
            FOREIGN KEY (F1)
            REFERENCES SIZ2_P(P4)) !
 
Enter command:
        CREATE TABLE SIZ2_F5
           (F1   DECIMAL(4) NOT NULL,
            F2   CHAR(8),
            FOREIGN KEY (F1)
            REFERENCES SIZ2_P(P5)) !
 
Enter command:
        CREATE TABLE SIZ2_F6
           (F1   CHAR(3) NOT NULL,
            F2   CHAR(8),
            FOREIGN KEY (F1)
            REFERENCES SIZ2_P(P6)) !
 
Enter command:
        CREATE TABLE SIZ2_F7
           (F1   CHAR(3) NOT NULL,
            F2   CHAR(8),
            FOREIGN KEY (F1)
            REFERENCES SIZ2_P(P7)) !
 
Enter command:
        CREATE TABLE SIZ2_F8
           (F1   DECIMAL(4) NOT NULL,
            F2   CHAR(8),
            FOREIGN KEY (F1)
            REFERENCES SIZ2_P(P8)) !
 
Enter command:
        CREATE TABLE SIZ2_F9
           (F1   DECIMAL(4) NOT NULL,
            F2   CHAR(8),
            FOREIGN KEY (F1)
            REFERENCES SIZ2_P(P9)) !
 
Enter command:
        CREATE TABLE SIZ2_F10
           (F1   DECIMAL(4) NOT NULL,
            F2   CHAR(8),
            FOREIGN KEY (F1)
            REFERENCES SIZ2_P(P10)) !
 
Enter command:
        CREATE TABLE SIZ3_P1
           (F1   CHAR(3) NOT NULL,
            F2   CHAR(8),
            CONSTRAINT C1_SIZ3_P1 UNIQUE (F1)) !
 
Enter command:
        CREATE TABLE SIZ3_P2
           (F1   CHAR(3) NOT NULL,
            F2   CHAR(8),
            CONSTRAINT C1_SIZ3_P2 UNIQUE (F1)) !
 
Enter command:
        CREATE TABLE SIZ3_P3
           (F1   DECIMAL(4) NOT NULL,
            F2   CHAR(8),
            CONSTRAINT C1_SIZ3_P3 UNIQUE (F1)) !
 
Enter command:
        CREATE TABLE SIZ3_P4
           (F1   CHAR(3) NOT NULL,
            F2   CHAR(8),
            CONSTRAINT C1_SIZ3_P4 UNIQUE (F1)) !
 
Enter command:
        CREATE TABLE SIZ3_P5
           (F1   DECIMAL(4) NOT NULL,
            F2   CHAR(8),
            CONSTRAINT C1_SIZ3_P5 UNIQUE (F1)) !
 
Enter command:
        CREATE TABLE SIZ3_P6
           (F1   CHAR(3) NOT NULL,
            F2   CHAR(8),
            CONSTRAINT C1_SIZ3_P6 UNIQUE (F1)) !
 
Enter command:
        CREATE TABLE SIZ3_P7
           (F1   CHAR(3) NOT NULL,
            F2   CHAR(8),
            CONSTRAINT C1_SIZ3_P7 UNIQUE (F1)) !
 
Enter command:
        CREATE TABLE SIZ3_P8
           (F1   DECIMAL(4) NOT NULL,
            F2   CHAR(8),
            CONSTRAINT C1_SIZ3_P8 UNIQUE (F1)) !
 
Enter command:
        CREATE TABLE SIZ3_P9
           (F1   DECIMAL(4) NOT NULL,
            F2   CHAR(8),
            CONSTRAINT C1_SIZ3_P9 UNIQUE (F1)) !
 
Enter command:
        CREATE TABLE SIZ3_P10
           (F1   DECIMAL(4) NOT NULL,
            F2   CHAR(8),
            CONSTRAINT C1_SIZ3_P10 UNIQUE (F1)) !
 
Enter command:
        CREATE TABLE SIZ3_F
           (P1   CHAR(3) NOT NULL,
            P2   CHAR(3),
            P3   DECIMAL(4),
            P4   CHAR(3),
            P5   DECIMAL(4),
            P6   CHAR(3),
            P7   CHAR(3),
            P8   DECIMAL(4),
            P9   DECIMAL(4),
            P10   DECIMAL(4),
            P11   CHAR(4),
            FOREIGN KEY (P1)
            REFERENCES SIZ3_P1(F1),
            FOREIGN KEY (P2)
            REFERENCES SIZ3_P2(F1),
            FOREIGN KEY (P3)
            REFERENCES SIZ3_P3(F1),
            FOREIGN KEY (P4)
            REFERENCES SIZ3_P4(F1),
            FOREIGN KEY (P5)
            REFERENCES SIZ3_P5(F1),
            FOREIGN KEY (P6)
            REFERENCES SIZ3_P6(F1),
            FOREIGN KEY (P7)
            REFERENCES SIZ3_P7(F1),
            FOREIGN KEY (P8)
            REFERENCES SIZ3_P8(F1),
            FOREIGN KEY (P9)
            REFERENCES SIZ3_P9(F1),
            FOREIGN KEY (P10)
            REFERENCES SIZ3_P10(F1)) !
 
Enter command:
        CREATE TABLE DEPT
                (DNO DECIMAL(4) NOT NULL,
                 DNAME CHAR(20) NOT NULL,
                 DEAN CHAR(30),
                 PRIMARY KEY (DNO),
                 CONSTRAINT C1_DEPT UNIQUE (DNAME)) !
 
Enter command:
        CREATE TABLE EMP
                (ENO DECIMAL(4) NOT NULL,
                 ENAME CHAR(20) NOT NULL,
                 EDESC CHAR(30),
                 DNO DECIMAL(4) NOT NULL,
                 DNAME CHAR(20),
                 BTH_DATE  DECIMAL(6) NOT NULL,
                 PRIMARY KEY (ENO),
                 CONSTRAINT C1_EMP UNIQUE (ENAME,BTH_DATE),
                 FOREIGN KEY (DNO) REFERENCES
                 DEPT(DNO),
                 FOREIGN KEY (DNAME) REFERENCES
                 DEPT(DNAME)) !
 
Enter command:
        CREATE TABLE EXPERIENC
                (EXP_NAME CHAR(20),
                 BTH_DATE DECIMAL(6),
                 WK_DATE  DECIMAL(6),
                 DESCR CHAR(40),
                 FOREIGN KEY (EXP_NAME,BTH_DATE) REFERENCES
                 EMP(ENAME,BTH_DATE)) !
 
Enter command:
 * THE FOLLOWING TABLES, STAFF_M AND PROJ_M REFERENCE EACH OTHER.
 * TABLE STAFF_M HAS A "forward reference" TO PROJ_M. !
 
Enter command:
        CREATE TABLE STAFF_M
           (EMPNUM   CHAR(3) NOT NULL,
            EMPNAME  CHAR(20),
            GRADE    DECIMAL(4),
            CITY     CHAR(15),
            PRI_WK   CHAR(3),
            CONSTRAINT C1_STAFF_M UNIQUE   (EMPNUM),
            FOREIGN KEY (PRI_WK)
            REFERENCES PROJ_M(PNUM)) !
 
Enter command:
        CREATE TABLE PROJ_M
           (PNUM     CHAR(3) NOT NULL,
            PNAME    CHAR(20),
            PTYPE    CHAR(6),
            BUDGET   DECIMAL(9),
            CITY     CHAR(15),
            MGR   CHAR(3),
            CONSTRAINT C1_PROJ_P UNIQUE (PNUM),
            FOREIGN KEY (MGR)
            REFERENCES STAFF_M(EMPNUM)) !
 
Enter command:
 *     THE FOLLOWING TABLE IS SELF-REFERENCING. !
 
Enter command:
        CREATE TABLE STAFF_C
           (EMPNUM   CHAR(3) NOT NULL,
            EMPNAME  CHAR(20),
            GRADE    DECIMAL(4),
            CITY     CHAR(15),
            MGR   CHAR(3),
            CONSTRAINT C1_STAFF_C UNIQUE   (EMPNUM),
            FOREIGN KEY (MGR)
            REFERENCES STAFF_C(EMPNUM)) !
 
Enter command:
        CREATE TABLE STAFF_P
           (EMPNUM   CHAR(3) NOT NULL,
            EMPNAME  CHAR(20),
            GRADE    DECIMAL(4),
            CITY     CHAR(15),
            CONSTRAINT C1_STAFF_P UNIQUE  (EMPNUM)) !
 
Enter command:
        CREATE TABLE PROJ_P
           (PNUM     CHAR(3) NOT NULL,
            PNAME    CHAR(20),
            PTYPE    CHAR(6),
            BUDGET   DECIMAL(9),
            CITY     CHAR(15),
            CONSTRAINT C1_PROJ_P UNIQUE   (PNUM)) !
 
Enter command:
        CREATE TABLE MID1 (P_KEY DECIMAL(4) NOT NULL,
                         CONSTRAINT C1_MID1 UNIQUE(P_KEY),
                         F_KEY DECIMAL(4) REFERENCES MID1(P_KEY)) !
 
Enter command:
        CREATE TABLE ACR_SCH_P(P1 DECIMAL(4) NOT NULL,
                               CONSTRAINT C1_ACR_SCH_P UNIQUE(P1),
                               P2 CHAR(4)) !
 
Enter command:
   CREATE TABLE CHAR_DEF
               (SEX_CODE  CHAR(1)  DEFAULT 'F',
                NICKNAME  CHAR(20) DEFAULT 'No nickname given',
                INSURANC1 CHAR(5)  DEFAULT 'basic') !
 
Enter command:
   CREATE TABLE EXACT_DEF
               (BODY_TEMP NUMERIC(4,1) DEFAULT 98.6,
                MAX_NUM   NUMERIC(5)   DEFAULT -55555,
                MIN_NUM   DEC(6,6)     DEFAULT .000001) !
 
Enter command:
   CREATE TABLE APPR_DEF
               (X_COUNT   REAL DEFAULT 1.78E12,
                Y_COUNT   REAL DEFAULT -9.99E10,
                Z_COUNT   REAL DEFAULT 3.45E-11,
                ZZ_COUNT  REAL DEFAULT -7.6777E-7) !
 
Enter command:
   CREATE TABLE SIZE_TAB
               (COL1 CHAR(75)  DEFAULT
'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz0123456789012',
                COL2 INTEGER   DEFAULT -999888777,
                COL3 DEC(15,6) DEFAULT 987654321.123456,
                COL4 REAL      DEFAULT -1.048576E22)    !
 
Enter command:
   CREATE TABLE COMMODITY
         (C_NUM INTEGER NOT NULL,
          C_NAME CHAR(7) NOT NULL,
          CONSTRAINT C1_COMMODITY UNIQUE(C_NAME),
          PRIMARY KEY (C_NUM)) !
 
Enter command:
   CREATE TABLE CURR_TAB
         (CURRENCY CHAR(10) NOT NULL,
          DOL_EQUIV NUMERIC(5, 2),
          PRIMARY KEY (CURRENCY)) !
 
Enter command:
   CREATE TABLE MEASURE_T
         (MEASURE CHAR(8) NOT NULL,
          POU_EQUIV NUMERIC(8,2),
          PRIMARY KEY (MEASURE)) !
 
Enter command:
   CREATE TABLE C_TRANSAC
         (COMMOD_NO INTEGER,
          TOT_PRICE     DECIMAL(12,2),
          CURRENCY  CHAR(10),
          UNITS     INTEGER,
          MEASURE   CHAR(8),
          T_DATE    INTEGER,
          FOREIGN KEY (COMMOD_NO)
           REFERENCES COMMODITY,
          FOREIGN KEY (CURRENCY)
           REFERENCES CURR_TAB,
          FOREIGN KEY (MEASURE)
           REFERENCES MEASURE_T) !
 
Enter command:
 * ********************* CREATE VIEW STATEMENTS ******************** !
 
Enter command:
CREATE VIEW TESTREP AS
    SELECT TESTNO, RESULT, TESTTYPE
    FROM HU.TESTREP !
 
Enter command:
   CREATE VIEW DOL_PER_P (COMMODITY, U_PRICE, FROM_DATE, TO_DATE)
      AS SELECT COMMODITY.C_NAME,
                SUM(TOT_PRICE * DOL_EQUIV) / SUM(UNITS * POU_EQUIV),
                MIN(T_DATE), MAX(T_DATE)
         FROM C_TRANSAC, COMMODITY, CURR_TAB, MEASURE_T
         WHERE C_TRANSAC.COMMOD_NO = COMMODITY.C_NUM
            AND C_TRANSAC.CURRENCY = CURR_TAB.CURRENCY
            AND C_TRANSAC.MEASURE  = MEASURE_T.MEASURE
         GROUP BY COMMODITY.C_NAME
         HAVING SUM(TOT_PRICE * DOL_EQUIV) > 10000 !
 
Enter command:
 * VIEW COST_P_U FOR OPTIONAL TEST 0403
 * REMOVE VIEW FROM SCHEMA IF IT CAUSES ERRORS. !
 
Enter command:
   CREATE VIEW COST_P_U
     (COMMODITY, U_PRICE, CURRENCY, MEASURE)
      AS SELECT COMMODITY, U_PRICE * POU_EQUIV / DOL_EQUIV,
                CURRENCY, MEASURE
            FROM DOL_PER_P, CURR_TAB, MEASURE_T !
 
Enter command:
        CREATE VIEW ST6_W_GRA AS
                          SELECT EMPNUM,EMPNAME,GRADE,CITY
                          FROM STAFF6
                          WHERE GRADE > 0 AND GRADE < 20
                          WITH CHECK OPTION !
 
Enter command:
 * ************** GRANT STATEMENTS FOLLOW ************* !
 
Enter command:
        GRANT SELECT ON SUN.ECCO TO PUBLIC !
 
Enter command:
        GRANT INSERT ON TESTREP
             TO PUBLIC !
 
Enter command:
        GRANT REFERENCES ON ACR_SCH_P TO SULLIVAN
              WITH GRANT OPTION !
 
Enter command:
        GRANT ALL PRIVILEGES ON PROJ_P
             TO SULLIVAN !
 
Enter command:
 *  TEST GRANT WITHOUT GRANT PERMISSION BELOW.
 *  "WITH GRANT OPTION" PURPOSEFULLY OMITTED FROM SUN''S GRANT.
 *  DO NOT INSERT TEXT "WITH GRANT OPTION" !
 
Enter command:
        GRANT REFERENCES ON STAFF_P
             TO SULLIVAN !
 
Enter command:
        GRANT REFERENCES (C_NUM) ON COMMODITY TO SCHANZLE !
 
Enter command:
 * ************* END OF SCHEMA ************* !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
CONNECT SULLIVAN IDENTIFIED BY SULLIVAN SQLMODE ANSI !
 
Enter command:
FILE N4SCH9 !
 
Enter command:
  CREATE SCHEMA
    AUTHORIZATION SULLIVAN!
 
Enter command:
  CREATE TABLE WORKS_P
   (EMPNUM   CHAR(3) REFERENCES SUN.STAFF_P(EMPNUM),
    PNUM     CHAR(3),
    HOURS    DECIMAL(5),
    FOREIGN KEY (PNUM)
    REFERENCES SUN.PROJ_P(PNUM))!
 
Enter command:
  CREATE TABLE TTT(P1 DECIMAL(4) NOT NULL,
                 CONSTRAINT C1_TTT UNIQUE(P1),
                 P2 CHAR(4))!
 
Enter command:
 *  ************* GRANT STATEMENTS FOLLOW ************* !
 
Enter command:
   GRANT SELECT ON TTT TO SCHANZLE!
 
Enter command:
   GRANT REFERENCES ON SUN.ACR_SCH_P TO SCHANZLE!
 
Enter command:
 *   TEST GRANT WITHOUT GRANT PERMISSION BELOW *  EXPECT ERROR MESSAGE
 *   "WITH GRANT OPTION" PURPOSEFULLY OMITTED FROM SUN''S GRANT.
 *   DO NOT CHANGE FILE SCHEMA8 TO ALLOW "WITH GRANT OPTION" ON STAFF_P. !
 
Enter command:
   GRANT REFERENCES ON SUN.STAFF_P TO SCHANZLE!
 
*SQLSTATE 42000 Missing privilege                                          0021
 
Enter command:
 *  ************* END OF SCHEMA ************* !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
CONNECT SCHANZLE IDENTIFIED BY SCHANZLE SQLMODE ANSI !
 
Enter command:
FILE N4SCH10 !
 
Enter command:
  CREATE SCHEMA
  AUTHORIZATION SCHANZLE !
 
Enter command:
  CREATE TABLE ACR_SCH_F(F1 DECIMAL(4),
         F2 CHAR(4),
         FOREIGN KEY (F1)
         REFERENCES SUN.ACR_SCH_P(P1)) !
 
Enter command:
 * TEST GRANT REFERENCES WITHOUT GRANT PERMISSION BELOW -- EXPECT ERROR MESSAG
 * "WITH GRANT OPTION" PURPOSEFULLY OMITTED FROM SUN''S GRANT ON STAFF_P
 * DO NOT CHANGE FILE SCHEMA8 TO ALLOW "WITH GRANT OPTION" !
 
Enter command:
   CREATE TABLE TAB5(F15 CHAR(3),
          F5 CHAR(4),
          FOREIGN KEY (F15)
          REFERENCES SUN.STAFF_P(EMPNUM)) !
 
*SQLSTATE 42000 Unknown table name:STAFF_P                                 0077
 
Enter command:
 * TEST REFERENCES WITHOUT REFERENCE PERMISSION BELOW -- EXPECT ERROR MESSAGE
 * GRANT SELECT BY SULLIVAN DOES NOT IMPLY GRANT REFERENCES.
 * DO NOT CHANGE FILE SCHEMA9 TO ALLOW "GRANT REFERENCES" ON TTT. !
 
Enter command:
   CREATE TABLE TAB6(F16 DECIMAL(4),
          F6 CHAR(4),
          FOREIGN KEY (F16)
          REFERENCES SULLIVAN.TTT(P1)) !
 
*SQLSTATE 42000 Missing privilege:TTT                                      0085
 
Enter command:
 * CONSTRAINTS:  COLUMN VS. COLUMN !
 
Enter command:
   CREATE TABLE RET_CAT (
     VENDOR_ID INT,
     PROD_ID INT,
     WHOLESALE NUMERIC (10,2),
     RETAIL NUMERIC (10,2),
     MARKUP NUMERIC (10,2),
     EXPORT_C CHAR(2),
     EXP_L_DAT CHAR(20),
     CHECK (EXP_L_DAT IS NULL OR (
       EXPORT_C = 'F1' OR
       EXPORT_C = 'F2' OR
       EXPORT_C = 'F3'                  )),
     CHECK (EXPORT_C <> 'F2' OR WHOLESALE > 10000.00),
     CHECK (RETAIL >= WHOLESALE),
     CHECK (RETAIL = WHOLESALE + MARKUP)) !
 
Enter command:
   CREATE VIEW SALE_ITEM AS
     SELECT * FROM RET_CAT
     WHERE MARKUP < WHOLESALE / 10.0
     WITH CHECK OPTION !
 
Enter command:
   CREATE TABLE RASTER
      (C1 INT NOT NULL,
       FOREIGN KEY (C1)
       REFERENCES SUN.COMMODITY (C_NUM)) !
 
Enter command:
 * TEST REFERENCES WITHOUT REFERENCE PERMISSION BELOW -- EXPECT ERROR MESSAGE
 * GRANT REFERENCES (C_NUM) ON COMMODITY BY SUN DOES NOT IMPLY
 *      GRANT REFERENCES (C_NAME).
 * DO NOT CHANGE FILE SCHEMA8 TO ALLOW "GRANT REFERENCES" ON COLUMN C_NAME. !
 
Enter command:
   CREATE TABLE REFRESH
      (C1 CHAR (7),
       FOREIGN KEY (C1)
       REFERENCES SUN.COMMODITY (C_NAME)) !
 
*SQLSTATE 42000 Missing privilege:REFERENCES                               0001
 
Enter command:
   CREATE TABLE CPBASE
      (KC INT,
       JUNK1 CHAR (10),
       PRIMARY KEY (KC)) !
 
Enter command:
   CREATE TABLE CPREF
      (KCR INT,
       JUNK2 CHAR (10),
       FOREIGN KEY (KCR) REFERENCES CPBASE) !
 
Enter command:
   CREATE TABLE FOUR_TYPS
      (T_INT     INTEGER,
       T_CHAR    CHAR(10),
       T_DECIMAL DECIMAL(10,2),
       T_REAL    REAL) !
 
Enter command:
 * ************* END OF SCHEMA ************* !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE BASETAB !
 
Enter command:
CONNECT HU IDENTIFIED BY HU SQLMODE ANSI !
 
Enter command:
DELETE FROM HU.ECCO !
 
*SQLSTATE 02000 Row not found                                              0001
 
Enter command:
INSERT INTO HU.ECCO VALUES ('NL') !
 
Enter command:
DELETE FROM STAFF !
 
*SQLSTATE 02000 Row not found                                              0001
 
Enter command:
DELETE FROM PROJ !
 
*SQLSTATE 02000 Row not found                                              0001
 
Enter command:
DELETE FROM WORKS !
 
*SQLSTATE 02000 Row not found                                              0001
 
Enter command:
 
INSERT INTO STAFF VALUES ('E1','Alice',12,'Deale') !
 
Enter command:
INSERT INTO STAFF VALUES ('E2','Betty',10,'Vienna') !
 
Enter command:
INSERT INTO STAFF VALUES ('E3','Carmen',13,'Vienna') !
 
Enter command:
INSERT INTO STAFF VALUES ('E4','Don',12,'Deale') !
 
Enter command:
INSERT INTO STAFF VALUES ('E5','Ed',13,'Akron') !
 
Enter command:
 
INSERT INTO PROJ VALUES  ('P1','MXSS','Design',10000,'Deale') !
 
Enter command:
INSERT INTO PROJ VALUES  ('P2','CALM','Code',30000,'Vienna') !
 
Enter command:
INSERT INTO PROJ VALUES  ('P3','SDP','Test',30000,'Tampa') !
 
Enter command:
INSERT INTO PROJ VALUES  ('P4','SDP','Design',20000,'Deale') !
 
Enter command:
INSERT INTO PROJ VALUES  ('P5','IRM','Test',10000,'Vienna') !
 
Enter command:
INSERT INTO PROJ VALUES  ('P6','PAYR','Design',50000,'Deale') !
 
Enter command:
 
INSERT INTO WORKS VALUES  ('E1','P1',40) !
 
Enter command:
INSERT INTO WORKS VALUES  ('E1','P2',20) !
 
Enter command:
INSERT INTO WORKS VALUES  ('E1','P3',80) !
 
Enter command:
INSERT INTO WORKS VALUES  ('E1','P4',20) !
 
Enter command:
INSERT INTO WORKS VALUES  ('E1','P5',12) !
 
Enter command:
INSERT INTO WORKS VALUES  ('E1','P6',12) !
 
Enter command:
INSERT INTO WORKS VALUES  ('E2','P1',40) !
 
Enter command:
INSERT INTO WORKS VALUES  ('E2','P2',80) !
 
Enter command:
INSERT INTO WORKS VALUES  ('E3','P2',20) !
 
Enter command:
INSERT INTO WORKS VALUES  ('E4','P2',20) !
 
Enter command:
INSERT INTO WORKS VALUES  ('E4','P4',40) !
 
Enter command:
INSERT INTO WORKS VALUES  ('E4','P5',80) !
 
Enter command:
 
SELECT COUNT(*) INTO :I   FROM PROJ !
 
EXPRESSION1       :            6
 
Enter command:
SELECT COUNT(*) INTO :II  FROM STAFF !
 
EXPRESSION1       :            5
 
Enter command:
SELECT COUNT(*) INTO :III FROM WORKS !
 
EXPRESSION1       :           12
 
Enter command:
 
DELETE FROM STAFF3 !
 
*SQLSTATE 02000 Row not found                                              0001
 
Enter command:
INSERT INTO STAFF3
         SELECT *
         FROM   STAFF !
 
Enter command:
 
DELETE FROM VTABLE !
 
*SQLSTATE 02000 Row not found                                              0001
 
Enter command:
INSERT INTO VTABLE VALUES(10,+20,30,40,10.50) !
 
Enter command:
INSERT INTO VTABLE VALUES(0,1,2,3,4.25) !
 
Enter command:
INSERT INTO VTABLE VALUES(100,200,300,400,500.01) !
 
Enter command:
INSERT INTO VTABLE VALUES(1000,-2000,3000,NULL,4000.00) !
 
Enter command:
 
DELETE FROM UPUNIQ !
 
*SQLSTATE 02000 Row not found                                              0001
 
Enter command:
INSERT INTO UPUNIQ VALUES(1,'A') !
 
Enter command:
INSERT INTO UPUNIQ VALUES(2,'B') !
 
Enter command:
INSERT INTO UPUNIQ VALUES(3,'C') !
 
Enter command:
INSERT INTO UPUNIQ VALUES(4,'D') !
 
Enter command:
INSERT INTO UPUNIQ VALUES(6,'F') !
 
Enter command:
INSERT INTO UPUNIQ VALUES(8,'H') !
 
Enter command:
 
SELECT COUNT(*) INTO :I   FROM STAFF3 !
 
EXPRESSION1       :            5
 
Enter command:
SELECT COUNT(*) INTO :II  FROM VTABLE !
 
EXPRESSION1       :            4
 
Enter command:
SELECT COUNT(*) INTO :III FROM UPUNIQ !
 
EXPRESSION1       :            6
 
Enter command:
 
COMMIT WORK RELEASE!
 
Enter command:
FILE FLATTAB !
 
Enter command:
CONNECT FLATER IDENTIFIED BY FLATER SQLMODE ANSI !
 
Enter command:
DELETE FROM BASE_VS1 !
 
*SQLSTATE 02000 Row not found                                              0001
 
Enter command:
INSERT INTO BASE_VS1 VALUES (0,1) !
 
Enter command:
INSERT INTO BASE_VS1 VALUES (1,0) !
 
Enter command:
INSERT INTO BASE_VS1 VALUES (0,0) !
 
Enter command:
INSERT INTO BASE_VS1 VALUES (1,1) !
 
Enter command:
SELECT COUNT(*) INTO :I FROM BASE_VS1 !
 
EXPRESSION1       :            4
 
Enter command:
DELETE FROM USIG !
 
*SQLSTATE 02000 Row not found                                              0001
 
Enter command:
INSERT INTO USIG VALUES (0,2) !
 
Enter command:
INSERT INTO USIG VALUES (1,3) !
 
Enter command:
DELETE FROM U_SIG !
 
*SQLSTATE 02000 Row not found                                              0001
 
Enter command:
INSERT INTO U_SIG VALUES (4,6) !
 
Enter command:
INSERT INTO U_SIG VALUES (5,7) !
 
Enter command:
SELECT COUNT(*) INTO :I FROM USIG !
 
EXPRESSION1       :            2
 
Enter command:
SELECT COUNT(*) INTO :II FROM U_SIG !
 
EXPRESSION1       :            2
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE DML014 !
 
Enter command:
CONNECT HU IDENTIFIED BY HU SQLMODE ANSI !
 
Enter command:
PARS_THEN_EX !
 
Enter command:
  SELECT PNUM
     INTO   :PNO1
     FROM   PROJ
     WHERE  BUDGET BETWEEN 40000 AND 60000  !
 
PNUM              :  P6
 
Enter command:
  SELECT PNUM
     INTO   :PNO2
     FROM   PROJ
     WHERE BUDGET >= 40000 AND BUDGET <= 60000 !
 
PNUM              :  P6
 
Enter command:
  COMMIT WORK!
 
Enter command:
  SELECT CITY
     INTO   :CITY1
     FROM   STAFF
     WHERE  GRADE NOT BETWEEN 12 AND 13!
 
CITY              :  Vienna
 
Enter command:
  SELECT CITY
     INTO   :CITY2
     FROM   STAFF
     WHERE  NOT( GRADE BETWEEN 12 AND 13 )!
 
CITY              :  Vienna
 
Enter command:
  COMMIT WORK!
 
Enter command:
  SELECT STAFF.EMPNAME
     INTO   :EMPNA1
     FROM   STAFF
     WHERE  STAFF.EMPNUM IN
          (  SELECT WORKS.EMPNUM
      FROM   WORKS
      WHERE  WORKS.PNUM IN
           (  SELECT PROJ.PNUM
        FROM   PROJ
        WHERE  PROJ.CITY='Tampa' ))!
 
EMPNAME           :  Alice
 
Enter command:
  SELECT STAFF.EMPNAME
     INTO   :EMPNA2
     FROM   STAFF
     WHERE  STAFF.EMPNUM = ANY
          (  SELECT WORKS.EMPNUM
      FROM   WORKS
      WHERE  WORKS.PNUM IN
           (  SELECT PROJ.PNUM
        FROM   PROJ
        WHERE  PROJ.CITY='Tampa' ))!
 
EMPNAME           :  Alice
 
Enter command:
  COMMIT WORK!
 
Enter command:
  SELECT WORKS.HOURS
     INTO   :HOURS1
     FROM   WORKS
     WHERE  WORKS.PNUM NOT IN
          (  SELECT PROJ.PNUM
      FROM   PROJ
      WHERE  PROJ.BUDGET  BETWEEN 5000 AND 40000 )!
 
HOURS             :      12
 
Enter command:
  SELECT WORKS.HOURS
     INTO   :HOURS2
     FROM   WORKS
     WHERE  NOT ( WORKS.PNUM IN
          (  SELECT PROJ.PNUM
      FROM   PROJ
      WHERE  PROJ.BUDGET  BETWEEN 5000 AND 40000 ))!
 
HOURS             :      12
 
Enter command:
  COMMIT WORK!
 
Enter command:
  SELECT HOURS
     INTO   :HOURS1
     FROM   WORKS
     WHERE  PNUM NOT IN
          ( SELECT PNUM
      FROM   WORKS
      WHERE PNUM IN ('P1','P2','P4','P5','P6'))!
 
HOURS             :      80
 
Enter command:
  SELECT HOURS
     INTO   :HOURS2
     FROM   WORKS
     WHERE  NOT ( PNUM IN
          ( SELECT PNUM
      FROM   WORKS
      WHERE PNUM IN ('P1','P2','P4','P5','P6')))!
 
HOURS             :      80
 
Enter command:
  COMMIT WORK!
 
Enter command:
DATA !
 
Enter command:
  SELECT EMPNAME
     INTO   :EMPNA1
     FROM   STAFF
     WHERE  EMPNAME LIKE :PNO1!
 
c 256 'Al%'
 
EMPNAME           :  Alice
 
Enter command:
NODATA !
 
Enter command:
  COMMIT WORK!
 
Enter command:
  SELECT CITY
      INTO   :CITY1
     FROM   STAFF
     WHERE  EMPNAME LIKE 'B__t%'!
 
CITY              :  Vienna
 
Enter command:
  COMMIT WORK!
 
Enter command:
  INSERT INTO STAFF
    VALUES('E36','Huyan',36,'Xi_an%')!
 
Enter command:
  SELECT CITY
     INTO   :CITY2
     FROM   STAFF
     WHERE  CITY LIKE 'XiS___S%%'
     ESCAPE 'S'!
 
CITY              :  Xi_an%
 
Enter command:
  ROLLBACK WORK!
 
Enter command:
  INSERT INTO STAFF
    VALUES('E36','Huyan',36,'Xi_an%')!
 
Enter command:
  SELECT COUNT(*)
     INTO :I
     FROM   STAFF
     WHERE  EMPNUM  NOT LIKE '_36'!
 
EXPRESSION1       :            5
 
Enter command:
  SELECT COUNT(*)
     INTO :II
     FROM   STAFF
     WHERE  NOT(EMPNUM  LIKE '_36')!
 
EXPRESSION1       :            5
 
Enter command:
  ROLLBACK WORK!
 
Enter command:
  INSERT INTO STAFF
    VALUES('E36','Huyan',36,NULL)!
 
Enter command:
  SELECT EMPNAME
     INTO :EMPNA1
     FROM STAFF
     WHERE CITY IS NULL!
 
EMPNAME           :  Huyan
 
Enter command:
  ROLLBACK WORK!
 
Enter command:
  INSERT INTO STAFF
    VALUES('E36','Huyan',36,NULL)!
 
Enter command:
  SELECT COUNT(*)
     INTO :I
     FROM STAFF!
 
EXPRESSION1       :            6
 
Enter command:
  SELECT COUNT(*)
     INTO :HOURS1
     FROM STAFF
     WHERE CITY IS NOT NULL!
 
EXPRESSION1       :            5
 
Enter command:
  SELECT COUNT(*)
     INTO :HOURS2
     FROM STAFF
     WHERE NOT (CITY IS NULL)!
 
EXPRESSION1       :            5
 
Enter command:
  ROLLBACK WORK!
 
Enter command:
  SELECT STAFF.EMPNAME
     INTO   :EMPNA1
     FROM   STAFF
     WHERE  NOT EXISTS
     (  SELECT *
      FROM   PROJ
      WHERE  NOT EXISTS
        ( SELECT *
          FROM   WORKS
          WHERE  STAFF.EMPNUM=WORKS.EMPNUM
          AND    WORKS.PNUM=PROJ.PNUM ))!
 
EMPNAME           :  Alice
 
Enter command:
  COMMIT WORK!
 
Enter command:
  SELECT CITY
     INTO   :CITY1
     FROM   PROJ
     WHERE  BUDGET > ALL
          (  SELECT BUDGET
      FROM   PROJ
      WHERE  CITY='Vienna' )!
 
CITY              :  Deale
 
Enter command:
  COMMIT WORK!
 
Enter command:
  SELECT EMPNAME
     INTO   :EMPNA1
     FROM   STAFF
     WHERE  GRADE < SOME
          (  SELECT BUDGET/1000 - 39
      FROM   PROJ
      WHERE  CITY='Deale' )!
 
EMPNAME           :  Betty
 
Enter command:
  COMMIT WORK!
 
Enter command:
  SELECT EMPNAME
     INTO   :EMPNA1
     FROM   STAFF
     WHERE  GRADE < ANY
          (  SELECT BUDGET/1000 - 39
      FROM   PROJ
      WHERE  CITY='Deale' )!
 
EMPNAME           :  Betty
 
Enter command:
  COMMIT WORK!
 
Enter command:
PARS_EXECUTE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE DML023 !
 
Enter command:
CONNECT HU IDENTIFIED BY HU SQLMODE ANSI!
 
Enter command:
PARS_THEN_EX !
 
Enter command:
DECLARE S1 CURSOR FOR
          SELECT PNUM
          FROM PROJ
          WHERE PROJ.CITY =
             (SELECT STAFF.CITY
              FROM STAFF
              WHERE EMPNUM = 'E1') !
 
resultcount :                     3
 
Enter command:
FETCH S1 INTO :EMPNO2 !
 
PNUM
----
P1
P4
P6
 
resultcount :                     3
 
Enter command:
CLOSE S1 !
 
Enter command:
DECLARE S2 CURSOR FOR
          SELECT PNUM
          FROM PROJ
          WHERE PROJ.CITY =
             (SELECT STAFF.CITY
              FROM STAFF
              WHERE EMPNUM > 'E1') !
 
*SQLSTATE 21000 More than one result row not allowed                       0001
 
Enter command:
FETCH S2 INTO :PNO1 !
 
*SQLSTATE 24000 Unknown result table                                       0001
 
Enter command:
SELECT COUNT(*)
          INTO :II
          FROM   STAFF
          WHERE  STAFF.CITY =
          (SELECT PROJ.CITY
           FROM   PROJ
           WHERE  PNUM > 'P7') !
 
EXPRESSION1       :            0
 
Enter command:
SELECT COUNT(*)
          INTO :II
          FROM   STAFF
          WHERE  NOT (STAFF.CITY =
                    (SELECT PROJ.CITY
                     FROM   PROJ
                     WHERE  PNUM > 'P7')) !
 
EXPRESSION1       :            0
 
Enter command:
DECLARE S4 CURSOR FOR
          SELECT PNUM
          FROM PROJ
          WHERE CITY <> 'Deale' !
 
resultcount :               unknown
 
Enter command:
FETCH S4 INTO :PNO1 !
 
PNUM
----
P2
P3
P5
 
resultcount :                     3
 
Enter command:
CLOSE S4 !
 
Enter command:
SELECT COUNT(*)
          INTO :II
          FROM WORKS
          WHERE EMPNUM = 'E1' !
 
EXPRESSION1       :            6
 
Enter command:
SELECT COUNT(*)
          INTO :II
          FROM WORKS
          WHERE EMPNUM = 'E1' AND EMPNUM = 'E1 ' !
 
EXPRESSION1       :            6
 
Enter command:
UPDATE STAFF
         SET    GRADE = NULL
         WHERE  EMPNUM='E1' OR EMPNUM='E3' OR EMPNUM='E5' !
 
resultcount :                     3
 
Enter command:
DECLARE XX CURSOR
     FOR SELECT EMPNUM,GRADE
         FROM   STAFF
         ORDER  BY GRADE,EMPNUM !
 
resultcount :                     5
 
Enter command:
FETCH XX INTO :EMPNO2,:GRADE1:INDIC1 !
 
EMPNUM | GRADE
-------+------
E2     |    10
E4     |    12
E1     | ?????
E3     | ?????
E5     | ?????
 
resultcount :                     5
 
Enter command:
ROLLBACK WORK !
 
Enter command:
UPDATE STAFF
         SET    GRADE = NULL
         WHERE  EMPNUM='E1' OR EMPNUM='E3' OR EMPNUM='E5' !
 
resultcount :                     3
 
Enter command:
DECLARE XXX CURSOR
     FOR SELECT DISTINCT GRADE
         FROM   STAFF
         ORDER  BY GRADE !
 
resultcount :                     3
 
Enter command:
FETCH XXX INTO :GRADE1:INDIC1 !
 
GRADE
-----
   10
   12
?????
 
resultcount :                     3
 
Enter command:
PARS_EXECUTE !
 
Enter command:
ROLLBACK WORK RELEASE!
 
Enter command:
FILE DML049 !
 
Enter command:
CONNECT HU IDENTIFIED BY HU SQLMODE ANSI !
 
Enter command:
     INSERT INTO TEMP_S
             SELECT EMPNUM,GRADE,CITY
             FROM STAFF
             WHERE GRADE > 11 !
 
Enter command:
 
     INSERT INTO STAFF1
             SELECT *
             FROM STAFF !
 
Enter command:
 
      INSERT INTO WORKS1
             SELECT *
             FROM WORKS !
 
Enter command:
 
     INSERT INTO STAFF4
             SELECT *
             FROM STAFF !
 
Enter command:
 
     INSERT INTO PROJ1
             SELECT *
             FROM PROJ !
 
Enter command:
 
     DECLARE TEN CURSOR
             FOR SELECT STAFF.EMPNUM,PROJ.PNUM,WORKS.HOURS,
                        STAFF3.GRADE,STAFF4.CITY,WORKS1.HOURS,
                        TEMP_S.GRADE,PROJ1.PNUM,STAFF1.GRADE,
                        UPUNIQ.COL2
                 FROM   STAFF,PROJ,WORKS,STAFF3,STAFF4,WORKS1,
                        TEMP_S,PROJ1,STAFF1,UPUNIQ
                 WHERE  STAFF.EMPNUM = WORKS.EMPNUM    AND
                        PROJ.PNUM = WORKS.PNUM         AND
                        STAFF3.EMPNUM = WORKS.EMPNUM   AND
                        STAFF4.EMPNUM = WORKS.EMPNUM   AND
                        WORKS1.EMPNUM = WORKS.EMPNUM   AND
                        WORKS1.PNUM = WORKS.PNUM       AND
                        TEMP_S.EMPNUM = WORKS.EMPNUM   AND
                        PROJ1.PNUM = WORKS.PNUM        AND
                        STAFF1.EMPNUM = WORKS.EMPNUM   AND
                        UPUNIQ.COL2 = 'A'
                 ORDER BY STAFF.EMPNUM, PROJ.PNUM !
 
resultcount :                    10
 
Enter command:
 
     FETCH TEN INTO :EMPNO1,:PNO1,:HOURS1,:GRADE1,:CITY1,:HOURS2,
                             :GRADE2,:PNO2,:GRADE4,:COLUM2 !
 
EMPNUM            :  E1
PNUM              :  P1
HOURS             :      40
GRADE             :     12
CITY              :  Deale
EXPRESSION3       :      40
EXPRESSION1       :     12
EXPRESSION4       :  P1
EXPRESSION2       :     12
COL2              :  A
------------------------------------
EMPNUM            :  E1
PNUM              :  P2
HOURS             :      20
GRADE             :     12
CITY              :  Deale
EXPRESSION3       :      20
EXPRESSION1       :     12
EXPRESSION4       :  P2
EXPRESSION2       :     12
COL2              :  A
------------------------------------
EMPNUM            :  E1
PNUM              :  P3
HOURS             :      80
GRADE             :     12
CITY              :  Deale
EXPRESSION3       :      80
EXPRESSION1       :     12
EXPRESSION4       :  P3
EXPRESSION2       :     12
COL2              :  A
------------------------------------
EMPNUM            :  E1
PNUM              :  P4
HOURS             :      20
GRADE             :     12
CITY              :  Deale
EXPRESSION3       :      20
EXPRESSION1       :     12
EXPRESSION4       :  P4
EXPRESSION2       :     12
COL2              :  A
------------------------------------
EMPNUM            :  E1
PNUM              :  P5
HOURS             :      12
GRADE             :     12
CITY              :  Deale
EXPRESSION3       :      12
EXPRESSION1       :     12
EXPRESSION4       :  P5
EXPRESSION2       :     12
COL2              :  A
------------------------------------
EMPNUM            :  E1
PNUM              :  P6
HOURS             :      12
GRADE             :     12
CITY              :  Deale
EXPRESSION3       :      12
EXPRESSION1       :     12
EXPRESSION4       :  P6
EXPRESSION2       :     12
COL2              :  A
------------------------------------
EMPNUM            :  E3
PNUM              :  P2
HOURS             :      20
GRADE             :     13
CITY              :  Vienna
EXPRESSION3       :      20
EXPRESSION1       :     13
EXPRESSION4       :  P2
EXPRESSION2       :     13
COL2              :  A
------------------------------------
EMPNUM            :  E4
PNUM              :  P2
HOURS             :      20
GRADE             :     12
CITY              :  Deale
EXPRESSION3       :      20
EXPRESSION1       :     12
EXPRESSION4       :  P2
EXPRESSION2       :     12
COL2              :  A
------------------------------------
EMPNUM            :  E4
PNUM              :  P4
HOURS             :      40
GRADE             :     12
CITY              :  Deale
EXPRESSION3       :      40
EXPRESSION1       :     12
EXPRESSION4       :  P4
EXPRESSION2       :     12
COL2              :  A
------------------------------------
EMPNUM            :  E4
PNUM              :  P5
HOURS             :      80
GRADE             :     12
CITY              :  Deale
EXPRESSION3       :      80
EXPRESSION1       :     12
EXPRESSION4       :  P5
EXPRESSION2       :     12
COL2              :  A
 
resultcount :                    10
 
Enter command:
 
COMMIT WORK RELEASE !
 
Enter command:
FILE DML087 !
 
Enter command:
CONNECT FLATER IDENTIFIED BY FLATER SQLMODE ANSI !
 
Enter command:
PARS_THEN_EX !
 
Enter command:
     SELECT COUNT(*) INTO :TMPCNT FROM DV1 !
 
EXPRESSION1       :            4
 
Enter command:
     DECLARE POIU CURSOR FOR
              SELECT HOURS FROM DV1
              ORDER BY HOURS DESC !
 
resultcount :                     4
 
Enter command:
     FETCH POIU INTO :CNT1 !
 
HOURS
------
    80
    40
    20
    12
 
resultcount :                     4
 
Enter command:
     COMMIT WORK !
 
Enter command:
     SELECT COUNT(*) INTO :TMPCNT
       FROM VS2 WHERE C1 = 0 !
 
*** SQLSTATEMENT HAS BEEN OPTIMIZED
 
EXPRESSION1       :            2
 
Enter command:
     SELECT COUNT(*) INTO :TMPCNT
       FROM VS2 WHERE C1 = 1 !
 
*** SQLSTATEMENT HAS BEEN OPTIMIZED
 
EXPRESSION1       :            2
 
Enter command:
     SELECT COUNT(*) INTO :TMPCNT
       FROM VS3 !
 
*** SQLSTATEMENT HAS BEEN OPTIMIZED
 
EXPRESSION1       :            0
 
Enter command:
     SELECT COUNT(*) INTO :TMPCNT
       FROM VS4 !
 
*** SQLSTATEMENT HAS BEEN OPTIMIZED
 
EXPRESSION1       :            0
 
Enter command:
     SELECT COUNT(*) INTO :TMPCNT
       FROM VS5 !
 
*** SQLSTATEMENT HAS BEEN OPTIMIZED
 
EXPRESSION1       :            2
 
Enter command:
     SELECT COUNT(*) INTO :TMPCNT
       FROM VS6 !
 
*** SQLSTATEMENT HAS BEEN OPTIMIZED
 
EXPRESSION1       :            2
 
Enter command:
     COMMIT WORK !
 
Enter command:
     SELECT COUNT(*) INTO :CNT1 FROM USIG WHERE C1 = 0 !
 
EXPRESSION1       :            1
 
Enter command:
     SELECT COUNT(*) INTO :CNT2 FROM USIG WHERE C1 = 2 !
 
EXPRESSION1       :            0
 
Enter command:
     SELECT COUNT(*) INTO :CNT3 FROM USIG WHERE C_1 = 0 !
 
EXPRESSION1       :            0
 
Enter command:
     SELECT COUNT(*) INTO :CNT4 FROM USIG WHERE C_1 = 2 !
 
EXPRESSION1       :            1
 
Enter command:
     SELECT COUNT(*) INTO :CNT1 FROM USIG WHERE C1 = 4 !
 
EXPRESSION1       :            0
 
Enter command:
     SELECT COUNT(*) INTO :CNT2 FROM U_SIG WHERE C1 = 0 !
 
EXPRESSION1       :            0
 
Enter command:
     SELECT COUNT(*) INTO :CNT3 FROM U_SIG WHERE C1 = 4 !
 
EXPRESSION1       :            1
 
Enter command:
     SELECT COUNT(*) INTO :CNT1 FROM HU.STAFF U_CN
       WHERE U_CN.GRADE IN (SELECT UCN.GRADE FROM HU.STAFF UCN
         WHERE UCN.GRADE > 10) !
 
EXPRESSION1       :            4
 
Enter command:
     DECLARE UCRSR CURSOR FOR
       SELECT COUNT(*) FROM HU.STAFF WHERE GRADE > 10 !
 
resultcount :                     1
 
Enter command:
     DECLARE U_CRSR CURSOR FOR
       SELECT COUNT(*) FROM HU.STAFF WHERE GRADE < 10 !
 
resultcount :                     1
 
Enter command:
     FETCH UCRSR INTO :CNT2 !
 
EXPRESSION1
-----------
          4
 
resultcount :                     1
 
Enter command:
     CLOSE UCRSR !
 
Enter command:
     FETCH U_CRSR INTO :CNT3 !
 
EXPRESSION1
-----------
          0
 
resultcount :                     1
 
Enter command:
     CLOSE U_CRSR !
 
Enter command:
PARS_EXECUTE !
 
Enter command:
     COMMIT WORK RELEASE !
 
Enter command:
FILE CDR015 !
 
Enter command:
FILE CONNECT ( SUN SUN SQLMODE ANSI !
 
Enter command:
CONNECT SUN IDENTIFIED BY SUN SQLMODE ANSI ISOLATION LEVEL 1 !
 
Enter command:
INSERT INTO SIZ1_P VALUES
         ('E1','TTT',1,'SSS',10,'RRR','HHH','YYY',20)!
 
Enter command:
INSERT INTO SIZ1_P VALUES
         ('E1','TTS',1,'SSS',10,'RRR','HHH','YYY',21)!
 
Enter command:
INSERT INTO SIZ1_P VALUES
         ('E2','TTT',1,'SSS',10,'RRR','HHH','YYY',22)!
 
Enter command:
INSERT INTO SIZ1_P VALUES
         ('E3','TTT',1,'SSS',11,'RRR','HHH','YYY',23)!
 
Enter command:
INSERT INTO SIZ1_P VALUES
         ('E4','TTT',2,'SSS',10,'RRR','HHH','YYY',24)!
 
Enter command:
INSERT INTO SIZ1_P VALUES
         ('E1','TTS',3,'SSS',10,'RRR','HHH','YYY',25)!
 
Enter command:
INSERT INTO SIZ1_P VALUES
         ('E2','TTT',1,'SSS',10,'TRR','HHH','YYY',26)!
 
Enter command:
INSERT INTO SIZ1_P VALUES
         ('E3','TTT',4,'SSS',11,'RRR','HHH','YYY',27)!
 
Enter command:
 
INSERT INTO SIZ1_F VALUES
         ('E1','TTT',1,'SSS',10,'RRR','YYY',90,20)!
 
Enter command:
INSERT INTO SIZ1_F VALUES
         ('E1','TTS',1,'SSS',10,'RRR','YYY',91,20)!
 
Enter command:
INSERT INTO SIZ1_F VALUES
         ('E2','TTT',1,'SSS',10,'RRR','YYY',92,20)!
 
Enter command:
INSERT INTO SIZ1_F VALUES
         ('E3','TTT',1,'SSS',11,'RRR','YYY',93,20)!
 
Enter command:
INSERT INTO SIZ1_F VALUES
         ('E4','TTT',2,'SSS',10,'RRR','YYY',94,20)!
 
Enter command:
INSERT INTO SIZ1_F VALUES
         ('E1','TTS',3,'SSS',10,'RRR','YYY',95,20)!
 
Enter command:
INSERT INTO SIZ1_F VALUES
         ('E2','TTT',1,'SSS',10,'TRR','YYY',96,20)!
 
Enter command:
INSERT INTO SIZ1_F VALUES
         ('E2','TTT',1,'SSS',10,'TRR','YYY',97,20)!
 
Enter command:
PARS_THEN_EX !
 
Enter command:
DELETE FROM SIZ1_F
        WHERE F1 = 'E1'!
 
resultcount :                     3
 
Enter command:
UPDATE SIZ1_P
        SET S1 = 'E9'
        WHERE S1 = 'E1' AND S2 = 'TTT'!
 
resultcount :                     1
 
Enter command:
SELECT S1 INTO :EMPNO1
        FROM SIZ1_P
        WHERE S1 = 'E9'!
 
S1                :  E9
 
Enter command:
PARS_EXECUTE !
 
Enter command:
ROLLBACK WORK RELEASE !
 
Enter command:
FILE CDR025 !
 
Enter command:
CONNECT SUN IDENTIFIED BY SUN SQLMODE ANSI !
 
Enter command:
PARS_THEN_EX !
 
Enter command:
      DELETE FROM C_TRANSAC !
 
*SQLSTATE 02000 Row not found                                              0001
 
Enter command:
      DELETE FROM COMMODITY !
 
*SQLSTATE 02000 Row not found                                              0001
 
Enter command:
      DELETE FROM CURR_TAB !
 
*SQLSTATE 02000 Row not found                                              0001
 
Enter command:
      DELETE FROM MEASURE_T !
 
*SQLSTATE 02000 Row not found                                              0001
 
Enter command:
      INSERT INTO COMMODITY
              VALUES (17, 'Wheat') !
 
Enter command:
      INSERT INTO COMMODITY
              VALUES (14, 'Saffron') !
 
Enter command:
      INSERT INTO COMMODITY
              VALUES (23, 'Alfalfa') !
 
Enter command:
      INSERT INTO CURR_TAB
              VALUES ('DOLLAR', 1.00) !
 
Enter command:
      INSERT INTO CURR_TAB
              VALUES ('POUND', 1.91) !
 
Enter command:
      INSERT INTO CURR_TAB
              VALUES ('DM', .45) !
 
Enter command:
      INSERT INTO MEASURE_T
              VALUES ('POUND', 1.00) !
 
Enter command:
      INSERT INTO MEASURE_T
              VALUES ('OUNCE', .06) !
 
Enter command:
      INSERT INTO MEASURE_T
              VALUES ('KILO', 2.20) !
 
Enter command:
      INSERT INTO MEASURE_T
              VALUES ('TON', 2000.00) !
 
Enter command:
      INSERT INTO C_TRANSAC
              VALUES (17, 1411.5, 'DM', 4000, 'KILO', 871212) !
 
Enter command:
      INSERT INTO C_TRANSAC
              VALUES (17, 7000.0, 'POUND', 100, 'TON', 871012) !
 
Enter command:
      INSERT INTO C_TRANSAC
              VALUES (23, 20000.0, 'DOLLAR', 40000, 'POUND', 880707) !
 
Enter command:
      INSERT INTO C_TRANSAC
              VALUES (14, 10000.0, 'DM', 900, 'OUNCE', 880606) !
 
Enter command:
      INSERT INTO C_TRANSAC
              VALUES (14, 10000.0, 'DM', 900, 'OUNCE', 880707) !
 
Enter command:
      COMMIT WORK !
 
Enter command:
      SELECT COUNT(*) INTO :COUNT1
              FROM C_TRANSAC WHERE COMMOD_NO = 17 !
 
EXPRESSION1       :            2
 
Enter command:
      DECLARE CCC CURSOR FOR
           SELECT U_PRICE, FROM_DATE, TO_DATE, COMMODITY
              FROM DOL_PER_P
              ORDER BY COMMODITY DESC !
 
resultcount :                     2
 
Enter command:
      FETCH CCC
              INTO  :PRICE1, :FROMDT, :TODATE, :COMMOD !
 
U_PRICE           :   6.7074592911877394636015325670498084291E-02
FROM_DATE         :       871012
TO_DATE           :       871212
COMMODITY         :  Wheat
-----------------------------------------------------------------
U_PRICE           :   5.0000000000000000000000000000000000000E-01
FROM_DATE         :       880707
TO_DATE           :       880707
COMMODITY         :  Alfalfa
 
resultcount :                     2
 
Enter command:
      CLOSE CCC !
 
Enter command:
      COMMIT WORK !
 
Enter command:
      SELECT COUNT(*) INTO :COUNT1
              FROM COST_P_U !
 
*** SQLSTATEMENT HAS BEEN OPTIMIZED
 
EXPRESSION1       :           24
 
Enter command:
      DECLARE DDD CURSOR FOR
          SELECT CURRENCY, MEASURE, U_PRICE, COMMODITY
              FROM COST_P_U !
 
*** SQLSTATEMENT HAS BEEN OPTIMIZED
 
resultcount :                    24
 
Enter command:
            FETCH DDD
                    INTO :CURREN, :MEASUR, :PRICE2, :COMMOD !
 
CURRENCY   | MEASURE  | U_PRICE                                      | COMMODITY
-----------+----------+----------------------------------------------+----------
DM         | KILO     |  2.4444444444444444444444444444444444444E+00 | Alfalfa
DOLLAR     | KILO     |  1.1000000000000000000000000000000000000E+00 | Alfalfa
POUND      | KILO     |  5.7591623036649214659685863874345549738E-01 | Alfalfa
DM         | OUNCE    |  6.6666666666666666666666666666666666666E-02 | Alfalfa
DOLLAR     | OUNCE    |  3.0000000000000000000000000000000000000E-02 | Alfalfa
POUND      | OUNCE    |  1.5706806282722513089005235602094240838E-02 | Alfalfa
DM         | POUND    |  1.1111111111111111111111111111111111111E+00 | Alfalfa
DOLLAR     | POUND    |  5.0000000000000000000000000000000000000E-01 | Alfalfa
POUND      | POUND    |  2.6178010471204188481675392670157068063E-01 | Alfalfa
DM         | TON      |  2.2222222222222222222222222222222222222E+03 | Alfalfa
DOLLAR     | TON      |  1.0000000000000000000000000000000000000E+03 | Alfalfa
POUND      | TON      |  5.2356020942408376963350785340314136125E+02 | Alfalfa
DM         | KILO     |  3.2792023201362281822051936994465730097E-01 | Wheat
DOLLAR     | KILO     |  1.4756410440613026819923371647509578544E-01 | Wheat
POUND      | KILO     |  7.7258693406350925758761108102144390282E-02 | Wheat
DM         | OUNCE    |  8.9432790549169859514687100893997445722E-03 | Wheat
DOLLAR     | OUNCE    |  4.0244755747126436781609195402298850575E-03 | Wheat
 
CURRENCY   | MEASURE  | U_PRICE                                      | COMMODITY
-----------+----------+----------------------------------------------+----------
POUND      | OUNCE    |  2.1070552747186616116025756755130288259E-03 | Wheat
DM         | POUND    |  1.4905465091528309919114516815666240954E-01 | Wheat
DOLLAR     | POUND    |  6.7074592911877394636015325670498084291E-02 | Wheat
POUND      | POUND    |  3.5117587911977693526709594591883813765E-02 | Wheat
DM         | TON      |  2.9810930183056619838229033631332481906E+02 | Wheat
DOLLAR     | TON      |  1.3414918582375478927203065134099616858E+02 | Wheat
POUND      | TON      |  7.0235175823955387053419189183767627528E+01 | Wheat
 
resultcount :                    24
 
Enter command:
      COMMIT WORK !
 
Enter command:
DATA !
 
Enter command:
      DECLARE EEE CURSOR FOR
           SELECT (100 + :PERCNT) * U_PRICE * :UNITZ / 100, COMMODITY
              FROM DOL_PER_P
              ORDER BY COMMODITY !
 
n 38 7 n 38 700
 
resultcount :                     2
 
Enter command:
NODATA !
 
Enter command:
      FETCH EEE INTO :MYBID1, :COMMOD !
 
EXPRESSION1                                  | COMMODITY
---------------------------------------------+----------
 3.7450000000000000000000000000000000000E+02 | Alfalfa
 5.0238870090996168582375478927203065134E+01 | Wheat
 
resultcount :                     2
 
Enter command:
      CLOSE EEE !
 
Enter command:
PARS_EXECUTE!
 
Enter command:
      COMMIT WORK RELEASE !
 
Enter command:
FILE NIST0158 !
 
Enter command:
FILE CONNECT ( HU HU SQLMODE ANSI !
 
Enter command:
CONNECT HU IDENTIFIED BY HU SQLMODE ANSI ISOLATION LEVEL 1 !
 
Enter command:
PARS_THEN_EX !
 
Enter command:
      DECLARE CC CURSOR
            FOR SELECT EMPNAME,PNUM,HOURS
                FROM   STAFF,WORKS
                WHERE  STAFF.EMPNUM = WORKS.EMPNUM
            UNION
                SELECT EMPNAME,PNUM,HOURS
                FROM   STAFF,WORKS
                WHERE  NOT EXISTS
                      (SELECT HOURS
                       FROM   WORKS
                       WHERE  STAFF.EMPNUM = WORKS.EMPNUM) ORDER BY 1,2,3!
 
resultcount :                    21
 
Enter command:
FETCH CC INTO :A, :B, :C !
 
EMPNAME              | PNUM | HOURS
---------------------+------+-------
Alice                | P1   |     40
Alice                | P2   |     20
Alice                | P3   |     80
Alice                | P4   |     20
Alice                | P5   |     12
Alice                | P6   |     12
Betty                | P1   |     40
Betty                | P2   |     80
Carmen               | P2   |     20
Don                  | P2   |     20
Don                  | P4   |     40
Don                  | P5   |     80
Ed                   | P1   |     40
Ed                   | P2   |     20
Ed                   | P2   |     80
Ed                   | P3   |     80
Ed                   | P4   |     20
 
EMPNAME              | PNUM | HOURS
---------------------+------+-------
Ed                   | P4   |     40
Ed                   | P5   |     12
Ed                   | P5   |     80
Ed                   | P6   |     12
 
resultcount :                    21
 
Enter command:
PARS_EXECUTE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER HU !
 
Enter command:
DROP USER CUGINI !
 
Enter command:
DROP USER MCGINN !
 
Enter command:
DROP USER SULLIVAN1 !
 
Enter command:
DROP USER FLATER !
 
Enter command:
DROP USER SUN !
 
Enter command:
DROP USER SULLIVAN !
 
Enter command:
DROP USER SCHANZLE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE SHUTDWNK !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE SHUTDOWN !
 
Enter command:
DBMCLI SUPERDBA,COLDUSER!
UTIL_CONNECT SUT,SUT!
OK
 
DB_OFFLINE!
OK
 
BYE!
 
Enter command:
VDNEXIT !
SESSION END
 
