JOIN_N.vdnts
 
Enter command:
FILE XRESTORE !
 
Enter command:
DBMCLI SUPERDBA,COLDUSER!
UTIL_CONNECT SUPERDBA,COLDUSER!
OK
 
BACKUP_RESTORE XINITDB DATA!
OK
Returncode           0
Date                 DATEXXXX
Time                 TIMEYYYY
Server               <servernode>
Database             <serverdb>
Kernel Version       KERNEL    vv.vv.vv Build bbb-bbb-bbb-bbb
Pages Transferred    000
Pages Left           0
Volumes              1
Medianame            xinitdb
Location             xinitdb.sav
Errortext
Label                <label>
Is Consistent        true
First LOG Page       000
Last LOG Page
DB Stamp 1 Date      DATEXXXX
DB Stamp 1 Time      TIMEYYYY
DB Stamp 2 Date
DB Stamp 2 Time
Page Count           000
Devices Used         1
Database ID          <servernode>:<serverdb>_DATEXXXX_<timestamp>
Max Used Data Page  000
Converter Page Count 8
 
UTIL_EXECUTE CLEAR LOG!
OK
 
DB_ONLINE!
OK
 
UTIL_RELEASE!
OK
 
UTIL_CONNECT SUT,SUT!
OK
 
UTIL_RELEASE!
OK
 
BYE!
 
Enter command:
 
FILE JOIN_N ( 'NO' !
 
Enter command:
SENDERID DBM !
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
SET PARAMETER OPTIMIZE_OPERATOR_JOIN = 'NO' !
 
Enter command:
COMMIT RELEASE !
 
Enter command:
SENDERID XCI !
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE TAB1 ( SPALTE1 FIXED(5),
                    SPALTE2 FIXED(11,6),
                    SPALTE3 FIXED(3,3),
                    SPALTE4 FLOAT(7) ) !
 
Enter command:
CREATE TABLE TAB2 ( SPALTE1 FLOAT(12), COL2 FIXED(5,2) ) !
 
Enter command:
INSERT TAB1 VALUES ( 348  , 76543.21, - 0.623, -12.3E12 ) !
 
Enter command:
INSERT TAB1 VALUES ( -9999,        0,   0.003, 12345E-7 ) !
 
Enter command:
INSERT TAB1 VALUES (  NULL,  -5.1234,       0,     NULL ) !
 
Enter command:
INSERT TAB1 VALUES (     0,     NULL,    NULL,    3E-32 ) !
 
Enter command:
INSERT TAB2 VALUES ( 1.34E+1,   22.33 ) !
 
Enter command:
INSERT TAB2 VALUES (   -0.18, -123.07 ) !
 
Enter command:
SELECT *  FROM TAB1, TAB2 REF
   WHERE +ABS(TAB1.SPALTE1 + REF.SPALTE1 )
       > TRUNC(REF.SPALTE1 -  ABS( -REF.COL2 )) !
 
resultcount :                     6
 
Enter command:
FETCH !
 
SPALTE1 | SPALTE2       | SPALTE3 | SPALTE4       | SPALTE1            | COL2
--------+---------------+---------+---------------+--------------------+--------
   348  |  76543.210000 | -0.623  | -1.230000E+13 |  1.34000000000E+01 |   22.33
 -9999  |      0.000000 |  0.003  |  1.234500E-03 |  1.34000000000E+01 |   22.33
     0  | ????????????? | ?????   |  3.000000E-32 |  1.34000000000E+01 |   22.33
   348  |  76543.210000 | -0.623  | -1.230000E+13 | -1.80000000000E-01 | -123.07
 -9999  |      0.000000 |  0.003  |  1.234500E-03 | -1.80000000000E-01 | -123.07
     0  | ????????????? | ?????   |  3.000000E-32 | -1.80000000000E-01 | -123.07
 
resultcount :                     6
 
Enter command:
SELECT  3*TRUNC(  SPALTE3 ) / ABS(REF.COL2 * ABS(-1.0)),
        ABS ( COL2 ) NEU,
        KERN.TAB1.SPALTE4 + TRUNC(-32.7 )
  FROM TAB1,TAB2 REF WHERE TAB1.SPALTE3 IS NOT NULL !
 
resultcount :                     6
 
Enter command:
FETCH !
 
EXPRESSION1       :        0.00000000000000000000000000000000
NEU               :    22.33
EXPRESSION2       :  -1.2300000000032000000000000000000000000E+13
-----------------------------------------------------------------
EXPRESSION1       :        0.00000000000000000000000000000000
NEU               :    22.33
EXPRESSION2       :  -3.1998765500000000000000000000000000000E+01
-----------------------------------------------------------------
EXPRESSION1       :        0.00000000000000000000000000000000
NEU               :    22.33
EXPRESSION2       :  ????????????????????????????????????????????
-----------------------------------------------------------------
EXPRESSION1       :        0.00000000000000000000000000000000
NEU               :   123.07
EXPRESSION2       :  -1.2300000000032000000000000000000000000E+13
-----------------------------------------------------------------
EXPRESSION1       :        0.00000000000000000000000000000000
NEU               :   123.07
EXPRESSION2       :  -3.1998765500000000000000000000000000000E+01
-----------------------------------------------------------------
EXPRESSION1       :        0.00000000000000000000000000000000
NEU               :   123.07
EXPRESSION2       :  ????????????????????????????????????????????
 
resultcount :                     6
 
Enter command:
ROLLBACK WORK RELEASE!
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE TAB1 ( SPALTE11 FIXED(10) KEY,
                    SPALTE12 CHAR(8),
                    SPALTE13 FLOAT(8) RANGE BETWEEN -1E30 AND +1E30 ) !
 
Enter command:
CREATE TABLE TAB2 ( SPALTE21 FLOAT(10),
                    SPALTE22 FIXED(12,2),
                    SPALTE23 CHAR(6) ) !
 
Enter command:
CREATE TABLE TAB3 ( SPALTE31 FLOAT(8) RANGE BETWEEN -1E15 AND +1E15,
                    SPALTE32 FLOAT(8),
                    SPALTE33 CHAR(12) ) !
 
Enter command:
INSERT TAB1 VALUES ( 12345678      , 'HANS'   , 1.2345678E7 ) !
 
Enter command:
INSERT TAB1 VALUES ( 22            , 'OTTO'   , 12345678    ) !
 
Enter command:
INSERT TAB1 VALUES ( -888          , 'HANS'   , 1E28        ) !
 
Enter command:
INSERT TAB2 VALUES ( -3827.32E11   , -888     , 'PAUL'      ) !
 
Enter command:
INSERT TAB2 VALUES ( 1E28          , 12345678 , 'HANS'      ) !
 
Enter command:
INSERT TAB2 VALUES ( 12.3456780E+06, -0       , 'HANS'      ) !
 
Enter command:
INSERT TAB3 VALUES ( 12345678      , 12345678 , 'HANS'      ) !
 
Enter command:
INSERT TAB3 VALUES ( -5E14         , 1E28     , 'OTTO'      ) !
 
Enter command:
INSERT TAB3 VALUES ( -5E14         , 0        , NULL        ) !
 
Enter command:
SELECT SPALTE11, SPALTE12, SPALTE22, SPALTE23, SPALTE33
   FROM TAB1, TAB2 REF2, TAB3
   WHERE REF2.SPALTE23 = TAB1.SPALTE12 !
 
resultcount :                    12
 
Enter command:
FETCH !
 
SPALTE11    | SPALTE12 | SPALTE22       | SPALTE23 | SPALTE33
------------+----------+----------------+----------+-------------
       -888 | HANS     |    12345678.00 | HANS     | HANS
       -888 | HANS     |    12345678.00 | HANS     | OTTO
       -888 | HANS     |    12345678.00 | HANS     | ????????????
       -888 | HANS     |           0.00 | HANS     | HANS
       -888 | HANS     |           0.00 | HANS     | OTTO
       -888 | HANS     |           0.00 | HANS     | ????????????
   12345678 | HANS     |    12345678.00 | HANS     | HANS
   12345678 | HANS     |    12345678.00 | HANS     | OTTO
   12345678 | HANS     |    12345678.00 | HANS     | ????????????
   12345678 | HANS     |           0.00 | HANS     | HANS
   12345678 | HANS     |           0.00 | HANS     | OTTO
   12345678 | HANS     |           0.00 | HANS     | ????????????
 
resultcount :                    12
 
Enter command:
SELECT SPALTE11, SPALTE22,SPALTE32 FROM TAB1 REF1, TAB2 REF2, TAB3
   WHERE ( 5E+06 *  REF2.SPALTE22 ) <=(TAB3.SPALTE32) +  48 !
 
resultcount :                    21
 
Enter command:
FETCH !
 
SPALTE11    | SPALTE22       | SPALTE32
------------+----------------+---------------
       -888 |        -888.00 |  0.0000000E+00
       -888 |        -888.00 |  1.2345678E+07
       -888 |        -888.00 |  1.0000000E+28
       -888 |    12345678.00 |  1.0000000E+28
       -888 |           0.00 |  0.0000000E+00
       -888 |           0.00 |  1.2345678E+07
       -888 |           0.00 |  1.0000000E+28
         22 |        -888.00 |  0.0000000E+00
         22 |        -888.00 |  1.2345678E+07
         22 |        -888.00 |  1.0000000E+28
         22 |    12345678.00 |  1.0000000E+28
         22 |           0.00 |  0.0000000E+00
         22 |           0.00 |  1.2345678E+07
         22 |           0.00 |  1.0000000E+28
   12345678 |        -888.00 |  0.0000000E+00
   12345678 |        -888.00 |  1.2345678E+07
   12345678 |        -888.00 |  1.0000000E+28
 
SPALTE11    | SPALTE22       | SPALTE32
------------+----------------+---------------
   12345678 |    12345678.00 |  1.0000000E+28
   12345678 |           0.00 |  0.0000000E+00
   12345678 |           0.00 |  1.2345678E+07
   12345678 |           0.00 |  1.0000000E+28
 
resultcount :                    21
 
Enter command:
SELECT TAB1.SPALTE11 , SPALTE13, SPALTE31, REF3.SPALTE32, SPALTE22
  FROM TAB1, TAB2  , TAB3 REF3
  WHERE TAB1.SPALTE13/TAB1.SPALTE11>(.7E10*REF3.SPALTE31)+REF3.SPALTE32 !
 
resultcount :                     6
 
Enter command:
FETCH !
 
SPALTE11    | SPALTE13       | SPALTE31       | SPALTE32       | SPALTE22
------------+----------------+----------------+----------------+---------------
         22 |  1.2345678E+07 | -5.0000000E+14 |  0.0000000E+00 |        -888.00
   12345678 |  1.2345678E+07 | -5.0000000E+14 |  0.0000000E+00 |        -888.00
         22 |  1.2345678E+07 | -5.0000000E+14 |  0.0000000E+00 |    12345678.00
   12345678 |  1.2345678E+07 | -5.0000000E+14 |  0.0000000E+00 |    12345678.00
         22 |  1.2345678E+07 | -5.0000000E+14 |  0.0000000E+00 |           0.00
   12345678 |  1.2345678E+07 | -5.0000000E+14 |  0.0000000E+00 |           0.00
 
resultcount :                     6
 
Enter command:
SELECT SPALTE21, SPALTE13 FROM TAB1, TAB2
   WHERE (( TAB2.SPALTE21 = 12345678)
     AND 1E10 > TAB1.SPALTE13  ) !
 
resultcount :                     2
 
Enter command:
FETCH !
 
SPALTE21         | SPALTE13
-----------------+---------------
 1.234567800E+07 |  1.2345678E+07
 1.234567800E+07 |  1.2345678E+07
 
resultcount :                     2
 
Enter command:
SELECT REF2.*, TAB3.*  FROM TAB2 REF2, TAB3
   WHERE ( 10E3*REF2.SPALTE22)  <(  ( TAB3.SPALTE31) )
     AND ( REF2.SPALTE23 <= TAB3.SPALTE33
     AND TAB3.SPALTE32 / ( 3*TAB3.SPALTE31)
         >REF2.SPALTE22 * (-REF2.SPALTE21) ) !
 
resultcount :                     1
 
Enter command:
FETCH !
 
SPALTE21          :   1.234567800E+07
SPALTE22          :            0.00
SPALTE23          :  HANS
SPALTE31          :   1.2345678E+07
SPALTE32          :   1.2345678E+07
SPALTE33          :  HANS
 
resultcount :                     1
 
Enter command:
SELECT * FROM TAB1,TAB2,TAB3
   WHERE TAB1.SPALTE13 +88.E-12= (- 1)*( - TAB2.SPALTE21)
     AND 6587- TAB1.SPALTE11  >  (TAB3.SPALTE32 - TAB3.SPALTE31) *5. !
 
resultcount :                     1
 
Enter command:
FETCH !
 
SPALTE11          :         -888
SPALTE12          :  HANS
SPALTE13          :   1.0000000E+28
SPALTE21          :   1.000000000E+28
SPALTE22          :     12345678.00
SPALTE23          :  HANS
SPALTE31          :   1.2345678E+07
SPALTE32          :   1.2345678E+07
SPALTE33          :  HANS
 
resultcount :                     1
 
Enter command:
SELECT SPALTE11, TAB1.SPALTE12,SPALTE21,SPALTE22, SPALTE31  ,SPALTE33
   FROM TAB1,TAB2,TAB3
   WHERE TAB1.SPALTE11>=TAB2.SPALTE22
     AND TAB2.SPALTE21 <> TAB3.SPALTE31
     AND TAB3.SPALTE33 = TAB1.SPALTE12 !
 
resultcount :                     5
 
Enter command:
FETCH !
 
SPALTE11          :         -888
SPALTE12          :  HANS
SPALTE21          :  -3.827320000E+14
SPALTE22          :         -888.00
SPALTE31          :   1.2345678E+07
SPALTE33          :  HANS
-------------------------------------
SPALTE11          :     12345678
SPALTE12          :  HANS
SPALTE21          :  -3.827320000E+14
SPALTE22          :         -888.00
SPALTE31          :   1.2345678E+07
SPALTE33          :  HANS
-------------------------------------
SPALTE11          :     12345678
SPALTE12          :  HANS
SPALTE21          :   1.000000000E+28
SPALTE22          :     12345678.00
SPALTE31          :   1.2345678E+07
SPALTE33          :  HANS
-------------------------------------
SPALTE11          :           22
SPALTE12          :  OTTO
SPALTE21          :  -3.827320000E+14
SPALTE22          :         -888.00
SPALTE31          :  -5.0000000E+14
SPALTE33          :  OTTO
-------------------------------------
SPALTE11          :           22
SPALTE12          :  OTTO
SPALTE21          :   1.234567800E+07
SPALTE22          :            0.00
SPALTE31          :  -5.0000000E+14
SPALTE33          :  OTTO
 
resultcount :                     5
 
Enter command:
SELECT REF11.SPALTE11,REF11.SPALTE12,REF11.SPALTE13,REF12.*
   FROM TAB1 REF11, TAB1 REF12
   WHERE REF12.SPALTE11 = REF11.SPALTE13 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
SPALTE11          :           22
SPALTE12          :  OTTO
SPALTE13          :   1.2345678E+07
SPALTE11          :     12345678
SPALTE12          :  HANS
SPALTE13          :   1.2345678E+07
-----------------------------------
SPALTE11          :     12345678
SPALTE12          :  HANS
SPALTE13          :   1.2345678E+07
SPALTE11          :     12345678
SPALTE12          :  HANS
SPALTE13          :   1.2345678E+07
 
resultcount :                     2
 
Enter command:
SELECT TAB1.SPALTE11, SPALTE21,SPALTE22, REF1.SPALTE13
   FROM TAB1,TAB2,TAB1  REF1
   WHERE - REF1.SPALTE13 < -TAB1.SPALTE11
     AND (48 + 5 )*REF1.SPALTE13 < 10E30/TAB2.SPALTE21 * TAB2.SPALTE22 !
 
resultcount :                     8
 
Enter command:
FETCH !
 
SPALTE11    | SPALTE21         | SPALTE22       | SPALTE13
------------+------------------+----------------+---------------
       -888 | -3.827320000E+14 |        -888.00 |  1.2345678E+07
       -888 | -3.827320000E+14 |        -888.00 |  1.2345678E+07
         22 | -3.827320000E+14 |        -888.00 |  1.2345678E+07
         22 | -3.827320000E+14 |        -888.00 |  1.2345678E+07
       -888 |  1.000000000E+28 |    12345678.00 |  1.2345678E+07
       -888 |  1.000000000E+28 |    12345678.00 |  1.2345678E+07
         22 |  1.000000000E+28 |    12345678.00 |  1.2345678E+07
         22 |  1.000000000E+28 |    12345678.00 |  1.2345678E+07
 
resultcount :                     8
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 ( T1XC1 CHAR(5) ASCII KEY,
                  T1XC2 CHAR(5) KEY,
                  T1XC3 FIXED(5) ) !
 
Enter command:
CREATE TABLE T2 ( T2XC1 CHAR(5) ASCII KEY,
                  T2XC2 FIXED(5),
                  T2XC3 CHAR(8),
                  T2XC4 FIXED(6,1) NOT NULL ) !
 
Enter command:
CREATE INDEX I1 ON T2 ( T2XC4 ASC, T2XC3 DESC ) !
 
Enter command:
CREATE INDEX I2 ON T2 ( T2XC2 ASC ) !
 
Enter command:
CREATE INDEX "t1.t1xc3"
 ON T1( T1XC3 DESC ) !
 
Enter command:
INSERT T1 VALUES ( 'cc', 'ffff', 2 ) !
 
Enter command:
INSERT T1 VALUES ( 'aa', 'ssss', NULL ) !
 
Enter command:
INSERT T2 VALUES ( 'aa', 5, 'dddd', 3 ) !
 
Enter command:
INSERT T2 VALUES ( 'dd', 3, 'ffff', 2 ) !
 
Enter command:
EXPLAIN SELECT * FROM T1, T2 WHERE T1XC1 = T2XC1 AND T1XC3 < T2XC4 !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | T1                 | t1.t1xc3           | INDEX SCAN                               |          1
                   |                    |                    | ONLY INDEX ACCESSED                      |
KERN               | T2                 | T2XC1              | JOIN VIA KEY COLUMN                      |          1
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          5
 
Enter command:
SELECT * FROM T1, T2 WHERE T1XC1 = T2XC1 AND T1XC3 < T2XC4 !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
FETCH!
 
***ERROR    100 Row not found                                              0001
 
Enter command:
ROLLBACK WORK RELEASE !
 
Enter command:
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T11
   ( T1XC1 CHAR(10) KEY,
     T1XC2 FIXED(3) NOT NULL RANGE BETWEEN -100 AND +100,
     T1XC3 FLOAT(3),
     T1XC4 CHAR(10) BYTE ) !
 
Enter command:
CREATE VIEW V1XT1 AS
   SELECT *  FROM T11
   WHERE T1XC1 > 'HAMELN' OR ( T11.T1XC4 IS  NULL ) !
 
Enter command:
CREATE VIEW V2XT1 AS SELECT T11.T1XC1, T1XC2  FROM T11 !
 
Enter command:
CREATE VIEW V4XT1 ( V4XC1, V4XC2 )  AS
   SELECT ALL T1XC1, K1XT1.T1XC2 FROM T11 K1XT1
   WHERE ( K1XT1.T1XC2 BETWEEN -50 AND +50 )
   AND K1XT1.T1XC1 < 'K' WITH CHECK OPTION !
 
Enter command:
CREATE VIEW V5XT1 (  V5XC1 ) AS
   SELECT 3 * T1XC3
   FROM T11
   WHERE T1XC3*3 <3E20 !
 
Enter command:
INSERT T11 VALUES ( 'MUENCHEN', 32, 2E10, X'D6E3E3D6' ) !
 
Enter command:
INSERT V1XT1 VALUES ( 'BERLIN', 12, 8E-7, X'D7C1E4D3' ) !
 
Enter command:
INSERT V1XT1 SET T1XC1 = 'HAMBURG',
                        T1XC2 = 38,
                        T1XC3 = 80E-08 !
 
Enter command:
UPDATE V2XT1 SET T1XC2 = 64 WHERE T1XC2 = 32 !
 
resultcount :                     1
 
Enter command:
INSERT V4XT1 SET V4XC1 = 'BONN',
                        V4XC2 = -20 !
 
Enter command:
DELETE V4XT1 WHERE V4XC1 = 'BONN' AND V4XC2 IN (-20) !
 
resultcount :                     1
 
Enter command:
INSERT V4XT1 VALUES ( 'BONN', -20 ) !
 
Enter command:
COMMIT WORK !
 
Enter command:
CREATE VIEW V1XV1XT1 AS
   SELECT T1XC1, V1XT1.T1XC2, T1XC3
   FROM V1XT1
   WHERE V1XT1.T1XC1 > 'KOELN'
   WITH CHECK OPTION !
 
Enter command:
CREATE VIEW V1XV1XV1XT1 AS
   SELECT *
   FROM V1XV1XT1 SYN1
   WHERE SYN1.T1XC3 <1E30 !
 
Enter command:
INSERT V1XV1XV1XT1 VALUES ( 'MANNHEIM', 18, -5.E12 ) !
 
Enter command:
DECLARE ERG1 CURSOR FOR
SELECT T1XC1, V1XV1XT1.T1XC2,V1XV1XT1.T1XC3
   FROM V1XV1XT1 !
 
resultcount :               unknown
 
Enter command:
FETCH ERG1 !
 
T1XC1      | T1XC2 | T1XC3
-----------+-------+----------
MANNHEIM   |   18  | -5.00E+12
MUENCHEN   |   64  |  2.00E+10
 
resultcount :                     2
 
Enter command:
DECLARE ERG2 CURSOR FOR
SELECT DISTINCT KERN.T11.T1XC1, V1XV1XV1XT1.T1XC3,
   SYN2.T1XC2
   FROM T11, V2XT1 SYN2, V1XV1XV1XT1
   WHERE SYN2.T1XC2 + 32 <= V1XV1XV1XT1.T1XC3
   ORDER BY KERN.T11.T1XC1, SYN2.T1XC2 !
 
resultcount :                    25
 
Enter command:
FETCH ERG2 !
 
T1XC1      | T1XC3     | T1XC2
-----------+-----------+------
BERLIN     |  2.00E+10 |  -20
BERLIN     |  2.00E+10 |   12
BERLIN     |  2.00E+10 |   18
BERLIN     |  2.00E+10 |   38
BERLIN     |  2.00E+10 |   64
BONN       |  2.00E+10 |  -20
BONN       |  2.00E+10 |   12
BONN       |  2.00E+10 |   18
BONN       |  2.00E+10 |   38
BONN       |  2.00E+10 |   64
HAMBURG    |  2.00E+10 |  -20
HAMBURG    |  2.00E+10 |   12
HAMBURG    |  2.00E+10 |   18
HAMBURG    |  2.00E+10 |   38
HAMBURG    |  2.00E+10 |   64
MANNHEIM   |  2.00E+10 |  -20
MANNHEIM   |  2.00E+10 |   12
 
T1XC1      | T1XC3     | T1XC2
-----------+-----------+------
MANNHEIM   |  2.00E+10 |   18
MANNHEIM   |  2.00E+10 |   38
MANNHEIM   |  2.00E+10 |   64
MUENCHEN   |  2.00E+10 |  -20
MUENCHEN   |  2.00E+10 |   12
MUENCHEN   |  2.00E+10 |   18
MUENCHEN   |  2.00E+10 |   38
MUENCHEN   |  2.00E+10 |   64
 
resultcount :                    25
 
Enter command:
COMMIT WORK !
 
Enter command:
CREATE TABLE T21 ( T2XC1 FLOAT(5) , T2XC2 CHAR(20) ) !
 
Enter command:
CREATE SYNONYM SYNXT2 FOR T21 !
 
Enter command:
CREATE SYNONYM SYNXV1XV1XT1 FOR V1XV1XT1 !
 
Enter command:
CREATE VIEW SYNXVIEW
   (SPALTE1,SPALTE2,SPALTE3,SPALTE4,SPALTE5,SPALTE6,SPALTE7 ) AS
   SELECT SYNXT2.T2XC1, SYNXV1XV1XT1.T1XC1, T2XC2, V1XV1XT1.*,
          SYNXV1XV1XT1.T1XC2
   FROM SYNXT2, SYNXV1XV1XT1 , V1XV1XT1
   WHERE SYNXT2.T2XC2 < 'K' AND  ( V1XV1XT1.T1XC1 < 'NUERNBERG' )!
 
Enter command:
INSERT SYNXT2 VALUES ( 38, 'ESSEN' ) !
 
Enter command:
CREATE SYNONYM SYNXSYNXVIEW FOR SYNXVIEW !
 
Enter command:
SELECT * FROM SYNXSYNXVIEW WHERE ( SPALTE1 IN ( 37, 38, 39 )
                             AND SYNXSYNXVIEW.SPALTE2 < 'MOELLN' ) !
 
resultcount :                     2
 
Enter command:
FETCH !
 
SPALTE1           :   3.8000E+01
SPALTE2           :  MANNHEIM
SPALTE3           :  ESSEN
SPALTE4           :  MANNHEIM
SPALTE5           :    18
SPALTE6           :  -5.00E+12
SPALTE7           :    18
-----------------------------------------
SPALTE1           :   3.8000E+01
SPALTE2           :  MANNHEIM
SPALTE3           :  ESSEN
SPALTE4           :  MUENCHEN
SPALTE5           :    64
SPALTE6           :   2.00E+10
SPALTE7           :    18
 
resultcount :                     2
 
Enter command:
CREATE USER R1 PASSWORD R1XW RESOURCE !
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER D1 PASSWORD D1XW RESOURCE !
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
GRANT ALL ON V1XT1 TO PUBLIC !
 
Enter command:
GRANT SELECT ON SYNXVIEW TO R1 !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( D1 D1XW !
 
Enter command:
CONNECT D1 IDENTIFIED BY D1XW   ISOLATION LEVEL 1 !
 
Enter command:
CREATE VIEW VIEW1 AS
    SELECT T1XC1, T1XC2
    FROM KERN.V1XT1
    WITH CHECK OPTION !
 
Enter command:
INSERT VIEW1 VALUES ( 'ISERLOHN' , - 20 ) !
 
Enter command:
SELECT * FROM VIEW1 !
 
resultcount :               unknown
 
Enter command:
FETCH !
 
T1XC1      | T1XC2
-----------+------
BONN       |  -20
HAMBURG    |   38
ISERLOHN   |  -20
MANNHEIM   |   18
MUENCHEN   |   64
 
resultcount :                     5
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( R1 R1XW !
 
Enter command:
CONNECT R1 IDENTIFIED BY R1XW   ISOLATION LEVEL 1 !
 
Enter command:
CREATE SYNONYM SYNXV1XT1 FOR KERN.V1XT1 !
 
Enter command:
CREATE VIEW R1XVIEW ( SPALTE1, SPALTE2, SPALTE3 ) AS
   SELECT SPALTE1, SPALTE3, T1XC1
   FROM SYNXVIEW, SYNXV1XT1
   WHERE SPALTE1 - 38 <= 0 AND T1XC1 < 'I' !
 
Enter command:
SELECT * FROM R1XVIEW !
 
resultcount :                     8
 
Enter command:
FETCH !
 
SPALTE1     | SPALTE2              | SPALTE3
------------+----------------------+-----------
 3.8000E+01 | ESSEN                | BONN
 3.8000E+01 | ESSEN                | BONN
 3.8000E+01 | ESSEN                | BONN
 3.8000E+01 | ESSEN                | BONN
 3.8000E+01 | ESSEN                | HAMBURG
 3.8000E+01 | ESSEN                | HAMBURG
 3.8000E+01 | ESSEN                | HAMBURG
 3.8000E+01 | ESSEN                | HAMBURG
 
resultcount :                     8
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
DROP TABLE T11 !
 
Enter command:
DROP TABLE T21 !
 
Enter command:
ROLLBACK WORK RELEASE !
 
Enter command:
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER D1 !
 
Enter command:
DROP USER R1 !
 
Enter command:
COMMIT RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE TAB1 ( SPALTE11 CHAR(10) KEY ,
                    SPALTE12 FIXED(5,2),
                    SPALTE13 FLOAT(5) ) !
 
Enter command:
INSERT TAB1 VALUES ( 'HANS'    , 22.52 , NULL ) !
 
Enter command:
INSERT TAB1 VALUES ( 'PAUL'    ,   0   ,  3E2 ) !
 
Enter command:
INSERT TAB1 VALUES ( 'JOACHIM' , 17.1  ,   0  ) !
 
Enter command:
CREATE TABLE TAB2 ( SPALTE21 FIXED(4) NOT NULL,
                    SPALTE22 CHAR(8) ,
                    SPALTE23 FLOAT(4) ) !
 
Enter command:
INSERT TAB2 VALUES ( 300   , 'HANS'   , NULL ) !
 
Enter command:
INSERT TAB2 VALUES ( 22.00 , 'FRIEDA' , 0    ) !
 
Enter command:
INSERT TAB2 VALUES ( 12    , 'JOACHIM', 0    ) !
 
Enter command:
CREATE TABLE TAB3 ( SPALTE31 FIXED(3),
                    SPALTE32 CHAR(10),
                    SPALTE33 FIXED(3) ) !
 
Enter command:
INSERT TAB3 VALUES ( 22  , 'HANS'    , NULL ) !
 
Enter command:
INSERT TAB3 VALUES ( 300 , 'ANDREAS' , 0    ) !
 
Enter command:
INSERT TAB3 VALUES ( 300 , 'ANDREAS' , 0    ) !
 
Enter command:
INSERT TAB3 VALUES ( NULL, 'JOACHIM' , 300  ) !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
SELECT * INTO :A1,:A2,:A3,:A4,:A5,:A6 FROM TAB1, TAB2
   WHERE TAB1.SPALTE13 = TAB2.SPALTE21 !
 
SPALTE11          :  PAUL
SPALTE12          :     0.00
SPALTE13          :   3.0000E+02
SPALTE21          :    300
SPALTE22          :  HANS
SPALTE23          :  ??????????
 
Enter command:
SELECT * INTO :A1,:A2,:A3,:A4,:A5,:A6 FROM TAB1, TAB2
   WHERE TAB2.SPALTE21  =  TAB1.SPALTE13 !
 
SPALTE11          :  PAUL
SPALTE12          :     0.00
SPALTE13          :   3.0000E+02
SPALTE21          :    300
SPALTE22          :  HANS
SPALTE23          :  ??????????
 
Enter command:
SELECT  * INTO :A1,:A2,:A3,:A4,:A5,:A6
   FROM KERN.TAB1, KERN.TAB2
   WHERE  KERN.TAB2.SPALTE21=KERN.TAB1.SPALTE13 !
 
SPALTE11          :  PAUL
SPALTE12          :     0.00
SPALTE13          :   3.0000E+02
SPALTE21          :    300
SPALTE22          :  HANS
SPALTE23          :  ??????????
 
Enter command:
SELECT TAB1.SPALTE13 NEU13, TAB1.SPALTE11,
       KERN.TAB2.SPALTE21 NEU21
   INTO :A1,:A2,:A3 FROM TAB1, KERN.TAB2
   WHERE TAB1.SPALTE11 > 'KARIN'
      OR TAB1.SPALTE13=  TAB2.SPALTE21 !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT TAB1.SPALTE13 NEU13, TAB1.SPALTE11,
       KERN.TAB2.SPALTE21 NEU21
   INTO :A1,:A2,:A3 FROM TAB1, KERN.TAB2
   WHERE ( TAB1.SPALTE11 > 'KARIN'
      OR TAB1.SPALTE13=  TAB2.SPALTE21 ) !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT  KERN.TAB2.SPALTE22,KERN.TAB1.SPALTE13 NEU13,
        TAB2.SPALTE23
   INTO :A1, :A2,:A3
   FROM KERN.TAB2, TAB1
   WHERE KERN.TAB1.SPALTE13 = TAB2.SPALTE23
     AND (( TAB2.SPALTE21 <= 20 )) !
 
SPALTE22          :  JOACHIM
NEU13             :   0.0000E+00
SPALTE23          :   0.000E+00
 
Enter command:
SELECT * INTO :A1,:A2,:A3,:A4,:A5,:A6 FROM TAB1 , TAB2
   WHERE    TAB1.SPALTE12  = TAB2.SPALTE21
      OR  KERN.TAB2.SPALTE22 IN ( 'KLAUS' , 'FRIEDA' ) !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT * INTO :A1,:A2,:A3,:A4,:A5,:A6 FROM TAB1 , TAB2
   WHERE  ( TAB1.SPALTE12  = TAB2.SPALTE21 )
      OR  KERN.TAB2.SPALTE22 IN ( 'KLAUS' , 'FRIEDA' ) !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT * INTO :A1,:A2,:A3,:A4,:A5,:A6 FROM TAB1,TAB2
   WHERE TAB2.SPALTE23 <0
      OR  KERN.TAB1.SPALTE11= KERN.TAB2.SPALTE22
     AND KERN.TAB1.SPALTE12 <= TAB2.SPALTE21 !
 
SPALTE11          :  HANS
SPALTE12          :    22.52
SPALTE13          :  ???????????
SPALTE21          :    300
SPALTE22          :  HANS
SPALTE23          :  ??????????
 
Enter command:
SELECT * INTO :A1,:A2,:A3,:A4,:A5,:A6 FROM TAB1,TAB2
   WHERE  KERN.TAB1.SPALTE11= KERN.TAB2.SPALTE22
     AND KERN.TAB1.SPALTE12 <= TAB2.SPALTE21
      OR TAB2.SPALTE23 <0 !
 
SPALTE11          :  HANS
SPALTE12          :    22.52
SPALTE13          :  ???????????
SPALTE21          :    300
SPALTE22          :  HANS
SPALTE23          :  ??????????
 
Enter command:
SELECT TAB2.* INTO :A1,:A2,:A3 FROM KERN.TAB1,TAB2
   WHERE ( KERN.TAB1.SPALTE11 LIKE 'PA_L' )
     AND TAB1.SPALTE13 <> KERN.TAB2.SPALTE23
     AND ( TAB2.SPALTE22 < 'KARIN' ) !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT TAB2.* INTO :A1,:A2,:A3 FROM KERN.TAB1,TAB2
   WHERE ( KERN.TAB1.SPALTE11 LIKE 'PA_L' )
     AND TAB1.SPALTE13 <> KERN.TAB2.SPALTE23
     AND ( TAB2.SPALTE22 < 'INGE' ) !
 
SPALTE21          :     22
SPALTE22          :  FRIEDA
SPALTE23          :   0.000E+00
 
Enter command:
SELECT TAB2.* INTO :A1,:A2,:A3 FROM KERN.TAB1,TAB2
   WHERE  TAB1.SPALTE13 <> KERN.TAB2.SPALTE23
     AND KERN.TAB1.SPALTE11 LIKE 'PA_L'
     AND TAB2.SPALTE22 < 'INGE' !
 
SPALTE21          :     22
SPALTE22          :  FRIEDA
SPALTE23          :   0.000E+00
 
Enter command:
SELECT TAB2.* INTO :A1,:A2,:A3 FROM KERN.TAB1,TAB2
   WHERE (TAB1.SPALTE13 <> KERN.TAB2.SPALTE23
     AND KERN.TAB1.SPALTE11 LIKE 'PA_L' )
     AND TAB2.SPALTE22 < 'INGE' !
 
SPALTE21          :     22
SPALTE22          :  FRIEDA
SPALTE23          :   0.000E+00
 
Enter command:
SELECT TAB2.* INTO :A1,:A2,:A3 FROM KERN.TAB1,TAB2
   WHERE  (NOT ( TAB1.SPALTE13 = KERN.TAB2.SPALTE23 )
     AND KERN.TAB1.SPALTE11 LIKE 'PA_L' )
     AND TAB2.SPALTE22 < 'INGE' !
 
SPALTE21          :     22
SPALTE22          :  FRIEDA
SPALTE23          :   0.000E+00
 
Enter command:
SELECT TAB1.*, KERN.TAB2.*, KERN.TAB1.*
   INTO :A1,:A2,:A3,:A4,:A5,:A6,:A7,:A8,:A9 FROM TAB1,TAB2
   WHERE KERN.TAB2.SPALTE21 = TAB1.SPALTE12
      OR TAB1.SPALTE13 IS NULL
     AND TAB2.SPALTE21 > 100.00 !
 
SPALTE11          :  HANS
SPALTE12          :    22.52
SPALTE13          :  ???????????
SPALTE21          :    300
SPALTE22          :  HANS
SPALTE23          :  ??????????
SPALTE11          :  HANS
SPALTE12          :    22.52
SPALTE13          :  ???????????
 
Enter command:
SELECT ALL  * INTO :A1,:A2,:A3,:A4,:A5,:A6 FROM TAB2,TAB1
   WHERE TAB1.SPALTE13 = TAB2.SPALTE21 !
 
SPALTE21          :    300
SPALTE22          :  HANS
SPALTE23          :  ??????????
SPALTE11          :  PAUL
SPALTE12          :     0.00
SPALTE13          :   3.0000E+02
 
Enter command:
SELECT DISTINCT  * INTO :A1,:A2,:A3,:A4,:A5,:A6
   FROM  TAB2 , TAB1
   WHERE TAB1.SPALTE13  =  TAB2.SPALTE21 !
 
SPALTE21          :    300
SPALTE22          :  HANS
SPALTE23          :  ??????????
SPALTE11          :  PAUL
SPALTE12          :     0.00
SPALTE13          :   3.0000E+02
 
Enter command:
SELECT  *   INTO :A1,:A2,:A3,  :A4,:A5,:A6
   FROM TAB1  REF1, TAB2
   WHERE REF1.SPALTE13=TAB2.SPALTE21 !
 
SPALTE11          :  PAUL
SPALTE12          :     0.00
SPALTE13          :   3.0000E+02
SPALTE21          :    300
SPALTE22          :  HANS
SPALTE23          :  ??????????
 
Enter command:
SELECT REF1.SPALTE11 NEU11, KERN.TAB2.* INTO :A1,:A2,:A3,:A4
   FROM TAB1  REF1, KERN.TAB2
   WHERE REF1.SPALTE13 = KERN.TAB2.SPALTE21 !
 
NEU11             :  PAUL
SPALTE21          :    300
SPALTE22          :  HANS
SPALTE23          :  ??????????
 
Enter command:
SELECT KERN.TAB1.*, REF2.*
   INTO :A1,:A2,:A3,:A4,:A5,:A6
   FROM TAB1, TAB2 REF2
   WHERE TAB1.SPALTE13 = REF2.SPALTE21 !
 
SPALTE11          :  PAUL
SPALTE12          :     0.00
SPALTE13          :   3.0000E+02
SPALTE21          :    300
SPALTE22          :  HANS
SPALTE23          :  ??????????
 
Enter command:
SELECT ALL REF1.SPALTE11 NEU11 , REF1.SPALTE12,
    REF1.SPALTE13,REF2.SPALTE21 NEU21,REF2.SPALTE21 NEU21
   INTO :A1, :A2 ,:A3,:A4,:A5
   FROM TAB1  REF1, TAB2 REF2
   WHERE REF1.SPALTE13 = REF2.SPALTE21 !
 
NEU11             :  PAUL
SPALTE12          :     0.00
SPALTE13          :   3.0000E+02
NEU21             :    300
NEU21             :    300
 
Enter command:
SELECT DISTINCT KERN.TAB1.* , REF3.*
   INTO :A1,:A2,:A3,:A4,:A5,:A6
   FROM KERN.TAB1 , KERN.TAB3  REF3 , TAB1 REF1
   WHERE REF1.SPALTE13 < REF3.SPALTE31
     AND REF3.SPALTE33 = KERN.TAB1.SPALTE13 !
 
SPALTE11          :  JOACHIM
SPALTE12          :    17.10
SPALTE13          :   0.0000E+00
SPALTE31          :   300
SPALTE32          :  ANDREAS
SPALTE33          :     0
 
Enter command:
SELECT DISTINCT KERN.TAB1.* , REF3.*
   INTO :A1,:A2,:A3,:A4,:A5,:A6
   FROM KERN.TAB3  REF3 , KERN.TAB1
   WHERE TAB1.SPALTE13 < REF3.SPALTE31
     AND REF3.SPALTE33 = KERN.TAB1.SPALTE13
     AND TAB1.SPALTE12 BETWEEN 0 AND 100 !
 
SPALTE11          :  JOACHIM
SPALTE12          :    17.10
SPALTE13          :   0.0000E+00
SPALTE31          :   300
SPALTE32          :  ANDREAS
SPALTE33          :     0
 
Enter command:
SELECT DISTINCT KERN.TAB1.* , REF3.*
   INTO :A1,:A2,:A3,:A4,:A5,:A6
   FROM KERN.TAB3  REF3 , KERN.TAB1
   WHERE TAB1.SPALTE13 < REF3.SPALTE31
     AND KERN.TAB1.SPALTE13 = REF3.SPALTE33
     AND TAB1.SPALTE12 BETWEEN 0 AND 100 !
 
SPALTE11          :  JOACHIM
SPALTE12          :    17.10
SPALTE13          :   0.0000E+00
SPALTE31          :   300
SPALTE32          :  ANDREAS
SPALTE33          :     0
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
SELECT * INTO :A1,:A2,:A3,:A4,:A5,:A6,:A7,:A8,:A9
   FROM TAB1, TAB2, TAB3
   WHERE (TAB1.SPALTE13, TAB1.SPALTE11) IN ((TAB2.SPALTE23, TAB2.SPALTE22))
     AND TAB2.SPALTE23 < TAB3.SPALTE33 !
 
SPALTE11          :  JOACHIM
SPALTE12          :    17.10
SPALTE13          :   0.0000E+00
SPALTE21          :     12
SPALTE22          :  JOACHIM
SPALTE23          :   0.000E+00
SPALTE31          :  ????
SPALTE32          :  JOACHIM
SPALTE33          :   300
 
Enter command:
SELECT * INTO :A1,:A2,:A3,:A4,:A5,:A6,:A7,:A8,:A9
   FROM KERN.TAB1 , TAB2, KERN.TAB3
   WHERE (TAB1.SPALTE13, KERN.TAB2.SPALTE22, TAB1.SPALTE11)
     IN ((TAB2.SPALTE23, TAB1.SPALTE11,      KERN.TAB3.SPALTE32)) !
 
SPALTE11          :  JOACHIM
SPALTE12          :    17.10
SPALTE13          :   0.0000E+00
SPALTE21          :     12
SPALTE22          :  JOACHIM
SPALTE23          :   0.000E+00
SPALTE31          :  ????
SPALTE32          :  JOACHIM
SPALTE33          :   300
 
Enter command:
SELECT TAB1.*, TAB2.* , TAB3.*
   INTO :A1,:A2,:A3,:A4,:A5,:A6,:A7,:A8,:A9
   FROM TAB2, KERN.TAB1 , TAB3
   WHERE (KERN.TAB1.SPALTE13, TAB2.SPALTE22)
     IN ((KERN.TAB2.SPALTE23, TAB3.SPALTE32)) !
 
SPALTE11          :  JOACHIM
SPALTE12          :    17.10
SPALTE13          :   0.0000E+00
SPALTE21          :     12
SPALTE22          :  JOACHIM
SPALTE23          :   0.000E+00
SPALTE31          :  ????
SPALTE32          :  JOACHIM
SPALTE33          :   300
 
Enter command:
SELECT TAB1.* , TAB2.* , TAB3.*
   INTO :A1,:A2,:A3,:A4,:A5,:A6,:A7,:A8,:A9
   FROM TAB2, KERN.TAB1, TAB3
   WHERE (TAB1.SPALTE13, TAB2.SPALTE22) IN ((TAB2.SPALTE23, TAB3.SPALTE32))
     AND TAB3.SPALTE33>= TAB1.SPALTE12 !
 
SPALTE11          :  JOACHIM
SPALTE12          :    17.10
SPALTE13          :   0.0000E+00
SPALTE21          :     12
SPALTE22          :  JOACHIM
SPALTE23          :   0.000E+00
SPALTE31          :  ????
SPALTE32          :  JOACHIM
SPALTE33          :   300
 
Enter command:
SELECT REF2.*, TAB1.*, TAB3.*
   INTO :A1,:A2,:A3,:A4,:A5,:A6,:A7,:A8,:A9
   FROM KERN.TAB2  REF2, KERN.TAB3, TAB1
   WHERE TAB3.SPALTE33  IS  NULL
     AND  (KERN.TAB3.SPALTE32, REF2.SPALTE22)
      IN ((REF2.SPALTE22,      KERN.TAB1.SPALTE11))
     AND ( TAB1.SPALTE13 IS NULL
     AND   TAB1.SPALTE13 IS NULL ) !
 
SPALTE21          :    300
SPALTE22          :  HANS
SPALTE23          :  ??????????
SPALTE11          :  HANS
SPALTE12          :    22.52
SPALTE13          :  ???????????
SPALTE31          :    22
SPALTE32          :  HANS
SPALTE33          :  ????
 
Enter command:
SELECT ALL * INTO :A1,:A2,:A3,:A4,:A5,:A6,:A7,:A8,:A9
   FROM TAB2  REF2,TAB3 REF3, KERN.TAB1 REF1
   WHERE REF3.SPALTE33 IS NULL
     AND (REF2.SPALTE22, REF2.SPALTE22) IN ((REF3.SPALTE32, REF1.SPALTE11))
     AND ( REF1.SPALTE13 IS NULL )
     AND   REF1.SPALTE13 IS NULL
      OR REF2.SPALTE21 >100 !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT DISTINCT REF1_6789012345678.SPALTE11,
       REF1_6789012345678.SPALTE12 NEU12 ,
       REF1_6789012345678.SPALTE13 NEU13,
       KERN.TAB2.SPALTE22 NEU22, TAB3.SPALTE31 NEU31,
       KERN.TAB3.SPALTE32
    INTO :A1, :A2,:A3,:A4,:A5,:A6
    FROM KERN.TAB3, TAB2 , TAB1  REF1_6789012345678
    WHERE REF1_6789012345678.SPALTE13 > TAB2.SPALTE23
      AND (TAB2.SPALTE23, TAB2.SPALTE22) IN
          ((TAB3.SPALTE33, 'FRIEDA'), (TAB3.SPALTE33, 'HANS')) !
 
SPALTE11          :  PAUL
NEU12             :     0.00
NEU13             :   3.0000E+02
NEU22             :  FRIEDA
NEU31             :   300
SPALTE32          :  ANDREAS
 
Enter command:
SELECT DISTINCT REF3.*, TAB1.*, TAB3.*
   INTO :A1,:A2,:A3,:A4,:A5,:A6,:A7,:A8,:A9
   FROM TAB1 , TAB3 REF3 , TAB3
   WHERE REF3.SPALTE31 > TAB1.SPALTE13
     AND NOT ( REF3.SPALTE33 IS NULL )
     AND TAB3.SPALTE33 = REF3.SPALTE33 !
 
SPALTE31          :   300
SPALTE32          :  ANDREAS
SPALTE33          :     0
SPALTE11          :  JOACHIM
SPALTE12          :    17.10
SPALTE13          :   0.0000E+00
SPALTE31          :   300
SPALTE32          :  ANDREAS
SPALTE33          :     0
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
SELECT * INTO :A1 ,:A2 ,:A3 ,:A4 ,:A5 ,:A6 ,:A7 ,:A8 ,:A9 , :A10,
              :A11,:A12,:A13,:A14,:A15,:A16,:A17,:A18,:A19, :A20,
              :A21,:A22,:A23,:A24,:A25,:A26,:A27,:A28,:A29, :A30,
              :A31,:A32,:A33
    FROM TAB1 REF11 , TAB2 REF21 , TAB3 REF31 ,
         TAB1 REF12 , TAB2 REF22 , TAB3 REF32 ,
         TAB1 REF13 , TAB2 REF23 , TAB3 REF33 ,
         TAB1 REF14 , TAB2 REF24
     WHERE REF11.SPALTE13 < REF21.SPALTE21
       AND REF21.SPALTE21 = REF31.SPALTE31
       AND REF12.SPALTE13 < REF22.SPALTE21
       AND REF22.SPALTE21 = REF32.SPALTE31
       AND REF21.SPALTE21 = REF32.SPALTE31
       AND REF13.SPALTE13 < REF23.SPALTE21
       AND REF23.SPALTE21 = REF33.SPALTE31
       AND REF22.SPALTE21 = REF33.SPALTE31
       AND REF14.SPALTE13 < REF24.SPALTE21
       AND REF23.SPALTE21 = REF24.SPALTE21 !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT * INTO :A1,:A2,:A3,:A4,:A5,:A6
   FROM TAB1, TAB3
   WHERE TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31 !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT DISTINCT * INTO :A1,:A2,:A3,:A4,:A5,:A6
   FROM TAB1, TAB3
   WHERE TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31 !
 
SPALTE11          :  PAUL
SPALTE12          :     0.00
SPALTE13          :   3.0000E+02
SPALTE31          :   300
SPALTE32          :  ANDREAS
SPALTE33          :     0
 
Enter command:
SELECT ALL  * INTO :A1,:A2,:A3,:A4,:A5,:A6
   FROM TAB1, TAB2
   WHERE TAB1.SPALTE13 = TAB2.SPALTE21
     AND TAB1.SPALTE13 = TAB2.SPALTE21
     AND TAB1.SPALTE13 = TAB2.SPALTE21
     AND TAB1.SPALTE13 = TAB2.SPALTE21
     AND TAB1.SPALTE13 = TAB2.SPALTE21
     AND TAB1.SPALTE13 = TAB2.SPALTE21
     AND TAB1.SPALTE13 = TAB2.SPALTE21
     AND TAB1.SPALTE13 = TAB2.SPALTE21
     AND TAB1.SPALTE13 = TAB2.SPALTE21
     AND TAB1.SPALTE13 = TAB2.SPALTE21 !
 
SPALTE11          :  PAUL
SPALTE12          :     0.00
SPALTE13          :   3.0000E+02
SPALTE21          :    300
SPALTE22          :  HANS
SPALTE23          :  ??????????
 
Enter command:
SELECT DISTINCT * INTO :A1, :A2, :A3, :A4, :A5, :A6
   FROM TAB1, TAB3
   WHERE TAB1.SPALTE13 = TAB3.SPALTE33
     AND TAB1.SPALTE13 = TAB3.SPALTE33
     AND TAB1.SPALTE13 = TAB3.SPALTE33
     AND TAB1.SPALTE13 = TAB3.SPALTE33
     AND TAB1.SPALTE13 = TAB3.SPALTE33
     AND TAB1.SPALTE13 = TAB3.SPALTE33
     AND TAB1.SPALTE13 = TAB3.SPALTE33
     AND TAB1.SPALTE13 = TAB3.SPALTE33
     AND TAB1.SPALTE13 = TAB3.SPALTE33
     AND TAB1.SPALTE13 = TAB3.SPALTE33 !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT * INTO :A1 ,:A2 ,:A3 ,:A4 ,:A5 ,:A6 ,:A7 ,:A8 ,:A9 , :A10,
              :A11,:A12,:A13,:A14,:A15,:A16,:A17,:A18,:A19, :A20,
              :A21,:A22,:A23,:A24,:A25,:A26,:A27,:A28,:A29, :A30,
              :A31,:A32,:A33
    FROM TAB1 REF11 , TAB2 REF21 , TAB3 REF31 ,
         TAB1 REF12 , TAB2 REF22 , TAB3 REF32 ,
         TAB1 REF13 , TAB2 REF23 , TAB3 REF33 ,
         TAB1 REF14 , TAB2 REF24
     WHERE REF11.SPALTE13 < REF21.SPALTE21
       AND REF21.SPALTE21 = REF31.SPALTE31
       AND REF12.SPALTE13 < REF22.SPALTE21
       AND REF22.SPALTE21 = REF32.SPALTE31
       AND REF13.SPALTE13 < REF23.SPALTE21
       AND REF23.SPALTE21 = REF33.SPALTE31
       AND REF22.SPALTE21 = REF33.SPALTE31
       AND REF14.SPALTE13 < REF24.SPALTE21
       AND REF23.SPALTE21 = REF24.SPALTE21 !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT * INTO :A1 ,:A2 ,:A3 ,:A4 ,:A5 ,:A6 ,:A7 ,:A8 ,:A9 , :A10,
              :A11,:A12,:A13,:A14,:A15,:A16,:A17,:A18,:A19, :A20,
              :A21,:A22,:A23,:A24,:A25,:A26,:A27,:A28,:A29, :A30,
              :A31,:A32,:A33
    FROM TAB1 REF11 , TAB2 REF21 , TAB3 REF31 ,
         TAB1 REF12 , TAB2 REF22 , TAB3 REF32 ,
         TAB1 REF13 , TAB2 REF23 , TAB3 REF33 ,
         TAB1 REF14 , TAB2 REF24
     WHERE REF11.SPALTE13 < REF21.SPALTE21
       AND REF21.SPALTE21 = REF31.SPALTE31
       AND REF12.SPALTE13 < REF22.SPALTE21
       AND REF12.SPALTE13 < REF11.SPALTE13
       AND REF22.SPALTE21 = REF32.SPALTE31
       AND REF13.SPALTE13 < REF23.SPALTE21
       AND REF13.SPALTE13 < REF33.SPALTE31
       AND REF23.SPALTE21 = REF33.SPALTE31
       AND REF22.SPALTE21 = REF33.SPALTE31
       AND REF14.SPALTE13 < REF24.SPALTE21
       AND REF14.SPALTE13 < REF33.SPALTE31
       AND REF23.SPALTE21 = REF24.SPALTE21 !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
SELECT * INTO :A1 ,:A2 ,:A3 ,:A4 ,:A5 ,:A6 ,:A7 ,:A8 ,:A9 , :A10,
              :A11,:A12,:A13,:A14,:A15,:A16,:A17,:A18,:A19, :A20,
              :A21
    FROM TAB1 REF11 , TAB2 REF21 , TAB3 REF31 ,
         TAB1 REF12 , TAB2 REF22 , TAB3 REF32 ,
                                   TAB3 REF33
     WHERE REF11.SPALTE13 < REF21.SPALTE21
       AND REF21.SPALTE21 = REF31.SPALTE31
       AND REF12.SPALTE13 < REF22.SPALTE21
       AND REF22.SPALTE21 = REF32.SPALTE31
       AND REF31.SPALTE31 < REF33.SPALTE31
       AND REF32.SPALTE31 = REF33.SPALTE31 !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT * INTO :A1 ,:A2 ,:A3 ,:A4 ,:A5 ,:A6 ,:A7 ,:A8 ,:A9 , :A10,
              :A11,:A12,:A13,:A14,:A15,:A16,:A17,:A18,:A19, :A20,
              :A21,:A22,:A23,:A24,:A25,:A26,:A27,:A28,:A29, :A30,
              :A31,:A32,:A33
    FROM TAB1 REF11 , TAB2 REF21 , TAB3 REF31 ,
         TAB1 REF12 , TAB2 REF22 , TAB3 REF32 ,
         TAB1 REF13 , TAB2 REF23 , TAB3 REF33 ,
         TAB1 REF14 , TAB2 REF24
     WHERE REF11.SPALTE13 < REF21.SPALTE21
       AND REF21.SPALTE21 = REF31.SPALTE31
       AND REF12.SPALTE13 < REF22.SPALTE21
       AND REF22.SPALTE21 = REF32.SPALTE31
       AND REF13.SPALTE13 < REF23.SPALTE21
       AND REF23.SPALTE21 = REF33.SPALTE31
       AND REF22.SPALTE21 = REF33.SPALTE31
       AND REF14.SPALTE13 < REF24.SPALTE21
       AND REF14.SPALTE13 < REF32.SPALTE31
       AND REF23.SPALTE21 = REF24.SPALTE21 !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT * INTO :A1 ,:A2 ,:A3 ,:A4 ,:A5 ,:A6 ,:A7 ,:A8 ,:A9 , :A10,
              :A11,:A12,:A13,:A14,:A15,:A16,:A17,:A18,:A19, :A20,
              :A21,:A22,:A23,:A24,:A25,:A26,:A27,:A28,:A29, :A30,
              :A31,:A32,:A33
    FROM TAB1 REF11 , TAB2 REF21 , TAB3 REF31 ,
         TAB1 REF12 , TAB2 REF22 , TAB3 REF32 ,
         TAB1 REF13 , TAB2 REF23 , TAB3 REF33 ,
         TAB1 REF14 , TAB2 REF24
     WHERE REF11.SPALTE13 < REF21.SPALTE21
       AND REF21.SPALTE21 = REF31.SPALTE31
       AND REF12.SPALTE13 < REF22.SPALTE21
       AND REF12.SPALTE13 < REF31.SPALTE31
       AND REF22.SPALTE21 = REF32.SPALTE31
       AND REF13.SPALTE13 < REF23.SPALTE21
       AND REF23.SPALTE21 = REF33.SPALTE31
       AND REF22.SPALTE21 = REF33.SPALTE31
       AND REF14.SPALTE13 < REF24.SPALTE21
       AND REF14.SPALTE13 < REF32.SPALTE31
       AND REF23.SPALTE21 = REF24.SPALTE21 !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT * INTO :A1 ,:A2 ,:A3 ,:A4 ,:A5 ,:A6 ,:A7 ,:A8 ,:A9 , :A10,
              :A11,:A12,:A13,:A14,:A15,:A16,:A17,:A18,:A19, :A20,
              :A21,:A22,:A23,:A24,:A25,:A26,:A27,:A28,:A29, :A30,
              :A31,:A32,:A33
    FROM TAB1 REF11 , TAB2 REF21 , TAB3 REF31 ,
         TAB1 REF12 , TAB2 REF22 , TAB3 REF32 ,
         TAB1 REF13 , TAB2 REF23 , TAB3 REF33 ,
         TAB1 REF14 , TAB2 REF24
     WHERE REF11.SPALTE13 < REF21.SPALTE21
       AND REF11.SPALTE11 = REF13.SPALTE11
       AND REF21.SPALTE21 = REF31.SPALTE31
       AND REF12.SPALTE13 < REF22.SPALTE21
       AND REF22.SPALTE21 = REF32.SPALTE31
       AND REF22.SPALTE21 = REF31.SPALTE31
       AND REF13.SPALTE13 < REF23.SPALTE21
       AND REF23.SPALTE21 = REF33.SPALTE31
       AND REF22.SPALTE21 = REF33.SPALTE31
       AND REF14.SPALTE13 < REF24.SPALTE21
       AND REF14.SPALTE13 < REF32.SPALTE31
       AND REF23.SPALTE21 = REF24.SPALTE21 !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE APPL_TABLE
  ( NAME  CHAR(18) KEY,
    TYPE CHAR(5) NOT NULL,
    LEN FIXED(3) NOT NULL ) !
 
Enter command:
INSERT INTO APPL_TABLE VALUES ('A1','CHAR',20) !
 
Enter command:
INSERT INTO APPL_TABLE VALUES ('A2','CHAR',20) !
 
Enter command:
SELECT A1.TYPE, A1.LEN, A1.NAME
  INTO :A1, :A2, :A3
  FROM APPL_TABLE A1, APPL_TABLE A2
  WHERE A1.TYPE = A2.TYPE
    AND A1.LEN  = A2.LEN
    AND A1.NAME <> A2.NAME !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE  RELSHIP
(  DEFOBJTYPE     CHAR (8)  KEY,
   DEFUSER        CHAR (8)  KEY,
   DEFOBJN1       CHAR (18) KEY,
   DEFOBJN2       CHAR (18) KEY,
   REFOBJTYPE     CHAR (8)  KEY,
   REFUSER        CHAR (8)  KEY,
   REFOBJN1       CHAR (18) KEY,
   REFOBJN2       CHAR (18) KEY,
   RELTYPE        CHAR (18) RANGE IN ( 'CONTAINS', 'CALLS', 'OWNER',
                                       'DERIVED_FROM', 'USES', 'ALIAS',
                                       'PERMISSION_FOR', 'COMMENTED' ),
   CREATEDATE     DATE,
   CREATETIME     TIME,
   PRIVILEGS      CHAR( 19) ) !
 
Enter command:
CREATE VIEW ENTITY_CONTAINS ( DEFOBJTYPE, DEFUSER, DEFOBJN1,
                      DEFOBJN2, REFOBJTYPE, REFUSER,
                      REFOBJN1, REFOBJN2, RELTYPE )
           AS  SELECT DEFOBJTYPE, DEFUSER, DEFOBJN1,
                      DEFOBJN2, REFOBJTYPE, REFUSER,
                      REFOBJN1, REFOBJN2, RELTYPE
               FROM   RELSHIP
               WHERE  (RELTYPE,    DEFOBJTYPE, REFOBJTYPE)
                  IN (('CONTAINS', 'ENTITY',   'ATTR'))
           WITH CHECK OPTION !
 
Enter command:
CREATE TABLE  ATTRIBUTE_TYPE
(  ETYPE_NAME     CHAR (18) KEY,
   DESC_NAME      CHAR (32),
   AUTHID         CHAR (8),
   CREATEDATE     DATE,
   UPD_AUTHOR     CHAR (8),
   LAST_UPD       DATE,
   COMMENTS       CHAR (80) ) !
 
Enter command:
INSERT ENTITY_CONTAINS VALUES
   ( 'ENTITY','BARBARA','TABLE', ' ',
     'ATTR','BARBARA','AUTHID',' ','CONTAINS' ) !
 
Enter command:
INSERT ATTRIBUTE_TYPE VALUES
  ( 'AUTHID', 'Author des Eintrags', 'BARBARA',NULL,NULL,NULL,'aa' ) !
 
Enter command:
SELECT DEFOBJN1, REFOBJN1, DESC_NAME
  FROM ATTRIBUTE_TYPE, ENTITY_CONTAINS
  WHERE REFOBJN1 = ETYPE_NAME !
 
resultcount :                     1
 
Enter command:
FETCH !
 
DEFOBJN1           | REFOBJN1           | DESC_NAME
-------------------+--------------------+---------------------------------
TABLE              | AUTHID             | Author des Eintrags
 
resultcount :                     1
 
Enter command:
SELECT DEFOBJN1, REFOBJN1, DESC_NAME
  FROM ENTITY_CONTAINS, ATTRIBUTE_TYPE
  WHERE REFOBJN1 = ETYPE_NAME !
 
resultcount :                     1
 
Enter command:
FETCH !
 
DEFOBJN1           | REFOBJN1           | DESC_NAME
-------------------+--------------------+---------------------------------
TABLE              | AUTHID             | Author des Eintrags
 
resultcount :                     1
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 (
       S1         CHAR(19),
       S2         FIXED(10)
       ) !
 
Enter command:
INSERT T1 SET S1 = 't1 *        ', S2 = 1 !
 
Enter command:
INSERT T1 SET S1 = 't1   *      ', S2 = 1 !
 
Enter command:
INSERT T1 SET S1 = 't1  *       ', S2 = 1 !
 
Enter command:
CREATE TABLE T2 (
       S1         CHAR(19),
       S2         FIXED(10)
        ) !
 
Enter command:
INSERT T2 SET S1 = 't2       ***', S2 = 11111 !
 
Enter command:
INSERT T2 SET S1 = 't2      ****', S2 = 11111 !
 
Enter command:
INSERT T2 SET S1 = 't2        **', S2 = 44444 !
 
Enter command:
COMMIT WORK !
 
Enter command:
SELECT T1.S1, T2.S1, T1.S2, T2.S2
  FROM <T1, T2>
 WHERE (T1.S2 = 1 OR
       (T1.S2, T2.S2) IN ((2, 44444)))
  ORDER BY T2.S1, T1.S1
  !
 
resultcount :                     9
 
Enter command:
FETCH !
 
S1                  | S1                  | S2          | S2
--------------------+---------------------+-------------+------------
t1   *              | t2        **        |           1 |       44444
t1  *               | t2        **        |           1 |       44444
t1 *                | t2        **        |           1 |       44444
t1   *              | t2       ***        |           1 |       11111
t1  *               | t2       ***        |           1 |       11111
t1 *                | t2       ***        |           1 |       11111
t1   *              | t2      ****        |           1 |       11111
t1  *               | t2      ****        |           1 |       11111
t1 *                | t2      ****        |           1 |       11111
 
resultcount :                     9
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE KERN.TAB1 ( SPALTE11 CHAR(10) KEY ,
                           SPALTE12 FIXED(5,2),
                           SPALTE13 FLOAT(5) ) !
 
Enter command:
INSERT TAB1 VALUES ( 'HANS'    , 22.52 , NULL ) !
 
Enter command:
INSERT TAB1 VALUES ( 'PAUL'    ,   0   ,  3E2 ) !
 
Enter command:
INSERT TAB1 VALUES ( 'JOACHIM' , 17.1  ,   0  ) !
 
Enter command:
CREATE TABLE KERN.TAB2 ( SPALTE21 FIXED(4) NOT NULL,
                           SPALTE22 CHAR(8) ,
                           SPALTE23 FLOAT(4) ) !
 
Enter command:
INSERT TAB2 VALUES ( 300   , 'HANS'   , NULL ) !
 
Enter command:
INSERT TAB2 VALUES ( 22.00 , 'FRIEDA' , 0    ) !
 
Enter command:
INSERT TAB2 VALUES ( 12    , 'JOACHIM', 0    ) !
 
Enter command:
CREATE TABLE KERN.TAB3 ( SPALTE31 FIXED(3),
                           SPALTE32 CHAR(10) ,
                           SPALTE33 FIXED(3) ) !
 
Enter command:
INSERT TAB3 VALUES ( 22  , 'HANS'    , NULL ) !
 
Enter command:
INSERT TAB3 VALUES ( 300 , 'ANDREAS' , 0    ) !
 
Enter command:
INSERT TAB3 VALUES ( 300 , 'ANDREAS' , 0    ) !
 
Enter command:
INSERT TAB3 VALUES ( NULL, 'JOACHIM' , 300  ) !
 
Enter command:
COMMIT WORK !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
DECLARE SELECTTAB1 CURSOR FOR
SELECT TAB1.SPALTE11, KERN.TAB1.SPALTE13,
       REF2.SPALTE22 NEU22 ,
       REF2.SPALTE23 NEU23, KERN.TAB3.SPALTE33
   FROM KERN.TAB1, TAB2  REF2 , TAB3
   WHERE TAB1.SPALTE13 <= KERN.TAB3.SPALTE33
     AND REF2.SPALTE22 <> TAB1.SPALTE11
     AND NOT ( REF2.SPALTE23 IS NULL ) !
 
resultcount :                     5
 
Enter command:
FETCH SELECTTAB1 !
 
SPALTE11   | SPALTE13    | NEU22    | NEU23      | SPALTE33
-----------+-------------+----------+------------+---------
JOACHIM    |  0.0000E+00 | FRIEDA   |  0.000E+00 |    0
JOACHIM    |  0.0000E+00 | FRIEDA   |  0.000E+00 |    0
JOACHIM    |  0.0000E+00 | FRIEDA   |  0.000E+00 |  300
PAUL       |  3.0000E+02 | FRIEDA   |  0.000E+00 |  300
PAUL       |  3.0000E+02 | JOACHIM  |  0.000E+00 |  300
 
resultcount :                     5
 
Enter command:
DECLARE SELECTTAB2 CURSOR FOR
SELECT DISTINCT TAB1.SPALTE11, KERN.TAB1.SPALTE13,
       REF2.SPALTE22 NEU22 ,
       REF2.SPALTE23 NEU23, KERN.TAB3.SPALTE33
   FROM KERN.TAB1, TAB2  REF2 , TAB3
   WHERE TAB1.SPALTE13 <= KERN.TAB3.SPALTE33
     AND REF2.SPALTE22 <> TAB1.SPALTE11
     AND NOT ( REF2.SPALTE23 IS NULL )
        ORDER BY TAB1.SPALTE11, NEU22, KERN.TAB3.SPALTE33 DESC !
 
resultcount :                     4
 
Enter command:
FETCH SELECTTAB2 !
 
SPALTE11   | SPALTE13    | NEU22    | NEU23      | SPALTE33
-----------+-------------+----------+------------+---------
JOACHIM    |  0.0000E+00 | FRIEDA   |  0.000E+00 |  300
JOACHIM    |  0.0000E+00 | FRIEDA   |  0.000E+00 |    0
PAUL       |  3.0000E+02 | FRIEDA   |  0.000E+00 |  300
PAUL       |  3.0000E+02 | JOACHIM  |  0.000E+00 |  300
 
resultcount :                     4
 
Enter command:
DECLARE SELECTTAB3 CURSOR FOR
SELECT TAB1.SPALTE11, KERN.TAB1.SPALTE13,
       REF2.SPALTE22 NEU22 ,
       REF2.SPALTE23 NEU23, KERN.TAB3.SPALTE33
   FROM KERN.TAB1, TAB2  REF2 , TAB3
   WHERE TAB1.SPALTE13 <= KERN.TAB3.SPALTE33
     AND REF2.SPALTE22 <> TAB1.SPALTE11
     AND NOT ( REF2.SPALTE23 IS NULL )
   ORDER BY KERN.TAB1.SPALTE13 ASC, REF2.SPALTE22 DESC !
 
resultcount :                     5
 
Enter command:
FETCH SELECTTAB3 !
 
SPALTE11   | SPALTE13    | NEU22    | NEU23      | SPALTE33
-----------+-------------+----------+------------+---------
JOACHIM    |  0.0000E+00 | FRIEDA   |  0.000E+00 |    0
JOACHIM    |  0.0000E+00 | FRIEDA   |  0.000E+00 |    0
JOACHIM    |  0.0000E+00 | FRIEDA   |  0.000E+00 |  300
PAUL       |  3.0000E+02 | JOACHIM  |  0.000E+00 |  300
PAUL       |  3.0000E+02 | FRIEDA   |  0.000E+00 |  300
 
resultcount :                     5
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE TAB11
   ( COL1 CHAR(12) KEY,
     COL2 CHAR(12) KEY ) !
 
Enter command:
CREATE TABLE TAB41
   ( SPALTE1 CHAR(18) KEY,
     SPALTE2 CHAR(18) KEY ) !
 
Enter command:
INSERT TAB11 VALUES ( 'Y', 'M' ) !
 
Enter command:
INSERT TAB41 VALUES ( 'Y', 'M' ) !
 
Enter command:
SELECT TAB11.COL1, TAB11.COL2, REF.SPALTE1, REF.SPALTE2
    FROM TAB41 REF , TAB11
    WHERE (TAB11.COL1, TAB11.COL2) IN ((REF.SPALTE1, REF.SPALTE2)) !
 
resultcount :                     1
 
Enter command:
FETCH !
 
COL1         | COL2         | SPALTE1            | SPALTE2
-------------+--------------+--------------------+-------------------
Y            | M            | Y                  | M
 
resultcount :                     1
 
Enter command:
ROLLBACK WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE EINS ( WF CHAR (12), WNR FIXED (4))!
 
Enter command:
CREATE INDEX "eins.wf"
 ON EINS( WF ) !
 
Enter command:
INSERT EINS VALUES ('computer', 1)!
 
Enter command:
INSERT EINS VALUES ('software', 2)!
 
Enter command:
CREATE TABLE ZWEI (WNR FIXED(4))!
 
Enter command:
CREATE INDEX "zwei.wnr"
 ON ZWEI( WNR ) !
 
Enter command:
INSERT ZWEI SET WNR = 1!
 
Enter command:
INSERT ZWEI SET WNR = 2!
 
Enter command:
SELECT EINS.WNR, WF FROM EINS, ZWEI
  WHERE (EINS.WNR, WF) IN ((ZWEI.WNR, 'computer'), (ZWEI.WNR, 'software')) !
 
resultcount :                     2
 
Enter command:
FETCH!
 
WNR   | WF
------+-------------
    1 | computer
    2 | software
 
resultcount :                     2
 
Enter command:
ROLLBACK RELEASE !
 
Enter command:
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 ( C1 CHAR(10) ) !
 
Enter command:
CREATE TABLE T2 ( C2 FIXED(2) ) !
 
Enter command:
INSERT T1 SET C1 = 'a' !
 
Enter command:
INSERT T2 SET C2 = 1 !
 
Enter command:
SELECT * FROM T1, T2 WHERE T2.C2 = LENGTH (T1.C1 ) !
 
resultcount :                     1
 
Enter command:
FETCH !
 
C1         | C2
-----------+----
a          |   1
 
resultcount :                     1
 
Enter command:
ROLLBACK WORK !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T ( A CHAR (1) , B CHAR (10))!
 
Enter command:
INSERT T VALUES ('a', 'bbbbbbbbbb')!
 
Enter command:
INSERT T VALUES ('b', 'cccccccccc')!
 
Enter command:
CREATE TABLE T1 ( C CHAR (1), D CHAR (10))!
 
Enter command:
INSERT T1 VALUES ('d', 'eeeeeeeeee')!
 
Enter command:
INSERT T1 VALUES ('e', 'ffffffffff')!
 
Enter command:
CREATE TABLE T2 ( E CHAR (11))!
 
Enter command:
INSERT T2 SET E = 'eeeeeeeeeee' !
 
Enter command:
SELECT COUNT (DISTINCT A||B), COUNT (A||B), COUNT(DISTINCT A)
INTO :A, :B, :C FROM T,T1 !
 
EXPRESSION1       :            2
EXPRESSION2       :            4
EXPRESSION3       :            2
 
Enter command:
SELECT COUNT (DISTINCT A||D), COUNT (A||B), COUNT(DISTINCT A)
INTO :A, :B, :C FROM T,T1 !
 
EXPRESSION1       :            4
EXPRESSION2       :            4
EXPRESSION3       :            2
 
Enter command:
PARS_THEN_EX !
 
Enter command:
SELECT COUNT (DISTINCT A||B), COUNT (A||B), COUNT(DISTINCT A)
INTO :A, :B, :C FROM T,T1 !
 
EXPRESSION1       :            2
EXPRESSION2       :            4
EXPRESSION3       :            2
 
Enter command:
SELECT COUNT (DISTINCT E), COUNT (E) INTO :A, :B FROM T2 !
 
EXPRESSION1       :            1
EXPRESSION2       :            1
 
Enter command:
SELECT COUNT (DISTINCT A||D), COUNT (A||B), COUNT(DISTINCT A)
INTO :A, :B, :C FROM T,T1 !
 
EXPRESSION1       :            4
EXPRESSION2       :            4
EXPRESSION3       :            2
 
Enter command:
PARS_EXECUTE !
 
Enter command:
DROP TABLE T !
 
Enter command:
DROP TABLE T1 !
 
Enter command:
ROLLBACK WORK !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 ( ID INT,
CLIENT CHAR (12),
PRGUID CHAR (16) BYTE,
PROCTYPE CHAR (20) BYTE)!
 
Enter command:
INSERT INTO T1 VALUES (1, '001', X'ABCDEF11FE334455',
   X 'A9972913B959B545926BFB193FABFE24')!
 
Enter command:
INSERT INTO T1 VALUES (2, '001', X'ABCDEF11FE33',
   X 'A9972913B959B545926BFB193FABFE24')!
 
Enter command:
CREATE TABLE T2 (
CLIENT CHAR (12),
PRGUID CHAR (16) BYTE,
PRSTEPID INT,
ERROR CHAR (1))!
 
Enter command:
INSERT INTO T2 VALUES ('001', X'ABCDEF11FE334455', 1, ' ')!
 
Enter command:
INSERT INTO T2 VALUES ('001', X'ABCDEF11FE33', 1, ' ')!
 
Enter command:
 
CREATE VIEW "VSPICSPRTR" ("CLIENT", "PROCTYPE", "PRGUID", "PRSTEPID",
       "SERROR")
  AS SELECT T1."CLIENT", T1."PROCTYPE", T1."PRGUID", T2."PRSTEPID",
        T2."ERROR"
FROM T1,  T2
WHERE T1."CLIENT" = T2."CLIENT" AND T1."PRGUID" = T2."PRGUID"!
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST SQLMODE ORACLE !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST SQLMODE ORACLE ISOLATION LEVEL 1 !
 
Enter command:
PARS_THEN_EX !
 
Enter command:
SELECT COUNT( DISTINCT  "PRGUID" ) "PCOUNT" , "PRSTEPID" "STEPID" , "SERROR"
"ERROR" FROM "VSPICSPRTR" WHERE "CLIENT" = '001' AND "PROCTYPE" =
'A9972913B959B545926BFB193FABFE24' GROUP BY "PRSTEPID" , "SERROR"
!
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B, :C !
 
PCOUNT      | STEPID      | ERROR
------------+-------------+------
          2 |           1 |
 
resultcount :                     1
 
Enter command:
PARS_EXECUTE !
 
Enter command:
DROP TABLE T1 !
 
Enter command:
DROP TABLE T2 !
 
Enter command:
COMMIT RELEASE!
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T (WOCHE FIXED (4) KEY, MONAT FIXED (2))!
 
Enter command:
INSERT T VALUES (5000, 12)!
 
Enter command:
INSERT T VALUES ( 100,  4)!
 
Enter command:
CREATE TABLE T1 (A1 FIXED(8)KEY)!
 
Enter command:
INSERT T1 SET A1 = 100!
 
Enter command:
CREATE TABLE T2 (A2 FIXED(8)KEY)!
 
Enter command:
INSERT T2 SET A2 = 100!
 
Enter command:
CREATE VIEW V1 AS SELECT T1.*, T2.* FROM T1, T2
    WHERE T1.A1 = T2.A2 !
 
Enter command:
DECLARE MON CURSOR FOR
SELECT  100* TRUNC(WOCHE/100) + MONAT JJMM, WOCHE
FROM T WHERE WOCHE > 2 FOR REUSE!
 
resultcount :                     2
 
Enter command:
FETCH MON!
 
JJMM                                         | WOCHE
---------------------------------------------+------
 1.0400000000000000000000000000000000000E+02 |   100
 5.0120000000000000000000000000000000000E+03 |  5000
 
resultcount :                     2
 
Enter command:
DECLARE AUF CURSOR FOR
SELECT JJMM, SUM(TRUNC(A2)) AW, SUM(TRUNC(A1)) RS
FROM V1 A, MON B
WHERE A.A2 > 1 AND A.A1 = B.WOCHE
GROUP BY JJMM FOR REUSE !
 
resultcount :                     1
 
Enter command:
FETCH AUF!
 
JJMM              :   1.0400000000000000000000000000000000000E+02
AW                :   1.0000000000000000000000000000000000000E+02
RS                :   1.0000000000000000000000000000000000000E+02
 
resultcount :                     1
 
Enter command:
DECLARE AUF1 CURSOR FOR
SELECT JJMM, SUM(TRUNC(A2)) AW, SUM(TRUNC(A1)) RS
FROM V1 A, MON B
WHERE A.A1 = B.WOCHE AND A.A2 > 1
GROUP BY JJMM FOR REUSE !
 
resultcount :                     1
 
Enter command:
FETCH AUF1!
 
JJMM              :   1.0400000000000000000000000000000000000E+02
AW                :   1.0000000000000000000000000000000000000E+02
RS                :   1.0000000000000000000000000000000000000E+02
 
resultcount :                     1
 
Enter command:
DROP TABLE T!
 
Enter command:
DROP TABLE T1!
 
Enter command:
DROP TABLE T2!
 
Enter command:
CREATE TABLE A (SALARY FIXED (6,2))!
 
Enter command:
CREATE VIEW V (SAL) AS SELECT SUM(SALARY) FROM A !
 
Enter command:
INSERT A VALUES (100)!
 
Enter command:
INSERT A VALUES (500)!
 
Enter command:
SELECT A.SALARY / SUM(A1.SALARY) FROM A, A A1 GROUP BY A.SALARY!
 
resultcount :                     2
 
Enter command:
FETCH !
 
EXPRESSION1
--------------------------------------------
 1.6666666666666666666666666666666666666E-01
 8.3333333333333333333333333333333333333E-01
 
resultcount :                     2
 
Enter command:
DROP TABLE A!
 
Enter command:
COMMIT RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 ( T1XC1 CHAR(20),
                  T1XC2 FIXED(10),
                  T1XC3 CHAR(10) ASCII,
                  T1XC4 FIXED(10,5),
                  T1XC5 FLOAT(10),
                  T1XC6 FIXED(18) ) !
 
Enter command:
INSERT T1 VALUES ( 'Hans', 100, 'Muenchen', 100.100, NULL,
                    500000000000000000 ) !
 
Enter command:
INSERT T1 VALUES ( NULL, NULL, 'Hamburg', 0.00005, 8E-30, -2000 ) !
 
Enter command:
INSERT T1 VALUES ( 'Karin', -600000, NULL, NULL, -1E12,
                    800000000000000000 ) !
 
Enter command:
INSERT T1 VALUES ( 'Karin', 5, 'Bonn', -700, 1000, NULL ) !
 
Enter command:
INSERT T1 VALUES ( 'Hans', -500000, 'Bremen', 700.00005, NULL, 300 ) !
 
Enter command:
INSERT T1 VALUES ( ' Marianne', -80, 'Koeln 1', -300, 10E-10, NULL ) !
 
Enter command:
CREATE TABLE T2 ( T2XC1 FIXED(5) KEY,
                  T2XC2 CHAR(10) ASCII,
                  T2XC3 CHAR(15) ASCII,
                  T2XC4 FLOAT(5),
                  T2XC5 FIXED(5) RANGE BETWEEN -50000 AND +50000 ) !
 
Enter command:
INSERT T2 VALUES ( 10, 'Klaus', 'Mueller', 1E20, 20000 ) !
 
Enter command:
INSERT T2 VALUES ( 20, 'Elena', 'Meier', -5E10, -100 ) !
 
Enter command:
INSERT T2 VALUES ( 30, NULL, 'Lehmann', NULL, NULL ) !
 
Enter command:
INSERT T2 VALUES ( 40, 'Paul', 'Anse Rauch', 8 , -50000 ) !
 
Enter command:
CREATE TABLE T3 ( T3XC1 FIXED(2,1 ) KEY,
                  T3XC2 CHAR(20) KEY ,
                  T3XC3 FLOAT( 5) ,
                  T3XC4 CHAR(20) ASCII RANGE BETWEEN 'A' AND 'G' ,
                  T3XC5 FIXED(18) ) !
 
Enter command:
INSERT T3 VALUES ( 0.1, 'Frankreich', 80E50, 'Amsel',
                   700000000000000000 ) !
 
Enter command:
INSERT T3 VALUES ( 2.5, 'Belgien', 1E-30, 'Fink', NULL ) !
 
Enter command:
INSERT T3 VALUES ( 3.0, 'Italien', -5E30, 'Amsel', -1000 ) !
 
Enter command:
INSERT T3 VALUES ( 4.1, 'VR Polen', NULL, 'Fink', +200 ) !
 
Enter command:
SELECT SUM ( T1.T1XC2 ) , SUM ( T2.T2XC1 ) FROM T1, T2 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1       :  -4.3999000000000000000000000000000000000E+06
EXPRESSION2       :   6.0000000000000000000000000000000000000E+02
 
resultcount :                     1
 
Enter command:
SELECT SUM ( T1XC2 ) , SUM ( T2XC1 ) FROM T1, T2 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1       :  -4.3999000000000000000000000000000000000E+06
EXPRESSION2       :   6.0000000000000000000000000000000000000E+02
 
resultcount :                     1
 
Enter command:
SELECT SUM( T1.T1XC2 ), SUM ( T2.T2XC1 ),SUM ( T3.T3XC3 ) FROM T1,T2,T3 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1       :  -1.7599600000000000000000000000000000000E+07
EXPRESSION2       :   2.4000000000000000000000000000000000000E+03
EXPRESSION3       :   1.9199999999999999999988000000000000000E+53
 
resultcount :                     1
 
Enter command:
SELECT SUM ( T1XC2 ) FROM T1, T2 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1
--------------------------------------------
-4.3999000000000000000000000000000000000E+06
 
resultcount :                     1
 
Enter command:
SELECT COUNT (*), COUNT ( DISTINCT KERN.T2.T2XC2 ),
       COUNT ( ALL ( T3XC5)) FROM T1,T2,T3 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1 | EXPRESSION2 | EXPRESSION3
------------+-------------+------------
         96 |           3 |          72
 
resultcount :                     1
 
Enter command:
SELECT AVG ( DISTINCT T2.T2XC1 ) ,
       COUNT ( DISTINCT T2.T2XC1 ) ,
       AVG ( ALL KERN.T1.T1XC5 ) ,
       SUM ( ALL T1XC5 ) ,
       COUNT ( ALL ( T1XC5 ) ) FROM T1,T2 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1       :   2.5000000000000000000000000000000000000E+01
EXPRESSION2       :            4
EXPRESSION3       :  -2.4999999974999999999975000000000000000E+11
EXPRESSION4       :  -3.9999999959999999999960000000000000000E+12
EXPRESSION5       :           16
 
resultcount :                     1
 
Enter command:
SELECT SUM ( REF.T1XC4 ) , AVG ( REF.T1XC4) FROM T1,T1 REF !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1       :  -1.1993994000000000000000000000000000000E+03
EXPRESSION2       :  -3.9979980000000000000000000000000000000E+01
 
resultcount :                     1
 
Enter command:
SELECT SUM ( T1XC4 ), AVG ( T1XC4), T1XC1, COUNT(T1XC1)
    FROM T1,T2 GROUP BY T1XC1 !
 
resultcount :                     4
 
Enter command:
FETCH !
 
EXPRESSION1       :  -1.2000000000000000000000000000000000000E+03
EXPRESSION2       :  -3.0000000000000000000000000000000000000E+02
T1XC1             :   Marianne
EXPRESSION3       :            4
-----------------------------------------------------------------
EXPRESSION1       :   3.2004002000000000000000000000000000000E+03
EXPRESSION2       :   4.0005002500000000000000000000000000000E+02
T1XC1             :  Hans
EXPRESSION3       :            8
-----------------------------------------------------------------
EXPRESSION1       :  -2.8000000000000000000000000000000000000E+03
EXPRESSION2       :  -7.0000000000000000000000000000000000000E+02
T1XC1             :  Karin
EXPRESSION3       :            8
-----------------------------------------------------------------
EXPRESSION1       :   2.0000000000000000000000000000000000000E-04
EXPRESSION2       :   5.0000000000000000000000000000000000000E-05
T1XC1             :  ?????
EXPRESSION3       :            0
 
resultcount :                     4
 
Enter command:
SELECT SUM ( T1XC4 ), SUM ( T2XC4)
    FROM T1, T2 REF
    GROUP BY REF.T2XC1
    HAVING REF.T2XC1 > 10
       AND SUM ( REF.T2XC4) IS NOT NULL !
 
resultcount :                     2
 
Enter command:
FETCH !
 
EXPRESSION1       :  -1.9989990000000000000000000000000000000E+02
EXPRESSION2       :  -3.0000000000000000000000000000000000000E+11
-----------------------------------------------------------------
EXPRESSION1       :  -1.9989990000000000000000000000000000000E+02
EXPRESSION2       :   4.8000000000000000000000000000000000000E+01
 
resultcount :                     2
 
Enter command:
SELECT AVG ( T1XC2), AVG ( DISTINCT T1XC5 ) , T1.T1XC5
    FROM T1, T2
    GROUP BY T1XC1 , KERN.T1.T1XC5
    HAVING SUM ( T1XC5 ) > 0
    ORDER BY T1XC5, 2 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
EXPRESSION1       :  ????????????????????????????????????????????
EXPRESSION2       :   8.0000000000000000000000000000000000000E-30
T1XC5             :   8.000000000E-30
-----------------------------------------------------------------
EXPRESSION1       :  -8.0000000000000000000000000000000000000E+01
EXPRESSION2       :   1.0000000000000000000000000000000000000E-09
T1XC5             :   1.000000000E-09
-----------------------------------------------------------------
EXPRESSION1       :   5.0000000000000000000000000000000000000E+00
EXPRESSION2       :   1.0000000000000000000000000000000000000E+03
T1XC5             :   1.000000000E+03
 
resultcount :                     3
 
Enter command:
SELECT SUM( T1XC2) , COUNT ( T1XC2) , AVG (T1XC2)
    FROM T1,T3 GROUP BY T1XC1, T3.T3XC4 !
 
resultcount :                     8
 
Enter command:
FETCH !
 
EXPRESSION1       :  -1.6000000000000000000000000000000000000E+02
EXPRESSION2       :            2
EXPRESSION3       :  -8.0000000000000000000000000000000000000E+01
-----------------------------------------------------------------
EXPRESSION1       :  -1.6000000000000000000000000000000000000E+02
EXPRESSION2       :            2
EXPRESSION3       :  -8.0000000000000000000000000000000000000E+01
-----------------------------------------------------------------
EXPRESSION1       :  -9.9980000000000000000000000000000000000E+05
EXPRESSION2       :            4
EXPRESSION3       :  -2.4995000000000000000000000000000000000E+05
-----------------------------------------------------------------
EXPRESSION1       :  -9.9980000000000000000000000000000000000E+05
EXPRESSION2       :            4
EXPRESSION3       :  -2.4995000000000000000000000000000000000E+05
-----------------------------------------------------------------
EXPRESSION1       :  -1.1999900000000000000000000000000000000E+06
EXPRESSION2       :            4
EXPRESSION3       :  -2.9999750000000000000000000000000000000E+05
-----------------------------------------------------------------
EXPRESSION1       :  -1.1999900000000000000000000000000000000E+06
EXPRESSION2       :            4
EXPRESSION3       :  -2.9999750000000000000000000000000000000E+05
-----------------------------------------------------------------
EXPRESSION1       :  ????????????????????????????????????????????
EXPRESSION2       :            0
EXPRESSION3       :  ????????????????????????????????????????????
-----------------------------------------------------------------
EXPRESSION1       :  ????????????????????????????????????????????
EXPRESSION2       :            0
EXPRESSION3       :  ????????????????????????????????????????????
 
resultcount :                     8
 
Enter command:
SELECT SUM ( T1.T1XC2 + T2.T2XC1 ),
       AVG ( T1XC4 * 5 * T2XC5 ),
       ( SUM ( DISTINCT KERN.T1.T1XC4 / T2XC5 ) )
    FROM T1, T2
    GROUP BY T2XC1
    ORDER BY 1 DESC, 3 ASC !
 
resultcount :                     4
 
Enter command:
FETCH !
 
EXPRESSION1       :  -1.0997750000000000000000000000000000000E+06
EXPRESSION2       :   9.9949950000000000000000000000000000000E+06
EXPRESSION3       :   3.9979980000000000000000000000000000000E-03
-----------------------------------------------------------------
EXPRESSION1       :  -1.0998250000000000000000000000000000000E+06
EXPRESSION2       :  ????????????????????????????????????????????
EXPRESSION3       :  ????????????????????????????????????????????
-----------------------------------------------------------------
EXPRESSION1       :  -1.0998750000000000000000000000000000000E+06
EXPRESSION2       :   1.9989990000000000000000000000000000000E+04
EXPRESSION3       :   1.9989990000000000000000000000000000000E+00
-----------------------------------------------------------------
EXPRESSION1       :  -1.0999250000000000000000000000000000000E+06
EXPRESSION2       :  -3.9979980000000000000000000000000000000E+06
EXPRESSION3       :  -9.9949950000000000000000000000000000000E-03
 
resultcount :                     4
 
Enter command:
DROP TABLE T1 !
 
Enter command:
DROP TABLE T2 !
 
Enter command:
DROP TABLE T3 !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE MYTABLE(TABLEID VARCHAR(100) NOT NULL,
INDEXID INT NOT NULL DEFAULT 0, PRIMARY KEY (TABLEID) )!
 
Enter command:
INSERT INTO MYTABLE VALUES ('Test1',1)!
 
Enter command:
INSERT INTO MYTABLE VALUES ('Test2',1)!
 
Enter command:
INSERT INTO MYTABLE VALUES ('Test3',2)!
 
Enter command:
INSERT INTO MYTABLE VALUES ('Test4',2)!
 
Enter command:
SELECT TABLEID FROM MYTABLE GROUP BY TABLEID
ORDER BY MAX(INDEXID) DESC, TABLEID ASC!
 
resultcount :                     4
 
Enter command:
FETCH!
 
TABLEID           :  Test3
--------------------------------------------------------------------------------
TABLEID           :  Test4
--------------------------------------------------------------------------------
TABLEID           :  Test1
--------------------------------------------------------------------------------
TABLEID           :  Test2
 
resultcount :                     4
 
Enter command:
ROLLBACK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE TAB1 ( SPALTE1 CHAR(15) KEY , SPALTE2 FIXED(5) ) !
 
Enter command:
CREATE TABLE TAB2 ( COL1 FIXED(5), COL2 FIXED(5) ) !
 
Enter command:
INSERT TAB1 VALUES ( 'Hans', 1 ) !
 
Enter command:
INSERT TAB1 VALUES ( 'Paul', 3 ) !
 
Enter command:
INSERT TAB1 VALUES ( 'Ilse', 2 ) !
 
Enter command:
INSERT TAB1 VALUES ( 'John', NULL ) !
 
Enter command:
INSERT TAB1 VALUES ( 'Otto', 6 ) !
 
Enter command:
INSERT TAB2 VALUES ( 1, 3 ) !
 
Enter command:
INSERT TAB2 VALUES ( 5, 7 ) !
 
Enter command:
INSERT TAB2 VALUES ( NULL, NULL ) !
 
Enter command:
INSERT TAB2 VALUES ( 6, 3 ) !
 
Enter command:
INSERT TAB2 VALUES ( 1, NULL ) !
 
Enter command:
INSERT TAB2 VALUES ( 7, 6 ) !
 
Enter command:
DECLARE TAB1RES1 CURSOR FOR
SELECT * FROM TAB1 WHERE SPALTE2 > 2 FOR REUSE !
 
resultcount :                     2
 
Enter command:
FETCH TAB1RES1 !
 
SPALTE1         | SPALTE2
----------------+--------
Otto            |      6
Paul            |      3
 
resultcount :                     2
 
Enter command:
DECLARE RES1 CURSOR FOR
SELECT TAB1.SPALTE1 C1,
              TAB1.SPALTE2 C2 ,
              TAB1RES1.SPALTE2 C3
   FROM TAB1, TAB1RES1 WHERE TAB1.SPALTE2 < TAB1RES1.SPALTE2 FOR REUSE !
 
resultcount :                     5
 
Enter command:
FETCH RES1 !
 
C1              | C2     | C3
----------------+--------+-------
Hans            |      1 |      3
Hans            |      1 |      6
Ilse            |      2 |      3
Ilse            |      2 |      6
Paul            |      3 |      6
 
resultcount :                     5
 
Enter command:
DECLARE RES2 CURSOR FOR
SELECT RES1.C2 + REF1.SPALTE2 SP1, RES1.C2 * 3 SP2
   FROM RES1, TAB1RES1 REF1
   WHERE SPALTE1 = C1 FOR REUSE !
 
resultcount :                     1
 
Enter command:
FETCH RES2 !
 
SP1     | SP2
--------+--------
      6 |       9
 
resultcount :                     1
 
Enter command:
DECLARE RES3 CURSOR FOR
SELECT SUM ( C2 ) S1, SPALTE1
   FROM TAB1RES1, RES1
   WHERE RES1.C3 = SPALTE2
   GROUP BY SPALTE1
   ORDER BY 1 !
 
resultcount :                     2
 
Enter command:
FETCH RES3 !
 
S1                                           | SPALTE1
---------------------------------------------+----------------
 3.0000000000000000000000000000000000000E+00 | Paul
 6.0000000000000000000000000000000000000E+00 | Otto
 
resultcount :                     2
 
Enter command:
DECLARE RES4 CURSOR FOR
SELECT COL2,C1,SUM( COL1 ),AVG( C2 ) AVERAGE,COUNT( * )
   FROM TAB1RES1, TAB2, RES1
   WHERE C3 <> COL2
     AND COL1 > TAB1RES1.SPALTE2
   GROUP BY COL2, RES1.C1 !
 
resultcount :                     8
 
Enter command:
FETCH RES4 !
 
COL2              :       3
C1                :  Hans
EXPRESSION1       :   6.0000000000000000000000000000000000000E+00
AVERAGE           :   1.0000000000000000000000000000000000000E+00
EXPRESSION2       :            1
-----------------------------------------------------------------
COL2              :       3
C1                :  Ilse
EXPRESSION1       :   6.0000000000000000000000000000000000000E+00
AVERAGE           :   2.0000000000000000000000000000000000000E+00
EXPRESSION2       :            1
-----------------------------------------------------------------
COL2              :       3
C1                :  Paul
EXPRESSION1       :   6.0000000000000000000000000000000000000E+00
AVERAGE           :   3.0000000000000000000000000000000000000E+00
EXPRESSION2       :            1
-----------------------------------------------------------------
COL2              :       6
C1                :  Hans
EXPRESSION1       :   1.4000000000000000000000000000000000000E+01
AVERAGE           :   1.0000000000000000000000000000000000000E+00
EXPRESSION2       :            2
-----------------------------------------------------------------
COL2              :       6
C1                :  Ilse
EXPRESSION1       :   1.4000000000000000000000000000000000000E+01
AVERAGE           :   2.0000000000000000000000000000000000000E+00
EXPRESSION2       :            2
-----------------------------------------------------------------
COL2              :       7
C1                :  Hans
EXPRESSION1       :   1.0000000000000000000000000000000000000E+01
AVERAGE           :   1.0000000000000000000000000000000000000E+00
EXPRESSION2       :            2
-----------------------------------------------------------------
COL2              :       7
C1                :  Ilse
EXPRESSION1       :   1.0000000000000000000000000000000000000E+01
AVERAGE           :   2.0000000000000000000000000000000000000E+00
EXPRESSION2       :            2
-----------------------------------------------------------------
COL2              :       7
C1                :  Paul
EXPRESSION1       :   5.0000000000000000000000000000000000000E+00
AVERAGE           :   3.0000000000000000000000000000000000000E+00
EXPRESSION2       :            1
 
resultcount :                     8
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 ( T1XC1 CHAR(10) ASCII KEY,
                  T1XC2 CHAR(20),
                  T1XC3 FIXED(5,2) ) !
 
Enter command:
CREATE TABLE T2 ( T2XC1 FIXED(7,2) KEY,
                  T2XC2 CHAR(10) KEY,
                  T2XC3 CHAR(20) ASCII ) !
 
Enter command:
CREATE TABLE T3 ( T3XC1 CHAR(15) ASCII,
                  T3XC2 CHAR(20),
                  T3XC3 FIXED(6,3) ) !
 
Enter command:
INSERT T1 VALUES ( 'Hans', 'Bremen', 1 ) !
 
Enter command:
INSERT T1 VALUES ( 'Karl', 'Bremen', 100 ) !
 
Enter command:
INSERT T1 VALUES ( 'Karin', 'Hamburg', NULL ) !
 
Enter command:
INSERT T1 VALUES ( 'Lisa', NULL, NULL ) !
 
Enter command:
INSERT T2 VALUES ( 20, 'Paul', 'Muenchen' ) !
 
Enter command:
INSERT T2 VALUES ( 100, 'Emil', 'Hannover' ) !
 
Enter command:
INSERT T2 VALUES ( 100, 'Emma', NULL ) !
 
Enter command:
INSERT T3 VALUES ( 'Karl', 'Hannover', 1 ) !
 
Enter command:
INSERT T3 VALUES ( 'Otto', 'Dortmund', 300 ) !
 
Enter command:
INSERT T3 VALUES ( NULL, NULL, NULL ) !
 
Enter command:
INSERT T3 VALUES ( 'Ilse', 'Hamm', 200 ) !
 
Enter command:
COMMIT WORK !
 
Enter command:
SELECT * FROM T1, T3
  WHERE T1XC2 < ALL ( SELECT T3XC2 FROM T3 WHERE T3XC2 IS NOT NULL )
    AND ( T3XC2 IN ( SELECT T2XC3 FROM T2 WHERE T2XC3 <> 'Muenchen' )
     OR T3XC2 < 'F' )
  ORDER BY 4,1 !
 
resultcount :                     4
 
Enter command:
FETCH !
 
T1XC1             :  Hans
T1XC2             :  Bremen
T1XC3             :     1.00
T3XC1             :  Karl
T3XC2             :  Hannover
T3XC3             :     1.000
-----------------------------------------
T1XC1             :  Karl
T1XC2             :  Bremen
T1XC3             :   100.00
T3XC1             :  Karl
T3XC2             :  Hannover
T3XC3             :     1.000
-----------------------------------------
T1XC1             :  Hans
T1XC2             :  Bremen
T1XC3             :     1.00
T3XC1             :  Otto
T3XC2             :  Dortmund
T3XC3             :   300.000
-----------------------------------------
T1XC1             :  Karl
T1XC2             :  Bremen
T1XC3             :   100.00
T3XC1             :  Otto
T3XC2             :  Dortmund
T3XC3             :   300.000
 
resultcount :                     4
 
Enter command:
DROP TABLE T1 !
 
Enter command:
DROP TABLE T2 !
 
Enter command:
DROP TABLE T3 !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE TAB1 ( SPALTE1 FIXED(5) KEY,
                    SPALTE2 CHAR(10) KEY,
                    SPALTE3 FIXED(5) ) !
 
Enter command:
CREATE TABLE TAB2 ( COL1 FIXED(5),
                    COL2 FIXED(5),
                    COL3 CHAR(10) ,
                    COL4 CHAR(10) ) !
 
Enter command:
INSERT TAB1 VALUES ( 1 , 'Hans' , 1 ) !
 
Enter command:
INSERT TAB1 VALUES ( 2 , 'Otto' , NULL ) !
 
Enter command:
INSERT TAB1 VALUES ( 2 , 'Hans' , 3 ) !
 
Enter command:
INSERT TAB1 VALUES ( 9 , 'Paul', 1  ) !
 
Enter command:
INSERT TAB1 VALUES ( 4 , 'Ilse', 1 ) !
 
Enter command:
INSERT TAB1 VALUES ( 9 , 'Ilse', NULL ) !
 
Enter command:
INSERT TAB2 VALUES ( NULL, NULL, NULL, NULL ) !
 
Enter command:
INSERT TAB2 VALUES ( 4 , 5, 'Hans' , 'Paul' ) !
 
Enter command:
INSERT TAB2 VALUES ( 1, 8 , 'Paul', 'ILse' ) !
 
Enter command:
INSERT TAB2 VALUES ( 3, 4, 'Hans' , 'Hans' ) !
 
Enter command:
INSERT TAB2 VALUES ( 3, 9 , 'Otto' , NULL ) !
 
Enter command:
INSERT TAB2 VALUES ( 1 , NULL , 'Karin', 'Paul' ) !
 
Enter command:
INSERT TAB2 VALUES ( 7, 1, 'Ilse', 'Hans' ) !
 
Enter command:
COMMIT WORK !
 
Enter command:
SELECT TAB1.SPALTE1, TAB1.SPALTE2, COL4 FROM TAB1, TAB2
    WHERE COL4 = SPALTE2 !
 
resultcount :                     6
 
Enter command:
FETCH!
 
SPALTE1 | SPALTE2    | COL4
--------+------------+-----------
     1  | Hans       | Hans
     1  | Hans       | Hans
     2  | Hans       | Hans
     2  | Hans       | Hans
     9  | Paul       | Paul
     9  | Paul       | Paul
 
resultcount :                     6
 
Enter command:
SELECT TAB1.SPALTE1, TAB1.SPALTE2, COL4 FROM TAB1, TAB2
    WHERE COL4 = SPALTE2 AND ROWNO <= 3 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
SPALTE1 | SPALTE2    | COL4
--------+------------+-----------
     1  | Hans       | Hans
     1  | Hans       | Hans
     2  | Hans       | Hans
 
resultcount :                     3
 
Enter command:
SELECT DISTINCT SPALTE2 , COL4 FROM TAB1 , TAB2
    WHERE COL4 =SPALTE2
    ORDER BY TAB1.SPALTE2 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
SPALTE2    | COL4
-----------+-----------
Hans       | Hans
Paul       | Paul
 
resultcount :                     2
 
Enter command:
SELECT DISTINCT SPALTE2 , COL4 FROM TAB1 , TAB2
    WHERE COL4 =SPALTE2 AND ROWNO <= 3
    ORDER BY TAB1.SPALTE2 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
SPALTE2    | COL4
-----------+-----------
Hans       | Hans
Paul       | Paul
 
resultcount :                     2
 
Enter command:
SELECT SPALTE3, COL3 FROM TAB1, TAB2
  WHERE SPALTE3 IS NULL AND COL3 IS NULL AND ROWNO < 3 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
SPALTE3 | COL3
--------+-----------
??????  | ??????????
??????  | ??????????
 
resultcount :                     2
 
Enter command:
SELECT DISTINCT SPALTE3, COL3 FROM TAB1, TAB2
  WHERE SPALTE3 IS NULL AND COL3 IS NULL AND ROWNO < 3 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
SPALTE3 | COL3
--------+-----------
??????  | ??????????
 
resultcount :                     1
 
Enter command:
SELECT SPALTE1 + COL1, COL1, ROWNO FROM TAB1 , TAB2
    WHERE SPALTE2 = COL3 !
 
resultcount :                     8
 
Enter command:
FETCH !
 
EXPRESSION1 | COL1   | ROWNO
------------+--------+------------
      5     |      4 |           1
      6     |      4 |           2
     10     |      1 |           3
      4     |      3 |           4
      5     |      3 |           5
      5     |      3 |           6
     11     |      7 |           7
     16     |      7 |           8
 
resultcount :                     8
 
Enter command:
SELECT SUM ( SPALTE1 + COL1 ) , ROWNO FROM TAB1 , TAB2
    WHERE SPALTE2 = COL3 AND ROWNO < 4 GROUP BY COL1 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
EXPRESSION1                                  | ROWNO
---------------------------------------------+------------
 1.0000000000000000000000000000000000000E+01 |           1
 1.1000000000000000000000000000000000000E+01 |           2
 
resultcount :                     2
 
Enter command:
SELECT SPALTE2, TAB2.COL3 FROM TAB1, TAB2
    WHERE COL3 IS NOT NULL AND ROWNO < 6 !
 
resultcount :                     5
 
Enter command:
FETCH !
 
SPALTE2    | COL3
-----------+-----------
Hans       | Hans
Hans       | Hans
Otto       | Hans
Ilse       | Hans
Ilse       | Hans
 
resultcount :                     5
 
Enter command:
SELECT DISTINCT SPALTE2, TAB2.COL3 FROM TAB1, TAB2
    WHERE COL3 IS NOT NULL AND ROWNO < 6
    ORDER BY TAB1.SPALTE2 DESC, TAB2.COL3 !
 
resultcount :                     5
 
Enter command:
FETCH !
 
SPALTE2    | COL3
-----------+-----------
Paul       | Hans
Otto       | Hans
Ilse       | Hans
Hans       | Hans
Hans       | Paul
 
resultcount :                     5
 
Enter command:
SELECT  SPALTE1,  SPALTE2, TAB2.COL1
    FROM TAB1, TAB2 WHERE TAB1.SPALTE2 < TAB2.COL4 AND ( ROWNO <=5 )!
 
resultcount :                     5
 
Enter command:
FETCH !
 
SPALTE1 | SPALTE2    | COL1
--------+------------+-------
     1  | Hans       |      1
     1  | Hans       |      4
     1  | Hans       |      1
     2  | Hans       |      1
     2  | Hans       |      4
 
resultcount :                     5
 
Enter command:
SELECT  DISTINCT SUM ( DISTINCT SPALTE1 ),  SPALTE2,
    SUM ( DISTINCT TAB2.COL1 )
    FROM TAB1, TAB2 WHERE TAB1.SPALTE2 < TAB2.COL4 AND ( ROWNO <=5 )
    GROUP BY SPALTE2 ORDER BY SPALTE2 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1       :   3.0000000000000000000000000000000000000E+00
SPALTE2           :  Hans
EXPRESSION2       :   5.0000000000000000000000000000000000000E+00
 
resultcount :                     1
 
Enter command:
SELECT TAB1.SPALTE1, REF.SPALTE3, TAB2.COL1 FROM TAB1, TAB1 REF, TAB2
    WHERE ( TAB1.SPALTE1 < REF.SPALTE3 ) AND
    TAB1.SPALTE1 < TAB2.COL1 !
 
resultcount :                    12
 
Enter command:
FETCH !
 
SPALTE1 | SPALTE3 | COL1
--------+---------+-------
     1  |      3  |      4
     2  |      3  |      4
     2  |      3  |      4
     1  |      3  |      3
     2  |      3  |      3
     2  |      3  |      3
     1  |      3  |      3
     2  |      3  |      3
     2  |      3  |      3
     1  |      3  |      7
     2  |      3  |      7
     2  |      3  |      7
 
resultcount :                    12
 
Enter command:
SELECT TAB1.SPALTE1, REF.SPALTE3, TAB2.COL1 FROM TAB1, TAB1 REF, TAB2
    WHERE ( TAB1.SPALTE1 < REF.SPALTE3 AND ROWNO < 4 ) AND
    TAB1.SPALTE1 < TAB2.COL1 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
SPALTE1 | SPALTE3 | COL1
--------+---------+-------
     1  |      3  |      4
     2  |      3  |      4
     2  |      3  |      4
 
resultcount :                     3
 
Enter command:
SELECT TAB1.SPALTE1, ROWNO FROM TAB1 T, TAB1 !
 
resultcount :                    36
 
Enter command:
FETCH!
 
SPALTE1 | ROWNO
--------+------------
     1  |           1
     1  |           2
     1  |           3
     1  |           4
     1  |           5
     1  |           6
     2  |           7
     2  |           8
     2  |           9
     2  |          10
     2  |          11
     2  |          12
     2  |          13
     2  |          14
     2  |          15
     2  |          16
     2  |          17
 
SPALTE1 | ROWNO
--------+------------
     2  |          18
     4  |          19
     4  |          20
     4  |          21
     4  |          22
     4  |          23
     4  |          24
     9  |          25
     9  |          26
     9  |          27
     9  |          28
     9  |          29
     9  |          30
     9  |          31
     9  |          32
     9  |          33
     9  |          34
 
SPALTE1 | ROWNO
--------+------------
     9  |          35
     9  |          36
 
resultcount :                    36
 
Enter command:
SELECT TAB1.SPALTE1, ROWNO,
       TAB1.SPALTE2, ROWNO
   FROM TAB1 T , TAB1 !
 
resultcount :                    36
 
Enter command:
FETCH!
 
SPALTE1 | ROWNO       | SPALTE2    | ROWNO
--------+-------------+------------+------------
     1  |           1 | Hans       |           1
     1  |           2 | Hans       |           2
     1  |           3 | Hans       |           3
     1  |           4 | Hans       |           4
     1  |           5 | Hans       |           5
     1  |           6 | Hans       |           6
     2  |           7 | Hans       |           7
     2  |           8 | Hans       |           8
     2  |           9 | Hans       |           9
     2  |          10 | Hans       |          10
     2  |          11 | Hans       |          11
     2  |          12 | Hans       |          12
     2  |          13 | Otto       |          13
     2  |          14 | Otto       |          14
     2  |          15 | Otto       |          15
     2  |          16 | Otto       |          16
     2  |          17 | Otto       |          17
 
SPALTE1 | ROWNO       | SPALTE2    | ROWNO
--------+-------------+------------+------------
     2  |          18 | Otto       |          18
     4  |          19 | Ilse       |          19
     4  |          20 | Ilse       |          20
     4  |          21 | Ilse       |          21
     4  |          22 | Ilse       |          22
     4  |          23 | Ilse       |          23
     4  |          24 | Ilse       |          24
     9  |          25 | Ilse       |          25
     9  |          26 | Ilse       |          26
     9  |          27 | Ilse       |          27
     9  |          28 | Ilse       |          28
     9  |          29 | Ilse       |          29
     9  |          30 | Ilse       |          30
     9  |          31 | Paul       |          31
     9  |          32 | Paul       |          32
     9  |          33 | Paul       |          33
     9  |          34 | Paul       |          34
 
SPALTE1 | ROWNO       | SPALTE2    | ROWNO
--------+-------------+------------+------------
     9  |          35 | Paul       |          35
     9  |          36 | Paul       |          36
 
resultcount :                    36
 
Enter command:
SELECT TAB1.SPALTE1, ROWNO FROM TAB1 T , TAB1 GROUP BY TAB1.SPALTE1!
 
resultcount :                     4
 
Enter command:
FETCH!
 
SPALTE1 | ROWNO
--------+------------
     1  |           1
     2  |           2
     4  |           3
     9  |           4
 
resultcount :                     4
 
Enter command:
SELECT SPALTE1, COL1 FROM TAB1, TAB2 !
 
resultcount :                    42
 
Enter command:
FETCH !
 
SPALTE1 | COL1
--------+-------
     1  | ??????
     2  | ??????
     2  | ??????
     4  | ??????
     9  | ??????
     9  | ??????
     1  |      4
     2  |      4
     2  |      4
     4  |      4
     9  |      4
     9  |      4
     1  |      1
     2  |      1
     2  |      1
     4  |      1
     9  |      1
 
SPALTE1 | COL1
--------+-------
     9  |      1
     1  |      3
     2  |      3
     2  |      3
     4  |      3
     9  |      3
     9  |      3
     1  |      3
     2  |      3
     2  |      3
     4  |      3
     9  |      3
     9  |      3
     1  |      1
     2  |      1
     2  |      1
     4  |      1
 
SPALTE1 | COL1
--------+-------
     9  |      1
     9  |      1
     1  |      7
     2  |      7
     2  |      7
     4  |      7
     9  |      7
     9  |      7
 
resultcount :                    42
 
Enter command:
SELECT ROWNO, SPALTE1, COL1 FROM TAB1, TAB2 !
 
resultcount :                    42
 
Enter command:
FETCH !
 
ROWNO       | SPALTE1 | COL1
------------+---------+-------
          1 |      1  | ??????
          2 |      2  | ??????
          3 |      2  | ??????
          4 |      4  | ??????
          5 |      9  | ??????
          6 |      9  | ??????
          7 |      1  |      4
          8 |      2  |      4
          9 |      2  |      4
         10 |      4  |      4
         11 |      9  |      4
         12 |      9  |      4
         13 |      1  |      1
         14 |      2  |      1
         15 |      2  |      1
         16 |      4  |      1
         17 |      9  |      1
 
ROWNO       | SPALTE1 | COL1
------------+---------+-------
         18 |      9  |      1
         19 |      1  |      3
         20 |      2  |      3
         21 |      2  |      3
         22 |      4  |      3
         23 |      9  |      3
         24 |      9  |      3
         25 |      1  |      3
         26 |      2  |      3
         27 |      2  |      3
         28 |      4  |      3
         29 |      9  |      3
         30 |      9  |      3
         31 |      1  |      1
         32 |      2  |      1
         33 |      2  |      1
         34 |      4  |      1
 
ROWNO       | SPALTE1 | COL1
------------+---------+-------
         35 |      9  |      1
         36 |      9  |      1
         37 |      1  |      7
         38 |      2  |      7
         39 |      2  |      7
         40 |      4  |      7
         41 |      9  |      7
         42 |      9  |      7
 
resultcount :                    42
 
Enter command:
SELECT DISTINCT ROWNO, SPALTE1, COL1 FROM TAB1, TAB2 !
 
resultcount :                    42
 
Enter command:
FETCH !
 
ROWNO       | SPALTE1 | COL1
------------+---------+-------
          1 |      1  | ??????
          2 |      2  | ??????
          3 |      2  | ??????
          4 |      4  | ??????
          5 |      9  | ??????
          6 |      9  | ??????
          7 |      1  |      4
          8 |      2  |      4
          9 |      2  |      4
         10 |      4  |      4
         11 |      9  |      4
         12 |      9  |      4
         13 |      1  |      1
         14 |      2  |      1
         15 |      2  |      1
         16 |      4  |      1
         17 |      9  |      1
 
ROWNO       | SPALTE1 | COL1
------------+---------+-------
         18 |      9  |      1
         19 |      1  |      3
         20 |      2  |      3
         21 |      2  |      3
         22 |      4  |      3
         23 |      9  |      3
         24 |      9  |      3
         25 |      1  |      3
         26 |      2  |      3
         27 |      2  |      3
         28 |      4  |      3
         29 |      9  |      3
         30 |      9  |      3
         31 |      1  |      1
         32 |      2  |      1
         33 |      2  |      1
         34 |      4  |      1
 
ROWNO       | SPALTE1 | COL1
------------+---------+-------
         35 |      9  |      1
         36 |      9  |      1
         37 |      1  |      7
         38 |      2  |      7
         39 |      2  |      7
         40 |      4  |      7
         41 |      9  |      7
         42 |      9  |      7
 
resultcount :                    42
 
Enter command:
SELECT DISTINCT ROWNO, SPALTE1, COL1 FROM TAB1, TAB2 WHERE SPALTE1=COL1!
 
resultcount :                     3
 
Enter command:
FETCH !
 
ROWNO       | SPALTE1 | COL1
------------+---------+-------
          1 |      4  |      4
          2 |      1  |      1
          3 |      1  |      1
 
resultcount :                     3
 
Enter command:
DROP TABLE TAB1 !
 
Enter command:
DROP TABLE TAB2 !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T ( A CHAR (8) KEY, B CHAR (4))!
 
Enter command:
INSERT T VALUES ('aaa', 'aaa')!
 
Enter command:
INSERT T VALUES ('a1a', 'a1a')!
 
Enter command:
CREATE TABLE T1 (C CHAR (8) KEY, D FIXED (6))!
 
Enter command:
INSERT T1 VALUES ('aaa', 1)!
 
Enter command:
INSERT T1 VALUES ('bbb', 5)!
 
Enter command:
INSERT T1 VALUES ('ccc', 1)!
 
Enter command:
CREATE TABLE T2 ( E FIXED (6)) !
 
Enter command:
CREATE INDEX I2 ON T2 (E)!
 
Enter command:
INSERT T2 SET E = 1!
 
Enter command:
INSERT T2 SET E = 5!
 
Enter command:
SELECT COUNT(*) FROM T,T1!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
          6
 
resultcount :                     1
 
Enter command:
SELECT * FROM T,T1 WHERE ROWNO <= 1 !
 
resultcount :                     1
 
Enter command:
FETCH!
 
A        | B    | C        | D
---------+------+----------+--------
a1a      | a1a  | aaa      |       1
 
resultcount :                     1
 
Enter command:
CREATE VIEW V AS SELECT * FROM T,T1 !
 
Enter command:
SELECT * FROM V !
 
resultcount :                     6
 
Enter command:
FETCH!
 
A        | B    | C        | D
---------+------+----------+--------
a1a      | a1a  | aaa      |       1
aaa      | aaa  | aaa      |       1
a1a      | a1a  | bbb      |       5
aaa      | aaa  | bbb      |       5
a1a      | a1a  | ccc      |       1
aaa      | aaa  | ccc      |       1
 
resultcount :                     6
 
Enter command:
SELECT * FROM V ORDER BY C, A !
 
resultcount :                     6
 
Enter command:
FETCH!
 
A        | B    | C        | D
---------+------+----------+--------
a1a      | a1a  | aaa      |       1
aaa      | aaa  | aaa      |       1
a1a      | a1a  | bbb      |       5
aaa      | aaa  | bbb      |       5
a1a      | a1a  | ccc      |       1
aaa      | aaa  | ccc      |       1
 
resultcount :                     6
 
Enter command:
SELECT COUNT(*) FROM V !
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
          6
 
resultcount :                     1
 
Enter command:
SELECT MAX(C) FROM V!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
ccc
 
resultcount :                     1
 
Enter command:
SELECT MAX(C) FROM V WHERE ROWNO <= 1!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
aaa
 
resultcount :                     1
 
Enter command:
SELECT MAX(C) FROM V WHERE ROWNO <= 3!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
bbb
 
resultcount :                     1
 
Enter command:
SELECT * FROM V WHERE ROWNO <= 1!
 
resultcount :                     1
 
Enter command:
FETCH!
 
A        | B    | C        | D
---------+------+----------+--------
a1a      | a1a  | aaa      |       1
 
resultcount :                     1
 
Enter command:
SELECT COUNT(*) FROM V WHERE ROWNO <= 1!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
          1
 
resultcount :                     1
 
Enter command:
SELECT COUNT(*) FROM V WHERE B = 'aaa' AND ROWNO <= 1!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
          1
 
resultcount :                     1
 
Enter command:
SELECT COUNT(*), C FROM V GROUP BY C !
 
resultcount :                     3
 
Enter command:
FETCH!
 
EXPRESSION1 | C
------------+---------
          2 | aaa
          2 | bbb
          2 | ccc
 
resultcount :                     3
 
Enter command:
SELECT COUNT(*), C FROM V WHERE ROWNO <= 1 GROUP BY C !
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1 | C
------------+---------
          1 | aaa
 
resultcount :                     1
 
Enter command:
CREATE VIEW VV AS SELECT T.* FROM T,T TT WHERE T.A=TT.A!
 
Enter command:
SELECT * FROM VV !
 
resultcount :                     2
 
Enter command:
FETCH!
 
A        | B
---------+-----
a1a      | a1a
aaa      | aaa
 
resultcount :                     2
 
Enter command:
SELECT COUNT(*) FROM VV !
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
          2
 
resultcount :                     1
 
Enter command:
SELECT * FROM VV WHERE ROWNO <= 1!
 
resultcount :                     1
 
Enter command:
FETCH!
 
A        | B
---------+-----
a1a      | a1a
 
resultcount :                     1
 
Enter command:
SELECT COUNT(*) FROM VV WHERE ROWNO <= 1!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
          1
 
resultcount :                     1
 
Enter command:
SELECT COUNT(*) FROM VV WHERE ROWNO <= 1 AND B = 'aaa' !
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
          1
 
resultcount :                     1
 
Enter command:
SELECT COUNT(*) FROM VV WHERE B = 'aaa' AND ROWNO <= 1!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
          1
 
resultcount :                     1
 
Enter command:
CREATE VIEW V1 AS SELECT * FROM T,T1,T2
  WHERE A=C AND D=E !
 
Enter command:
COMMIT !
 
Enter command:
SELECT * FROM V1 !
 
resultcount :                     1
 
Enter command:
FETCH!
 
A        | B    | C        | D       | E
---------+------+----------+---------+--------
aaa      | aaa  | aaa      |       1 |       1
 
resultcount :                     1
 
Enter command:
SELECT * FROM V1 WHERE B = 'aaa' AND E = 1!
 
resultcount :                     1
 
Enter command:
FETCH!
 
A        | B    | C        | D       | E
---------+------+----------+---------+--------
aaa      | aaa  | aaa      |       1 |       1
 
resultcount :                     1
 
Enter command:
SELECT * FROM V1 WHERE B = 'aaa' AND E = 1 AND ROWNO <= 1!
 
resultcount :                     1
 
Enter command:
FETCH!
 
A        | B    | C        | D       | E
---------+------+----------+---------+--------
aaa      | aaa  | aaa      |       1 |       1
 
resultcount :                     1
 
Enter command:
SELECT COUNT(*) FROM V1!
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1
-----------
          1
 
resultcount :                     1
 
Enter command:
SELECT COUNT(*) FROM V1 WHERE B = 'aaa' AND E = 1!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
          1
 
resultcount :                     1
 
Enter command:
SELECT COUNT(*) FROM V1 WHERE B = 'aaa' AND E = 1 AND ROWNO <= 1!
 
resultcount :                     1
 
Enter command:
SELECT MAX(A) FROM V1 WHERE B = 'aaa' AND E = 1 AND ROWNO <= 1!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
aaa
 
resultcount :                     1
 
Enter command:
DROP TABLE T!
 
Enter command:
DROP TABLE T1!
 
Enter command:
DROP TABLE T2!
 
Enter command:
COMMIT RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST SQLMODE SAPR3 !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST SQLMODE SAPR3 ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE VBAP (MANDT CHAR (3), VBELN CHAR (10),
POSNR INTEGER, FAKSP CHAR (1), PRIMARY KEY (MANDT, VBELN,POSNR))!
 
Enter command:
INSERT INTO VBAP VALUES ('204', '0070000147', 1, 'y')!
 
Enter command:
INSERT INTO VBAP VALUES ('204', '0070000147', 2, 'y')!
 
Enter command:
INSERT INTO VBAP VALUES ('204', '0070000147', 3, 'y')!
 
Enter command:
INSERT INTO VBAP VALUES ('204', '0070000147', 4, 'y')!
 
Enter command:
INSERT INTO VBAP VALUES ('204', '0070000147', 5, 'y')!
 
Enter command:
INSERT INTO VBAP VALUES ('204', '0070000147', 6, 'y')!
 
Enter command:
INSERT INTO VBAP VALUES ('204', '0070000147', 7, 'y')!
 
Enter command:
INSERT INTO VBAP VALUES ('204', '0070000147', 9, 'y')!
 
Enter command:
INSERT INTO VBAP VALUES ('204', '0070000250', 1, 'y')!
 
Enter command:
ANALYZE TABLE VBAP STATISTICS !
 
Enter command:
CREATE TABLE VBUP (MANDT CHAR (3), VBELN CHAR (10),
POSNR INTEGER, FKSTA CHAR (1), FKSAA CHAR(1),
PRIMARY KEY (MANDT, VBELN,POSNR))!
 
Enter command:
INSERT INTO VBUP VALUES ('204', '0070000147', 2, 'y', 'y')!
 
Enter command:
INSERT INTO VBUP VALUES ('204', '0070000147', 3, 'y', 'y')!
 
Enter command:
INSERT INTO VBUP VALUES ('204', '0070000147', 4, 'y', 'y')!
 
Enter command:
INSERT INTO VBUP VALUES ('204', '0070000147', 5, 'y', 'y')!
 
Enter command:
INSERT INTO VBUP VALUES ('204', '0070000300', 1, 'y', 'y')!
 
Enter command:
DECLARE C CURSOR FOR
SELECT T1."MANDT", T1."VBELN", T1."POSNR", T1."FAKSP", T2."FKSTA",
    T2."FKSAA"
  FROM <"VBAP" T1, "VBUP" T2>
 WHERE T2."MANDT" = T1."MANDT" AND T2."VBELN" = T1."VBELN" AND
       T2."POSNR" = T1."POSNR" AND T2."FKSTA" <> 'C' AND
       T2."FKSAA" <> 'C' AND T1.MANDT = '204' AND
       T1.VBELN = '0070000147' !
 
resultcount :                     0
 
Enter command:
FETCH C INTO :A, :B, :C, :D, :E, :F, :G, :H, :I !
 
MANDT | VBELN      | POSNR                 | FAKSP | FKSTA | FKSAA
------+------------+-----------------------+-------+-------+------
204   | 0070000147 |                     2 | y     | y     | y
204   | 0070000147 |                     3 | y     | y     | y
204   | 0070000147 |                     4 | y     | y     | y
204   | 0070000147 |                     5 | y     | y     | y
 
resultcount :                     4
 
Enter command:
 
PARS_THEN_EX !
 
Enter command:
DATA !
 
Enter command:
DECLARE C CURSOR FOR
SELECT T1."MANDT", T1."VBELN", T1."POSNR", T1."FAKSP", T2."FKSTA",
    T2."FKSAA"
  FROM <"VBAP" T1, "VBUP" T2>
 WHERE T2."MANDT" = T1."MANDT" AND T2."VBELN" = T1."VBELN" AND
       T2."POSNR" = T1."POSNR" AND T2."FKSTA" <> 'C' AND
       T2."FKSAA" <> 'C'
       AND T1.MANDT = :Q AND T1.VBELN = :R AND ROWNUM <= 1 !
 
c 3 '204' c 10 '0070000147'
 
resultcount :                     0
 
Enter command:
NODATA !
 
Enter command:
FETCH C INTO :A, :B, :C, :D, :E, :F, :G, :H, :I!
 
MANDT | VBELN      | POSNR                 | FAKSP | FKSTA | FKSAA
------+------------+-----------------------+-------+-------+------
204   | 0070000147 |                     2 | y     | y     | y
 
resultcount :                     1
 
Enter command:
PARS_EXECUTE !
 
Enter command:
ROLLBACK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE TAB ( SPALTE1 CHAR(10) ,
                   SPALTE2 FIXED(5,2),
                   SPALTE3 FLOAT(3),
                   SPALTE4 FIXED(18) ) !
 
Enter command:
INSERT TAB VALUES ( 'a', 100 , -12E12, 400000 ) !
 
Enter command:
INSERT TAB VALUES ( 'b', 100 , 1E-36, -700000000000000000 ) !
 
Enter command:
INSERT TAB VALUES ( 'a', NULL , 50, 900000000000000000 ) !
 
Enter command:
INSERT TAB VALUES ( NULL, 200, NULL, -800000 ) !
 
Enter command:
INSERT TAB VALUES ( 'a', 100, +1E-36 , 800000000000000000 ) !
 
Enter command:
INSERT TAB VALUES ( NULL, NULL, NULL, NULL ) !
 
Enter command:
INSERT TAB VALUES ( 'c', -600, -12E12, NULL ) !
 
Enter command:
INSERT TAB VALUES ( 'a', 100, +1E-36 , 800000000000000000 ) !
 
Enter command:
INSERT TAB VALUES ( 'b', NULL, NULL, + 900000000000000000 ) !
 
Enter command:
SELECT * FROM TAB !
 
resultcount :               unknown
 
Enter command:
FETCH !
 
SPALTE1    | SPALTE2 | SPALTE3   | SPALTE4
-----------+---------+-----------+--------------------
a          |  100.00 | -1.20E+13 |              400000
b          |  100.00 |  1.00E-36 | -700000000000000000
a          | ??????? |  5.00E+01 |  900000000000000000
?????????? |  200.00 | ????????? |             -800000
a          |  100.00 |  1.00E-36 |  800000000000000000
?????????? | ??????? | ????????? | ???????????????????
c          | -600.00 | -1.20E+13 | ???????????????????
a          |  100.00 |  1.00E-36 |  800000000000000000
b          | ??????? | ????????? |  900000000000000000
 
resultcount :                     9
 
Enter command:
CREATE INDEX "tab.spalte2" ON TAB( SPALTE2 ) !
 
Enter command:
CREATE INDEX "tab.spalte4" ON TAB( SPALTE4 ) !
 
Enter command:
COMMIT WORK !
 
Enter command:
SELECT TAB.SPALTE1, REF.SPALTE1,MAX( TAB.SPALTE4 ), MAX( REF.SPALTE4 )
    FROM TAB, TAB REF
    WHERE TAB.SPALTE4 > 0 GROUP BY TAB.SPALTE1, REF.SPALTE1
    HAVING MAX ( TAB.SPALTE4 ) = MIN ( REF.SPALTE4 ) ORDER BY 2 !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
SELECT TAB.SPALTE1, REF.SPALTE1,MAX( TAB.SPALTE4 ), MAX( REF.SPALTE4 )
    FROM TAB, TAB REF
    WHERE TAB.SPALTE4 > 0 GROUP BY TAB.SPALTE1, REF.SPALTE1
    HAVING MIN ( TAB.SPALTE4 ) = MAX ( REF.SPALTE4 ) ORDER BY 2 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
SPALTE1    | SPALTE1    | EXPRESSION1         | EXPRESSION2
-----------+------------+---------------------+--------------------
b          | a          |  900000000000000000 |  900000000000000000
b          | b          |  900000000000000000 |  900000000000000000
 
resultcount :                     2
 
Enter command:
ROLLBACK WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE AA (
AADSTNR    CHAR (5 ) KEY,
AADAT      CHAR (6 ) KEY,
AALFDNR    CHAR (5 ) KEY,
AASWA      CHAR (14) ,
AAADAT     CHAR (6 ) ,
AABKZA     CHAR (7 ) ,
AAREGDST   CHAR (2 ) ,
AAWVDAT    CHAR (6 ) ,
AAABEG     CHAR (6 ) ,
AABEWART   CHAR (1 ) ,
AABEWUL1   CHAR (1 ) ,
AAVAB      CHAR (6 ) ,
AAVBIS     CHAR (6 ) ,
AASCHART   CHAR (4 ) ,
AABEH      CHAR (1 ) ,
AANAT      CHAR (3 ) ,
AADAUF     CHAR (3 ) ,
AASOPRO    CHAR (1 ) ,
AASTATKN   CHAR (1 ) ,
AASTATDT   CHAR (6 ) ,
AAVSTAT    CHAR (1 ) ,
AABESR1    CHAR (1 ) ,
AABESR2    CHAR (3 ) ,
AALEVV     CHAR (6 ) ,
AAMITF1    CHAR (5 ) ,
AAMITF2    CHAR (5 ) ,
AAMITF3    CHAR (5 ) ,
AAMITF4    CHAR (5 ) ,
AAEVOR1    CHAR (24) ,
AAEVOR2    CHAR (30) ,
AAEVOR3    CHAR (30) ,
AAEVOR4    CHAR (30) ,
AAEVOR5    CHAR (16) ,
AABEWUL2   CHAR (1 ) ,
AABEWUL3   CHAR (1 ) ,
AAANZVV    CHAR (3 ) ,
AAGST      CHAR (3 ) ,
AAOST      CHAR (3 ) ) !
 
Enter command:
CREATE TABLE AB (
ABSWB      CHAR (14) KEY,
ABBKZB     CHAR (7 ) ,
ABWZW      CHAR (3 ) ,
ABSTRB     CHAR (32) ,
ABPLZB     CHAR (4 ) ,
ABORTB     CHAR (32) ,
ABAPARB    CHAR (32) ,
ABZUST     CHAR (3 ) ,
AB18AAB    CHAR (6 ) ,
AB18AAN    CHAR (6 ) ,
AB18ALE    CHAR (1 ) ,
ABTRART    CHAR (32) ,
ABEGRO     CHAR (3 ) ,
ABANGAM    CHAR (6 ) ,
ABSVKN1    CHAR (1 ) ,
ABSVDT1    CHAR (6 ) ,
ABSVKN2    CHAR (1 ) ,
ABSVDT2    CHAR (6 ) ,
ABSVKN3    CHAR (1 ) ,
ABSVDT3    CHAR (6 ) ,
ABSVKN4    CHAR (1 ) ,
ABSVDT4    CHAR (6 ) ,
ABSVKN5    CHAR (1 ) ,
ABSVDT5    CHAR (6 ) ,
ABSVKN6    CHAR (1 ) ,
ABSVDT6    CHAR (6 ) ,
ABBEMK1    CHAR (18) ,
ABBEMK2    CHAR (31) ,
ABBEMK3    CHAR (31) ,
ABBEMK4    CHAR (31) ,
ABBEMK5    CHAR (31) ,
ABBEMK6    CHAR (31) ,
ABBEMK7    CHAR (31) ,
ABBEMK8    CHAR (31) ,
ABBEMK9    CHAR (31) ,
ABLEKON    CHAR (1 ) ,
ABLEKDT    CHAR (6 ) ,
ABLEBAR    CHAR (6 ) ) !
 
Enter command:
CREATE INDEX "aa.aabkza" ON AA( AABKZA ) !
 
Enter command:
CREATE INDEX "aa.aaswa" ON AA( AASWA ) !
 
Enter command:
INSERT AA SET AADSTNR = '12345', AADAT = '050687', AALFDNR = '1',
AASWA = 'abcdef', AABKZA = '52301', AASTATKN = 'O' !
 
Enter command:
INSERT AB SET ABSWB = 'abcdef', ABBKZB = '52301',
ABORTB = 'A13' !
 
Enter command:
SELECT AB.ABORTB, AA.AABKZA, AB.ABSWB, AA.AASTATKN, AA.AAOST, AA.AAADAT
FROM AA, AB WHERE
AA.AABKZA = AB.ABBKZB AND
AB.ABSWB = AA.AASWA AND
AA.AABKZA BETWEEN '0110' AND '53120' AND
AB.ABORTB LIKE 'A13'
ORDER BY AB.ABORTB, AA.AABKZA, AB.ABSWB !
 
resultcount :                     1
 
Enter command:
FETCH !
 
ABORTB            :  A13
AABKZA            :  52301
ABSWB             :  abcdef
AASTATKN          :  O
AAOST             :  ?????
AAADAT            :  ?????
 
resultcount :                     1
 
Enter command:
SELECT AB.ABORTB, AA.AABKZA, AB.ABSWB, AA.AASTATKN, AA.AAOST, AA.AAADAT
FROM AA, AB WHERE
AA.AASTATKN = 'O' AND
AA.AABKZA = AB.ABBKZB AND
AB.ABSWB = AA.AASWA AND
AA.AABKZA BETWEEN '0110' AND '53120' AND
AB.ABORTB LIKE 'A13'
ORDER BY AB.ABORTB, AA.AABKZA, AB.ABSWB !
 
resultcount :                     1
 
Enter command:
FETCH !
 
ABORTB            :  A13
AABKZA            :  52301
ABSWB             :  abcdef
AASTATKN          :  O
AAOST             :  ?????
AAADAT            :  ?????
 
resultcount :                     1
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T ( A FIXED (3), B FIXED (6,0))!
 
Enter command:
INSERT T SET A = 3, B = 6!
 
Enter command:
CREATE INDEX I1 ON T (A DESC, B)!
 
Enter command:
CREATE TABLE T1 ( C FIXED (10))!
 
Enter command:
INSERT T1 SET C = 10!
 
Enter command:
SELECT * FROM T, T1 WHERE A = 3 AND B = 6!
 
resultcount :                     1
 
Enter command:
FETCH!
 
A    | B       | C
-----+---------+------------
   3 |       6 |          10
 
resultcount :                     1
 
Enter command:
PARS_THEN_EX !
 
Enter command:
DATA!
 
Enter command:
SELECT * FROM T, T1 WHERE A = :A AND B = :B!
 
n 3 3 n 6 6
 
resultcount :                     1
 
Enter command:
NODATA!
 
Enter command:
FETCH!
 
A    | B       | C
-----+---------+------------
   3 |       6 |          10
 
resultcount :                     1
 
Enter command:
PARS_EXECUTE!
 
Enter command:
ROLLBACK WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE TAB ( SPALTE1 FLOAT(3), SPALTE2 FLOAT(18), SPALTE3 FIXED(5),
   SPALTE4 FIXED(8,3), SPALTE5 CHAR(10) ) !
 
Enter command:
INSERT TAB VALUES ( 5E13, 9E-12, 88, 4444.555, 'aaa' ) !
 
Enter command:
COMMIT WORK !
 
Enter command:
CREATE TABLE T1 (A FIXED (7))!
 
Enter command:
INSERT T1 SET A = 3!
 
Enter command:
SELECT FIXED ( SPALTE1, 15, 1 ) + FIXED ( A , 15, 1 ) FROM TAB, T1!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
------------------
  50000000000003.0
 
resultcount :                     1
 
Enter command:
SELECT FIXED (SPALTE1 + A, 12, 4) FROM TAB, T1!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
--------------
##############
 
resultcount :                     1
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CLEARK !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT !
 
Enter command:
DROP USER KERN !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST SQLMODE DB2 !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST SQLMODE DB2 ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE TAB ( SPALTE1 FLOAT(3), SPALTE2 FLOAT(18), SPALTE3 DECIMAL(5),
   SPALTE4 DECIMAL(8,3), SPALTE5 CHAR(10) ) !
 
Enter command:
INSERT INTO TAB VALUES ( 5E13, 9E-12, 88, 4444.555, 'aaa' ) !
 
Enter command:
COMMIT WORK !
 
Enter command:
CREATE TABLE T1 (A DECIMAL (7))!
 
Enter command:
INSERT INTO T1 VALUES ( 3 )!
 
Enter command:
DECLARE C CURSOR FOR SELECT DECIMAL ( SPALTE1, 15, 1 ) +
   DECIMAL ( A , 15, 1 ) FROM TAB, T1!
 
resultcount :                     1
 
Enter command:
FETCH C INTO :A !
 
EXPRESSION1
------------------
  50000000000003.0
 
resultcount :                     1
 
Enter command:
CLOSE C!
 
Enter command:
DECLARE C CURSOR FOR SELECT DECIMAL (SPALTE1 + A, 12, 4) FROM TAB, T1!
 
resultcount :                     1
 
Enter command:
FETCH C INTO :A !
 
EXPRESSION1
--------------
##############
 
resultcount :                     1
 
Enter command:
CLOSE C!
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 ( T1XC1 FIXED(2) KEY, T1XC2 FIXED(2) KEY,
                  T1XC3 FIXED(2) ) !
 
Enter command:
CREATE TABLE T2 ( T2XC1 FIXED(2) KEY, T2XC2 FIXED(2), T2XC3 FIXED(2) ) !
 
Enter command:
CREATE TABLE T3 ( T3XC1 FIXED(2), T3XC2 FIXED(2), T3XC3 FIXED(2) ) !
 
Enter command:
CREATE VIEW V1 AS SELECT * FROM T1, T2, T3
   WHERE T1XC1 = T2XC1 AND T2XC2 = T3XC1 !
 
Enter command:
INSERT T1 VALUES ( 2, 3, 5 ) !
 
Enter command:
INSERT T1 VALUES ( 4, 1, 3 ) !
 
Enter command:
INSERT T1 VALUES ( 8, 3, 1 ) !
 
Enter command:
INSERT T2 VALUES ( 4, 2, 6 ) !
 
Enter command:
INSERT T2 VALUES ( 8, 1, 5 ) !
 
Enter command:
INSERT T2 VALUES ( 2, 5, 5 ) !
 
Enter command:
INSERT T3 VALUES ( 2, 3, 3 ) !
 
Enter command:
INSERT T3 VALUES ( 1, 6, 6 ) !
 
Enter command:
INSERT T3 VALUES ( 1, 2, 4 ) !
 
Enter command:
INSERT T3 VALUES ( 5, 2, 3 ) !
 
Enter command:
INSERT T3 VALUES ( 3, 1, 7 ) !
 
Enter command:
COMMIT WORK !
 
Enter command:
SELECT * FROM V1 !
 
resultcount :                     4
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T1XC3 | T2XC1 | T2XC2 | T2XC3 | T3XC1 | T3XC2 | T3XC3
------+-------+-------+-------+-------+-------+-------+-------+------
  2   |   3   |   5   |   2   |   5   |   5   |   5   |   2   |   3
  4   |   1   |   3   |   4   |   2   |   6   |   2   |   3   |   3
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   6   |   6
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   2   |   4
 
resultcount :                     4
 
Enter command:
SELECT * FROM V1 WHERE T1XC1 < T3XC1 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T1XC3 | T2XC1 | T2XC2 | T2XC3 | T3XC1 | T3XC2 | T3XC3
------+-------+-------+-------+-------+-------+-------+-------+------
  2   |   3   |   5   |   2   |   5   |   5   |   5   |   2   |   3
 
resultcount :                     1
 
Enter command:
SELECT * FROM V1 WHERE T1XC1 + T2XC3 < 7 !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
SELECT * FROM V1 WHERE T1XC2 > T2XC2 AND T1XC3 + T3XC1 = T3XC2 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T1XC3 | T2XC1 | T2XC2 | T2XC3 | T3XC1 | T3XC2 | T3XC3
------+-------+-------+-------+-------+-------+-------+-------+------
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   2   |   4
 
resultcount :                     1
 
Enter command:
SELECT * FROM V1 WHERE T1XC2 > T2XC2 AND T2XC3 > T3XC3 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T1XC3 | T2XC1 | T2XC2 | T2XC3 | T3XC1 | T3XC2 | T3XC3
------+-------+-------+-------+-------+-------+-------+-------+------
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   2   |   4
 
resultcount :                     1
 
Enter command:
DECLARE ERG1 CURSOR FOR
SELECT * FROM V1 WHERE T1XC2 = T3XC3 OR T1XC2 < T2XC2 !
 
resultcount :                     2
 
Enter command:
SELECT * FROM ERG1 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T1XC3 | T2XC1 | T2XC2 | T2XC3 | T3XC1 | T3XC2 | T3XC3
------+-------+-------+-------+-------+-------+-------+-------+------
  2   |   3   |   5   |   2   |   5   |   5   |   5   |   2   |   3
  4   |   1   |   3   |   4   |   2   |   6   |   2   |   3   |   3
 
resultcount :                     2
 
Enter command:
DECLARE ERG2 CURSOR FOR
SELECT * FROM V1 WHERE T1XC2 = T3XC3 AND T1XC3 = T2XC2 !
 
resultcount :                     1
 
Enter command:
FETCH ERG2!
 
T1XC1 | T1XC2 | T1XC3 | T2XC1 | T2XC2 | T2XC3 | T3XC1 | T3XC2 | T3XC3
------+-------+-------+-------+-------+-------+-------+-------+------
  2   |   3   |   5   |   2   |   5   |   5   |   5   |   2   |   3
 
resultcount :                     1
 
Enter command:
SELECT DISTINCT T1XC1, T2XC3 FROM V1 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
T1XC1 | T2XC3
------+------
  2   |   5
  4   |   6
  8   |   5
 
resultcount :                     3
 
Enter command:
SELECT * FROM V1 K WHERE K.T2XC2 = K.T1XC3 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T1XC3 | T2XC1 | T2XC2 | T2XC3 | T3XC1 | T3XC2 | T3XC3
------+-------+-------+-------+-------+-------+-------+-------+------
  2   |   3   |   5   |   2   |   5   |   5   |   5   |   2   |   3
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   6   |   6
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   2   |   4
 
resultcount :                     3
 
Enter command:
SELECT K.T1XC1, T1XC2 FROM V1 K WHERE T1XC1 < K.T1XC2 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
T1XC1 | T1XC2
------+------
  2   |   3
 
resultcount :                     1
 
Enter command:
SELECT T1XC1, T2XC2 NEU1 FROM V1 WHERE T1XC1 < 3 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
T1XC1 | NEU1
------+-----
  2   |   5
 
resultcount :                     1
 
Enter command:
SELECT V1.* FROM V1 !
 
resultcount :                     4
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T1XC3 | T2XC1 | T2XC2 | T2XC3 | T3XC1 | T3XC2 | T3XC3
------+-------+-------+-------+-------+-------+-------+-------+------
  2   |   3   |   5   |   2   |   5   |   5   |   5   |   2   |   3
  4   |   1   |   3   |   4   |   2   |   6   |   2   |   3   |   3
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   6   |   6
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   2   |   4
 
resultcount :                     4
 
Enter command:
SELECT K.* FROM V1 K !
 
resultcount :                     4
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T1XC3 | T2XC1 | T2XC2 | T2XC3 | T3XC1 | T3XC2 | T3XC3
------+-------+-------+-------+-------+-------+-------+-------+------
  2   |   3   |   5   |   2   |   5   |   5   |   5   |   2   |   3
  4   |   1   |   3   |   4   |   2   |   6   |   2   |   3   |   3
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   6   |   6
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   2   |   4
 
resultcount :                     4
 
Enter command:
SELECT T1.* FROM V1 !
 
***ERROR  -8010 Table name must be in from list                            0011
 
Enter command:
SELECT T1XC1 + T2XC2 + T3XC1 NEU1 FROM V1 WHERE T1XC1 / 2 = T3XC3 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
NEU1
-----
   10
 
resultcount :                     1
 
Enter command:
SELECT ALL V1.T1XC1, T1XC2, KERN.V1.T2XC2 FROM KERN.V1
   WHERE V1.T1XC1 + T1XC2 > KERN.V1.T2XC2  ORDER BY T1XC2 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T2XC2
------+-------+------
  4   |   1   |   2
  8   |   3   |   1
  8   |   3   |   1
 
resultcount :                     3
 
Enter command:
SELECT T1XC2, T2XC1, T3XC3 FROM V1
   WHERE T1XC2 < T3XC3 AND T1XC2 < T2XC1
   ORDER BY 3 ASC !
 
resultcount :                     3
 
Enter command:
FETCH !
 
T1XC2 | T2XC1 | T3XC3
------+-------+------
  1   |   4   |   3
  3   |   8   |   4
  3   |   8   |   6
 
resultcount :                     3
 
Enter command:
SELECT T1XC1, T1XC2, T2XC3 FROM V1
   WHERE T1XC1 + T1XC2 <= T2XC3
   ORDER BY 2 ASC, V1.T2XC3 DESC !
 
resultcount :                     2
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T2XC3
------+-------+------
  4   |   1   |   6
  2   |   3   |   5
 
resultcount :                     2
 
Enter command:
SELECT T1XC1, SUM ( T1XC1), MIN (T3XC3) FROM V1 GROUP BY T1XC1 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
T1XC1 | EXPRESSION1                                  | EXPRESSION2
------+----------------------------------------------+------------
  2   |  2.0000000000000000000000000000000000000E+00 |   3
  4   |  4.0000000000000000000000000000000000000E+00 |   3
  8   |  1.6000000000000000000000000000000000000E+01 |   4
 
resultcount :                     3
 
Enter command:
SELECT COUNT (*), T1XC2 FROM V1 WHERE T3XC2 <> 6
   GROUP BY T1XC2 HAVING SUM ( T1XC2 ) > 5 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1 | T1XC2
------------+------
          2 |   3
 
resultcount :                     1
 
Enter command:
CREATE VIEW V2 AS SELECT * FROM V1 WHERE T1XC2 < T3XC3 !
 
Enter command:
SELECT * FROM V2 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T1XC3 | T2XC1 | T2XC2 | T2XC3 | T3XC1 | T3XC2 | T3XC3
------+-------+-------+-------+-------+-------+-------+-------+------
  4   |   1   |   3   |   4   |   2   |   6   |   2   |   3   |   3
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   2   |   4
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   6   |   6
 
resultcount :                     3
 
Enter command:
SELECT * FROM V2 WHERE 2 * T1XC3 = T2XC3 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T1XC3 | T2XC1 | T2XC2 | T2XC3 | T3XC1 | T3XC2 | T3XC3
------+-------+-------+-------+-------+-------+-------+-------+------
  4   |   1   |   3   |   4   |   2   |   6   |   2   |   3   |   3
 
resultcount :                     1
 
Enter command:
DECLARE ERG3 CURSOR FOR
SELECT DISTINCT T1XC1, T1XC2, T2XC1, T2XC2  FROM V2 !
 
resultcount :                     2
 
Enter command:
FETCH ERG3!
 
T1XC1 | T1XC2 | T2XC1 | T2XC2
------+-------+-------+------
  4   |   1   |   4   |   2
  8   |   3   |   8   |   1
 
resultcount :                     2
 
Enter command:
CREATE VIEW V3 AS SELECT T1XC2, T1XC3, T2XC1, T2XC2, T3XC2 FROM V2
   WHERE  ( T1XC3 = T2XC2 AND ( T1XC2 > T3XC2 )) !
 
Enter command:
DECLARE ERG4 CURSOR FOR
SELECT * FROM V3 !
 
resultcount :                     1
 
Enter command:
FETCH ERG4!
 
T1XC2 | T1XC3 | T2XC1 | T2XC2 | T3XC2
------+-------+-------+-------+------
  3   |   1   |   8   |   1   |   2
 
resultcount :                     1
 
Enter command:
SELECT T1XC3 NEU1, 5 FROM V3 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
NEU1 | EXPRESSION1
-----+------------
  1  |  5
 
resultcount :                     1
 
Enter command:
SELECT * FROM V3 WHERE T1XC3 < T2XC1 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
T1XC2 | T1XC3 | T2XC1 | T2XC2 | T3XC2
------+-------+-------+-------+------
  3   |   1   |   8   |   1   |   2
 
resultcount :                     1
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE "COMPANY"
(
 "ID"   FLOAT (20)  ,
 "NAME"     VARCHAR (100) ASCII  ,
 "TOKEN"     VARCHAR (10) ASCII  ,
 "STREET"     VARCHAR (50) ASCII,
 "STREET_NR"     VARCHAR (5) ASCII,
 "POSTCODE"     VARCHAR (10) ASCII,
 "CITY"     VARCHAR (50) ASCII,
 "ZONE"     VARCHAR (5) ASCII,
 "TYPE"     CHAR (1) ASCII    DEFAULT '0',
 "STATUS"     CHAR (1) ASCII  ,
 "ORDER_SEQUENCE"     FIXED (3,0)    DEFAULT  0,
 "INSERTED"     TIMESTAMP    DEFAULT TIMESTAMP,
 "INSERTED_BY"     VARCHAR (50) ASCII    DEFAULT 'SYSTEM',
 "UPDATED"     TIMESTAMP    DEFAULT TIMESTAMP,
 "UPDATED_BY"     VARCHAR (50) ASCII    DEFAULT 'SYSTEM',
 PRIMARY KEY ("ID"),
 CONSTRAINT "ZONE" CHECK "ZONE" IN ('','A','B','C','D','E','F','G')   OR
     "ZONE" IS NULL,
 CONSTRAINT "STATUS" CHECK "STATUS" IN ('0','1'),
 CONSTRAINT "TYPE" CHECK "TYPE" IN ('0','1')
)
!
 
Enter command:
INSERT COMPANY (ID, NAME, STATUS) VALUES (1, 'SAP', '1')!
 
Enter command:
 
CREATE TABLE "POWER_PRICE"
(
 "ID_COMPANY"     FLOAT (20)  ,
 "ZONE"     VARCHAR (5) ASCII  ,
 "VALUE_DATE"     TIMESTAMP  ,
 "POWER1"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER2"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER3"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER4"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER5"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER6"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER7"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER8"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER9"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER10"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER11"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER12"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER13"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER14"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER15"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER16"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER17"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER18"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER19"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER20"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER21"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER22"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER23"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER24"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER25"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER26"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER27"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER28"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER29"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER30"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER31"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER32"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER33"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER34"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER35"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER36"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER37"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER38"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER39"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER40"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER41"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER42"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER43"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER44"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER45"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER46"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER47"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER48"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER49"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER50"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER51"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER52"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER53"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER54"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER55"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER56"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER57"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER58"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER59"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER60"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER61"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER62"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER63"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER64"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER65"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER66"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER67"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER68"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER69"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER70"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER71"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER72"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER73"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER74"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER75"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER76"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER77"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER78"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER79"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER80"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER81"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER82"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER83"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER84"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER85"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER86"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER87"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER88"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER89"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER90"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER91"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER92"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER93"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER94"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER95"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER96"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE1"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE2"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE3"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE4"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE5"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE6"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE7"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE8"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE9"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE10"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE11"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE12"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE13"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE14"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE15"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE16"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE17"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE18"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE19"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE20"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE21"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE22"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE23"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE24"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE25"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE26"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE27"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE28"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE29"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE30"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE31"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE32"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE33"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE34"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE35"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE36"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE37"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE38"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE39"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE40"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE41"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE42"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE43"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE44"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE45"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE46"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE47"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE48"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE49"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE50"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE51"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE52"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE53"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE54"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE55"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE56"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE57"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE58"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE59"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE60"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE61"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE62"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE63"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE64"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE65"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE66"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE67"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE68"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE69"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE70"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE71"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE72"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE73"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE74"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE75"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE76"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE77"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE78"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE79"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE80"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE81"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE82"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE83"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE84"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE85"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE86"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE87"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE88"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE89"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE90"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE91"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE92"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE93"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE94"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE95"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE96"     VARCHAR (7) ASCII    DEFAULT '0',
 "INSERTED"     TIMESTAMP    DEFAULT TIMESTAMP,
 "INSERTED_BY"     VARCHAR (50) ASCII    DEFAULT 'SYSTEM',
 "UPDATED"     TIMESTAMP    DEFAULT TIMESTAMP,
 "UPDATED_BY"     VARCHAR (50) ASCII    DEFAULT 'SYSTEM',
 PRIMARY KEY ("ID_COMPANY", "ZONE", "VALUE_DATE"),
 CONSTRAINT "ZONE" CHECK "ZONE" IN ('','A','B','C','D','E','F','G'),
 FOREIGN KEY "FK_REF_4511" ("ID_COMPANY")
    REFERENCES "COMPANY" ("ID") ON DELETE CASCADE
)
!
 
Enter command:
INSERT POWER_PRICE (ID_COMPANY, POWER41,"ZONE", "VALUE_DATE")
 VALUES (1, '41', 'E', TIMESTAMP)!
 
Enter command:
 
CREATE INDEX "IX01_POWER_PRICE" ON "POWER_PRICE"("ID_COMPANY" ASC)!
 
Enter command:
CREATE INDEX "IX02_POWER_PRICE" ON "POWER_PRICE"("VALUE_DATE" ASC)!
 
Enter command:
 
CREATE TABLE "CONTACT"
(
 "ID"     FLOAT (20)  ,
 "ID_COMPANY"     FLOAT (20)  ,
 "TYPE"     FLOAT (20)  ,
 "TITLE"     VARCHAR (20) ASCII,
 "FIRSTNAME"     VARCHAR (50) ASCII,
 "SURNAME"     VARCHAR (50) ASCII,
 "PHONE_PREFIX"     VARCHAR (6) ASCII,
 "PHONE"     VARCHAR (25) ASCII,
 "PHONE_SUFFIX"     VARCHAR (4) ASCII,
 "FAX_PREFIX"     VARCHAR (6) ASCII,
 "FAX"     VARCHAR (25) ASCII,
 "FAX_SUFFIX"     VARCHAR (4) ASCII,
 "EMAIL"     VARCHAR (50) ASCII,
 "ORDER_SEQUENCE"     FIXED (3,0)    DEFAULT  0,
 "INSERTED"     TIMESTAMP    DEFAULT TIMESTAMP,
 "INSERTED_BY"     VARCHAR (50) ASCII    DEFAULT 'SYSTEM',
 "UPDATED"     TIMESTAMP    DEFAULT TIMESTAMP,
 "UPDATED_BY"     VARCHAR (50) ASCII    DEFAULT 'SYSTEM',
 PRIMARY KEY ("ID", "ID_COMPANY"),
 CONSTRAINT "TYPE" CHECK "TYPE" IN (10,20,30,40,50,60),
 FOREIGN KEY "FK_REF_2866" ("ID_COMPANY")
    REFERENCES "COMPANY" ("ID") ON DELETE CASCADE
)!
 
Enter command:
INSERT CONTACT (ID, TYPE, ID_COMPANY) VALUES (4711,40,1)!
 
Enter command:
 
CREATE VIEW "VW_COMPANY_CONTACT"
 (
 "ID_COMPANY",
 "TOKEN",
 "ZONE",
 "COMPANY_STATUS",
 "COMPANY_ORDER_SEQUENCE",
 "PHONE_PREFIX",
 "PHONE",
 "PHONE_SUFFIX"
)
AS
SELECT A.ID ID_COMPANY, A.TOKEN, A.ZONE, A.STATUS COMPANY_STATUS,
A.ORDER_SEQUENCE COMPANY_ORDER_SEQUENCE,
  B.PHONE_PREFIX, B.PHONE, B.PHONE_SUFFIX
FROM COMPANY A, CONTACT B
WHERE A.ID = B.ID_COMPANY(+) AND B.TYPE(+) = 40 !
 
Enter command:
 
PARS_THEN_EX !
 
Enter command:
SELECT A.ID_COMPANY, A.VALUE_DATE, B.TOKEN COMPANY_TOKEN, A.ZONE,
   DECODE(DECODE(B.PHONE_PREFIX,
     NULL,
      B.PHONE,
      DECODE(B.PHONE,
       NULL,
       B.PHONE_PREFIX,
 
B.PHONE_PREFIX || '/' || B.PHONE)),
    NULL,
    B.PHONE_SUFFIX,
    DECODE(B.PHONE_PREFIX,
     NULL,
      B.PHONE,
      DECODE(B.PHONE,
       NULL,
       B.PHONE_PREFIX,
 
B.PHONE_PREFIX || '/' || B.PHONE)) || DECODE(B.PHONE_SUFFIX,
 
     NULL,
 
     B.PHONE_SUFFIX,
'-' || B.PHONE_SUFFIX)) PHONE,
  NUM(A.POWER1)  POWER1 , NUM(A.POWER2)  POWER2 ,
NUM(A.POWER3)  POWER3 , NUM(A.POWER4)  POWER4 , NUM(A.POWER5)
 POWER5 , NUM(A.POWER6)  POWER6 ,
  NUM(A.POWER7)  POWER7 , NUM(A.POWER8)  POWER8 ,
NUM(A.POWER9)  POWER9 , NUM(A.POWER10) POWER10,
NUM(A.POWER11) POWER11, NUM(A.POWER12) POWER12,
  NUM(A.POWER13) POWER13, NUM(A.POWER14) POWER14,
NUM(A.POWER15) POWER15, NUM(A.POWER16) POWER16,
NUM(A.POWER17) POWER17, NUM(A.POWER18) POWER18,
  NUM(A.POWER19) POWER19, NUM(A.POWER20) POWER20,
NUM(A.POWER21) POWER21, NUM(A.POWER22) POWER22,
NUM(A.POWER23) POWER23, NUM(A.POWER24) POWER24,
  NUM(A.POWER25) POWER25, NUM(A.POWER26) POWER26,
NUM(A.POWER27) POWER27, NUM(A.POWER28) POWER28,
NUM(A.POWER29) POWER29, NUM(A.POWER30) POWER30,
  NUM(A.POWER31) POWER31, NUM(A.POWER32) POWER32,
NUM(A.POWER33) POWER33, NUM(A.POWER34) POWER34,
NUM(A.POWER35) POWER35, NUM(A.POWER36) POWER36,
  NUM(A.POWER37) POWER37, NUM(A.POWER38) POWER38,
NUM(A.POWER39) POWER39, NUM(A.POWER40) POWER40,
NUM(A.POWER41) POWER41, NUM(A.POWER42) POWER42,
  NUM(A.POWER43) POWER43, NUM(A.POWER44) POWER44,
NUM(A.POWER45) POWER45, NUM(A.POWER46) POWER46,
NUM(A.POWER47) POWER47, NUM(A.POWER48) POWER48,
  NUM(A.POWER49) POWER49, NUM(A.POWER50) POWER50,
NUM(A.POWER51) POWER51, NUM(A.POWER52) POWER52,
NUM(A.POWER53) POWER53, NUM(A.POWER54) POWER54,
  NUM(A.POWER55) POWER55, NUM(A.POWER56) POWER56,
NUM(A.POWER57) POWER57, NUM(A.POWER58) POWER58,
NUM(A.POWER59) POWER59, NUM(A.POWER60) POWER60,
  NUM(A.POWER61) POWER61, NUM(A.POWER62) POWER62,
NUM(A.POWER63) POWER63, NUM(A.POWER64) POWER64,
NUM(A.POWER65) POWER65, NUM(A.POWER66) POWER66,
  NUM(A.POWER67) POWER67, NUM(A.POWER68) POWER68,
NUM(A.POWER69) POWER69, NUM(A.POWER70) POWER70,
NUM(A.POWER71) POWER71, NUM(A.POWER72) POWER72,
  NUM(A.POWER73) POWER73, NUM(A.POWER74) POWER74,
NUM(A.POWER75) POWER75, NUM(A.POWER76) POWER76,
NUM(A.POWER77) POWER77, NUM(A.POWER78) POWER78,
  NUM(A.POWER79) POWER79, NUM(A.POWER80) POWER80,
NUM(A.POWER81) POWER81, NUM(A.POWER82) POWER82,
NUM(A.POWER83) POWER83, NUM(A.POWER84) POWER84,
  NUM(A.POWER85) POWER85, NUM(A.POWER86) POWER86,
NUM(A.POWER87) POWER87, NUM(A.POWER88) POWER88,
NUM(A.POWER89) POWER89, NUM(A.POWER90) POWER90,
  NUM(A.POWER91) POWER91, NUM(A.POWER92) POWER92,
NUM(A.POWER93) POWER93, NUM(A.POWER94) POWER94,
NUM(A.POWER95) POWER95, NUM(A.POWER96) POWER96,
  NUM(A.PRICE1)  PRICE1 , NUM(A.PRICE2)  PRICE2 ,
NUM(A.PRICE3)  PRICE3 , NUM(A.PRICE4)  PRICE4 , NUM(A.PRICE5)
 PRICE5 , NUM(A.PRICE6)  PRICE6 ,
  NUM(A.PRICE7)  PRICE7 , NUM(A.PRICE8)  PRICE8 ,
NUM(A.PRICE9)  PRICE9 , NUM(A.PRICE10) PRICE10,
NUM(A.PRICE11) PRICE11, NUM(A.PRICE12) PRICE12,
  NUM(A.PRICE13) PRICE13, NUM(A.PRICE14) PRICE14,
NUM(A.PRICE15) PRICE15, NUM(A.PRICE16) PRICE16,
NUM(A.PRICE17) PRICE17, NUM(A.PRICE18) PRICE18,
  NUM(A.PRICE19) PRICE19, NUM(A.PRICE20) PRICE20,
NUM(A.PRICE21) PRICE21, NUM(A.PRICE22) PRICE22,
NUM(A.PRICE23) PRICE23, NUM(A.PRICE24) PRICE24,
  NUM(A.PRICE25) PRICE25, NUM(A.PRICE26) PRICE26,
NUM(A.PRICE27) PRICE27, NUM(A.PRICE28) PRICE28,
NUM(A.PRICE29) PRICE29, NUM(A.PRICE30) PRICE30,
  NUM(A.PRICE31) PRICE31, NUM(A.PRICE32) PRICE32,
NUM(A.PRICE33) PRICE33, NUM(A.PRICE34) PRICE34,
NUM(A.PRICE35) PRICE35, NUM(A.PRICE36) PRICE36,
  NUM(A.PRICE37) PRICE37, NUM(A.PRICE38) PRICE38,
NUM(A.PRICE39) PRICE39, NUM(A.PRICE40) PRICE40,
NUM(A.PRICE41) PRICE41, NUM(A.PRICE42) PRICE42,
  NUM(A.PRICE43) PRICE43, NUM(A.PRICE44) PRICE44,
NUM(A.PRICE45) PRICE45, NUM(A.PRICE46) PRICE46,
NUM(A.PRICE47) PRICE47, NUM(A.PRICE48) PRICE48,
  NUM(A.PRICE49) PRICE49, NUM(A.PRICE50) PRICE50,
NUM(A.PRICE51) PRICE51, NUM(A.PRICE52) PRICE52,
NUM(A.PRICE53) PRICE53, NUM(A.PRICE54) PRICE54,
  NUM(A.PRICE55) PRICE55, NUM(A.PRICE56) PRICE56,
NUM(A.PRICE57) PRICE57, NUM(A.PRICE58) PRICE58,
NUM(A.PRICE59) PRICE59, NUM(A.PRICE60) PRICE60,
  NUM(A.PRICE61) PRICE61, NUM(A.PRICE62) PRICE62,
NUM(A.PRICE63) PRICE63, NUM(A.PRICE64) PRICE64,
NUM(A.PRICE65) PRICE65, NUM(A.PRICE66) PRICE66,
  NUM(A.PRICE67) PRICE67, NUM(A.PRICE68) PRICE68,
NUM(A.PRICE69) PRICE69, NUM(A.PRICE70) PRICE70,
NUM(A.PRICE71) PRICE71, NUM(A.PRICE72) PRICE72,
  NUM(A.PRICE73) PRICE73, NUM(A.PRICE74) PRICE74,
NUM(A.PRICE75) PRICE75, NUM(A.PRICE76) PRICE76,
NUM(A.PRICE77) PRICE77, NUM(A.PRICE78) PRICE78,
  NUM(A.PRICE79) PRICE79, NUM(A.PRICE80) PRICE80,
NUM(A.PRICE81) PRICE81, NUM(A.PRICE82) PRICE82,
NUM(A.PRICE83) PRICE83, NUM(A.PRICE84) PRICE84,
  NUM(A.PRICE85) PRICE85, NUM(A.PRICE86) PRICE86,
NUM(A.PRICE87) PRICE87, NUM(A.PRICE88) PRICE88,
NUM(A.PRICE89) PRICE89, NUM(A.PRICE90) PRICE90,
  NUM(A.PRICE91) PRICE91, NUM(A.PRICE92) PRICE92,
NUM(A.PRICE93) PRICE93, NUM(A.PRICE94) PRICE94,
NUM(A.PRICE95) PRICE95, NUM(A.PRICE96) PRICE96
FROM POWER_PRICE A, VW_COMPANY_CONTACT B
WHERE A.ID_COMPANY    = B.ID_COMPANY
AND   B.COMPANY_STATUS  = '1'
AND  (NUM(A.POWER1)  <> 0 OR NUM(A.POWER2)  <> 0 OR
NUM(A.POWER3)  <> 0 OR NUM(A.POWER4)  <> 0 OR NUM(A.POWER5)
<> 0 OR NUM(A.POWER6)  <> 0 OR NUM(A.POWER7)  <> 0
OR  NUM(A.POWER8)  <> 0 OR NUM(A.POWER9)  <> 0 OR
NUM(A.POWER10) <> 0 OR NUM(A.POWER11) <> 0 OR NUM(A.POWER12)
<> 0 OR NUM(A.POWER13) <> 0 OR NUM(A.POWER14) <> 0
OR  NUM(A.POWER15) <> 0 OR NUM(A.POWER16) <> 0 OR
NUM(A.POWER17) <> 0 OR NUM(A.POWER18) <> 0 OR NUM(A.POWER19)
<> 0 OR NUM(A.POWER20) <> 0 OR NUM(A.POWER21) <> 0
OR  NUM(A.POWER22) <> 0 OR NUM(A.POWER23) <> 0 OR
NUM(A.POWER24) <> 0 OR NUM(A.POWER25) <> 0 OR NUM(A.POWER26)
<> 0 OR NUM(A.POWER27) <> 0 OR NUM(A.POWER28) <> 0
OR  NUM(A.POWER29) <> 0 OR NUM(A.POWER30) <> 0 OR
NUM(A.POWER31) <> 0 OR NUM(A.POWER32) <> 0 OR NUM(A.POWER33)
<> 0 OR NUM(A.POWER34) <> 0 OR NUM(A.POWER35) <> 0
OR  NUM(A.POWER36) <> 0 OR NUM(A.POWER37) <> 0 OR
NUM(A.POWER38) <> 0 OR NUM(A.POWER39) <> 0 OR NUM(A.POWER40)
<> 0 OR NUM(A.POWER41) <> 0 OR NUM(A.POWER42) <> 0
OR  NUM(A.POWER43) <> 0 OR NUM(A.POWER44) <> 0 OR
NUM(A.POWER45) <> 0 OR NUM(A.POWER46) <> 0 OR NUM(A.POWER47)
<> 0 OR NUM(A.POWER48) <> 0 OR NUM(A.POWER49) <> 0
OR  NUM(A.POWER50) <> 0 OR NUM(A.POWER51) <> 0 OR
NUM(A.POWER52) <> 0 OR NUM(A.POWER53) <> 0 OR NUM(A.POWER54)
<> 0 OR NUM(A.POWER55) <> 0 OR NUM(A.POWER56) <> 0
OR  NUM(A.POWER57) <> 0 OR NUM(A.POWER58) <> 0 OR
NUM(A.POWER59) <> 0 OR NUM(A.POWER60) <> 0 OR NUM(A.POWER61)
<> 0 OR NUM(A.POWER62) <> 0 OR NUM(A.POWER63) <> 0
OR  NUM(A.POWER64) <> 0 OR NUM(A.POWER65) <> 0 OR
NUM(A.POWER66) <> 0 OR NUM(A.POWER67) <> 0 OR NUM(A.POWER68)
<> 0 OR NUM(A.POWER69) <> 0 OR NUM(A.POWER70) <> 0
OR  NUM(A.POWER71) <> 0 OR NUM(A.POWER72) <> 0 OR
NUM(A.POWER73) <> 0 OR NUM(A.POWER74) <> 0 OR NUM(A.POWER75)
<> 0 OR NUM(A.POWER76) <> 0 OR NUM(A.POWER77) <> 0
OR  NUM(A.POWER78) <> 0 OR NUM(A.POWER79) <> 0 OR
NUM(A.POWER80) <> 0 OR NUM(A.POWER81) <> 0 OR NUM(A.POWER82)
<> 0 OR NUM(A.POWER83) <> 0 OR NUM(A.POWER84) <> 0
OR  NUM(A.POWER85) <> 0 OR NUM(A.POWER86) <> 0 OR
NUM(A.POWER87) <> 0 OR NUM(A.POWER88) <> 0 OR NUM(A.POWER89)
<> 0 OR NUM(A.POWER90) <> 0 OR NUM(A.POWER91) <> 0
OR  NUM(A.POWER92) <> 0 OR NUM(A.POWER93) <> 0 OR
NUM(A.POWER94) <> 0 OR NUM(A.POWER95) <> 0 OR NUM(A.POWER96) <> 0)
!
 
resultcount :                     1
 
Enter command:
FETCH!
 
ID_COMPANY        :   1.0000000000000000000E+00
VALUE_DATE        :  TIMESTAMPXXXXXXXXXXX
COMPANY_TOKEN     :  ?????
ZONE              :  E
PHONE             :  ?????
POWER1            :   0.0000000000000000000000000000000000000E+00
POWER2            :   0.0000000000000000000000000000000000000E+00
POWER3            :   0.0000000000000000000000000000000000000E+00
POWER4            :   0.0000000000000000000000000000000000000E+00
POWER5            :   0.0000000000000000000000000000000000000E+00
POWER6            :   0.0000000000000000000000000000000000000E+00
POWER7            :   0.0000000000000000000000000000000000000E+00
POWER8            :   0.0000000000000000000000000000000000000E+00
POWER9            :   0.0000000000000000000000000000000000000E+00
POWER10           :   0.0000000000000000000000000000000000000E+00
POWER11           :   0.0000000000000000000000000000000000000E+00
POWER12           :   0.0000000000000000000000000000000000000E+00
POWER13           :   0.0000000000000000000000000000000000000E+00
POWER14           :   0.0000000000000000000000000000000000000E+00
POWER15           :   0.0000000000000000000000000000000000000E+00
POWER16           :   0.0000000000000000000000000000000000000E+00
POWER17           :   0.0000000000000000000000000000000000000E+00
POWER18           :   0.0000000000000000000000000000000000000E+00
POWER19           :   0.0000000000000000000000000000000000000E+00
POWER20           :   0.0000000000000000000000000000000000000E+00
POWER21           :   0.0000000000000000000000000000000000000E+00
POWER22           :   0.0000000000000000000000000000000000000E+00
POWER23           :   0.0000000000000000000000000000000000000E+00
POWER24           :   0.0000000000000000000000000000000000000E+00
POWER25           :   0.0000000000000000000000000000000000000E+00
POWER26           :   0.0000000000000000000000000000000000000E+00
POWER27           :   0.0000000000000000000000000000000000000E+00
POWER28           :   0.0000000000000000000000000000000000000E+00
POWER29           :   0.0000000000000000000000000000000000000E+00
POWER30           :   0.0000000000000000000000000000000000000E+00
POWER31           :   0.0000000000000000000000000000000000000E+00
POWER32           :   0.0000000000000000000000000000000000000E+00
POWER33           :   0.0000000000000000000000000000000000000E+00
POWER34           :   0.0000000000000000000000000000000000000E+00
POWER35           :   0.0000000000000000000000000000000000000E+00
POWER36           :   0.0000000000000000000000000000000000000E+00
POWER37           :   0.0000000000000000000000000000000000000E+00
POWER38           :   0.0000000000000000000000000000000000000E+00
POWER39           :   0.0000000000000000000000000000000000000E+00
POWER40           :   0.0000000000000000000000000000000000000E+00
POWER41           :   4.1000000000000000000000000000000000000E+01
POWER42           :   0.0000000000000000000000000000000000000E+00
POWER43           :   0.0000000000000000000000000000000000000E+00
POWER44           :   0.0000000000000000000000000000000000000E+00
POWER45           :   0.0000000000000000000000000000000000000E+00
POWER46           :   0.0000000000000000000000000000000000000E+00
POWER47           :   0.0000000000000000000000000000000000000E+00
POWER48           :   0.0000000000000000000000000000000000000E+00
POWER49           :   0.0000000000000000000000000000000000000E+00
POWER50           :   0.0000000000000000000000000000000000000E+00
POWER51           :   0.0000000000000000000000000000000000000E+00
POWER52           :   0.0000000000000000000000000000000000000E+00
POWER53           :   0.0000000000000000000000000000000000000E+00
POWER54           :   0.0000000000000000000000000000000000000E+00
POWER55           :   0.0000000000000000000000000000000000000E+00
POWER56           :   0.0000000000000000000000000000000000000E+00
POWER57           :   0.0000000000000000000000000000000000000E+00
POWER58           :   0.0000000000000000000000000000000000000E+00
POWER59           :   0.0000000000000000000000000000000000000E+00
POWER60           :   0.0000000000000000000000000000000000000E+00
POWER61           :   0.0000000000000000000000000000000000000E+00
POWER62           :   0.0000000000000000000000000000000000000E+00
POWER63           :   0.0000000000000000000000000000000000000E+00
POWER64           :   0.0000000000000000000000000000000000000E+00
POWER65           :   0.0000000000000000000000000000000000000E+00
POWER66           :   0.0000000000000000000000000000000000000E+00
POWER67           :   0.0000000000000000000000000000000000000E+00
POWER68           :   0.0000000000000000000000000000000000000E+00
POWER69           :   0.0000000000000000000000000000000000000E+00
POWER70           :   0.0000000000000000000000000000000000000E+00
POWER71           :   0.0000000000000000000000000000000000000E+00
POWER72           :   0.0000000000000000000000000000000000000E+00
POWER73           :   0.0000000000000000000000000000000000000E+00
POWER74           :   0.0000000000000000000000000000000000000E+00
POWER75           :   0.0000000000000000000000000000000000000E+00
POWER76           :   0.0000000000000000000000000000000000000E+00
POWER77           :   0.0000000000000000000000000000000000000E+00
POWER78           :   0.0000000000000000000000000000000000000E+00
POWER79           :   0.0000000000000000000000000000000000000E+00
POWER80           :   0.0000000000000000000000000000000000000E+00
POWER81           :   0.0000000000000000000000000000000000000E+00
POWER82           :   0.0000000000000000000000000000000000000E+00
POWER83           :   0.0000000000000000000000000000000000000E+00
POWER84           :   0.0000000000000000000000000000000000000E+00
POWER85           :   0.0000000000000000000000000000000000000E+00
POWER86           :   0.0000000000000000000000000000000000000E+00
POWER87           :   0.0000000000000000000000000000000000000E+00
POWER88           :   0.0000000000000000000000000000000000000E+00
POWER89           :   0.0000000000000000000000000000000000000E+00
POWER90           :   0.0000000000000000000000000000000000000E+00
POWER91           :   0.0000000000000000000000000000000000000E+00
POWER92           :   0.0000000000000000000000000000000000000E+00
POWER93           :   0.0000000000000000000000000000000000000E+00
POWER94           :   0.0000000000000000000000000000000000000E+00
POWER95           :   0.0000000000000000000000000000000000000E+00
POWER96           :   0.0000000000000000000000000000000000000E+00
PRICE1            :   0.0000000000000000000000000000000000000E+00
PRICE2            :   0.0000000000000000000000000000000000000E+00
PRICE3            :   0.0000000000000000000000000000000000000E+00
PRICE4            :   0.0000000000000000000000000000000000000E+00
PRICE5            :   0.0000000000000000000000000000000000000E+00
PRICE6            :   0.0000000000000000000000000000000000000E+00
PRICE7            :   0.0000000000000000000000000000000000000E+00
PRICE8            :   0.0000000000000000000000000000000000000E+00
PRICE9            :   0.0000000000000000000000000000000000000E+00
PRICE10           :   0.0000000000000000000000000000000000000E+00
PRICE11           :   0.0000000000000000000000000000000000000E+00
PRICE12           :   0.0000000000000000000000000000000000000E+00
PRICE13           :   0.0000000000000000000000000000000000000E+00
PRICE14           :   0.0000000000000000000000000000000000000E+00
PRICE15           :   0.0000000000000000000000000000000000000E+00
PRICE16           :   0.0000000000000000000000000000000000000E+00
PRICE17           :   0.0000000000000000000000000000000000000E+00
PRICE18           :   0.0000000000000000000000000000000000000E+00
PRICE19           :   0.0000000000000000000000000000000000000E+00
PRICE20           :   0.0000000000000000000000000000000000000E+00
PRICE21           :   0.0000000000000000000000000000000000000E+00
PRICE22           :   0.0000000000000000000000000000000000000E+00
PRICE23           :   0.0000000000000000000000000000000000000E+00
PRICE24           :   0.0000000000000000000000000000000000000E+00
PRICE25           :   0.0000000000000000000000000000000000000E+00
PRICE26           :   0.0000000000000000000000000000000000000E+00
PRICE27           :   0.0000000000000000000000000000000000000E+00
PRICE28           :   0.0000000000000000000000000000000000000E+00
PRICE29           :   0.0000000000000000000000000000000000000E+00
PRICE30           :   0.0000000000000000000000000000000000000E+00
PRICE31           :   0.0000000000000000000000000000000000000E+00
PRICE32           :   0.0000000000000000000000000000000000000E+00
PRICE33           :   0.0000000000000000000000000000000000000E+00
PRICE34           :   0.0000000000000000000000000000000000000E+00
PRICE35           :   0.0000000000000000000000000000000000000E+00
PRICE36           :   0.0000000000000000000000000000000000000E+00
PRICE37           :   0.0000000000000000000000000000000000000E+00
PRICE38           :   0.0000000000000000000000000000000000000E+00
PRICE39           :   0.0000000000000000000000000000000000000E+00
PRICE40           :   0.0000000000000000000000000000000000000E+00
PRICE41           :   0.0000000000000000000000000000000000000E+00
PRICE42           :   0.0000000000000000000000000000000000000E+00
PRICE43           :   0.0000000000000000000000000000000000000E+00
PRICE44           :   0.0000000000000000000000000000000000000E+00
PRICE45           :   0.0000000000000000000000000000000000000E+00
PRICE46           :   0.0000000000000000000000000000000000000E+00
PRICE47           :   0.0000000000000000000000000000000000000E+00
PRICE48           :   0.0000000000000000000000000000000000000E+00
PRICE49           :   0.0000000000000000000000000000000000000E+00
PRICE50           :   0.0000000000000000000000000000000000000E+00
PRICE51           :   0.0000000000000000000000000000000000000E+00
PRICE52           :   0.0000000000000000000000000000000000000E+00
PRICE53           :   0.0000000000000000000000000000000000000E+00
PRICE54           :   0.0000000000000000000000000000000000000E+00
PRICE55           :   0.0000000000000000000000000000000000000E+00
PRICE56           :   0.0000000000000000000000000000000000000E+00
PRICE57           :   0.0000000000000000000000000000000000000E+00
PRICE58           :   0.0000000000000000000000000000000000000E+00
PRICE59           :   0.0000000000000000000000000000000000000E+00
PRICE60           :   0.0000000000000000000000000000000000000E+00
PRICE61           :   0.0000000000000000000000000000000000000E+00
PRICE62           :   0.0000000000000000000000000000000000000E+00
PRICE63           :   0.0000000000000000000000000000000000000E+00
PRICE64           :   0.0000000000000000000000000000000000000E+00
PRICE65           :   0.0000000000000000000000000000000000000E+00
PRICE66           :   0.0000000000000000000000000000000000000E+00
PRICE67           :   0.0000000000000000000000000000000000000E+00
PRICE68           :   0.0000000000000000000000000000000000000E+00
PRICE69           :   0.0000000000000000000000000000000000000E+00
PRICE70           :   0.0000000000000000000000000000000000000E+00
PRICE71           :   0.0000000000000000000000000000000000000E+00
PRICE72           :   0.0000000000000000000000000000000000000E+00
PRICE73           :   0.0000000000000000000000000000000000000E+00
PRICE74           :   0.0000000000000000000000000000000000000E+00
PRICE75           :   0.0000000000000000000000000000000000000E+00
PRICE76           :   0.0000000000000000000000000000000000000E+00
PRICE77           :   0.0000000000000000000000000000000000000E+00
PRICE78           :   0.0000000000000000000000000000000000000E+00
PRICE79           :   0.0000000000000000000000000000000000000E+00
PRICE80           :   0.0000000000000000000000000000000000000E+00
PRICE81           :   0.0000000000000000000000000000000000000E+00
PRICE82           :   0.0000000000000000000000000000000000000E+00
PRICE83           :   0.0000000000000000000000000000000000000E+00
PRICE84           :   0.0000000000000000000000000000000000000E+00
PRICE85           :   0.0000000000000000000000000000000000000E+00
PRICE86           :   0.0000000000000000000000000000000000000E+00
PRICE87           :   0.0000000000000000000000000000000000000E+00
PRICE88           :   0.0000000000000000000000000000000000000E+00
PRICE89           :   0.0000000000000000000000000000000000000E+00
PRICE90           :   0.0000000000000000000000000000000000000E+00
PRICE91           :   0.0000000000000000000000000000000000000E+00
PRICE92           :   0.0000000000000000000000000000000000000E+00
PRICE93           :   0.0000000000000000000000000000000000000E+00
PRICE94           :   0.0000000000000000000000000000000000000E+00
PRICE95           :   0.0000000000000000000000000000000000000E+00
PRICE96           :   0.0000000000000000000000000000000000000E+00
 
resultcount :                     1
 
Enter command:
PARS_EXECUTE!
 
Enter command:
ROLLBACK RELEASE!
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 ( T1XC1 FIXED(2) KEY, T1XC2 FIXED(2) KEY,
                  T1XC3 FIXED(2) ) !
 
Enter command:
CREATE TABLE T2 ( T2XC1 FIXED(2) KEY, T2XC2 FIXED(2), T2XC3 FIXED(2) ) !
 
Enter command:
CREATE TABLE T3 ( T3XC1 FIXED(2), T3XC2 FIXED(2), T3XC3 FIXED(2) ) !
 
Enter command:
CREATE VIEW V1 AS SELECT * FROM T1, T2, T3
   WHERE T1XC1 = T2XC1 AND T2XC2 = T3XC1 !
 
Enter command:
CREATE VIEW V2 AS SELECT * FROM T1,T2,T3
   WHERE T1.T1XC3 = KERN.T2.T2XC2 AND (( T3XC1 + 1 ) < T2XC3 ) !
 
Enter command:
INSERT T1 VALUES ( 2, 3, 5 ) !
 
Enter command:
INSERT T1 VALUES ( 4, 1, 3 ) !
 
Enter command:
INSERT T1 VALUES ( 8, 3, 1 ) !
 
Enter command:
INSERT T2 VALUES ( 4, 2, 6 ) !
 
Enter command:
INSERT T2 VALUES ( 8, 1, 5 ) !
 
Enter command:
INSERT T2 VALUES ( 2, 5, 5 ) !
 
Enter command:
INSERT T3 VALUES ( 2, 3, 3 ) !
 
Enter command:
INSERT T3 VALUES ( 1, 6, 6 ) !
 
Enter command:
INSERT T3 VALUES ( 1, 2, 4 ) !
 
Enter command:
INSERT T3 VALUES ( 5, 2, 3 ) !
 
Enter command:
INSERT T3 VALUES ( 3, 1, 7 ) !
 
Enter command:
COMMIT WORK !
 
Enter command:
SELECT * FROM V1 !
 
resultcount :                     4
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T1XC3 | T2XC1 | T2XC2 | T2XC3 | T3XC1 | T3XC2 | T3XC3
------+-------+-------+-------+-------+-------+-------+-------+------
  2   |   3   |   5   |   2   |   5   |   5   |   5   |   2   |   3
  4   |   1   |   3   |   4   |   2   |   6   |   2   |   3   |   3
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   6   |   6
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   2   |   4
 
resultcount :                     4
 
Enter command:
SELECT * FROM V2 !
 
resultcount :                     8
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T1XC3 | T2XC1 | T2XC2 | T2XC3 | T3XC1 | T3XC2 | T3XC3
------+-------+-------+-------+-------+-------+-------+-------+------
  2   |   3   |   5   |   2   |   5   |   5   |   1   |   6   |   6
  2   |   3   |   5   |   2   |   5   |   5   |   1   |   2   |   4
  2   |   3   |   5   |   2   |   5   |   5   |   2   |   3   |   3
  2   |   3   |   5   |   2   |   5   |   5   |   3   |   1   |   7
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   6   |   6
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   2   |   4
  8   |   3   |   1   |   8   |   1   |   5   |   2   |   3   |   3
  8   |   3   |   1   |   8   |   1   |   5   |   3   |   1   |   7
 
resultcount :                     8
 
Enter command:
COMMIT WORK !
 
Enter command:
CREATE VIEW V3 AS SELECT
   V1.T1XC1 V1T11, V1.T1XC2 V1T12, V1.T2XC1 V1T21,
   V1.T3XC1 V1T31, V1.T3XC3 V1T33,
   V2.T1XC1 V2T11, V2.T1XC2 V2T12, V2.T2XC1 V2T21,
   V2.T3XC1 V2T31, V2.T3XC3 V2T33
   FROM V1,V2
   WHERE V1.T1XC1 = V2.T1XC1 AND V1.T1XC2 = V2.T3XC1 !
 
Enter command:
SELECT * FROM V3 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
V1T11 | V1T12 | V1T21 | V1T31 | V1T33 | V2T11 | V2T12 | V2T21 | V2T31 | V2T33
------+-------+-------+-------+-------+-------+-------+-------+-------+------
  8   |   3   |   8   |   1   |   6   |   8   |   3   |   8   |   3   |   7
  8   |   3   |   8   |   1   |   4   |   8   |   3   |   8   |   3   |   7
  2   |   3   |   2   |   5   |   3   |   2   |   3   |   2   |   3   |   7
 
resultcount :                     3
 
Enter command:
SELECT * FROM V3 WHERE V1T33 < V2T21 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
V1T11 | V1T12 | V1T21 | V1T31 | V1T33 | V2T11 | V2T12 | V2T21 | V2T31 | V2T33
------+-------+-------+-------+-------+-------+-------+-------+-------+------
  8   |   3   |   8   |   1   |   6   |   8   |   3   |   8   |   3   |   7
  8   |   3   |   8   |   1   |   4   |   8   |   3   |   8   |   3   |   7
 
resultcount :                     2
 
Enter command:
SELECT K.V1T12, V1T33, V2T21 NEU FROM V3 K
   WHERE K.V1T12 < V1T33 AND ( V1T33 * 2 = K.V2T21 ) !
 
resultcount :                     1
 
Enter command:
FETCH !
 
V1T12 | V1T33 | NEU
------+-------+----
  3   |   4   |   8
 
resultcount :                     1
 
Enter command:
DECLARE ERG1 CURSOR FOR
SELECT V3.V1T11, KERN.V3.V1T33 , K.V2T33
   FROM V3, V3 K
   WHERE V3.V1T11 < K.V2T33 !
 
resultcount :                     3
 
Enter command:
SELECT * FROM ERG1 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
V1T11 | V1T33 | V2T33
------+-------+------
  2   |   3   |   7
  2   |   3   |   7
  2   |   3   |   7
 
resultcount :                     3
 
Enter command:
SELECT V3.V1T11, SUM (V1T33) FROM V3 GROUP BY V3.V1T11 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
V1T11 | EXPRESSION1
------+---------------------------------------------
  2   |  3.0000000000000000000000000000000000000E+00
  8   |  1.0000000000000000000000000000000000000E+01
 
resultcount :                     2
 
Enter command:
SELECT V1T33 + V2T21 FROM V3 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
EXPRESSION1
-----------
  14
  12
   5
 
resultcount :                     3
 
Enter command:
DROP TABLE T1 !
 
Enter command:
DROP TABLE T2 !
 
Enter command:
DROP TABLE T3 !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 ( T1XC1 FIXED(2) KEY, T1XC2 FIXED(2) KEY,
                  T1XC3 FIXED(2) ) !
 
Enter command:
CREATE TABLE T2 ( T2XC1 FIXED(2) KEY, T2XC2 FIXED(2), T2XC3 FIXED(2) ) !
 
Enter command:
INSERT T1 VALUES ( 2, 3, 5 ) !
 
Enter command:
INSERT T1 VALUES ( 4, 1, 3 ) !
 
Enter command:
INSERT T1 VALUES ( 8, 3, 1 ) !
 
Enter command:
INSERT T2 VALUES ( 4, 2, 6 ) !
 
Enter command:
INSERT T2 VALUES ( 8, 1, 5 ) !
 
Enter command:
INSERT T2 VALUES ( 2, 5, 5 ) !
 
Enter command:
COMMIT WORK !
 
Enter command:
CREATE VIEW V1 AS SELECT 3 * T1XC2 NEU1, T2XC3, T2XC1 + T2XC2
   FROM T1,T2 !
 
Enter command:
SELECT * FROM V1 !
 
resultcount :                     9
 
Enter command:
FETCH !
 
NEU1 | T2XC3 | EXPRESSION1
-----+-------+------------
   9 |   5   |    7
   3 |   5   |    7
   9 |   5   |    7
   9 |   6   |    6
   3 |   6   |    6
   9 |   6   |    6
   9 |   5   |    9
   3 |   5   |    9
   9 |   5   |    9
 
resultcount :                     9
 
Enter command:
DECLARE ERG1 CURSOR FOR
SELECT NEU1 NEU2 , EXPRESSION1 + 1
   FROM V1 WHERE NEU1 < T2XC3 !
 
resultcount :                     3
 
Enter command:
FETCH ERG1 !
 
NEU2 | EXPRESSION1
-----+------------
   3 |     8
   3 |     7
   3 |    10
 
resultcount :                     3
 
Enter command:
CREATE VIEW V2 AS SELECT  T1XC3 + T2.T2XC1 NEU1 FROM T1,T2
   WHERE T1XC1 < T2XC3 !
 
Enter command:
SELECT * FROM V2 !
 
resultcount :                     6
 
Enter command:
FETCH !
 
NEU1
----
   7
   5
   9
   7
  13
  11
 
resultcount :                     6
 
Enter command:
SELECT NEU1 FROM V2 !
 
resultcount :                     6
 
Enter command:
FETCH !
 
NEU1
----
   7
   5
   9
   7
  13
  11
 
resultcount :                     6
 
Enter command:
CREATE VIEW V3 ( S1, S2, S3, S4, S5 )
   AS SELECT T1XC2 + T2XC3, T1XC2, T2.T2XC3, T1XC1 SPALTE, T2XC1
   FROM T1,T2 WHERE T1XC1 = T2XC1 !
 
Enter command:
SELECT * FROM V3 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
S1   | S2  | S3  | S4  | S5
-----+-----+-----+-----+----
   8 |   3 |   5 |   2 |   2
   7 |   1 |   6 |   4 |   4
   8 |   3 |   5 |   8 |   8
 
resultcount :                     3
 
Enter command:
SELECT S1, S2, S3, V3.S4, KERN.V3.S5 FROM V3 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
S1   | S2  | S3  | S4  | S5
-----+-----+-----+-----+----
   8 |   3 |   5 |   2 |   2
   7 |   1 |   6 |   4 |   4
   8 |   3 |   5 |   8 |   8
 
resultcount :                     3
 
Enter command:
SELECT S1 + S2, S4 + S5 NEU FROM V3 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
EXPRESSION1 | NEU
------------+-----
   11       |    4
    8       |    8
   11       |   16
 
resultcount :                     3
 
Enter command:
SELECT S3, COUNT(S3), SUM ( S4 ) FROM V3 GROUP BY S3 ORDER BY 3 ASC !
 
resultcount :                     2
 
Enter command:
FETCH !
 
S3  | EXPRESSION1 | EXPRESSION2
----+-------------+---------------------------------------------
  6 |           1 |  4.0000000000000000000000000000000000000E+00
  5 |           2 |  1.0000000000000000000000000000000000000E+01
 
resultcount :                     2
 
Enter command:
SELECT SUM ( S2+S5), SUM ( S1 +S5 ) FROM V3
   GROUP BY S3 HAVING AVG ( S4) = 5 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1       :   1.6000000000000000000000000000000000000E+01
EXPRESSION2       :   2.6000000000000000000000000000000000000E+01
 
resultcount :                     1
 
Enter command:
CREATE VIEW V4 ( C1, C2 ) AS SELECT SUM ( T1XC2 ), COUNT ( T2XC1 )
   FROM T1,T2 !
 
Enter command:
CREATE VIEW V5 ( C1,C2,C3,C4,C5,C6 ) AS SELECT * FROM T1,T2
   WHERE T1XC2 + 2 = T2XC3 !
 
Enter command:
SELECT * FROM V5 !
 
resultcount :                     4
 
Enter command:
FETCH !
 
C1  | C2  | C3  | C4  | C5  | C6
----+-----+-----+-----+-----+----
  2 |   3 |   5 |   2 |   5 |   5
  2 |   3 |   5 |   8 |   1 |   5
  8 |   3 |   1 |   2 |   5 |   5
  8 |   3 |   1 |   8 |   1 |   5
 
resultcount :                     4
 
Enter command:
SELECT DISTINCT C4, C5 , 7 FROM V5 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
C4  | C5  | EXPRESSION1
----+-----+------------
  2 |   5 |  7
  8 |   1 |  7
 
resultcount :                     2
 
Enter command:
DROP TABLE T1 !
 
Enter command:
DROP TABLE T2 !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 ( T1XC1 FIXED(3) KEY, T1XC2 FIXED(3) ) !
 
Enter command:
CREATE TABLE T2 ( T2XC1 FIXED(3), T2XC2 FIXED(3) ) !
 
Enter command:
CREATE VIEW V1 AS SELECT * FROM T1,T2 WHERE T1XC1 = T2XC1 !
 
Enter command:
INSERT T1 VALUES ( 3, 11 ) !
 
Enter command:
INSERT T1 VALUES ( 5, 44 ) !
 
Enter command:
INSERT T1 VALUES ( 7, 11 ) !
 
Enter command:
INSERT T1 VALUES ( 1, 11 ) !
 
Enter command:
INSERT T2 VALUES ( 5, 66 ) !
 
Enter command:
INSERT T2 VALUES ( 5, 66 ) !
 
Enter command:
INSERT T2 VALUES ( 1, 11 ) !
 
Enter command:
INSERT T2 VALUES ( 5, 11 ) !
 
Enter command:
INSERT T2 VALUES ( 7, 22 ) !
 
Enter command:
INSERT T2 VALUES ( 7, 11 ) !
 
Enter command:
SELECT * FROM V1 !
 
resultcount :                     6
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T2XC1 | T2XC2
------+-------+-------+------
   1  |   11  |    1  |   11
   5  |   44  |    5  |   66
   5  |   44  |    5  |   66
   5  |   44  |    5  |   11
   7  |   11  |    7  |   22
   7  |   11  |    7  |   11
 
resultcount :                     6
 
Enter command:
CREATE VIEW V3 AS
SELECT COUNT(*) * 3, ((MAX(T1XC1 + 6) + SUM(T2XC1)) * T1XC2) MOD 4 COL
   FROM V1 WHERE T2XC2 + T1XC1 > T1XC2
   GROUP BY T1XC2, T2XC1
   HAVING COUNT(*) + 30 < T1XC2 + SUM(T2XC2) !
 
Enter command:
SELECT * FROM V3 !
 
*** SQLSTATEMENT HAS BEEN OPTIMIZED
 
resultcount :                     2
 
Enter command:
FETCH !
 
EXPRESSION1  | COL
-------------+---------------------------------------------
           6 |  1.0000000000000000000000000000000000000E+00
           6 |  0.0000000000000000000000000000000000000E+00
 
resultcount :                     2
 
Enter command:
ROLLBACK WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 ( T1XC1 CHAR(20),
                  T1XC2 FIXED(10),
                  T1XC3 CHAR(10) ASCII,
                  T1XC4 FIXED(10,5),
                  T1XC5 FLOAT(10),
                  T1XC6 FIXED(18) ) !
 
Enter command:
INSERT T1 VALUES ( 'Hans', 100, 'Muenchen', 100.100, NULL,
                    500000000000000000 ) !
 
Enter command:
INSERT T1 VALUES ( NULL, NULL, 'Hamburg', 0.00005, 8E-30, -2000 ) !
 
Enter command:
INSERT T1 VALUES ( 'Karin', -600000, NULL, NULL, -1E12,
                    800000000000000000 ) !
 
Enter command:
INSERT T1 VALUES ( 'Karin', 5, 'Bonn', -700, 1000, NULL ) !
 
Enter command:
INSERT T1 VALUES ( 'Hans', -500000, 'Bremen', 700.00005, NULL, 300 ) !
 
Enter command:
INSERT T1 VALUES ( ' Marianne', -80, 'Koeln 1', -300, 10E-10, NULL ) !
 
Enter command:
CREATE TABLE T2 ( T2XC1 FIXED(5) KEY,
                  T2XC2 CHAR(10) ASCII,
                  T2XC3 CHAR(15) ASCII,
                  T2XC4 FLOAT(5),
                  T2XC5 FIXED(5) RANGE BETWEEN -50000 AND +50000 ) !
 
Enter command:
INSERT T2 VALUES ( 10, 'Klaus', 'Mueller', 1E20, 20000 ) !
 
Enter command:
INSERT T2 VALUES ( 20, 'Elena', 'Meier', -5E10, -100 ) !
 
Enter command:
INSERT T2 VALUES ( 30, NULL, 'Lehmann', NULL, NULL ) !
 
Enter command:
INSERT T2 VALUES ( 40, 'Paul', 'Anse Rauch', 8 , -50000 ) !
 
Enter command:
CREATE TABLE T3 ( T3XC1 FIXED(2,1 ) KEY,
                  T3XC2 CHAR(20) KEY ,
                  T3XC3 FLOAT( 5) ,
                  T3XC4 CHAR(20) ASCII RANGE BETWEEN 'A' AND 'G' ,
                  T3XC5 FIXED(18) ) !
 
Enter command:
INSERT T3 VALUES ( 0.1, 'Frankreich', 80E50, 'Amsel',
                   700000000000000000 ) !
 
Enter command:
INSERT T3 VALUES ( 2.5, 'Belgien', 1E-30, 'Fink', NULL ) !
 
Enter command:
INSERT T3 VALUES ( 3.0, 'Italien', -5E30, 'Amsel', -1000 ) !
 
Enter command:
INSERT T3 VALUES ( 4.1, 'VR Polen', NULL, 'Fink', +200 ) !
 
Enter command:
CREATE VIEW V1 AS
   SELECT SUM ( T1.T1XC2 ) AS COL1 , SUM ( T2.T2XC1 ) AS COL2 FROM T1, T2 !
 
Enter command:
SELECT 'BLABLA', COL1, 'BLABLA', COL2 FROM V1 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1       :  BLABLA
COL1              :  -4.3999000000000000000000000000000000000E+06
EXPRESSION2       :  BLABLA
COL2              :   6.0000000000000000000000000000000000000E+02
 
resultcount :                     1
 
Enter command:
CREATE VIEW V2 AS
SELECT COUNT (*), COUNT ( DISTINCT KERN.T2.T2XC2 ),
       COUNT ( ALL ( T3XC5)) FROM T1,T2,T3 !
 
Enter command:
SELECT * FROM V2 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1 | EXPRESSION2 | EXPRESSION3
------------+-------------+------------
         96 |           3 |          72
 
resultcount :                     1
 
Enter command:
CREATE VIEW V3 AS
SELECT AVG ( DISTINCT T2.T2XC1 ) ,
       COUNT ( DISTINCT T2.T2XC1 ) ,
       AVG ( ALL KERN.T1.T1XC5 ) ,
       SUM ( ALL T1XC5 ) ,
       COUNT ( ALL ( T1XC5 ) ) FROM T1,T2 !
 
Enter command:
SELECT * FROM V3 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1       :   2.5000000000000000000000000000000000000E+01
EXPRESSION2       :            4
EXPRESSION3       :  -2.4999999974999999999975000000000000000E+11
EXPRESSION4       :  -3.9999999959999999999960000000000000000E+12
EXPRESSION5       :           16
 
resultcount :                     1
 
Enter command:
CREATE VIEW V4 AS
SELECT SUM ( REF.T1XC6 ) , AVG ( REF.T1XC4) FROM T1,T1 REF !
 
Enter command:
SELECT * FROM V4 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1       :   7.7999999999999898000000000000000000000E+18
EXPRESSION2       :  -3.9979980000000000000000000000000000000E+01
 
resultcount :                     1
 
Enter command:
CREATE VIEW V5 AS
SELECT SUM ( T1XC4 ), AVG ( T1XC4), T1XC1, COUNT(T1XC1)
    FROM T1,T2 GROUP BY T1XC1 !
 
Enter command:
SELECT EXPRESSION1, EXPRESSION2, T1XC1 || ' aa', EXPRESSION3 + 1
   FROM V5 !
 
*** SQLSTATEMENT HAS BEEN OPTIMIZED
 
resultcount :                     4
 
Enter command:
FETCH !
 
EXPRESSION1       :  -1.2000000000000000000000000000000000000E+03
EXPRESSION2       :  -3.0000000000000000000000000000000000000E+02
EXPRESSION1       :   Marianne aa
EXPRESSION2       :             5
-----------------------------------------------------------------
EXPRESSION1       :   3.2004002000000000000000000000000000000E+03
EXPRESSION2       :   4.0005002500000000000000000000000000000E+02
EXPRESSION1       :  Hans aa
EXPRESSION2       :             9
-----------------------------------------------------------------
EXPRESSION1       :  -2.8000000000000000000000000000000000000E+03
EXPRESSION2       :  -7.0000000000000000000000000000000000000E+02
EXPRESSION1       :  Karin aa
EXPRESSION2       :             9
-----------------------------------------------------------------
EXPRESSION1       :   2.0000000000000000000000000000000000000E-04
EXPRESSION2       :   5.0000000000000000000000000000000000000E-05
EXPRESSION1       :  ?????
EXPRESSION2       :             1
 
resultcount :                     4
 
Enter command:
CREATE VIEW V6 AS
SELECT SUM ( T1XC4 ), SUM ( T2XC4)
    FROM T1, T2 REF
    GROUP BY REF.T2XC1
    HAVING REF.T2XC1 > 10
       AND SUM ( REF.T2XC4) IS NOT NULL !
 
Enter command:
DECLARE ERG1 CURSOR FOR
SELECT EXPRESSION1, MAX ( EXPRESSION2 ) EXP1 FROM V6
   WHERE EXPRESSION1 <> V6.EXPRESSION2
   GROUP BY EXPRESSION1
   HAVING COUNT(*) = 2 !
 
resultcount :                     1
 
Enter command:
FETCH ERG1 !
 
EXPRESSION1       :  -1.9989990000000000000000000000000000000E+02
EXP1              :   4.8000000000000000000000000000000000000E+01
 
resultcount :                     1
 
Enter command:
CREATE VIEW V7 AS
SELECT AVG ( T1XC2), AVG ( DISTINCT T1XC5 ) , T1.T1XC5
    FROM T1, T2
    GROUP BY T1XC1 , KERN.T1.T1XC5
    HAVING SUM ( T1XC5 ) > 0 !
 
Enter command:
SELECT * FROM V7 !
 
*** SQLSTATEMENT HAS BEEN OPTIMIZED
 
resultcount :                     3
 
Enter command:
FETCH !
 
EXPRESSION1       :  -8.0000000000000000000000000000000000000E+01
EXPRESSION2       :   1.0000000000000000000000000000000000000E-09
T1XC5             :   1.000000000E-09
-----------------------------------------------------------------
EXPRESSION1       :   5.0000000000000000000000000000000000000E+00
EXPRESSION2       :   1.0000000000000000000000000000000000000E+03
T1XC5             :   1.000000000E+03
-----------------------------------------------------------------
EXPRESSION1       :  ????????????????????????????????????????????
EXPRESSION2       :   8.0000000000000000000000000000000000000E-30
T1XC5             :   8.000000000E-30
 
resultcount :                     3
 
Enter command:
CREATE VIEW V8 AS
SELECT SUM( T1XC2) , COUNT ( T1XC2) , AVG (T1XC2)
    FROM T1,T3 GROUP BY T1XC1, T3.T3XC4 !
 
Enter command:
SELECT * FROM V8 WHERE EXPRESSION2 < 3 ORDER BY 1 !
 
resultcount :                     4
 
Enter command:
FETCH !
 
EXPRESSION1       :  -1.6000000000000000000000000000000000000E+02
EXPRESSION2       :            2
EXPRESSION3       :  -8.0000000000000000000000000000000000000E+01
-----------------------------------------------------------------
EXPRESSION1       :  -1.6000000000000000000000000000000000000E+02
EXPRESSION2       :            2
EXPRESSION3       :  -8.0000000000000000000000000000000000000E+01
-----------------------------------------------------------------
EXPRESSION1       :  ????????????????????????????????????????????
EXPRESSION2       :            0
EXPRESSION3       :  ????????????????????????????????????????????
-----------------------------------------------------------------
EXPRESSION1       :  ????????????????????????????????????????????
EXPRESSION2       :            0
EXPRESSION3       :  ????????????????????????????????????????????
 
resultcount :                     4
 
Enter command:
CREATE VIEW V9 AS
SELECT SUM ( T1.T1XC2 + T2.T2XC1 ),
       AVG ( T1XC4 * 5 * T2XC5 ),
       ( SUM ( DISTINCT KERN.T1.T1XC4 / T2XC5 ) )
    FROM T1, T2 GROUP BY T2XC1 !
 
Enter command:
SELECT * FROM V9 !
 
*** SQLSTATEMENT HAS BEEN OPTIMIZED
 
resultcount :                     4
 
Enter command:
FETCH !
 
EXPRESSION1       :  -1.0999250000000000000000000000000000000E+06
EXPRESSION2       :  -3.9979980000000000000000000000000000000E+06
EXPRESSION3       :  -9.9949950000000000000000000000000000000E-03
-----------------------------------------------------------------
EXPRESSION1       :  -1.0998750000000000000000000000000000000E+06
EXPRESSION2       :   1.9989990000000000000000000000000000000E+04
EXPRESSION3       :   1.9989990000000000000000000000000000000E+00
-----------------------------------------------------------------
EXPRESSION1       :  -1.0998250000000000000000000000000000000E+06
EXPRESSION2       :  ????????????????????????????????????????????
EXPRESSION3       :  ????????????????????????????????????????????
-----------------------------------------------------------------
EXPRESSION1       :  -1.0997750000000000000000000000000000000E+06
EXPRESSION2       :   9.9949950000000000000000000000000000000E+06
EXPRESSION3       :   3.9979980000000000000000000000000000000E-03
 
resultcount :                     4
 
Enter command:
CREATE TABLE I (I1 FLOAT (14), I2 FLOAT (14), I3 FIXED(18))!
 
Enter command:
CREATE VIEW V10 AS
SELECT SUM ( ALL T1.T1XC5 - T2XC4*T3XC1),
       AVG ( ALL  (T1.T1XC5  )- T2XC4 * T3XC1 ) ,
       COUNT (ALL ( T2XC4 * T3XC1 *((-1))+ T1.T1XC5 )) COL3
    FROM T1,T2, T3
    GROUP BY T3XC4 !
 
Enter command:
SELECT * FROM V10 !
 
*** SQLSTATEMENT HAS BEEN OPTIMIZED
 
resultcount :                     2
 
Enter command:
FETCH !
 
EXPRESSION1       :  -1.2400000053799999940991999999940000000E+21
EXPRESSION2       :  -5.1666666890833333087466666666416666666E+19
COL3              :           24
-----------------------------------------------------------------
EXPRESSION1       :  -2.6400000046799999942111999999940000000E+21
EXPRESSION2       :  -1.1000000019499999975879999999975000000E+20
COL3              :           24
 
resultcount :                     2
 
Enter command:
INSERT I SELECT * FROM V10 !
 
Enter command:
SELECT * FROM I !
 
resultcount :               unknown
 
Enter command:
FETCH !
 
I1                   | I2                   | I3
---------------------+----------------------+--------------------
-1.2400000053800E+21 | -5.1666666890833E+19 |                  24
-2.6400000046800E+21 | -1.1000000019500E+20 |                  24
 
resultcount :                     2
 
Enter command:
DECLARE ERG3 CURSOR FOR
SELECT MIN (V9.EXPRESSION1) N1, V10.EXPRESSION2 N2
   FROM V9, V10
   WHERE V9.EXPRESSION2 IS NOT NULL OR V9.EXPRESSION3 < 0
   GROUP BY V10.EXPRESSION1, V10.EXPRESSION2
   HAVING SUM (V9.EXPRESSION2) - SUM (V10.EXPRESSION2) > 0
   ORDER BY 2 DESC !
 
resultcount :                     2
 
Enter command:
FETCH ERG3 !
 
N1                :  -1.0999250000000000000000000000000000000E+06
N2                :  -5.1666666890833333087466666666416666666E+19
-----------------------------------------------------------------
N1                :  -1.0999250000000000000000000000000000000E+06
N2                :  -1.1000000019499999975879999999975000000E+20
 
resultcount :                     2
 
Enter command:
DECLARE ERG4 CURSOR FOR
SELECT N1 FROM ERG3 !
 
resultcount :                     2
 
Enter command:
FETCH ERG4 !
 
N1
--------------------------------------------
-1.0999250000000000000000000000000000000E+06
-1.0999250000000000000000000000000000000E+06
 
resultcount :                     2
 
Enter command:
SELECT * FROM V10 !
 
*** SQLSTATEMENT HAS BEEN OPTIMIZED
 
resultcount :                     2
 
Enter command:
FETCH!
 
EXPRESSION1       :  -1.2400000053799999940991999999940000000E+21
EXPRESSION2       :  -5.1666666890833333087466666666416666666E+19
COL3              :           24
-----------------------------------------------------------------
EXPRESSION1       :  -2.6400000046799999942111999999940000000E+21
EXPRESSION2       :  -1.1000000019499999975879999999975000000E+20
COL3              :           24
 
resultcount :                     2
 
Enter command:
SELECT V10.EXPRESSION1, T1.T1XC1, T1.T1XC2 FROM V10, T1 !
 
resultcount :                    12
 
Enter command:
FETCH !
 
EXPRESSION1       :  -1.2400000053799999940991999999940000000E+21
T1XC1             :  Hans
T1XC2             :          100
-----------------------------------------------------------------
EXPRESSION1       :  -2.6400000046799999942111999999940000000E+21
T1XC1             :  Hans
T1XC2             :          100
-----------------------------------------------------------------
EXPRESSION1       :  -1.2400000053799999940991999999940000000E+21
T1XC1             :  ?????
T1XC2             :  ???????????
-----------------------------------------------------------------
EXPRESSION1       :  -2.6400000046799999942111999999940000000E+21
T1XC1             :  ?????
T1XC2             :  ???????????
-----------------------------------------------------------------
EXPRESSION1       :  -1.2400000053799999940991999999940000000E+21
T1XC1             :  Karin
T1XC2             :      -600000
-----------------------------------------------------------------
EXPRESSION1       :  -2.6400000046799999942111999999940000000E+21
T1XC1             :  Karin
T1XC2             :      -600000
-----------------------------------------------------------------
EXPRESSION1       :  -1.2400000053799999940991999999940000000E+21
T1XC1             :  Karin
T1XC2             :            5
-----------------------------------------------------------------
EXPRESSION1       :  -2.6400000046799999942111999999940000000E+21
T1XC1             :  Karin
T1XC2             :            5
-----------------------------------------------------------------
EXPRESSION1       :  -1.2400000053799999940991999999940000000E+21
T1XC1             :  Hans
T1XC2             :      -500000
-----------------------------------------------------------------
EXPRESSION1       :  -2.6400000046799999942111999999940000000E+21
T1XC1             :  Hans
T1XC2             :      -500000
-----------------------------------------------------------------
EXPRESSION1       :  -1.2400000053799999940991999999940000000E+21
T1XC1             :   Marianne
T1XC2             :          -80
-----------------------------------------------------------------
EXPRESSION1       :  -2.6400000046799999942111999999940000000E+21
T1XC1             :   Marianne
T1XC2             :          -80
 
resultcount :                    12
 
Enter command:
PARS_THEN_EX !
 
Enter command:
SELECT V10.EXPRESSION1, T1.T1XC1, T1.T1XC2 FROM V10, T1 !
 
resultcount :                    12
 
Enter command:
FETCH INTO :A, :B, :C!
 
EXPRESSION1       :  -1.2400000053799999940991999999940000000E+21
T1XC1             :  Hans
T1XC2             :          100
-----------------------------------------------------------------
EXPRESSION1       :  -2.6400000046799999942111999999940000000E+21
T1XC1             :  Hans
T1XC2             :          100
-----------------------------------------------------------------
EXPRESSION1       :  -1.2400000053799999940991999999940000000E+21
T1XC1             :  ?????
T1XC2             :  ???????????
-----------------------------------------------------------------
EXPRESSION1       :  -2.6400000046799999942111999999940000000E+21
T1XC1             :  ?????
T1XC2             :  ???????????
-----------------------------------------------------------------
EXPRESSION1       :  -1.2400000053799999940991999999940000000E+21
T1XC1             :  Karin
T1XC2             :      -600000
-----------------------------------------------------------------
EXPRESSION1       :  -2.6400000046799999942111999999940000000E+21
T1XC1             :  Karin
T1XC2             :      -600000
-----------------------------------------------------------------
EXPRESSION1       :  -1.2400000053799999940991999999940000000E+21
T1XC1             :  Karin
T1XC2             :            5
-----------------------------------------------------------------
EXPRESSION1       :  -2.6400000046799999942111999999940000000E+21
T1XC1             :  Karin
T1XC2             :            5
-----------------------------------------------------------------
EXPRESSION1       :  -1.2400000053799999940991999999940000000E+21
T1XC1             :  Hans
T1XC2             :      -500000
-----------------------------------------------------------------
EXPRESSION1       :  -2.6400000046799999942111999999940000000E+21
T1XC1             :  Hans
T1XC2             :      -500000
-----------------------------------------------------------------
EXPRESSION1       :  -1.2400000053799999940991999999940000000E+21
T1XC1             :   Marianne
T1XC2             :          -80
-----------------------------------------------------------------
EXPRESSION1       :  -2.6400000046799999942111999999940000000E+21
T1XC1             :   Marianne
T1XC2             :          -80
 
resultcount :                    12
 
Enter command:
PARS_EXECUTE !
 
Enter command:
ROLLBACK WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 ( T1XC1 FIXED(5) KEY,
                  T1XC2 CHAR(5),
                  T1XC3 CHAR(5) ) !
 
Enter command:
CREATE TABLE T2 ( T2XC1 FIXED(5),
                  T2XC2 FIXED(5),
                  T2XC3 CHAR(5) ) !
 
Enter command:
INSERT T1 VALUES ( 2, 'aaa' , 'sss' ) !
 
Enter command:
INSERT T1 VALUES ( 3, 'nnn' , 'nnn' ) !
 
Enter command:
INSERT T1 VALUES ( 4, 'qqq' , 'aaa' ) !
 
Enter command:
INSERT T1 VALUES ( 9, 'aaa' , 'bbb' ) !
 
Enter command:
INSERT T1 VALUES ( 6, 'ccc' , 'bbb' ) !
 
Enter command:
INSERT T1 VALUES ( 8, 'aaa' , 'bbb' ) !
 
Enter command:
INSERT T1 VALUES ( 5, NULL  , NULL  ) !
 
Enter command:
INSERT T1 VALUES ( 1, 'aaa' , 'sss' ) !
 
Enter command:
INSERT T2 VALUES ( 3, 2, 'aaa' ) !
 
Enter command:
INSERT T2 VALUES ( 4, 1, 'nnn' ) !
 
Enter command:
INSERT T2 VALUES ( 4, 2, 'nnn' ) !
 
Enter command:
INSERT T2 VALUES ( 8, NULL, 'bbb' ) !
 
Enter command:
INSERT T2 VALUES ( 1, 4, 'sss' ) !
 
Enter command:
INSERT T2 VALUES ( NULL, 2, 'bbb' ) !
 
Enter command:
INSERT T2 VALUES ( 5, 1, NULL ) !
 
Enter command:
INSERT T2 VALUES ( 1, 8, 'aaa' ) !
 
Enter command:
INSERT T2 VALUES ( 1, 4, 'bbb' ) !
 
Enter command:
INSERT T2 VALUES ( 3, 2, 'nnn' ) !
 
Enter command:
INSERT T2 VALUES ( 2, 1, 'sss' ) !
 
Enter command:
INSERT T2 VALUES ( 3, 2, 'bbb' ) !
 
Enter command:
INSERT T2 VALUES ( 2, 1, 'bbb' ) !
 
Enter command:
CREATE VIEW V1 AS
  SELECT DISTINCT SUM ( DISTINCT 5 + T2XC1 ) + 2 * SUM ( T1XC1 ),
                  COUNT ( T2XC1 ),
                  MAX ( T1XC2 ),
                  T2XC2
  FROM T1, T2
  WHERE T1XC3 = T2.T2XC3
    AND T1XC1 > T2XC1 - 1
  GROUP BY T2XC2, T1XC2
  HAVING MIN ( T2XC1 ) < MAX ( ALL T1XC1 )
     AND AVG ( DISTINCT T1.T1XC1 ) + MIN ( T1XC1 ) <= KERN.T2.T2XC2 !
 
Enter command:
SELECT * FROM V1 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1       :   1.4000000000000000000000000000000000000E+01
EXPRESSION2       :            1
EXPRESSION3       :  qqq
T2XC2             :       8
 
resultcount :                     1
 
Enter command:
SELECT V1.T2XC2, REF.T2XC2, V1.T2XC2 + REF.T2XC2 FROM V1, V1 REF
   WHERE V1.T2XC2 = REF.T2XC2 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
T2XC2  | T2XC2  | EXPRESSION1
-------+--------+------------
     8 |      8 |      16
 
resultcount :                     1
 
Enter command:
ROLLBACK WORK !
 
Enter command:
CREATE TABLE T ( A CHAR (8))!
 
Enter command:
INSERT T SET A = 'aaa'!
 
Enter command:
CREATE TABLE T1 (B CHAR (8))!
 
Enter command:
CREATE VIEW V1 AS SELECT * FROM T,T1
   WHERE T.A = T1.B(+) !
 
Enter command:
SELECT * FROM V1 !
 
resultcount :                     1
 
Enter command:
FETCH!
 
A        | B
---------+---------
aaa      | ????????
 
resultcount :                     1
 
Enter command:
SELECT * INTO :A, :B FROM V1 WHERE V1.A = 'aaa'!
 
A                 :  aaa
B                 :  ?????
 
Enter command:
PARS_THEN_EX !
 
Enter command:
SELECT * FROM V1 !
 
resultcount :                     1
 
Enter command:
FETCH!
 
A        | B
---------+---------
aaa      | ????????
 
resultcount :                     1
 
Enter command:
SELECT * INTO :A, :B FROM V1 WHERE A = 'aaa'!
 
A                 :  aaa
B                 :  ?????
 
Enter command:
PARS_EXECUTE!
 
Enter command:
ROLLBACK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 ( A1 FIXED(5), B1 FIXED(5),
                  C1 FIXED(18), D1 FIXED(18),
                  E1 FIXED(7,2), F1 FIXED(7,2),
                  G1 FLOAT(3), H1 FLOAT(3), I1 FLOAT(18), J1 FLOAT(18),
                  K1 CHAR(5), L1 CHAR(5),
                  M1 TIME, N1 TIME, O1 DATE, P1 DATE ) !
 
Enter command:
CREATE TABLE T2 ( A2 FIXED(5), B2 FIXED(5),
                  C2 FIXED(18), D2 FIXED(18),
                  E2 FIXED(7,2), F2 FIXED(7,2),
                  G2 FLOAT(3), H2 FLOAT(3), I2 FLOAT(18), J2 FLOAT(18),
                  K2 CHAR(5), L2 CHAR(5),
                  M2 TIME, N2 TIME, O2 DATE, P2 DATE ) !
 
Enter command:
INSERT T1 VALUES ( 55555, 33333, 666666666666666666, 777777777777777777,
   22222.22, 99999.99, 8.88E+62, 7.77E+62, 8.88888888888888888E+62,
   9.99999999999999999E+62, 'aaaaa', 'bbbbb', '00214738', '23453612',
   '19841224', '20000712' ) !
 
Enter command:
INSERT T2 VALUES ( 55555, 33333, 666666666666666666, 777777777777777777,
   22222.22, 99999.99, 8.88E+62, 7.77E+62, 8.88888888888888888E+62,
   9.99999999999999999E+62, 'aaaaa', 'bbbbb', '00214738', '23453612',
   '19841224', '20000712' ) !
 
Enter command:
INSERT T1 VALUES ( NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
   NULL, NULL, NULL, NULL, NULL, NULL, NULL ) !
 
Enter command:
INSERT T2 VALUES ( NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
   NULL, NULL, NULL, NULL, NULL, NULL, NULL ) !
 
Enter command:
INSERT T1 VALUES ( 0,0,0,0,0,0,0,0,0,0, 'a' , 'a' ,
   '11111111', '11111111' , '11111111', '11111111' ) !
 
Enter command:
INSERT T2 VALUES ( 0,0,0,0,0,0,0,0,0,0, 'a' , 'a' ,
   '11111111', '11111111' , '11111111', '11111111' ) !
 
Enter command:
COMMIT WORK !
 
Enter command:
CREATE VIEW V1 (A1,I1,C1,C2) AS SELECT A1, I1, A1/B1, I1*J1 FROM T1 !
 
Enter command:
COMMIT WORK !
 
Enter command:
CREATE VIEW V2 ( Y1, Y2 ) AS SELECT A1, I1+J1 FROM T1 !
 
Enter command:
SELECT C1 * Y2 FROM V1, V2 !
 
resultcount :                     9
 
Enter command:
FETCH !
 
EXPRESSION1
--------------------------------------------
############################################
############################################
############################################
????????????????????????????????????????????
????????????????????????????????????????????
############################################
 0.0000000000000000000000000000000000000E+00
????????????????????????????????????????????
############################################
 
resultcount :                     9
 
Enter command:
SELECT * FROM V1, V2 WHERE Y1 > 0 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
A1                :   55555
I1                :   8.88888888888888888E+62
C1                :       1.666666666666666666666666666666667
C2                :  ############################################
Y1                :   55555
Y2                :  ############################################
-----------------------------------------------------------------
A1                :  ??????
I1                :  ????????????????????????
C1                :  ????????????????????????????????????????
C2                :  ????????????????????????????????????????????
Y1                :   55555
Y2                :  ############################################
-----------------------------------------------------------------
A1                :       0
I1                :   0.00000000000000000E+00
C1                :  ########################################
C2                :   0.0000000000000000000000000000000000000E+00
Y1                :   55555
Y2                :  ############################################
 
resultcount :                     3
 
Enter command:
SELECT * FROM V1, V2 WHERE A1 > 0 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
A1                :   55555
I1                :   8.88888888888888888E+62
C1                :       1.666666666666666666666666666666667
C2                :  ############################################
Y1                :   55555
Y2                :  ############################################
-----------------------------------------------------------------
A1                :   55555
I1                :   8.88888888888888888E+62
C1                :       1.666666666666666666666666666666667
C2                :  ############################################
Y1                :  ??????
Y2                :  ????????????????????????????????????????????
-----------------------------------------------------------------
A1                :   55555
I1                :   8.88888888888888888E+62
C1                :       1.666666666666666666666666666666667
C2                :  ############################################
Y1                :       0
Y2                :   0.0000000000000000000000000000000000000E+00
 
resultcount :                     3
 
Enter command:
CREATE VIEW V3 (V31, V32 ) AS SELECT C1, Y2 FROM V1,V2 !
 
Enter command:
SELECT * FROM V3 !
 
resultcount :                     9
 
Enter command:
FETCH !
 
V31               :       1.666666666666666666666666666666667
V32               :  ############################################
-----------------------------------------------------------------
V31               :  ????????????????????????????????????????
V32               :  ############################################
-----------------------------------------------------------------
V31               :  ########################################
V32               :  ############################################
-----------------------------------------------------------------
V31               :       1.666666666666666666666666666666667
V32               :  ????????????????????????????????????????????
-----------------------------------------------------------------
V31               :  ????????????????????????????????????????
V32               :  ????????????????????????????????????????????
-----------------------------------------------------------------
V31               :  ########################################
V32               :  ????????????????????????????????????????????
-----------------------------------------------------------------
V31               :       1.666666666666666666666666666666667
V32               :   0.0000000000000000000000000000000000000E+00
-----------------------------------------------------------------
V31               :  ????????????????????????????????????????
V32               :   0.0000000000000000000000000000000000000E+00
-----------------------------------------------------------------
V31               :  ########################################
V32               :   0.0000000000000000000000000000000000000E+00
 
resultcount :                     9
 
Enter command:
CREATE VIEW V4 (V41 ) AS SELECT C2*Y2 FROM V1, V2 !
 
Enter command:
SELECT * FROM V4 !
 
resultcount :                     9
 
Enter command:
FETCH !
 
V41
--------------------------------------------
############################################
############################################
############################################
############################################
????????????????????????????????????????????
????????????????????????????????????????????
############################################
????????????????????????????????????????????
 0.0000000000000000000000000000000000000E+00
 
resultcount :                     9
 
Enter command:
CREATE VIEW V5 ( V51) AS SELECT A1 FROM V1 WHERE C1 > 0 !
 
Enter command:
SELECT * FROM V5 !
 
resultcount :               unknown
 
Enter command:
FETCH !
 
V51
------
 55555
 
resultcount :                     1
 
***ERROR  -3024 Invalid numeric expression                                 0001
 
Enter command:
COMMIT WORK !
 
Enter command:
CREATE VIEW V6 (V61, V62) AS SELECT I1*J1, I2*J2 FROM T1,T2 !
 
Enter command:
CREATE VIEW V7 ( V71 ) AS SELECT V61*V62 FROM V6 !
 
Enter command:
SELECT * FROM V7 !
 
resultcount :                     9
 
Enter command:
FETCH !
 
V71
--------------------------------------------
############################################
############################################
############################################
############################################
????????????????????????????????????????????
????????????????????????????????????????????
############################################
????????????????????????????????????????????
 0.0000000000000000000000000000000000000E+00
 
resultcount :                     9
 
Enter command:
SELECT * FROM V7 WHERE V71 > 0 !
 
***ERROR  -3024 Invalid numeric expression                                 0001
 
Enter command:
FETCH !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 ( S1 FIXED(5), S2 FIXED(5), S3 FIXED(5) ) !
 
Enter command:
INSERT T1 VALUES ( NULL, NULL, NULL ) !
 
Enter command:
INSERT T1 VALUES ( NULL, NULL, 1    ) !
 
Enter command:
INSERT T1 VALUES ( NULL, 2   , NULL ) !
 
Enter command:
INSERT T1 VALUES ( NULL, NULL, 3    ) !
 
Enter command:
INSERT T1 VALUES ( NULL, 4   , 4    ) !
 
Enter command:
INSERT T1 VALUES ( 5   , NULL, 5    ) !
 
Enter command:
INSERT T1 VALUES ( 6   , 6   , NULL ) !
 
Enter command:
COMMIT WORK !
 
Enter command:
CREATE TABLE T2 ( C1 CHAR(8) , C2 CHAR(8) ,
                  C3 CHAR(8) ASCII, C4 CHAR(8) ASCII,
                  DATE1 DATE, DATE2 DATE, TIME1 TIME, TIME2 TIME ) !
 
Enter command:
INSERT T2 VALUES ( NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL ) !
 
Enter command:
INSERT T2 VALUES
   ( 'a', NULL, 'b', NULL, '19831212', NULL, '22223625', NULL ) !
 
Enter command:
INSERT T2 VALUES
   ( NULL, 'c', NULL, 'd', NULL, '19870904', NULL, '33334213' ) !
 
Enter command:
COMMIT WORK !
 
Enter command:
CREATE TABLE T4 ( SPALTE FLOAT(18) ) !
 
Enter command:
CREATE TABLE T5 ( COL    FLOAT(18) ) !
 
Enter command:
INSERT T4 VALUES ( 9E+62 ) !
 
Enter command:
INSERT T5 VALUES ( 9E+62 ) !
 
Enter command:
SELECT VALUE(SPALTE+COL, 12 ) FROM T4,T5 !
 
resultcount :                     1
 
Enter command:
SELECT * FROM T4,T5 WHERE VALUE( SPALTE+COL,SPALTE ) > 0 !
 
resultcount :                     1
 
Enter command:
SELECT VALUE( SPALTE, COL) FROM T4,T5 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1
------------------------
 9.00000000000000000E+62
 
resultcount :                     1
 
Enter command:
CREATE VIEW V1(NEU) AS SELECT T4.SPALTE + T5.COL FROM T4,T5 !
 
Enter command:
SELECT * FROM V1 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
NEU
--------------------------------------------
############################################
 
resultcount :                     1
 
Enter command:
SELECT VALUE ( NEU, NEU) FROM V1 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1
--------------------------------------------
############################################
 
resultcount :                     1
 
Enter command:
SELECT VALUE ( 'aaa',NEU) FROM V1 !
 
***ERROR  -8006 Data types must be compatible                              0022
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T ( C FIXED(1) ) !
 
Enter command:
CREATE VIEW V1 (COL1,COL2) AS SELECT * FROM T, T REF !
 
Enter command:
CREATE VIEW V2
  ( A1,A2,A3,A4,A5,A6,A7,A8,A9,
  A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,
  A20,A21,A22,A23,A24,A25,A26,A27,A28,A29,
  A30,A31,A32,A33,A34,A35,A36,A37,A38,A39,
  A40,A41,A42,A43,A44,A45,A46,A47,A48,A49,
  A50,A51,A52,A53,A54,A55,A56,A57,A58,A59,
  A60,A61,A62,A63,A64)
  AS SELECT
         T001.C,T002.C,T003.C,T004.C,T005.C,T006.C,T007.C,T008.C,T009.C,
  T010.C,T011.C,T012.C,T013.C,T014.C,T015.C,T016.C,T017.C,T018.C,T019.C,
  T020.C,T021.C,T022.C,T023.C,T024.C,T025.C,T026.C,T027.C,T028.C,T029.C,
  T030.C,T031.C,T032.C,T033.C,T034.C,T035.C,T036.C,T037.C,T038.C,T039.C,
  T040.C,T041.C,T042.C,T043.C,T044.C,T045.C,T046.C,T047.C,T048.C,T049.C,
  T050.C,T051.C,T052.C,T053.C,T054.C,T055.C,T056.C,T057.C,T058.C,T059.C,
  T060.C,T061.C,T062.C,T063.C,T064.C
  FROM
  T T001,T T002,T T003,T T004,T T005,T T006,T T007,T T008,T T009,
  T T010,T T011,T T012,T T013,T T014,T T015,T T016,T T017,T T018,T T019,
  T T020,T T021,T T022,T T023,T T024,T T025,T T026,T T027,T T028,T T029,
  T T030,T T031,T T032,T T033,T T034,T T035,T T036,T T037,T T038,T T039,
  T T040,T T041,T T042,T T043,T T044,T T045,T T046,T T047,T T048,T T049,
  T T050,T T051,T T052,T T053,T T054,T T055,T T056,T T057,T T058,T T059,
  T T060,T T061,T T062,T T063,T T064,T T065,T T066,T T067,T T068,T T069,
  T T070,T T071,T T072,T T073,T T074,T T075,T T076,T T077,T T078,T T079,
  T T080,T T081,T T082,T T083,T T084,T T085,T T086,T T087,T T088,T T089,
  T T090,T T091,T T092,T T093,T T094,T T095,T T096,T T097,T T098,T T099,
  T T100,T T101,T T102,T T103,T T104,T T105,T T106,T T107,T T108,T T109,
  T T110,T T111,T T112,T T113,T T114,T T115,T T116,T T117,T T118,T T119,
  T T120,T T121,T T122,T T123,T T124,T T125,T T126,T T127,T T128,T T129,
  T T130,T T131,T T132,T T133,T T134,T T135,T T136,T T137,T T138,T T139,
  T T140,T T141,T T142,T T143,T T144,T T145,T T146,T T147,T T148,T T149,
  T T150,T T151,T T152,T T153,T T154,T T155,T T156,T T157,T T158,T T159,
  T T160,T T161,T T162,T T163,T T164,T T165,T T166,T T167,T T168,T T169,
  T T170,T T171,T T172,T T173,T T174,T T175,T T176,T T177,T T178,T T179,
  T T180,T T181,T T182,T T183 !
 
Enter command:
CREATE VIEW V3
  ( A1,A2,A3,A4,A5,A6,A7,A8,A9,
  A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,
  A20,A21,A22,A23,A24,A25,A26,A27,A28,A29,
  A30,A31,A32,A33,A34,A35,A36,A37,A38,A39,
  A40,A41,A42,A43,A44,A45,A46,A47,A48,A49,
  A50,A51,A52,A53,A54,A55,A56,A57,A58,A59,
  A60,A61,A62,A63,A64,A65)
  AS SELECT
         T001.C,T002.C,T003.C,T004.C,T005.C,T006.C,T007.C,T008.C,T009.C,
  T010.C,T011.C,T012.C,T013.C,T014.C,T015.C,T016.C,T017.C,T018.C,T019.C,
  T020.C,T021.C,T022.C,T023.C,T024.C,T025.C,T026.C,T027.C,T028.C,T029.C,
  T030.C,T031.C,T032.C,T033.C,T034.C,T035.C,T036.C,T037.C,T038.C,T039.C,
  T040.C,T041.C,T042.C,T043.C,T044.C,T045.C,T046.C,T047.C,T048.C,T049.C,
  T050.C,T051.C,T052.C,T053.C,T054.C,T055.C,T056.C,T057.C,T058.C,T059.C,
  T060.C,T061.C,T062.C,T063.C,T064.C,T065.C
  FROM
  T T001,T T002,T T003,T T004,T T005,T T006,T T007,T T008,T T009,
  T T010,T T011,T T012,T T013,T T014,T T015,T T016,T T017,T T018,T T019,
  T T020,T T021,T T022,T T023,T T024,T T025,T T026,T T027,T T028,T T029,
  T T030,T T031,T T032,T T033,T T034,T T035,T T036,T T037,T T038,T T039,
  T T040,T T041,T T042,T T043,T T044,T T045,T T046,T T047,T T048,T T049,
  T T050,T T051,T T052,T T053,T T054,T T055,T T056,T T057,T T058,T T059,
  T T060,T T061,T T062,T T063,T T064,T T065,T T066,T T067,T T068,T T069,
  T T070,T T071,T T072,T T073,T T074,T T075,T T076,T T077,T T078,T T079,
  T T080,T T081,T T082,T T083,T T084,T T085,T T086,T T087,T T088,T T089,
  T T090,T T091,T T092,T T093,T T094,T T095,T T096,T T097,T T098,T T099,
  T T100,T T101,T T102,T T103,T T104,T T105,T T106,T T107,T T108,T T109,
  T T110,T T111,T T112,T T113,T T114,T T115,T T116,T T117,T T118,T T119,
  T T120,T T121,T T122,T T123,T T124,T T125,T T126,T T127,T T128,T T129,
  T T130,T T131,T T132,T T133,T T134,T T135,T T136,T T137,T T138,T T139,
  T T140,T T141,T T142,T T143,T T144,T T145,T T146,T T147,T T148,T T149,
  T T150,T T151,T T152,T T153,T T154,T T155,T T156,T T157,T T158,T T159,
  T T160,T T161,T T162,T T163,T T164,T T165,T T166,T T167,T T168,T T169,
  T T170,T T171,T T172,T T173,T T174,T T175,T T176,T T177,T T178,T T179,
  T T180,T T181,T T182,T T183,T T184 !
 
***ERROR  -1014 Too many source tables                                     0001
 
Enter command:
CREATE VIEW V4
  ( A1,A2,A3,A4,A5,A6,A7,A8,A9,
  A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,
  A20,A21,A22,A23,A24,A25,A26,A27,A28,A29,
  A30,A31,A32,A33,A34,A35,A36,A37,A38,A39,
  A40,A41,A42,A43,A44,A45,A46,A47,A48,A49,
  A50,A51,A52,A53,A54,A55,A56,A57,A58,A59,
  A60,A61,A62,A63,A64)
  AS SELECT
         T001.C,T002.C,T003.C,T004.C,T005.C,T006.C,T007.C,T008.C,T009.C,
  T010.C,T011.C,T012.C,T013.C,T014.C,T015.C,T016.C,T017.C,T018.C,T019.C,
  T020.C,T021.C,T022.C,T023.C,T024.C,T025.C,T026.C,T027.C,T028.C,T029.C,
  T030.C,T031.C,T032.C,T033.C,T034.C,T035.C,T036.C,T037.C,T038.C,T039.C,
  T040.C,T041.C,T042.C,T043.C,T044.C,T045.C,T046.C,T047.C,T048.C,T049.C,
  T050.C,T051.C,T052.C,T053.C,T054.C,T055.C,T056.C,T057.C,T058.C,T059.C,
  T060.C,T061.C,T062.C,T063.C,T064.C
  FROM
  T T001,T T002,T T003,T T004,T T005,T T006,T T007,T T008,T T009,
  T T010,T T011,T T012,T T013,T T014,T T015,T T016,T T017,T T018,T T019,
  T T020,T T021,T T022,T T023,T T024,T T025,T T026,T T027,T T028,T T029,
  T T030,T T031,T T032,T T033,T T034,T T035,T T036,T T037,T T038,T T039,
  T T040,T T041,T T042,T T043,T T044,T T045,T T046,T T047,T T048,T T049,
  T T050,T T051,T T052,T T053,T T054,T T055,T T056,T T057,T T058,T T059,
  T T060,T T061,T T062,T T063,T T064,T T065,T T066,T T067,T T068,T T069,
  T T070,T T071,T T072,T T073,T T074,T T075,T T076,T T077,T T078,T T079,
  T T080,T T081,T T082,T T083,T T084,T T085,T T086,T T087,T T088,T T089,
  T T090,T T091,T T092,T T093,T T094,T T095,T T096,T T097,T T098,T T099,
  T T100,T T101,T T102,T T103,T T104,T T105,T T106,T T107,T T108,T T109,
  T T110,T T111,T T112,T T113,T T114,T T115,T T116,T T117,T T118,T T119,
  T T120,T T121,T T122,T T123,T T124,T T125,T T126,T T127,T T128,T T129,
  T T130,T T131,T T132,T T133,T T134,T T135,T T136,T T137,T T138,T T139,
  T T140,T T141,T T142,T T143,T T144,T T145,T T146,T T147,T T148,T T149,
  T T150,T T151,T T152,T T153,T T154,T T155,T T156,T T157,T T158,T T159,
  T T160,T T161,T T162,T T163,T T164,T T165,T T166,T T167,T T168,T T169,
  T T170,T T171,T T172,T T173,T T174,T T175,T T176,T T177,T T178,T T179,
  T T180,T T181, V1 !
 
Enter command:
CREATE VIEW V5
  ( A1,A2,A3,A4,A5,A6,A7,A8,A9,
  A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,
  A20,A21,A22,A23,A24,A25,A26,A27,A28,A29,
  A30,A31,A32,A33,A34,A35,A36,A37,A38,A39,
  A40,A41,A42,A43,A44,A45,A46,A47,A48,A49,
  A50,A51,A52,A53,A54,A55,A56,A57,A58,A59,
  A60,A61,A62)
  AS SELECT
         T001.C,T002.C,T003.C,T004.C,T005.C,T006.C,T007.C,T008.C,T009.C,
  T010.C,T011.C,T012.C,T013.C,T014.C,T015.C,T016.C,T017.C,T018.C,T019.C,
  T020.C,T021.C,T022.C,T023.C,T024.C,T025.C,T026.C,T027.C,T028.C,T029.C,
  T030.C,T031.C,T032.C,T033.C,T034.C,T035.C,T036.C,T037.C,T038.C,T039.C,
  T040.C,T041.C,T042.C,T043.C,T044.C,T045.C,T046.C,T047.C,T048.C,T049.C,
  T050.C,T051.C,T052.C,T053.C,T054.C,T055.C,T056.C,T057.C,T058.C,T059.C,
  T060.C,T061.C,T062.C
  FROM
  T T001,T T002,T T003,T T004,T T005,T T006,T T007,T T008,T T009,
  T T010,T T011,T T012,T T013,T T014,T T015,T T016,T T017,T T018,T T019,
  T T020,T T021,T T022,T T023,T T024,T T025,T T026,T T027,T T028,T T029,
  T T030,T T031,T T032,T T033,T T034,T T035,T T036,T T037,T T038,T T039,
  T T040,T T041,T T042,T T043,T T044,T T045,T T046,T T047,T T048,T T049,
  T T050,T T051,T T052,T T053,T T054,T T055,T T056,T T057,T T058,T T059,
  T T060,T T061,T T062,T T063,T T064,T T065,T T066,T T067,T T068,T T069,
  T T070,T T071,T T072,T T073,T T074,T T075,T T076,T T077,T T078,T T079,
  T T080,T T081,T T082,T T083,T T084,T T085,T T086,T T087,T T088,T T089,
  T T090,T T091,T T092,T T093,T T094,T T095,T T096,T T097,T T098,T T099,
  T T100,T T101,T T102,T T103,T T104,T T105,T T106,T T107,T T108,T T109,
  T T110,T T111,T T112,T T113,T T114,T T115,T T116,T T117,T T118,T T119,
  T T120,T T121,T T122,T T123,T T124,T T125,T T126,T T127,T T128,T T129,
  T T130,T T131,T T132,T T133,T T134,T T135,T T136,T T137,T T138,T T139,
  T T140,T T141,T T142,T T143,T T144,T T145,T T146,T T147,T T148,T T149,
  T T150,T T151,T T152,T T153,T T154,T T155,T T156,T T157,T T158,T T159,
  T T160,T T161,T T162,T T163,T T164,T T165,T T166,T T167,T T168,T T169,
  T T170,T T171,T T172,T T173,T T174,T T175,T T176,T T177,T T178,T T179,
  T T180,T T181 !
 
Enter command:
CREATE VIEW V6
  ( A1,A2,A3,A4,A5,A6,A7,A8,A9,
  A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,
  A20,A21,A22,A23,A24,A25,A26,A27,A28,A29,
  A30,A31,A32,A33,A34,A35,A36,A37,A38,A39,
  A40,A41,A42,A43,A44,A45,A46,A47,A48,A49,
  A50,A51,A52,A53,A54,A55,A56,A57,A58,A59,
  A60,A61,A62,A63,A64)
  AS SELECT * FROM V5, V1 !
 
Enter command:
CREATE VIEW V7
  ( A1,A2,A3,A4,A5,A6,A7,A8,A9,
  A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,
  A20,A21,A22,A23,A24,A25,A26,A27,A28,A29,
  A30,A31,A32,A33,A34,A35,A36,A37,A38,A39,
  A40,A41,A42,A43,A44,A45,A46,A47,A48,A49,
  A50,A51,A52,A53,A54,A55,A56,A57,A58,A59,
  A60,A61,A62,A63)
  AS SELECT * FROM V5, T !
 
Enter command:
INSERT T VALUES ( 1 ) !
 
Enter command:
SELECT
         T001.C,T002.C,T003.C,T004.C,T005.C,T006.C,T007.C,T008.C,T009.C,
  T010.C,T011.C,T012.C,T013.C,T014.C,T015.C,T016.C,T017.C,T018.C,T019.C,
  T020.C,T021.C,T022.C,T023.C,T024.C,T025.C,T026.C,T027.C,T028.C,T029.C,
  T030.C,T031.C,T032.C,T033.C,T034.C,T035.C,T036.C,T037.C,T038.C,T039.C,
  T040.C,T041.C,T042.C,T043.C,T044.C,T045.C,T046.C,T047.C,T048.C,T049.C,
  T050.C,T051.C,T052.C,T053.C,T054.C,T055.C,T056.C,T057.C,T058.C,T059.C,
  T060.C,T061.C,T062.C,T063.C,T064.C
  FROM
  T T001,T T002,T T003,T T004,T T005,T T006,T T007,T T008,T T009,
  T T010,T T011,T T012,T T013,T T014,T T015,T T016,T T017,T T018,T T019,
  T T020,T T021,T T022,T T023,T T024,T T025,T T026,T T027,T T028,T T029,
  T T030,T T031,T T032,T T033,T T034,T T035,T T036,T T037,T T038,T T039,
  T T040,T T041,T T042,T T043,T T044,T T045,T T046,T T047,T T048,T T049,
  T T050,T T051,T T052,T T053,T T054,T T055,T T056,T T057,T T058,T T059,
  T T060,T T061,T T062,T T063,T T064,T T065,T T066,T T067,T T068,T T069,
  T T070,T T071,T T072,T T073,T T074,T T075,T T076,T T077,T T078,T T079,
  T T080,T T081,T T082,T T083,T T084,T T085,T T086,T T087,T T088,T T089,
  T T090,T T091,T T092,T T093,T T094,T T095,T T096,T T097,T T098,T T099,
  T T100,T T101,T T102,T T103,T T104,T T105,T T106,T T107,T T108,T T109,
  T T110,T T111,T T112,T T113,T T114,T T115,T T116,T T117,T T118,T T119,
  T T120,T T121,T T122,T T123,T T124,T T125,T T126,T T127,T T128,T T129,
  T T130,T T131,T T132,T T133,T T134,T T135,T T136,T T137,T T138,T T139,
  T T140,T T141,T T142,T T143,T T144,T T145,T T146,T T147,T T148,T T149,
  T T150,T T151,T T152,T T153,T T154,T T155,T T156,T T157,T T158,T T159,
  T T160,T T161,T T162,T T163,T T164,T T165,T T166,T T167,T T168,T T169,
  T T170,T T171,T T172,T T173,T T174,T T175,T T176,T T177,T T178,T T179,
  T T180,T T181,T T182,T T183,T T184,T T185,T T186,T T187,T T188,T T189,
  T T190,T T191,T T192,T T193,T T194,T T195,T T196,T T197,T T198,T T199,
  T T200,T T201,T T202,T T203,T T204,T T205,T T206,T T207,T T208,T T209,
  T T210,T T211,T T212,T T213,T T214,T T215,T T216,T T217,T T218,T T219,
  T T220,T T221,T T222,T T223,T T224,T T225,T T226,T T227,T T228,T T229,
  T T230,T T231,T T232,T T233,T T234,T T235,T T236,T T237,T T238,T T239,
  T T240,T T241,T T242,T T243,T T244,T T245,T T246,T T247,T T248,T T249,
  T T250,T T251,T T252,T T253,T T254 !
 
resultcount :                     1
 
Enter command:
SELECT * FROM
  T T001,T T002,T T003,T T004,T T005,T T006,T T007,T T008,T T009,
  T T010,T T011,T T012,T T013,T T014,T T015,T T016,T T017,T T018,T T019,
  T T020,T T021,T T022,T T023,T T024,T T025,T T026,T T027,T T028,T T029,
  T T030,T T031,T T032,T T033,T T034,T T035,T T036,T T037,T T038,T T039,
  T T040,T T041,T T042,T T043,T T044,T T045,T T046,T T047,T T048,T T049,
  T T050,T T051,T T052,T T053,T T054,T T055,T T056,T T057,T T058,T T059,
  T T060,T T061,T T062,T T063,T T064,T T065,T T066,T T067,T T068,T T069,
  T T070,T T071,T T072,T T073,T T074,T T075,T T076,T T077,T T078,T T079,
  T T080,T T081,T T082,T T083,T T084,T T085,T T086,T T087,T T088,T T089,
  T T090,T T091,T T092,T T093,T T094,T T095,T T096,T T097,T T098,T T099,
  T T100,T T101,T T102,T T103,T T104,T T105,T T106,T T107,T T108,T T109,
  T T110,T T111,T T112,T T113,T T114,T T115,T T116,T T117,T T118,T T119,
  T T120,T T121,T T122,T T123,T T124,T T125,T T126,T T127,T T128,T T129,
  T T130,T T131,T T132,T T133,T T134,T T135,T T136,T T137,T T138,T T139,
  T T140,T T141,T T142,T T143,T T144,T T145,T T146,T T147,T T148,T T149,
  T T150,T T151,T T152,T T153,T T154,T T155,T T156,T T157,T T158,T T159,
  T T160,T T161,T T162,T T163,T T164,T T165,T T166,T T167,T T168,T T169,
  T T170,T T171,T T172,T T173,T T174,T T175,T T176,T T177,T T178,T T179,
  T T180,T T181,T T182,T T183,T T184,T T185,T T186,T T187,T T188,T T189,
  T T190,T T191,T T192,T T193,T T194,T T195,T T196,T T197,T T198,T T199,
  T T200,T T201,T T202,T T203,T T204,T T205,T T206,T T207,T T208,T T209,
  T T210,T T211,T T212,T T213,T T214,T T215,T T216,T T217,T T218,T T219,
  T T220,T T221,T T222,T T223,T T224,T T225,T T226,T T227,T T228,T T229,
  T T230,T T231,T T232,T T233,T T234,T T235,T T236,T T237,T T238,T T239,
  T T240,T T241,T T242,T T243,T T244,T T245,T T246,T T247,T T248,T T249,
  T T250,T T251,T T252,T T253,T T254,T T255 !
 
***ERROR  -1014 Too many source tables                                     0255
 
Enter command:
SELECT * FROM
  T T001,T T002,T T003,T T004,T T005,T T006,T T007,T T008,T T009,
  T T010,T T011,T T012,T T013,T T014,T T015,T T016,T T017,T T018,T T019,
  T T020,T T021,T T022,T T023,T T024,T T025,T T026,T T027,T T028,T T029,
  T T030,T T031,T T032,T T033,T T034,T T035,T T036,T T037,T T038,T T039,
  T T040,T T041,T T042,T T043,T T044,T T045,T T046,T T047,T T048,T T049,
  T T050,T T051,T T052,T T053,T T054,T T055,T T056,T T057,T T058,T T059,
  T T060,T T061,T T062,T T063,T T064,T T065,T T066,T T067,T T068,T T069,
  T T070,T T071,T T072,T T073,T T074,T T075,T T076,T T077,T T078,T T079,
  T T080,T T081,T T082,T T083,T T084,T T085,T T086,T T087,T T088,T T089,
  T T090,T T091,T T092,T T093,T T094,T T095,T T096,T T097,T T098,T T099,
  T T100,T T101,T T102,T T103,T T104,T T105,T T106,T T107,T T108,T T109,
  T T110,T T111,T T112,T T113,T T114,T T115,T T116,T T117,T T118,T T119,
  T T120,T T121,T T122,T T123,T T124,T T125,T T126,T T127,T T128,T T129,
  T T130,T T131,T T132,T T133,T T134,T T135,T T136,T T137,T T138,T T139,
  T T140,T T141,T T142,T T143,T T144,T T145,T T146,T T147,T T148,T T149,
  T T150,T T151,T T152,T T153,T T154,T T155,T T156,T T157,T T158,T T159,
  T T160,T T161,T T162,T T163,T T164,T T165,T T166,T T167,T T168,T T169,
  T T170,T T171,T T172,T T173,T T174,T T175,T T176,T T177,T T178,T T179,
  T T180,T T181,T T182,T T183,T T184,T T185,T T186,T T187,T T188,T T189,
  T T190,T T191,T T192,T T193,T T194,T T195,T T196,T T197,T T198,T T199,
  T T200,T T201,T T202,T T203,T T204,T T205,T T206,T T207,T T208,T T209,
  T T210,T T211,T T212,T T213,T T214,T T215,T T216,T T217,T T218,T T219,
  T T220,T T221,T T222,T T223,T T224,T T225,T T226,T T227,T T228,T T229,
  T T230,T T231,T T232,T T233,T T234,T T235,T T236,T T237,T T238,T T239,
  T T240,T T241,T T242,T T243,T T244,T T245,T T246,T T247,T T248,T T249,
  T T250,T T251,T T252,T T253, V1 !
 
***ERROR  -1014 Too many source tables                                     0255
 
Enter command:
SELECT
         T001.C,T002.C,T003.C,T004.C,T005.C,T006.C,T007.C,T008.C,T009.C,
  T010.C,T011.C,T012.C,T013.C,T014.C,T015.C,T016.C,T017.C,T018.C,T019.C,
  T020.C,T021.C,T022.C,T023.C,T024.C,T025.C,T026.C,T027.C,T028.C,T029.C,
  T030.C,T031.C,T032.C,T033.C,T034.C,T035.C,T036.C,T037.C,T038.C,T039.C,
  T040.C,T041.C,T042.C,T043.C,T044.C,T045.C,T046.C,T047.C,T048.C,T049.C,
  T050.C,T051.C,T052.C,T053.C,T054.C,T055.C,T056.C,T057.C,T058.C,T059.C,
  T060.C,T061.C,T062.C,T063.C,T064.C
  FROM
  T T001,T T002,T T003,T T004,T T005,T T006,T T007,T T008,T T009,
  T T010,T T011,T T012,T T013,T T014,T T015,T T016,T T017,T T018,T T019,
  T T020,T T021,T T022,T T023,T T024,T T025,T T026,T T027,T T028,T T029,
  T T030,T T031,T T032,T T033,T T034,T T035,T T036,T T037,T T038,T T039,
  T T040,T T041,T T042,T T043,T T044,T T045,T T046,T T047,T T048,T T049,
  T T050,T T051,T T052,T T053,T T054,T T055,T T056,T T057,T T058,T T059,
  T T060,T T061,T T062,T T063,T T064,T T065,T T066,T T067,T T068,T T069,
  T T070,T T071,T T072,T T073,T T074,T T075,T T076,T T077,T T078,T T079,
  T T080,T T081,T T082,T T083,T T084,T T085,T T086,T T087,T T088,T T089,
  T T090,T T091,T T092,T T093,T T094,T T095,T T096,T T097,T T098,T T099,
  T T100,T T101,T T102,T T103,T T104,T T105,T T106,T T107,T T108,T T109,
  T T110,T T111,T T112,T T113,T T114,T T115,T T116,T T117,T T118,T T119,
  T T120,T T121,T T122,T T123,T T124,T T125,T T126,T T127,T T128,T T129,
  T T130,T T131,T T132,T T133,T T134,T T135,T T136,T T137,T T138,T T139,
  T T140,T T141,T T142,T T143,T T144,T T145,T T146,T T147,T T148,T T149,
  T T150,T T151,T T152,T T153,T T154,T T155,T T156,T T157,T T158,T T159,
  T T160,T T161,T T162,T T163,T T164,T T165,T T166,T T167,T T168,T T169,
  T T170,T T171,T T172,T T173,T T174,T T175,T T176,T T177,T T178,T T179,
  T T180,T T181,T T182,T T183,T T184,T T185,T T186,T T187,T T188,T T189,
  T T190,T T191,T T192,T T193,T T194,T T195,T T196,T T197,T T198,T T199,
  T T200,T T201,T T202,T T203,T T204,T T205,T T206,T T207,T T208,T T209,
  T T210,T T211,T T212,T T213,T T214,T T215,T T216,T T217,T T218,T T219,
  T T220,T T221,T T222,T T223,T T224,T T225,T T226,T T227,T T228,T T229,
  T T230,T T231,T T232,T T233,T T234,T T235,T T236,T T237,T T238,T T239,
  T T240,T T241,T T242,T T243,T T244,T T245,T T246,T T247,T T248,T T249,
  T T250,T T251,T T252, V1 !
 
resultcount :                     1
 
Enter command:
SELECT * FROM V2 !
 
resultcount :                     1
 
Enter command:
SELECT * FROM V2, T !
 
resultcount :                     1
 
Enter command:
SELECT * FROM V4 !
 
resultcount :                     1
 
Enter command:
SELECT * FROM V4, T !
 
resultcount :                     1
 
Enter command:
SELECT * FROM V5 !
 
resultcount :                     1
 
Enter command:
SELECT * FROM V5, V1, T !
 
resultcount :                     1
 
Enter command:
SELECT * FROM V6 !
 
resultcount :                     1
 
Enter command:
SELECT * FROM V6, V1 !
 
resultcount :                     1
 
Enter command:
SELECT * FROM V6, T !
 
resultcount :                     1
 
Enter command:
SELECT * FROM V7, T !
 
resultcount :                     1
 
Enter command:
SELECT * FROM V7, T, T T1 !
 
resultcount :                     1
 
Enter command:
ROLLBACK WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST!
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T0 ( A FIXED(5) )!
 
Enter command:
CREATE TABLE T1 ( A FIXED(5) )!
 
Enter command:
INSERT T1 SET A = 1 !
 
Enter command:
INSERT T1 SET A = 2 !
 
Enter command:
INSERT T1 SET A = 3 !
 
Enter command:
INSERT T1 SET A = 4 !
 
Enter command:
INSERT T1 SET A = 5 !
 
Enter command:
INSERT T1 SET A = 2 !
 
Enter command:
INSERT T1 SET A = 3 !
 
Enter command:
INSERT T1 SET A = 4 !
 
Enter command:
CREATE TABLE T2 ( B FIXED(5) )!
 
Enter command:
INSERT T2 SET B = 3 !
 
Enter command:
INSERT T2 SET B = 4 !
 
Enter command:
INSERT T2 SET B = 5 !
 
Enter command:
INSERT T2 SET B = 6 !
 
Enter command:
INSERT T2 SET B = 7 !
 
Enter command:
INSERT T2 SET B = 4 !
 
Enter command:
INSERT T2 SET B = 5 !
 
Enter command:
INSERT T2 SET B = 6 !
 
Enter command:
COMMIT WORK !
 
Enter command:
SELECT * FROM T1, T2 WHERE A (+)= B
UNION
SELECT * FROM T1, T2 WHERE A =B (+)!
 
resultcount :                     7
 
Enter command:
FETCH !
 
A      | B
-------+-------
     1 | ??????
     2 | ??????
     3 |      3
     4 |      4
?????? |      6
     5 |      5
?????? |      7
 
resultcount :                     7
 
Enter command:
SELECT * FROM T1, T2 WHERE A (+)=B (+)!
 
resultcount :                    14
 
Enter command:
FETCH !
 
A      | B
-------+-------
     3 |      3
     3 |      3
     4 |      4
     4 |      4
     5 |      5
?????? |      6
?????? |      7
     4 |      4
     4 |      4
     5 |      5
?????? |      6
     1 | ??????
     2 | ??????
     2 | ??????
 
resultcount :                    14
 
Enter command:
SELECT DISTINCT * FROM T1, T2 WHERE NOT A =B (+)!
 
resultcount :                    22
 
Enter command:
FETCH !
 
A      | B
-------+-------
     1 |      3
     2 |      3
     1 |      4
     2 |      4
     1 |      5
     4 |      3
     3 |      4
     2 |      5
     1 |      6
     5 |      3
     3 |      5
     2 |      6
     1 |      7
     5 |      4
     4 |      5
     3 |      6
     2 |      7
 
A      | B
-------+-------
     4 |      6
     3 |      7
     5 |      6
     4 |      7
     5 |      7
 
resultcount :                    22
 
Enter command:
SELECT A, B FROM T1, T2 WHERE NOT A = B
UNION
SELECT A, NULL  FROM T1
    WHERE NOT EXISTS
         (SELECT B FROM T2 WHERE NOT T1.A = B) !
 
resultcount :                    22
 
Enter command:
FETCH !
 
A      | B
-------+-------
     1 |      3
     2 |      3
     1 |      4
     2 |      4
     1 |      5
     4 |      3
     3 |      4
     2 |      5
     1 |      6
     5 |      3
     3 |      5
     2 |      6
     1 |      7
     5 |      4
     4 |      5
     3 |      6
     2 |      7
 
A      | B
-------+-------
     4 |      6
     3 |      7
     5 |      6
     4 |      7
     5 |      7
 
resultcount :                    22
 
Enter command:
SELECT * FROM T1, T2 WHERE NOT A = B (+) ORDER BY A, B!
 
resultcount :                    56
 
Enter command:
FETCH !
 
A      | B
-------+-------
     1 |      3
     1 |      4
     1 |      4
     1 |      5
     1 |      5
     1 |      6
     1 |      6
     1 |      7
     2 |      3
     2 |      3
     2 |      4
     2 |      4
     2 |      4
     2 |      4
     2 |      5
     2 |      5
     2 |      5
 
A      | B
-------+-------
     2 |      5
     2 |      6
     2 |      6
     2 |      6
     2 |      6
     2 |      7
     2 |      7
     3 |      4
     3 |      4
     3 |      4
     3 |      4
     3 |      5
     3 |      5
     3 |      5
     3 |      5
     3 |      6
     3 |      6
 
A      | B
-------+-------
     3 |      6
     3 |      6
     3 |      7
     3 |      7
     4 |      3
     4 |      3
     4 |      5
     4 |      5
     4 |      5
     4 |      5
     4 |      6
     4 |      6
     4 |      6
     4 |      6
     4 |      7
     4 |      7
     5 |      3
 
A      | B
-------+-------
     5 |      4
     5 |      4
     5 |      6
     5 |      6
     5 |      7
 
resultcount :                    56
 
Enter command:
SELECT A, B FROM T1, T2 WHERE NOT A = B
UNION ALL
SELECT A, NULL  FROM T1
    WHERE NOT EXISTS
         (SELECT B FROM T2 WHERE NOT T1.A = B)
ORDER BY 1, 2 !
 
resultcount :                    56
 
Enter command:
FETCH !
 
A      | B
-------+-------
     1 |      3
     1 |      4
     1 |      4
     1 |      5
     1 |      5
     1 |      6
     1 |      6
     1 |      7
     2 |      3
     2 |      3
     2 |      4
     2 |      4
     2 |      4
     2 |      4
     2 |      5
     2 |      5
     2 |      5
 
A      | B
-------+-------
     2 |      5
     2 |      6
     2 |      6
     2 |      6
     2 |      6
     2 |      7
     2 |      7
     3 |      4
     3 |      4
     3 |      4
     3 |      4
     3 |      5
     3 |      5
     3 |      5
     3 |      5
     3 |      6
     3 |      6
 
A      | B
-------+-------
     3 |      6
     3 |      6
     3 |      7
     3 |      7
     4 |      3
     4 |      3
     4 |      5
     4 |      5
     4 |      5
     4 |      5
     4 |      6
     4 |      6
     4 |      6
     4 |      6
     4 |      7
     4 |      7
     5 |      3
 
A      | B
-------+-------
     5 |      4
     5 |      4
     5 |      6
     5 |      6
     5 |      7
 
resultcount :                    56
 
Enter command:
DROP TABLE T0 !
 
Enter command:
DROP TABLE T1 !
 
Enter command:
DROP TABLE T2 !
 
Enter command:
COMMIT !
 
Enter command:
CREATE TABLE T ( A CHAR (8) KEY)!
 
Enter command:
INSERT T SET A = 'aaa'!
 
Enter command:
CREATE TABLE T1 (A1 CHAR (8))!
 
Enter command:
INSERT T1 SET A1 = 'aa1'!
 
Enter command:
CREATE TABLE T2 (A2 CHAR (8))!
 
Enter command:
INSERT T2 SET A2 = 'aa2'!
 
Enter command:
SELECT * FROM T WHERE A IN (SELECT A FROM T )
  UNION
  SELECT A1 FROM T1,T2 !
 
resultcount :                     2
 
Enter command:
FETCH!
 
A
--------
aa1
aaa
 
resultcount :                     2
 
Enter command:
CREATE VIEW V1 AS
  SELECT * FROM T WHERE A IN (SELECT A FROM T )
  UNION
  SELECT A1 FROM T1,T2 !
 
Enter command:
SELECT * FROM V1 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
A
--------
aa1
aaa
 
resultcount :                     2
 
Enter command:
PARS_THEN_EX !
 
Enter command:
SELECT * FROM V1 !
 
resultcount :                     2
 
Enter command:
FETCH!
 
A
--------
aa1
aaa
 
resultcount :                     2
 
Enter command:
PARS_EXECUTE !
 
Enter command:
DROP TABLE T !
 
Enter command:
DROP TABLE T1 !
 
Enter command:
DROP TABLE T2 !
 
Enter command:
COMMIT RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE TAB1 ( SPALTE11 CHAR(10) KEY ,
                    SPALTE12 FIXED(5,2),
                    SPALTE13 FLOAT(5) ) !
 
Enter command:
INSERT TAB1 VALUES ( 'HANS'    , 22.52 , NULL ) !
 
Enter command:
INSERT TAB1 VALUES ( 'PAUL'    ,   0   ,  3E2 ) !
 
Enter command:
INSERT TAB1 VALUES ( 'JOACHIM' , 17.1  ,   0  ) !
 
Enter command:
CREATE TABLE TAB2 ( SPALTE21 FIXED(4),
                    SPALTE22 CHAR(32) ,
                    SPALTE23 FLOAT(4) ) !
 
Enter command:
INSERT TAB2 VALUES ( 300   , 'HANS'   , NULL ) !
 
Enter command:
INSERT TAB2 VALUES ( 22.00 , 'FRIEDA' , 0    ) !
 
Enter command:
INSERT TAB2 VALUES ( 12    , 'JOACHIM', 0    ) !
 
Enter command:
CREATE TABLE TAB3 ( SPALTE31 FIXED(4) ,
                    SPALTE32 CHAR(32) ,
                    SPALTE33 FLOAT(4) ) !
 
Enter command:
INSERT TAB3 VALUES ( 1000, 'HANS'    , NULL ) !
 
Enter command:
INSERT TAB3 VALUES ( 2000, 'VOLKER' , 100  ) !
 
Enter command:
INSERT TAB3 VALUES ( 3000, 'ANDREAS' , 200  ) !
 
Enter command:
INSERT TAB3 VALUES ( 4000, 'SIEGFRIED' , 300  ) !
 
Enter command:
COMMIT!
 
Enter command:
(SELECT * FROM TAB3, (SELECT * FROM TAB2, ((SELECT * FROM TAB3))),
 ((SELECT * FROM TAB3))) !
 
resultcount :                   192
 
Enter command:
DECLARE ERG CURSOR FOR
(SELECT * FROM TAB3, (SELECT * FROM TAB2, ((SELECT * FROM TAB3))),
 ((SELECT * FROM TAB3))) !
 
resultcount :                   192
 
Enter command:
CLOSE ERG !
 
Enter command:
 
DECLARE ERG CURSOR FOR
SELECT TAB2.SPALTE21, TAB2.SPALTE22, TAB2.SPALTE23 FROM TAB2,
(SELECT * FROM TAB2) !
 
resultcount :                     9
 
Enter command:
CLOSE ERG !
 
Enter command:
DECLARE ERG CURSOR FOR
SELECT * FROM TAB2,
(SELECT SPALTE21, SPALTE22, SPALTE23 FROM TAB2) !
 
resultcount :                     9
 
Enter command:
CLOSE ERG !
 
Enter command:
DECLARE ERG CURSOR FOR
SELECT * FROM TAB2,
(SELECT * FROM TAB2) !
 
resultcount :                     9
 
Enter command:
CLOSE ERG !
 
Enter command:
DECLARE ERG CURSOR FOR
SELECT TAB2.SPALTE21, TAB2.SPALTE22, TAB2.SPALTE23 FROM TAB2,
(SELECT SPALTE21, SPALTE22, SPALTE23 FROM TAB2) !
 
resultcount :                     9
 
Enter command:
CLOSE ERG !
 
Enter command:
DROP TABLE TAB1 !
 
Enter command:
DROP TABLE TAB2 !
 
Enter command:
DROP TABLE TAB3 !
 
Enter command:
DROP TABLE TAB4 !
 
***ERROR  -4004 Unknown table name:TAB4                                    0012
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CLEARK !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT !
 
Enter command:
DROP USER KERN !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 ( A CHAR (18))!
 
Enter command:
INSERT T1 SET A = 'aaa'!
 
Enter command:
CREATE TABLE T2 ( B CHAR (5)) !
 
Enter command:
INSERT T2 SET B = 'aaa'!
 
Enter command:
CREATE INDEX "T2.B"
 ON T2( B DESC ) !
 
Enter command:
EXPLAIN SELECT * FROM <T1, T2> WHERE T1.A = T2.B !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | T1                 |                    | TABLE SCAN                               |          1
KERN               | T2                 | T2.B               | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | B                  |      (USED INDEX COLUMN)                 |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          6
 
Enter command:
SELECT * FROM <T1, T2> WHERE T1.A = T2.B !
 
resultcount :                     1
 
Enter command:
FETCH !
 
A                  | B
-------------------+------
aaa                | aaa
 
resultcount :                     1
 
Enter command:
DROP INDEX "T2.B" !
 
Enter command:
CREATE INDEX "t2.b" ON T2( B ) !
 
Enter command:
SELECT * FROM T1, T2 WHERE T1.A = T2.B !
 
resultcount :                     1
 
Enter command:
FETCH !
 
A                  | B
-------------------+------
aaa                | aaa
 
resultcount :                     1
 
Enter command:
ROLLBACK !
 
Enter command:
CREATE TABLE T1 ( A CHAR (38))!
 
Enter command:
INSERT T1 SET A = 'aaa'!
 
Enter command:
CREATE TABLE T2 ( B CHAR (25)) !
 
Enter command:
INSERT T2 SET B = 'aaa'!
 
Enter command:
CREATE INDEX "T2.B" ON T2( B DESC ) !
 
Enter command:
EXPLAIN SELECT * FROM <T1, T2> WHERE T1.A = T2.B !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | T1                 |                    | TABLE SCAN                               |          1
KERN               | T2                 | T2.B               | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | B                  |      (USED INDEX COLUMN)                 |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          8
 
Enter command:
SELECT * FROM <T1, T2> WHERE T1.A = T2.B !
 
resultcount :                     1
 
Enter command:
FETCH !
 
A                                      | B
---------------------------------------+--------------------------
aaa                                    | aaa
 
resultcount :                     1
 
Enter command:
DROP INDEX "T2.B" !
 
Enter command:
CREATE INDEX "t2.b" ON T2( B ) !
 
Enter command:
SELECT * FROM T1, T2 WHERE T1.A = T2.B !
 
resultcount :                     1
 
Enter command:
FETCH !
 
A                                      | B
---------------------------------------+--------------------------
aaa                                    | aaa
 
resultcount :                     1
 
Enter command:
ROLLBACK WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T (S1 FIXED (5), S2 FIXED(5))!
 
Enter command:
INSERT T VALUES (1,1)!
 
Enter command:
INSERT T VALUES (2,2)!
 
Enter command:
CREATE VIEW V1 AS SELECT DISTINCT S1, S2 FROM T!
 
Enter command:
CREATE TABLE T1 ( A FIXED (6))!
 
Enter command:
INSERT T1 SET A = 3 !
 
Enter command:
SELECT * FROM V1, T1 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
S1     | S2     | A
-------+--------+--------
     1 |      1 |       3
     2 |      2 |       3
 
resultcount :                     2
 
Enter command:
SELECT DISTINCT * FROM V1, T1 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
S1     | S2     | A
-------+--------+--------
     1 |      1 |       3
     2 |      2 |       3
 
resultcount :                     2
 
Enter command:
CREATE VIEW V2 AS SELECT DISTINCT * FROM V1, T1 !
 
Enter command:
SELECT * FROM V2, T1 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
S1     | S2     | A       | A
-------+--------+---------+--------
     1 |      1 |       3 |       3
     2 |      2 |       3 |       3
 
resultcount :                     2
 
Enter command:
SELECT DISTINCT * FROM V2, T1 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
S1     | S2     | A       | A
-------+--------+---------+--------
     1 |      1 |       3 |       3
     2 |      2 |       3 |       3
 
resultcount :                     2
 
Enter command:
DROP TABLE T !
 
Enter command:
DROP TABLE T1 !
 
Enter command:
COMMIT RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T ( A CHAR (30), B FIXED(18) )!
 
Enter command:
INSERT T SET A = 'abcdefghijklmnopqrstuvwxyzabcd',
       B = 333333333333333333!
 
Enter command:
CREATE TABLE T1 ( B1 FIXED(18))!
 
Enter command:
INSERT T1 SET B1 = 333333333333333333 !
 
Enter command:
PARSING !
 
Enter command:
SELECT * FROM T, T1 WHERE B = B1 !
parsing idnr :       1
 
Enter command:
PARS_EXECUTE !
 
Enter command:
SELECT * FROM T !
 
resultcount :               unknown
 
Enter command:
FETCH1 !
 
A                 :  abcdefghijklmnopqrstuvwxyzabcd
B                 :   333333333333333333
 
Enter command:
EXECUTING !
 
Enter command:
SELECT * !
Parsing idnr :      1
 
resultcount :                     1
 
Enter command:
PARS_EXECUTE !
 
Enter command:
ROLLBACK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T ( A CHAR (8), B CHAR (8), C CHAR (8))!
 
Enter command:
CREATE INDEX "t.c"
 ON T( C ) !
 
Enter command:
CREATE INDEX I1 ON T (A, B, C) !
 
Enter command:
INSERT T VALUES ('aaa', 'b', '123')!
 
Enter command:
INSERT T VALUES ('aaa', 'b', '234')!
 
Enter command:
INSERT T VALUES ('aaa', 'b', '345')!
 
Enter command:
CREATE TABLE T1 ( B1 CHAR (8))!
 
Enter command:
INSERT T1 SET B1 = 'b' !
 
Enter command:
CREATE INDEX "t1.b1" ON T1( B1 ) !
 
Enter command:
EXPLAIN SELECT DISTINCT A, C, B1
  FROM T, T1
  WHERE A = 'aaa' AND
        B = B1    AND
        (C BETWEEN '123' AND '234') !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | T                  |                    | TABLE SCAN                               |          1
KERN               | T1                 | t1.b1              | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | B1                 |      (USED INDEX COLUMN)                 |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          4
 
Enter command:
SELECT DISTINCT A, C, B1
  FROM T, T1
  WHERE A = 'aaa' AND
        B = B1    AND
        (C BETWEEN '123' AND '234') !
 
resultcount :                     2
 
Enter command:
FETCH!
 
A        | C        | B1
---------+----------+---------
aaa      | 123      | b
aaa      | 234      | b
 
resultcount :                     2
 
Enter command:
EXPLAIN SELECT DISTINCT A, C, B1
  FROM T, T1
  WHERE A = 'aaa' AND
        B = B1    AND
        (C = '123' OR C = '234') !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | T                  |                    | TABLE SCAN                               |          1
KERN               | T1                 | t1.b1              | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | B1                 |      (USED INDEX COLUMN)                 |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          4
 
Enter command:
SELECT DISTINCT A, C, B1
  FROM T, T1
  WHERE A = 'aaa' AND
        B = B1    AND
        (C = '123' OR C = '234') !
 
resultcount :                     2
 
Enter command:
FETCH!
 
A        | C        | B1
---------+----------+---------
aaa      | 123      | b
aaa      | 234      | b
 
resultcount :                     2
 
Enter command:
DROP TABLE T !
 
Enter command:
DROP TABLE T1 !
 
Enter command:
COMMIT RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T ( A CHAR ( 8),
B CHAR (8),
C CHAR (8),
D CHAR (8),
E CHAR (254),
F CHAR (254),
G CHAR (254),
H CHAR (254),
I CHAR (254),
J CHAR (127),
K CHAR (127),
L CHAR (127),
M CHAR (127))!
 
Enter command:
INSERT T VALUES ('aa', 'bb', 'cc', 'dd',
'eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',
'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
'ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg',
'hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh hhhh',
'iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii',
'jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj',
'kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk',
'lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll',
'mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm')!
 
Enter command:
CREATE UNIQUE INDEX I1 ON T (A, B, C, D) !
 
Enter command:
CREATE TABLE T1 (A1 CHAR (8), B1 CHAR (8))!
 
Enter command:
CREATE UNIQUE INDEX I1 ON T1 (A1, B1) !
 
Enter command:
INSERT T1 SET A1 = 'aaa', B1 = 'dd'!
 
Enter command:
PARS_THEN_EX !
 
Enter command:
DATA !
 
Enter command:
SELECT * FROM T, T1 WHERE A = :A AND B = :B AND C = :C AND D > :D AND
A1 = :A1 AND D = B1 !
 
c 8 'aa' c 8 'bb' c 8 'cc' c 8 'a' c 8 'aaa'
 
resultcount :                     1
 
Enter command:
NODATA !
 
Enter command:
FETCH INTO :A, :B, :C, :D, :E, :F, :G, :H, :I, :J, :K, :L, :M, :A1, :B1 !
 
A                 :  aa
B                 :  bb
C                 :  cc
D                 :  dd
E                 :  eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
F                 :  fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
G                 :  ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg
H                 :  hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh hhhh
I                 :  iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii
J                 :  jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj
K                 :  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk
L                 :  lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll
M                 :  mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
A1                :  aaa
B1                :  dd
 
resultcount :                     1
 
Enter command:
PARS_EXECUTE !
 
Enter command:
DROP TABLE T !
 
Enter command:
DROP TABLE T1 !
 
Enter command:
COMMIT RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 (A1 CHAR(5) KEY, A2 CHAR(5) KEY) !
 
Enter command:
INSERT T1 VALUES ('aaaaa','bbbbb') !
 
Enter command:
INSERT T1 VALUES ('bbbbb','xxxxx') !
 
Enter command:
INSERT T1 VALUES ('ccccc','zzzzz') !
 
Enter command:
DECLARE ERG CURSOR FOR SELECT * FROM T1 FOR REUSE !
 
resultcount :                     3
 
Enter command:
EXPLAIN SELECT * FROM ERG,
T1 R1, T1 R2, T1 R3, T1 R4, T1 R5, T1 R6, T1 R7
WHERE R1.A1 = ERG.A1 AND R2.A1 = ERG.A1 AND R3.A1 = ERG.A1 AND
R4.A1 = ERG.A1 AND R5.A1 = ERG.A1 AND R6.A1 = ERG.A1 AND R7.A1 = ERG.A1
AND  R1.A2 = 'xxxxx' AND R2.A2 = 'xxxxx' AND R3.A2 = 'xxxxx' AND
R4.A2 = 'xxxxx' AND R5.A2 = 'xxxxx' AND R6.A2 = 'xxxxx' AND
R7.A2 = 'xxxxx' AND ERG.A2 = 'xxxxx' !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | ERG                |                    | TABLE SCAN                               |          1
                   | R1                 |                    | JOIN VIA MULTIPLE KEY COLUMNS            |          1
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
                   | R2                 |                    | JOIN VIA MULTIPLE KEY COLUMNS            |          1
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
                   | R3                 |                    | JOIN VIA MULTIPLE KEY COLUMNS            |          1
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
                   | R4                 |                    | JOIN VIA MULTIPLE KEY COLUMNS            |          1
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
                   | R5                 |                    | JOIN VIA MULTIPLE KEY COLUMNS            |          1
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
                   | R6                 |                    | JOIN VIA MULTIPLE KEY COLUMNS            |          1
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
                   | R7                 |                    | JOIN VIA MULTIPLE KEY COLUMNS            |          1
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |         12
 
Enter command:
SELECT * FROM ERG,
T1 R1, T1 R2, T1 R3, T1 R4, T1 R5, T1 R6, T1 R7
WHERE R1.A1 = ERG.A1 AND R2.A1 = ERG.A1 AND R3.A1 = ERG.A1 AND
R4.A1 = ERG.A1 AND R5.A1 = ERG.A1 AND R6.A1 = ERG.A1 AND R7.A1 = ERG.A1
AND  R1.A2 = 'xxxxx' AND R2.A2 = 'xxxxx' AND R3.A2 = 'xxxxx' AND
R4.A2 = 'xxxxx' AND R5.A2 = 'xxxxx' AND R6.A2 = 'xxxxx' AND
R7.A2 = 'xxxxx' AND ERG.A2 = 'xxxxx' !
 
resultcount :                     1
 
Enter command:
FETCH !
 
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
 
resultcount :                     1
 
Enter command:
EXPLAIN SELECT * FROM ERG,
T1 R1, T1 R2, T1 R3, T1 R4, T1 R5, T1 R6, T1 R7
WHERE R1.A1 = ERG.A1 AND R2.A1 = ERG.A1 AND R3.A1 = ERG.A1 AND
R4.A1 = ERG.A1 AND R5.A1 = ERG.A1 AND R6.A1 = ERG.A1 AND R7.A1 = ERG.A1
AND  R1.A2 = 'xxxxx' AND R2.A1 = 'xxxxx' AND R3.A1 = 'xxxxx' AND
R4.A1 = 'xxxxx' AND R5.A1 = 'xxxxx' AND R6.A1 = 'xxxxx' AND
R7.A1 = 'xxxxx' !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
                   | R1                 |                    | EQUAL CONDITION FOR KEY                  |          1
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
                   | R2                 | A1                 | JOIN VIA KEY RANGE                       |          1
                   | R3                 | A1                 | JOIN VIA KEY RANGE                       |          1
                   | R4                 | A1                 | JOIN VIA KEY RANGE                       |          1
                   | R5                 | A1                 | JOIN VIA KEY RANGE                       |          1
                   | R6                 | A1                 | JOIN VIA KEY RANGE                       |          1
                   | R7                 | A1                 | JOIN VIA KEY RANGE                       |          1
KERN               | ERG                |                    | TABLE SCAN                               |          1
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          9
 
Enter command:
SELECT * FROM ERG,
T1 R1, T1 R2, T1 R3, T1 R4, T1 R5, T1 R6, T1 R7
WHERE R1.A1 = ERG.A1 AND R2.A1 = ERG.A1 AND R3.A1 = ERG.A1 AND
R4.A1 = ERG.A1 AND R5.A1 = ERG.A1 AND R6.A1 = ERG.A1 AND R7.A1 = ERG.A1
AND  R1.A2 = 'xxxxx' AND R2.A1 = 'xxxxx' AND R3.A1 = 'xxxxx' AND
R4.A1 = 'xxxxx' AND R5.A1 = 'xxxxx' AND R6.A1 = 'xxxxx' AND
R7.A1 = 'xxxxx' !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
FETCH !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
ROLLBACK WORK !
 
Enter command:
CREATE TABLE T1 (A1 CHAR(5) KEY, A2 CHAR(5) KEY) !
 
Enter command:
INSERT T1 VALUES ('aaaaa','bbbbb') !
 
Enter command:
INSERT T1 VALUES ('bbbbb','xxxxx') !
 
Enter command:
INSERT T1 VALUES ('ccccc','zzzzz') !
 
Enter command:
DECLARE ERG CURSOR FOR SELECT * FROM T1 FOR REUSE !
 
resultcount :                     3
 
Enter command:
SELECT * FROM ERG, T1 R1, T1 R2, T1 R3, T1 R4, T1 R5, T1 R6, T1 R7
WHERE R1.A1 = ERG.A1 AND R2.A1 = ERG.A1 AND R3.A1 = ERG.A1 AND
R4.A1 = ERG.A1 AND R5.A1 = ERG.A1 AND R6.A1 = ERG.A1 AND R7.A1 = ERG.A1 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
A1                :  aaaaa
A2                :  bbbbb
A1                :  aaaaa
A2                :  bbbbb
A1                :  aaaaa
A2                :  bbbbb
A1                :  aaaaa
A2                :  bbbbb
A1                :  aaaaa
A2                :  bbbbb
A1                :  aaaaa
A2                :  bbbbb
A1                :  aaaaa
A2                :  bbbbb
A1                :  aaaaa
A2                :  bbbbb
--------------------------
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
--------------------------
A1                :  ccccc
A2                :  zzzzz
A1                :  ccccc
A2                :  zzzzz
A1                :  ccccc
A2                :  zzzzz
A1                :  ccccc
A2                :  zzzzz
A1                :  ccccc
A2                :  zzzzz
A1                :  ccccc
A2                :  zzzzz
A1                :  ccccc
A2                :  zzzzz
A1                :  ccccc
A2                :  zzzzz
 
resultcount :                     3
 
Enter command:
ROLLBACK WORK !
 
Enter command:
CREATE TABLE T1 (A1 CHAR(5) KEY, A2 CHAR(5) KEY) !
 
Enter command:
INSERT T1 VALUES ('aaaaa','bbbbb') !
 
Enter command:
INSERT T1 VALUES ('bbbbb','xxxxx') !
 
Enter command:
INSERT T1 VALUES ('ccccc','zzzzz') !
 
Enter command:
DECLARE ERG CURSOR FOR SELECT * FROM T1 FOR REUSE !
 
resultcount :                     3
 
Enter command:
EXPLAIN SELECT * FROM ERG,
T1 R1, T1 R2, T1 R3, T1 R4, T1 R5, T1 R6, T1 R7
WHERE R1.A2 = ERG.A2 AND R2.A2 = ERG.A2 AND R3.A2 = ERG.A2 AND
R4.A2 = ERG.A2 AND R5.A2 = ERG.A2 AND R6.A2 = ERG.A2 AND R7.A2 = ERG.A2
AND  R1.A1 = 'bbbbb' AND R2.A1 = 'bbbbb' AND R3.A1 = 'bbbbb' AND
R4.A1 = 'bbbbb' AND R5.A1 = 'bbbbb' AND R6.A1 = 'bbbbb' AND
R7.A1 = 'bbbbb' !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | ERG                |                    | TABLE SCAN                               |          1
                   | R1                 |                    | JOIN VIA MULTIPLE KEY COLUMNS            |          1
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
                   | R2                 |                    | JOIN VIA MULTIPLE KEY COLUMNS            |          1
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
                   | R3                 |                    | JOIN VIA MULTIPLE KEY COLUMNS            |          1
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
                   | R4                 |                    | JOIN VIA MULTIPLE KEY COLUMNS            |          1
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
                   | R5                 |                    | JOIN VIA MULTIPLE KEY COLUMNS            |          1
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
                   | R6                 |                    | JOIN VIA MULTIPLE KEY COLUMNS            |          1
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
                   | R7                 |                    | JOIN VIA MULTIPLE KEY COLUMNS            |          1
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |         10
 
Enter command:
SELECT * FROM ERG, T1 R1, T1 R2, T1 R3, T1 R4, T1 R5, T1 R6, T1 R7
WHERE R1.A2 = ERG.A2 AND R2.A2 = ERG.A2 AND R3.A2 = ERG.A2 AND
R4.A2 = ERG.A2 AND R5.A2 = ERG.A2 AND R6.A2 = ERG.A2 AND R7.A2 = ERG.A2
AND  R1.A1 = 'bbbbb' AND R2.A1 = 'bbbbb' AND R3.A1 = 'bbbbb' AND
R4.A1 = 'bbbbb' AND R5.A1 = 'bbbbb' AND R6.A1 = 'bbbbb' AND
R7.A1 = 'bbbbb' !
 
resultcount :                     1
 
Enter command:
FETCH !
 
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
 
resultcount :                     1
 
Enter command:
ROLLBACK WORK RELEASE !
 
Enter command:
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER D !
 
***ERROR  -4003 Unknown user name:D                                        0011
 
Enter command:
DROP USER P !
 
***ERROR  -4003 Unknown user name:P                                        0011
 
Enter command:
DROP USER R !
 
***ERROR  -4003 Unknown user name:R                                        0011
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE CLEARK !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT !
 
Enter command:
DROP USER KERN !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 (A1 CHAR(5), A2 CHAR(5)) !
 
Enter command:
INSERT T1 VALUES ('2aaaa','2bbbb') !
 
Enter command:
INSERT T1 VALUES ('1aaaa','1bbbb') !
 
Enter command:
INSERT T1 VALUES ('4aaaa','4bbbb') !
 
Enter command:
INSERT T1 VALUES ('3aaaa','3bbbb') !
 
Enter command:
INSERT T1 VALUES ('5aaaa','5bbbb') !
 
Enter command:
INSERT T1 VALUES ('7aaaa','7bbbb') !
 
Enter command:
INSERT T1 VALUES ('6aaaa','6bbbb') !
 
Enter command:
INSERT T1 VALUES ('9aaaa','9bbbb') !
 
Enter command:
INSERT T1 VALUES ('8aaaa','8bbbb') !
 
Enter command:
CREATE TABLE T2 (B1 CHAR(5), B2 CHAR(5)) !
 
Enter command:
INSERT T2 VALUES ('aaaaa','bbbbb') !
 
Enter command:
INSERT T2 VALUES ('aaaaa','xxxxx') !
 
Enter command:
CREATE VIEW TV1 (A1, "a2") AS SELECT A1, A2 FROM T1 !
 
Enter command:
CREATE VIEW TV2 (B1, "b2") AS SELECT B1, B2 FROM T2 !
 
Enter command:
DECLARE ERG CURSOR FOR
SELECT A1, B1, "b2" FROM <TV1, TV2> ORDER BY "a2" !
 
resultcount :                    18
 
Enter command:
FETCH ERG!
 
A1    | B1    | b2
------+-------+------
1aaaa | aaaaa | bbbbb
1aaaa | aaaaa | xxxxx
2aaaa | aaaaa | bbbbb
2aaaa | aaaaa | xxxxx
3aaaa | aaaaa | bbbbb
3aaaa | aaaaa | xxxxx
4aaaa | aaaaa | bbbbb
4aaaa | aaaaa | xxxxx
5aaaa | aaaaa | bbbbb
5aaaa | aaaaa | xxxxx
6aaaa | aaaaa | bbbbb
6aaaa | aaaaa | xxxxx
7aaaa | aaaaa | bbbbb
7aaaa | aaaaa | xxxxx
8aaaa | aaaaa | bbbbb
8aaaa | aaaaa | xxxxx
9aaaa | aaaaa | bbbbb
 
A1    | B1    | b2
------+-------+------
9aaaa | aaaaa | xxxxx
 
resultcount :                    18
 
Enter command:
DECLARE ERG CURSOR FOR
SELECT A1, B1, "b2" FROM <TV2, TV1> ORDER BY "a2" !
 
resultcount :                    18
 
Enter command:
FETCH ERG!
 
A1    | B1    | b2
------+-------+------
1aaaa | aaaaa | bbbbb
1aaaa | aaaaa | xxxxx
2aaaa | aaaaa | bbbbb
2aaaa | aaaaa | xxxxx
3aaaa | aaaaa | bbbbb
3aaaa | aaaaa | xxxxx
4aaaa | aaaaa | bbbbb
4aaaa | aaaaa | xxxxx
5aaaa | aaaaa | bbbbb
5aaaa | aaaaa | xxxxx
6aaaa | aaaaa | bbbbb
6aaaa | aaaaa | xxxxx
7aaaa | aaaaa | bbbbb
7aaaa | aaaaa | xxxxx
8aaaa | aaaaa | bbbbb
8aaaa | aaaaa | xxxxx
9aaaa | aaaaa | bbbbb
 
A1    | B1    | b2
------+-------+------
9aaaa | aaaaa | xxxxx
 
resultcount :                    18
 
Enter command:
DECLARE ERG CURSOR FOR
SELECT A1, B1, "b2" FROM <TV1, TV2> ORDER BY "a2" DESC !
 
resultcount :                    18
 
Enter command:
FETCH ERG!
 
A1    | B1    | b2
------+-------+------
9aaaa | aaaaa | bbbbb
9aaaa | aaaaa | xxxxx
8aaaa | aaaaa | bbbbb
8aaaa | aaaaa | xxxxx
7aaaa | aaaaa | bbbbb
7aaaa | aaaaa | xxxxx
6aaaa | aaaaa | bbbbb
6aaaa | aaaaa | xxxxx
5aaaa | aaaaa | bbbbb
5aaaa | aaaaa | xxxxx
4aaaa | aaaaa | bbbbb
4aaaa | aaaaa | xxxxx
3aaaa | aaaaa | bbbbb
3aaaa | aaaaa | xxxxx
2aaaa | aaaaa | bbbbb
2aaaa | aaaaa | xxxxx
1aaaa | aaaaa | bbbbb
 
A1    | B1    | b2
------+-------+------
1aaaa | aaaaa | xxxxx
 
resultcount :                    18
 
Enter command:
DECLARE ERG CURSOR FOR
SELECT A1, B1, "b2" FROM <TV2, TV1> ORDER BY "a2" DESC !
 
resultcount :                    18
 
Enter command:
FETCH ERG!
 
A1    | B1    | b2
------+-------+------
9aaaa | aaaaa | bbbbb
9aaaa | aaaaa | xxxxx
8aaaa | aaaaa | bbbbb
8aaaa | aaaaa | xxxxx
7aaaa | aaaaa | bbbbb
7aaaa | aaaaa | xxxxx
6aaaa | aaaaa | bbbbb
6aaaa | aaaaa | xxxxx
5aaaa | aaaaa | bbbbb
5aaaa | aaaaa | xxxxx
4aaaa | aaaaa | bbbbb
4aaaa | aaaaa | xxxxx
3aaaa | aaaaa | bbbbb
3aaaa | aaaaa | xxxxx
2aaaa | aaaaa | bbbbb
2aaaa | aaaaa | xxxxx
1aaaa | aaaaa | bbbbb
 
A1    | B1    | b2
------+-------+------
1aaaa | aaaaa | xxxxx
 
resultcount :                    18
 
Enter command:
DECLARE ERG CURSOR FOR
SELECT A1, "a2", B1, "b2" FROM <TV1, TV2> ORDER BY "a2" !
 
resultcount :                    18
 
Enter command:
FETCH ERG!
 
A1    | a2    | B1    | b2
------+-------+-------+------
1aaaa | 1bbbb | aaaaa | bbbbb
1aaaa | 1bbbb | aaaaa | xxxxx
2aaaa | 2bbbb | aaaaa | bbbbb
2aaaa | 2bbbb | aaaaa | xxxxx
3aaaa | 3bbbb | aaaaa | bbbbb
3aaaa | 3bbbb | aaaaa | xxxxx
4aaaa | 4bbbb | aaaaa | bbbbb
4aaaa | 4bbbb | aaaaa | xxxxx
5aaaa | 5bbbb | aaaaa | bbbbb
5aaaa | 5bbbb | aaaaa | xxxxx
6aaaa | 6bbbb | aaaaa | bbbbb
6aaaa | 6bbbb | aaaaa | xxxxx
7aaaa | 7bbbb | aaaaa | bbbbb
7aaaa | 7bbbb | aaaaa | xxxxx
8aaaa | 8bbbb | aaaaa | bbbbb
8aaaa | 8bbbb | aaaaa | xxxxx
9aaaa | 9bbbb | aaaaa | bbbbb
 
A1    | a2    | B1    | b2
------+-------+-------+------
9aaaa | 9bbbb | aaaaa | xxxxx
 
resultcount :                    18
 
Enter command:
DECLARE ERG CURSOR FOR
SELECT A1, "a2", B1, "b2" FROM <TV2, TV1> ORDER BY "a2" !
 
resultcount :                    18
 
Enter command:
FETCH ERG!
 
A1    | a2    | B1    | b2
------+-------+-------+------
1aaaa | 1bbbb | aaaaa | bbbbb
1aaaa | 1bbbb | aaaaa | xxxxx
2aaaa | 2bbbb | aaaaa | bbbbb
2aaaa | 2bbbb | aaaaa | xxxxx
3aaaa | 3bbbb | aaaaa | bbbbb
3aaaa | 3bbbb | aaaaa | xxxxx
4aaaa | 4bbbb | aaaaa | bbbbb
4aaaa | 4bbbb | aaaaa | xxxxx
5aaaa | 5bbbb | aaaaa | bbbbb
5aaaa | 5bbbb | aaaaa | xxxxx
6aaaa | 6bbbb | aaaaa | bbbbb
6aaaa | 6bbbb | aaaaa | xxxxx
7aaaa | 7bbbb | aaaaa | bbbbb
7aaaa | 7bbbb | aaaaa | xxxxx
8aaaa | 8bbbb | aaaaa | bbbbb
8aaaa | 8bbbb | aaaaa | xxxxx
9aaaa | 9bbbb | aaaaa | bbbbb
 
A1    | a2    | B1    | b2
------+-------+-------+------
9aaaa | 9bbbb | aaaaa | xxxxx
 
resultcount :                    18
 
Enter command:
DECLARE ERG CURSOR FOR
SELECT A1, "a2", B1, "b2" FROM <TV1, TV2> ORDER BY "a2" DESC !
 
resultcount :                    18
 
Enter command:
FETCH ERG!
 
A1    | a2    | B1    | b2
------+-------+-------+------
9aaaa | 9bbbb | aaaaa | bbbbb
9aaaa | 9bbbb | aaaaa | xxxxx
8aaaa | 8bbbb | aaaaa | bbbbb
8aaaa | 8bbbb | aaaaa | xxxxx
7aaaa | 7bbbb | aaaaa | bbbbb
7aaaa | 7bbbb | aaaaa | xxxxx
6aaaa | 6bbbb | aaaaa | bbbbb
6aaaa | 6bbbb | aaaaa | xxxxx
5aaaa | 5bbbb | aaaaa | bbbbb
5aaaa | 5bbbb | aaaaa | xxxxx
4aaaa | 4bbbb | aaaaa | bbbbb
4aaaa | 4bbbb | aaaaa | xxxxx
3aaaa | 3bbbb | aaaaa | bbbbb
3aaaa | 3bbbb | aaaaa | xxxxx
2aaaa | 2bbbb | aaaaa | bbbbb
2aaaa | 2bbbb | aaaaa | xxxxx
1aaaa | 1bbbb | aaaaa | bbbbb
 
A1    | a2    | B1    | b2
------+-------+-------+------
1aaaa | 1bbbb | aaaaa | xxxxx
 
resultcount :                    18
 
Enter command:
DECLARE ERG CURSOR FOR
SELECT A1, "a2", B1, "b2" FROM <TV2, TV1> ORDER BY "a2" DESC !
 
resultcount :                    18
 
Enter command:
FETCH ERG!
 
A1    | a2    | B1    | b2
------+-------+-------+------
9aaaa | 9bbbb | aaaaa | bbbbb
9aaaa | 9bbbb | aaaaa | xxxxx
8aaaa | 8bbbb | aaaaa | bbbbb
8aaaa | 8bbbb | aaaaa | xxxxx
7aaaa | 7bbbb | aaaaa | bbbbb
7aaaa | 7bbbb | aaaaa | xxxxx
6aaaa | 6bbbb | aaaaa | bbbbb
6aaaa | 6bbbb | aaaaa | xxxxx
5aaaa | 5bbbb | aaaaa | bbbbb
5aaaa | 5bbbb | aaaaa | xxxxx
4aaaa | 4bbbb | aaaaa | bbbbb
4aaaa | 4bbbb | aaaaa | xxxxx
3aaaa | 3bbbb | aaaaa | bbbbb
3aaaa | 3bbbb | aaaaa | xxxxx
2aaaa | 2bbbb | aaaaa | bbbbb
2aaaa | 2bbbb | aaaaa | xxxxx
1aaaa | 1bbbb | aaaaa | bbbbb
 
A1    | a2    | B1    | b2
------+-------+-------+------
1aaaa | 1bbbb | aaaaa | xxxxx
 
resultcount :                    18
 
Enter command:
ROLLBACK WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
SENDERID DBM !
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE A(A1 INT, A2 INT, A3 INT , PRIMARY KEY(A1, A2))!
 
Enter command:
CREATE TABLE B(B1 INT, B2 INT, B3 INT , PRIMARY KEY(B1, B2))!
 
Enter command:
CREATE TABLE C(C1 INT, C2 INT, C3 INT , PRIMARY KEY(C1, C2))!
 
Enter command:
CREATE TABLE D(D1 INT, D2 INT, D3 INT , PRIMARY KEY(D1, D2))!
 
Enter command:
CREATE TABLE E(E1 INT, E2 INT, E3 INT , PRIMARY KEY(E1, E2))!
 
Enter command:
CREATE INDEX AI1 ON A(A1)!
 
Enter command:
CREATE INDEX AI2 ON A(A1,A3)!
 
Enter command:
CREATE INDEX BI1 ON B(B1)!
 
Enter command:
CREATE INDEX BI2 ON B(B1,B3)!
 
Enter command:
CREATE INDEX CI1 ON C(C1)!
 
Enter command:
CREATE INDEX CI2 ON C(C1,C3)!
 
Enter command:
CREATE INDEX DI1 ON D(D1)!
 
Enter command:
CREATE INDEX DI2 ON D(D1,D3)!
 
Enter command:
CREATE INDEX EI1 ON E(E1)!
 
Enter command:
CREATE INDEX EI2 ON E(E1,E3)!
 
Enter command:
 
EXPLAIN SELECT *
FROM A, B, C, D WHERE
A.A1=B.B1 AND B.B1=C.C1 AND C.C1=D.D1 !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | A                  |                    | TABLE SCAN                               |          1
KERN               | B                  | BI1                | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | B1                 |      (USED INDEX COLUMN)                 |
KERN               | C                  | CI1                | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | C1                 |      (USED INDEX COLUMN)                 |
KERN               | D                  | DI1                | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | D1                 |      (USED INDEX COLUMN)                 |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          4
 
Enter command:
!* KEYACCESS FOR A, B, C; D AUTOMATIC
 
Enter command:
EXPLAIN SELECT /*+JOIN(KEYACCESS;KEYACCESS;KEYACCESS)*/ *
FROM A, B, C, D WHERE
A.A1=B.B1 AND B.B1=C.C1 AND C.C1=D.D1 !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | A                  |                    | TABLE SCAN                               |          1
KERN               | B                  | B1                 | JOIN VIA KEY RANGE                       |          1
KERN               | C                  | C1                 | JOIN VIA KEY RANGE                       |          1
KERN               | D                  | DI1                | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | D1                 |      (USED INDEX COLUMN)                 |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          6
 
Enter command:
!* KEYACCESS FOR A, B, C; D AUTOMATIC
 
Enter command:
EXPLAIN SELECT /*+JOIN(KEYACCESS;KEYACCESS;;KEYACCESS)*/ *
FROM A, B, D, C WHERE
A.A1=B.B1 AND B.B1=C.C1 AND C.C1=D.D1 !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | A                  |                    | TABLE SCAN                               |          1
KERN               | B                  | B1                 | JOIN VIA KEY RANGE                       |          1
KERN               | C                  | C1                 | JOIN VIA KEY RANGE                       |          1
KERN               | D                  | DI1                | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | D1                 |      (USED INDEX COLUMN)                 |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          6
 
Enter command:
!* KEYACCESS FOR A, C; INDEXACCESS FOR B; D AUTOMATIC
 
Enter command:
EXPLAIN SELECT /*+JOIN(KEYACCESS;INDEXACCESS;;KEYACCESS)*/ *
FROM A, B, D, C WHERE
A.A1=B.B1 AND B.B1=C.C1 AND C.C1=D.D1 !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | A                  | AI2                | INDEX SCAN                               |          1
                   |                    |                    | ONLY INDEX ACCESSED                      |
KERN               | C                  | C1                 | JOIN VIA KEY RANGE                       |          1
KERN               | B                  | BI1                | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | B1                 |      (USED INDEX COLUMN)                 |
KERN               | D                  | DI1                | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | D1                 |      (USED INDEX COLUMN)                 |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          5
 
Enter command:
!* KEYACCESS FOR A, C; INDEXACCESS FOR B; DEDICATED INDEXACCESS FOR D
 
Enter command:
EXPLAIN
SELECT /*+ORDERED,JOIN(KEYACCESS;INDEXACCESS;INDEXACCESS(DI2);KEYACCESS)*/ *
FROM A, B, D, C WHERE
A.A1=B.B1 AND B.B1=C.C1 AND C.C1=D.D1 !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | A                  |                    | TABLE SCAN                               |          1
KERN               | B                  | BI1                | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | B1                 |      (USED INDEX COLUMN)                 |
KERN               | D                  | DI2                | JOIN VIA RANGE OF MULTIPLE INDEXED COL.  |          1
                   |                    | D1                 |      (USED INDEX COLUMN)                 |
KERN               | C                  | C1                 | JOIN VIA KEY RANGE                       |          1
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          6
 
Enter command:
!* NO ACCESS PATH FOR B; A,B,D AUTOMATIC
 
Enter command:
EXPLAIN
SELECT /*+ORDERED,JOIN(;NOACCESSPATH)*/ *
FROM A, B, D, C WHERE
A.A1=B.B1 AND B.B1=C.C1 AND C.C1=D.D1 !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | A                  |                    | TABLE SCAN                               |          1
KERN               | B                  | BI2                | INDEX SCAN                               |          1
                   |                    |                    | ONLY INDEX ACCESSED                      |
KERN               | D                  | DI1                | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | D1                 |      (USED INDEX COLUMN)                 |
KERN               | C                  | CI1                | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | C1                 |      (USED INDEX COLUMN)                 |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          5
 
Enter command:
!* NO ACCESS PATH FOR B; A,B,D AUTOMATIC; SPECIAL ACCESS FOR A
 
Enter command:
EXPLAIN
SELECT /*+ORDERED,JOIN(ACCESS=INDEXACCESS,INDEXSCAN;NOACCESSPATH)*/ *
FROM A, B, D, C WHERE
A.A1=B.B1 AND B.B1=C.C1 AND C.C1=D.D1 !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | A                  | AI2                | INDEX SCAN                               |          1
                   |                    |                    | ONLY INDEX ACCESSED                      |
KERN               | B                  | BI2                | INDEX SCAN                               |          1
                   |                    |                    | ONLY INDEX ACCESSED                      |
KERN               | D                  | DI1                | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | D1                 |      (USED INDEX COLUMN)                 |
KERN               | C                  | CI1                | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | C1                 |      (USED INDEX COLUMN)                 |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          5
 
Enter command:
ROLLBACK WORK !
 
Enter command:
 
!* TEST ONE PHASE HANDLING AND OUTER JOIN
 
Enter command:
CREATE TABLE A (C1 CHAR(3))!
 
Enter command:
INSERT INTO A VALUES ('aaa')!
 
Enter command:
INSERT INTO A VALUES ('bbb')!
 
Enter command:
 
CREATE TABLE B (C1 CHAR(3))!
 
Enter command:
INSERT INTO B VALUES ('bbb')!
 
Enter command:
 
CREATE TABLE C (C1 CHAR(3) KEY)!
 
Enter command:
INSERT INTO C VALUES ('aaa')!
 
Enter command:
INSERT INTO C VALUES ('bbb')!
 
Enter command:
 
CREATE TABLE D (C1 CHAR(3) KEY)!
 
Enter command:
INSERT INTO D VALUES ('bbb')!
 
Enter command:
 
COMMIT RELEASE !
 
Enter command:
SENDERID DBM !
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
SET PARAMETER OPTIMIZE_JOIN_ONEPHASE = 'NO'!
 
Enter command:
COMMIT RELEASE !
 
Enter command:
SENDERID XCI !
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
EXPLAIN
SELECT UPPER(A.C1), UPPER(B.C1) FROM <A, B> WHERE A.C1 = B.C1(+)!
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | A                  |                    | TABLE SCAN                               |          1
KERN               | B                  |                    | TABLE SCAN                               |          1
INTERNAL           | TEMPORARY RESULT   |                    | TABLE SCAN                               |          1
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          8
 
Enter command:
SELECT UPPER(A.C1), UPPER(B.C1) FROM <A, B> WHERE A.C1 = B.C1(+)!
 
resultcount :                     2
 
Enter command:
FETCH!
 
EXPRESSION1 | EXPRESSION2
------------+------------
BBB         | BBB
AAA         | ???????????
 
resultcount :                     2
 
Enter command:
EXPLAIN
SELECT UPPER(C.C1), UPPER(D.C1) FROM <C, D> WHERE C.C1 = D.C1(+)!
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | C                  |                    | TABLE SCAN                               |          1
KERN               | D                  | C1                 | JOIN VIA KEY COLUMN                      |          1
INTERNAL           | TEMPORARY RESULT   |                    | TABLE SCAN                               |          1
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |         10
 
Enter command:
SELECT UPPER(C.C1), UPPER(D.C1) FROM <C, D> WHERE C.C1 = D.C1(+)!
 
resultcount :                     2
 
Enter command:
FETCH!
 
EXPRESSION1 | EXPRESSION2
------------+------------
BBB         | BBB
AAA         | ???????????
 
resultcount :                     2
 
Enter command:
 
EXPLAIN
SELECT SUM(1) FROM <A, B> WHERE A.C1 = B.C1(+)!
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | A                  |                    | TABLE SCAN                               |          1
KERN               | B                  |                    | TABLE SCAN                               |          1
INTERNAL           | TEMPORARY RESULT   |                    | TABLE SCAN                               |          1
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          8
 
Enter command:
SELECT SUM(1) FROM <A, B> WHERE A.C1 = B.C1(+)!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
--------------------------------------------
 2.0000000000000000000000000000000000000E+00
 
resultcount :                     1
 
Enter command:
EXPLAIN
SELECT SUM(1) FROM <C, D> WHERE C.C1 = D.C1(+)!
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | C                  |                    | TABLE SCAN                               |          1
KERN               | D                  | C1                 | JOIN VIA KEY COLUMN                      |          1
INTERNAL           | TEMPORARY RESULT   |                    | TABLE SCAN                               |          1
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          8
 
Enter command:
SELECT SUM(1) FROM <C, D> WHERE C.C1 = D.C1(+)!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
--------------------------------------------
 2.0000000000000000000000000000000000000E+00
 
resultcount :                     1
 
Enter command:
 
EXPLAIN
SELECT MIN(A.C1) FROM <A, B> WHERE A.C1 = B.C1 AND A.C1 = 'ddd'!
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | A                  |                    | TABLE SCAN                               |          1
KERN               | B                  |                    | TABLE SCAN                               |          1
INTERNAL           | TEMPORARY RESULT   |                    | TABLE SCAN                               |          1
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          8
 
Enter command:
SELECT MIN(A.C1) FROM <A, B> WHERE A.C1 = B.C1 AND A.C1 = 'ddd'!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
???????????
 
resultcount :                     1
 
Enter command:
 
EXPLAIN
SELECT MIN(C.C1) FROM <C, D> WHERE C.C1 = D.C1 AND C.C1 = 'ddd'!
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | C                  |                    | EQUAL CONDITION FOR KEY                  |          1
                   |                    | C1                 |      (USED KEY COLUMN)                   |
KERN               | D                  | C1                 | JOIN VIA KEY COLUMN                      |          1
INTERNAL           | TEMPORARY RESULT   |                    | TABLE SCAN                               |          1
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          6
 
Enter command:
SELECT MIN(C.C1) FROM <C, D> WHERE C.C1 = D.C1 AND C.C1 = 'ddd'!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
???????????
 
resultcount :                     1
 
Enter command:
COMMIT RELEASE !
 
Enter command:
SENDERID DBM !
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
SET PARAMETER OPTIMIZE_JOIN_ONEPHASE = 'YES'!
 
Enter command:
COMMIT RELEASE !
 
Enter command:
SENDERID XCI !
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
EXPLAIN
SELECT UPPER(A.C1), UPPER(B.C1) FROM <A, B> WHERE A.C1 = B.C1(+)!
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | A                  |                    | TABLE SCAN                               |          1
KERN               | B                  |                    | TABLE SCAN                               |          1
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          5
 
Enter command:
SELECT UPPER(A.C1), UPPER(B.C1) FROM <A, B> WHERE A.C1 = B.C1(+)!
 
resultcount :                     2
 
Enter command:
FETCH!
 
EXPRESSION1 | EXPRESSION2
------------+------------
BBB         | BBB
AAA         | ???????????
 
resultcount :                     2
 
Enter command:
EXPLAIN
SELECT UPPER(C.C1), UPPER(D.C1) FROM <C, D> WHERE C.C1 = D.C1(+)!
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | C                  |                    | TABLE SCAN                               |          1
KERN               | D                  | C1                 | JOIN VIA KEY COLUMN                      |          1
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          7
 
Enter command:
SELECT UPPER(C.C1), UPPER(D.C1) FROM <C, D> WHERE C.C1 = D.C1(+)!
 
resultcount :                     2
 
Enter command:
FETCH!
 
EXPRESSION1 | EXPRESSION2
------------+------------
BBB         | BBB
AAA         | ???????????
 
resultcount :                     2
 
Enter command:
 
EXPLAIN
SELECT SUM(1) FROM <A, B> WHERE A.C1 = B.C1(+)!
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | A                  |                    | TABLE SCAN                               |          1
KERN               | B                  |                    | TABLE SCAN                               |          1
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          5
 
Enter command:
SELECT SUM(1) FROM <A, B> WHERE A.C1 = B.C1(+)!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
--------------------------------------------
 2.0000000000000000000000000000000000000E+00
 
resultcount :                     1
 
Enter command:
EXPLAIN
SELECT SUM(1) FROM <C, D> WHERE C.C1 = D.C1(+)!
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | C                  |                    | TABLE SCAN                               |          1
KERN               | D                  | C1                 | JOIN VIA KEY COLUMN                      |          1
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          5
 
Enter command:
SELECT SUM(1) FROM <C, D> WHERE C.C1 = D.C1(+)!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
--------------------------------------------
 2.0000000000000000000000000000000000000E+00
 
resultcount :                     1
 
Enter command:
 
EXPLAIN
SELECT MIN(A.C1) FROM <A, B> WHERE A.C1 = B.C1 AND A.C1 = 'ddd'!
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | A                  |                    | TABLE SCAN                               |          1
KERN               | B                  |                    | TABLE SCAN                               |          1
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          5
 
Enter command:
SELECT MIN(A.C1) FROM <A, B> WHERE A.C1 = B.C1 AND A.C1 = 'ddd'!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
???????????
 
resultcount :                     1
 
Enter command:
 
EXPLAIN
SELECT MIN(C.C1) FROM <C, D> WHERE C.C1 = D.C1 AND C.C1 = 'ddd'!
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | C                  |                    | EQUAL CONDITION FOR KEY                  |          1
                   |                    | C1                 |      (USED KEY COLUMN)                   |
KERN               | D                  | C1                 | JOIN VIA KEY COLUMN                      |          1
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          3
 
Enter command:
SELECT MIN(C.C1) FROM <C, D> WHERE C.C1 = D.C1 AND C.C1 = 'ddd'!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
???????????
 
resultcount :                     1
 
Enter command:
ROLLBACK WORK!
 
Enter command:
COMMIT WORK RELEASE!
 
Enter command:
SENDERID XCI !
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
 
FILE JOIN_N ( 'YES' !
 
Enter command:
SENDERID DBM !
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
SET PARAMETER OPTIMIZE_OPERATOR_JOIN = 'YES' !
 
Enter command:
COMMIT RELEASE !
 
Enter command:
SENDERID XCI !
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE TAB1 ( SPALTE1 FIXED(5),
                    SPALTE2 FIXED(11,6),
                    SPALTE3 FIXED(3,3),
                    SPALTE4 FLOAT(7) ) !
 
Enter command:
CREATE TABLE TAB2 ( SPALTE1 FLOAT(12), COL2 FIXED(5,2) ) !
 
Enter command:
INSERT TAB1 VALUES ( 348  , 76543.21, - 0.623, -12.3E12 ) !
 
Enter command:
INSERT TAB1 VALUES ( -9999,        0,   0.003, 12345E-7 ) !
 
Enter command:
INSERT TAB1 VALUES (  NULL,  -5.1234,       0,     NULL ) !
 
Enter command:
INSERT TAB1 VALUES (     0,     NULL,    NULL,    3E-32 ) !
 
Enter command:
INSERT TAB2 VALUES ( 1.34E+1,   22.33 ) !
 
Enter command:
INSERT TAB2 VALUES (   -0.18, -123.07 ) !
 
Enter command:
SELECT *  FROM TAB1, TAB2 REF
   WHERE +ABS(TAB1.SPALTE1 + REF.SPALTE1 )
       > TRUNC(REF.SPALTE1 -  ABS( -REF.COL2 )) !
 
resultcount :                     6
 
Enter command:
FETCH !
 
SPALTE1 | SPALTE2       | SPALTE3 | SPALTE4       | SPALTE1            | COL2
--------+---------------+---------+---------------+--------------------+--------
   348  |  76543.210000 | -0.623  | -1.230000E+13 |  1.34000000000E+01 |   22.33
   348  |  76543.210000 | -0.623  | -1.230000E+13 | -1.80000000000E-01 | -123.07
 -9999  |      0.000000 |  0.003  |  1.234500E-03 |  1.34000000000E+01 |   22.33
 -9999  |      0.000000 |  0.003  |  1.234500E-03 | -1.80000000000E-01 | -123.07
     0  | ????????????? | ?????   |  3.000000E-32 |  1.34000000000E+01 |   22.33
     0  | ????????????? | ?????   |  3.000000E-32 | -1.80000000000E-01 | -123.07
 
resultcount :                     6
 
Enter command:
SELECT  3*TRUNC(  SPALTE3 ) / ABS(REF.COL2 * ABS(-1.0)),
        ABS ( COL2 ) NEU,
        KERN.TAB1.SPALTE4 + TRUNC(-32.7 )
  FROM TAB1,TAB2 REF WHERE TAB1.SPALTE3 IS NOT NULL !
 
resultcount :                     6
 
Enter command:
FETCH !
 
EXPRESSION1       :        0.00000000000000000000000000000000
NEU               :    22.33
EXPRESSION2       :  -1.2300000000032000000000000000000000000E+13
-----------------------------------------------------------------
EXPRESSION1       :        0.00000000000000000000000000000000
NEU               :   123.07
EXPRESSION2       :  -1.2300000000032000000000000000000000000E+13
-----------------------------------------------------------------
EXPRESSION1       :        0.00000000000000000000000000000000
NEU               :    22.33
EXPRESSION2       :  -3.1998765500000000000000000000000000000E+01
-----------------------------------------------------------------
EXPRESSION1       :        0.00000000000000000000000000000000
NEU               :   123.07
EXPRESSION2       :  -3.1998765500000000000000000000000000000E+01
-----------------------------------------------------------------
EXPRESSION1       :        0.00000000000000000000000000000000
NEU               :    22.33
EXPRESSION2       :  ????????????????????????????????????????????
-----------------------------------------------------------------
EXPRESSION1       :        0.00000000000000000000000000000000
NEU               :   123.07
EXPRESSION2       :  ????????????????????????????????????????????
 
resultcount :                     6
 
Enter command:
ROLLBACK WORK RELEASE!
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE TAB1 ( SPALTE11 FIXED(10) KEY,
                    SPALTE12 CHAR(8),
                    SPALTE13 FLOAT(8) RANGE BETWEEN -1E30 AND +1E30 ) !
 
Enter command:
CREATE TABLE TAB2 ( SPALTE21 FLOAT(10),
                    SPALTE22 FIXED(12,2),
                    SPALTE23 CHAR(6) ) !
 
Enter command:
CREATE TABLE TAB3 ( SPALTE31 FLOAT(8) RANGE BETWEEN -1E15 AND +1E15,
                    SPALTE32 FLOAT(8),
                    SPALTE33 CHAR(12) ) !
 
Enter command:
INSERT TAB1 VALUES ( 12345678      , 'HANS'   , 1.2345678E7 ) !
 
Enter command:
INSERT TAB1 VALUES ( 22            , 'OTTO'   , 12345678    ) !
 
Enter command:
INSERT TAB1 VALUES ( -888          , 'HANS'   , 1E28        ) !
 
Enter command:
INSERT TAB2 VALUES ( -3827.32E11   , -888     , 'PAUL'      ) !
 
Enter command:
INSERT TAB2 VALUES ( 1E28          , 12345678 , 'HANS'      ) !
 
Enter command:
INSERT TAB2 VALUES ( 12.3456780E+06, -0       , 'HANS'      ) !
 
Enter command:
INSERT TAB3 VALUES ( 12345678      , 12345678 , 'HANS'      ) !
 
Enter command:
INSERT TAB3 VALUES ( -5E14         , 1E28     , 'OTTO'      ) !
 
Enter command:
INSERT TAB3 VALUES ( -5E14         , 0        , NULL        ) !
 
Enter command:
SELECT SPALTE11, SPALTE12, SPALTE22, SPALTE23, SPALTE33
   FROM TAB1, TAB2 REF2, TAB3
   WHERE REF2.SPALTE23 = TAB1.SPALTE12 !
 
resultcount :                    12
 
Enter command:
FETCH !
 
SPALTE11    | SPALTE12 | SPALTE22       | SPALTE23 | SPALTE33
------------+----------+----------------+----------+-------------
       -888 | HANS     |    12345678.00 | HANS     | HANS
   12345678 | HANS     |    12345678.00 | HANS     | HANS
       -888 | HANS     |           0.00 | HANS     | HANS
   12345678 | HANS     |           0.00 | HANS     | HANS
       -888 | HANS     |    12345678.00 | HANS     | OTTO
   12345678 | HANS     |    12345678.00 | HANS     | OTTO
       -888 | HANS     |           0.00 | HANS     | OTTO
   12345678 | HANS     |           0.00 | HANS     | OTTO
       -888 | HANS     |    12345678.00 | HANS     | ????????????
   12345678 | HANS     |    12345678.00 | HANS     | ????????????
       -888 | HANS     |           0.00 | HANS     | ????????????
   12345678 | HANS     |           0.00 | HANS     | ????????????
 
resultcount :                    12
 
Enter command:
SELECT SPALTE11, SPALTE22,SPALTE32 FROM TAB1 REF1, TAB2 REF2, TAB3
   WHERE ( 5E+06 *  REF2.SPALTE22 ) <=(TAB3.SPALTE32) +  48 !
 
resultcount :                    21
 
Enter command:
FETCH !
 
SPALTE11    | SPALTE22       | SPALTE32
------------+----------------+---------------
       -888 |        -888.00 |  1.2345678E+07
         22 |        -888.00 |  1.2345678E+07
   12345678 |        -888.00 |  1.2345678E+07
       -888 |           0.00 |  1.2345678E+07
         22 |           0.00 |  1.2345678E+07
   12345678 |           0.00 |  1.2345678E+07
       -888 |        -888.00 |  1.0000000E+28
         22 |        -888.00 |  1.0000000E+28
   12345678 |        -888.00 |  1.0000000E+28
       -888 |    12345678.00 |  1.0000000E+28
         22 |    12345678.00 |  1.0000000E+28
   12345678 |    12345678.00 |  1.0000000E+28
       -888 |           0.00 |  1.0000000E+28
         22 |           0.00 |  1.0000000E+28
   12345678 |           0.00 |  1.0000000E+28
       -888 |        -888.00 |  0.0000000E+00
         22 |        -888.00 |  0.0000000E+00
 
SPALTE11    | SPALTE22       | SPALTE32
------------+----------------+---------------
   12345678 |        -888.00 |  0.0000000E+00
       -888 |           0.00 |  0.0000000E+00
         22 |           0.00 |  0.0000000E+00
   12345678 |           0.00 |  0.0000000E+00
 
resultcount :                    21
 
Enter command:
SELECT TAB1.SPALTE11 , SPALTE13, SPALTE31, REF3.SPALTE32, SPALTE22
  FROM TAB1, TAB2  , TAB3 REF3
  WHERE TAB1.SPALTE13/TAB1.SPALTE11>(.7E10*REF3.SPALTE31)+REF3.SPALTE32 !
 
resultcount :                     6
 
Enter command:
FETCH !
 
SPALTE11    | SPALTE13       | SPALTE31       | SPALTE32       | SPALTE22
------------+----------------+----------------+----------------+---------------
         22 |  1.2345678E+07 | -5.0000000E+14 |  0.0000000E+00 |        -888.00
         22 |  1.2345678E+07 | -5.0000000E+14 |  0.0000000E+00 |    12345678.00
         22 |  1.2345678E+07 | -5.0000000E+14 |  0.0000000E+00 |           0.00
   12345678 |  1.2345678E+07 | -5.0000000E+14 |  0.0000000E+00 |        -888.00
   12345678 |  1.2345678E+07 | -5.0000000E+14 |  0.0000000E+00 |    12345678.00
   12345678 |  1.2345678E+07 | -5.0000000E+14 |  0.0000000E+00 |           0.00
 
resultcount :                     6
 
Enter command:
SELECT SPALTE21, SPALTE13 FROM TAB1, TAB2
   WHERE (( TAB2.SPALTE21 = 12345678)
     AND 1E10 > TAB1.SPALTE13  ) !
 
resultcount :                     2
 
Enter command:
FETCH !
 
SPALTE21         | SPALTE13
-----------------+---------------
 1.234567800E+07 |  1.2345678E+07
 1.234567800E+07 |  1.2345678E+07
 
resultcount :                     2
 
Enter command:
SELECT REF2.*, TAB3.*  FROM TAB2 REF2, TAB3
   WHERE ( 10E3*REF2.SPALTE22)  <(  ( TAB3.SPALTE31) )
     AND ( REF2.SPALTE23 <= TAB3.SPALTE33
     AND TAB3.SPALTE32 / ( 3*TAB3.SPALTE31)
         >REF2.SPALTE22 * (-REF2.SPALTE21) ) !
 
resultcount :                     1
 
Enter command:
FETCH !
 
SPALTE21          :   1.234567800E+07
SPALTE22          :            0.00
SPALTE23          :  HANS
SPALTE31          :   1.2345678E+07
SPALTE32          :   1.2345678E+07
SPALTE33          :  HANS
 
resultcount :                     1
 
Enter command:
SELECT * FROM TAB1,TAB2,TAB3
   WHERE TAB1.SPALTE13 +88.E-12= (- 1)*( - TAB2.SPALTE21)
     AND 6587- TAB1.SPALTE11  >  (TAB3.SPALTE32 - TAB3.SPALTE31) *5. !
 
resultcount :                     1
 
Enter command:
FETCH !
 
SPALTE11          :         -888
SPALTE12          :  HANS
SPALTE13          :   1.0000000E+28
SPALTE21          :   1.000000000E+28
SPALTE22          :     12345678.00
SPALTE23          :  HANS
SPALTE31          :   1.2345678E+07
SPALTE32          :   1.2345678E+07
SPALTE33          :  HANS
 
resultcount :                     1
 
Enter command:
SELECT SPALTE11, TAB1.SPALTE12,SPALTE21,SPALTE22, SPALTE31  ,SPALTE33
   FROM TAB1,TAB2,TAB3
   WHERE TAB1.SPALTE11>=TAB2.SPALTE22
     AND TAB2.SPALTE21 <> TAB3.SPALTE31
     AND TAB3.SPALTE33 = TAB1.SPALTE12 !
 
resultcount :                     5
 
Enter command:
FETCH !
 
SPALTE11          :         -888
SPALTE12          :  HANS
SPALTE21          :  -3.827320000E+14
SPALTE22          :         -888.00
SPALTE31          :   1.2345678E+07
SPALTE33          :  HANS
-------------------------------------
SPALTE11          :           22
SPALTE12          :  OTTO
SPALTE21          :  -3.827320000E+14
SPALTE22          :         -888.00
SPALTE31          :  -5.0000000E+14
SPALTE33          :  OTTO
-------------------------------------
SPALTE11          :     12345678
SPALTE12          :  HANS
SPALTE21          :  -3.827320000E+14
SPALTE22          :         -888.00
SPALTE31          :   1.2345678E+07
SPALTE33          :  HANS
-------------------------------------
SPALTE11          :     12345678
SPALTE12          :  HANS
SPALTE21          :   1.000000000E+28
SPALTE22          :     12345678.00
SPALTE31          :   1.2345678E+07
SPALTE33          :  HANS
-------------------------------------
SPALTE11          :           22
SPALTE12          :  OTTO
SPALTE21          :   1.234567800E+07
SPALTE22          :            0.00
SPALTE31          :  -5.0000000E+14
SPALTE33          :  OTTO
 
resultcount :                     5
 
Enter command:
SELECT REF11.SPALTE11,REF11.SPALTE12,REF11.SPALTE13,REF12.*
   FROM TAB1 REF11, TAB1 REF12
   WHERE REF12.SPALTE11 = REF11.SPALTE13 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
SPALTE11          :           22
SPALTE12          :  OTTO
SPALTE13          :   1.2345678E+07
SPALTE11          :     12345678
SPALTE12          :  HANS
SPALTE13          :   1.2345678E+07
-----------------------------------
SPALTE11          :     12345678
SPALTE12          :  HANS
SPALTE13          :   1.2345678E+07
SPALTE11          :     12345678
SPALTE12          :  HANS
SPALTE13          :   1.2345678E+07
 
resultcount :                     2
 
Enter command:
SELECT TAB1.SPALTE11, SPALTE21,SPALTE22, REF1.SPALTE13
   FROM TAB1,TAB2,TAB1  REF1
   WHERE - REF1.SPALTE13 < -TAB1.SPALTE11
     AND (48 + 5 )*REF1.SPALTE13 < 10E30/TAB2.SPALTE21 * TAB2.SPALTE22 !
 
resultcount :                     8
 
Enter command:
FETCH !
 
SPALTE11    | SPALTE21         | SPALTE22       | SPALTE13
------------+------------------+----------------+---------------
       -888 | -3.827320000E+14 |        -888.00 |  1.2345678E+07
       -888 |  1.000000000E+28 |    12345678.00 |  1.2345678E+07
         22 | -3.827320000E+14 |        -888.00 |  1.2345678E+07
         22 |  1.000000000E+28 |    12345678.00 |  1.2345678E+07
       -888 | -3.827320000E+14 |        -888.00 |  1.2345678E+07
       -888 |  1.000000000E+28 |    12345678.00 |  1.2345678E+07
         22 | -3.827320000E+14 |        -888.00 |  1.2345678E+07
         22 |  1.000000000E+28 |    12345678.00 |  1.2345678E+07
 
resultcount :                     8
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 ( T1XC1 CHAR(5) ASCII KEY,
                  T1XC2 CHAR(5) KEY,
                  T1XC3 FIXED(5) ) !
 
Enter command:
CREATE TABLE T2 ( T2XC1 CHAR(5) ASCII KEY,
                  T2XC2 FIXED(5),
                  T2XC3 CHAR(8),
                  T2XC4 FIXED(6,1) NOT NULL ) !
 
Enter command:
CREATE INDEX I1 ON T2 ( T2XC4 ASC, T2XC3 DESC ) !
 
Enter command:
CREATE INDEX I2 ON T2 ( T2XC2 ASC ) !
 
Enter command:
CREATE INDEX "t1.t1xc3"
 ON T1( T1XC3 DESC ) !
 
Enter command:
INSERT T1 VALUES ( 'cc', 'ffff', 2 ) !
 
Enter command:
INSERT T1 VALUES ( 'aa', 'ssss', NULL ) !
 
Enter command:
INSERT T2 VALUES ( 'aa', 5, 'dddd', 3 ) !
 
Enter command:
INSERT T2 VALUES ( 'dd', 3, 'ffff', 2 ) !
 
Enter command:
EXPLAIN SELECT * FROM T1, T2 WHERE T1XC1 = T2XC1 AND T1XC3 < T2XC4 !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | T1                 |                    | TABLE SCAN                               |          1
KERN               | T2                 | T2XC1              | JOIN VIA KEY COLUMN                      |          1
                   |                    |                    |      NO TEMPORARY RESULTS CREATED        |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          3
 
Enter command:
SELECT * FROM T1, T2 WHERE T1XC1 = T2XC1 AND T1XC3 < T2XC4 !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
FETCH!
 
***ERROR    100 Row not found                                              0001
 
Enter command:
ROLLBACK WORK RELEASE !
 
Enter command:
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T11
   ( T1XC1 CHAR(10) KEY,
     T1XC2 FIXED(3) NOT NULL RANGE BETWEEN -100 AND +100,
     T1XC3 FLOAT(3),
     T1XC4 CHAR(10) BYTE ) !
 
Enter command:
CREATE VIEW V1XT1 AS
   SELECT *  FROM T11
   WHERE T1XC1 > 'HAMELN' OR ( T11.T1XC4 IS  NULL ) !
 
Enter command:
CREATE VIEW V2XT1 AS SELECT T11.T1XC1, T1XC2  FROM T11 !
 
Enter command:
CREATE VIEW V4XT1 ( V4XC1, V4XC2 )  AS
   SELECT ALL T1XC1, K1XT1.T1XC2 FROM T11 K1XT1
   WHERE ( K1XT1.T1XC2 BETWEEN -50 AND +50 )
   AND K1XT1.T1XC1 < 'K' WITH CHECK OPTION !
 
Enter command:
CREATE VIEW V5XT1 (  V5XC1 ) AS
   SELECT 3 * T1XC3
   FROM T11
   WHERE T1XC3*3 <3E20 !
 
Enter command:
INSERT T11 VALUES ( 'MUENCHEN', 32, 2E10, X'D6E3E3D6' ) !
 
Enter command:
INSERT V1XT1 VALUES ( 'BERLIN', 12, 8E-7, X'D7C1E4D3' ) !
 
Enter command:
INSERT V1XT1 SET T1XC1 = 'HAMBURG',
                        T1XC2 = 38,
                        T1XC3 = 80E-08 !
 
Enter command:
UPDATE V2XT1 SET T1XC2 = 64 WHERE T1XC2 = 32 !
 
resultcount :                     1
 
Enter command:
INSERT V4XT1 SET V4XC1 = 'BONN',
                        V4XC2 = -20 !
 
Enter command:
DELETE V4XT1 WHERE V4XC1 = 'BONN' AND V4XC2 IN (-20) !
 
resultcount :                     1
 
Enter command:
INSERT V4XT1 VALUES ( 'BONN', -20 ) !
 
Enter command:
COMMIT WORK !
 
Enter command:
CREATE VIEW V1XV1XT1 AS
   SELECT T1XC1, V1XT1.T1XC2, T1XC3
   FROM V1XT1
   WHERE V1XT1.T1XC1 > 'KOELN'
   WITH CHECK OPTION !
 
Enter command:
CREATE VIEW V1XV1XV1XT1 AS
   SELECT *
   FROM V1XV1XT1 SYN1
   WHERE SYN1.T1XC3 <1E30 !
 
Enter command:
INSERT V1XV1XV1XT1 VALUES ( 'MANNHEIM', 18, -5.E12 ) !
 
Enter command:
DECLARE ERG1 CURSOR FOR
SELECT T1XC1, V1XV1XT1.T1XC2,V1XV1XT1.T1XC3
   FROM V1XV1XT1 !
 
resultcount :               unknown
 
Enter command:
FETCH ERG1 !
 
T1XC1      | T1XC2 | T1XC3
-----------+-------+----------
MANNHEIM   |   18  | -5.00E+12
MUENCHEN   |   64  |  2.00E+10
 
resultcount :                     2
 
Enter command:
DECLARE ERG2 CURSOR FOR
SELECT DISTINCT KERN.T11.T1XC1, V1XV1XV1XT1.T1XC3,
   SYN2.T1XC2
   FROM T11, V2XT1 SYN2, V1XV1XV1XT1
   WHERE SYN2.T1XC2 + 32 <= V1XV1XV1XT1.T1XC3
   ORDER BY KERN.T11.T1XC1, SYN2.T1XC2 !
 
resultcount :                    25
 
Enter command:
FETCH ERG2 !
 
T1XC1      | T1XC3     | T1XC2
-----------+-----------+------
BERLIN     |  2.00E+10 |  -20
BERLIN     |  2.00E+10 |   12
BERLIN     |  2.00E+10 |   18
BERLIN     |  2.00E+10 |   38
BERLIN     |  2.00E+10 |   64
BONN       |  2.00E+10 |  -20
BONN       |  2.00E+10 |   12
BONN       |  2.00E+10 |   18
BONN       |  2.00E+10 |   38
BONN       |  2.00E+10 |   64
HAMBURG    |  2.00E+10 |  -20
HAMBURG    |  2.00E+10 |   12
HAMBURG    |  2.00E+10 |   18
HAMBURG    |  2.00E+10 |   38
HAMBURG    |  2.00E+10 |   64
MANNHEIM   |  2.00E+10 |  -20
MANNHEIM   |  2.00E+10 |   12
 
T1XC1      | T1XC3     | T1XC2
-----------+-----------+------
MANNHEIM   |  2.00E+10 |   18
MANNHEIM   |  2.00E+10 |   38
MANNHEIM   |  2.00E+10 |   64
MUENCHEN   |  2.00E+10 |  -20
MUENCHEN   |  2.00E+10 |   12
MUENCHEN   |  2.00E+10 |   18
MUENCHEN   |  2.00E+10 |   38
MUENCHEN   |  2.00E+10 |   64
 
resultcount :                    25
 
Enter command:
COMMIT WORK !
 
Enter command:
CREATE TABLE T21 ( T2XC1 FLOAT(5) , T2XC2 CHAR(20) ) !
 
Enter command:
CREATE SYNONYM SYNXT2 FOR T21 !
 
Enter command:
CREATE SYNONYM SYNXV1XV1XT1 FOR V1XV1XT1 !
 
Enter command:
CREATE VIEW SYNXVIEW
   (SPALTE1,SPALTE2,SPALTE3,SPALTE4,SPALTE5,SPALTE6,SPALTE7 ) AS
   SELECT SYNXT2.T2XC1, SYNXV1XV1XT1.T1XC1, T2XC2, V1XV1XT1.*,
          SYNXV1XV1XT1.T1XC2
   FROM SYNXT2, SYNXV1XV1XT1 , V1XV1XT1
   WHERE SYNXT2.T2XC2 < 'K' AND  ( V1XV1XT1.T1XC1 < 'NUERNBERG' )!
 
Enter command:
INSERT SYNXT2 VALUES ( 38, 'ESSEN' ) !
 
Enter command:
CREATE SYNONYM SYNXSYNXVIEW FOR SYNXVIEW !
 
Enter command:
SELECT * FROM SYNXSYNXVIEW WHERE ( SPALTE1 IN ( 37, 38, 39 )
                             AND SYNXSYNXVIEW.SPALTE2 < 'MOELLN' ) !
 
resultcount :                     2
 
Enter command:
FETCH !
 
SPALTE1           :   3.8000E+01
SPALTE2           :  MANNHEIM
SPALTE3           :  ESSEN
SPALTE4           :  MANNHEIM
SPALTE5           :    18
SPALTE6           :  -5.00E+12
SPALTE7           :    18
-----------------------------------------
SPALTE1           :   3.8000E+01
SPALTE2           :  MANNHEIM
SPALTE3           :  ESSEN
SPALTE4           :  MUENCHEN
SPALTE5           :    64
SPALTE6           :   2.00E+10
SPALTE7           :    18
 
resultcount :                     2
 
Enter command:
CREATE USER R1 PASSWORD R1XW RESOURCE !
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER D1 PASSWORD D1XW RESOURCE !
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
GRANT ALL ON V1XT1 TO PUBLIC !
 
Enter command:
GRANT SELECT ON SYNXVIEW TO R1 !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( D1 D1XW !
 
Enter command:
CONNECT D1 IDENTIFIED BY D1XW   ISOLATION LEVEL 1 !
 
Enter command:
CREATE VIEW VIEW1 AS
    SELECT T1XC1, T1XC2
    FROM KERN.V1XT1
    WITH CHECK OPTION !
 
Enter command:
INSERT VIEW1 VALUES ( 'ISERLOHN' , - 20 ) !
 
Enter command:
SELECT * FROM VIEW1 !
 
resultcount :               unknown
 
Enter command:
FETCH !
 
T1XC1      | T1XC2
-----------+------
BONN       |  -20
HAMBURG    |   38
ISERLOHN   |  -20
MANNHEIM   |   18
MUENCHEN   |   64
 
resultcount :                     5
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( R1 R1XW !
 
Enter command:
CONNECT R1 IDENTIFIED BY R1XW   ISOLATION LEVEL 1 !
 
Enter command:
CREATE SYNONYM SYNXV1XT1 FOR KERN.V1XT1 !
 
Enter command:
CREATE VIEW R1XVIEW ( SPALTE1, SPALTE2, SPALTE3 ) AS
   SELECT SPALTE1, SPALTE3, T1XC1
   FROM SYNXVIEW, SYNXV1XT1
   WHERE SPALTE1 - 38 <= 0 AND T1XC1 < 'I' !
 
Enter command:
SELECT * FROM R1XVIEW !
 
resultcount :                     8
 
Enter command:
FETCH !
 
SPALTE1     | SPALTE2              | SPALTE3
------------+----------------------+-----------
 3.8000E+01 | ESSEN                | BONN
 3.8000E+01 | ESSEN                | HAMBURG
 3.8000E+01 | ESSEN                | BONN
 3.8000E+01 | ESSEN                | HAMBURG
 3.8000E+01 | ESSEN                | BONN
 3.8000E+01 | ESSEN                | HAMBURG
 3.8000E+01 | ESSEN                | BONN
 3.8000E+01 | ESSEN                | HAMBURG
 
resultcount :                     8
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
DROP TABLE T11 !
 
Enter command:
DROP TABLE T21 !
 
Enter command:
ROLLBACK WORK RELEASE !
 
Enter command:
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER D1 !
 
Enter command:
DROP USER R1 !
 
Enter command:
COMMIT RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE TAB1 ( SPALTE11 CHAR(10) KEY ,
                    SPALTE12 FIXED(5,2),
                    SPALTE13 FLOAT(5) ) !
 
Enter command:
INSERT TAB1 VALUES ( 'HANS'    , 22.52 , NULL ) !
 
Enter command:
INSERT TAB1 VALUES ( 'PAUL'    ,   0   ,  3E2 ) !
 
Enter command:
INSERT TAB1 VALUES ( 'JOACHIM' , 17.1  ,   0  ) !
 
Enter command:
CREATE TABLE TAB2 ( SPALTE21 FIXED(4) NOT NULL,
                    SPALTE22 CHAR(8) ,
                    SPALTE23 FLOAT(4) ) !
 
Enter command:
INSERT TAB2 VALUES ( 300   , 'HANS'   , NULL ) !
 
Enter command:
INSERT TAB2 VALUES ( 22.00 , 'FRIEDA' , 0    ) !
 
Enter command:
INSERT TAB2 VALUES ( 12    , 'JOACHIM', 0    ) !
 
Enter command:
CREATE TABLE TAB3 ( SPALTE31 FIXED(3),
                    SPALTE32 CHAR(10),
                    SPALTE33 FIXED(3) ) !
 
Enter command:
INSERT TAB3 VALUES ( 22  , 'HANS'    , NULL ) !
 
Enter command:
INSERT TAB3 VALUES ( 300 , 'ANDREAS' , 0    ) !
 
Enter command:
INSERT TAB3 VALUES ( 300 , 'ANDREAS' , 0    ) !
 
Enter command:
INSERT TAB3 VALUES ( NULL, 'JOACHIM' , 300  ) !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
SELECT * INTO :A1,:A2,:A3,:A4,:A5,:A6 FROM TAB1, TAB2
   WHERE TAB1.SPALTE13 = TAB2.SPALTE21 !
 
SPALTE11          :  PAUL
SPALTE12          :     0.00
SPALTE13          :   3.0000E+02
SPALTE21          :    300
SPALTE22          :  HANS
SPALTE23          :  ??????????
 
Enter command:
SELECT * INTO :A1,:A2,:A3,:A4,:A5,:A6 FROM TAB1, TAB2
   WHERE TAB2.SPALTE21  =  TAB1.SPALTE13 !
 
SPALTE11          :  PAUL
SPALTE12          :     0.00
SPALTE13          :   3.0000E+02
SPALTE21          :    300
SPALTE22          :  HANS
SPALTE23          :  ??????????
 
Enter command:
SELECT  * INTO :A1,:A2,:A3,:A4,:A5,:A6
   FROM KERN.TAB1, KERN.TAB2
   WHERE  KERN.TAB2.SPALTE21=KERN.TAB1.SPALTE13 !
 
SPALTE11          :  PAUL
SPALTE12          :     0.00
SPALTE13          :   3.0000E+02
SPALTE21          :    300
SPALTE22          :  HANS
SPALTE23          :  ??????????
 
Enter command:
SELECT TAB1.SPALTE13 NEU13, TAB1.SPALTE11,
       KERN.TAB2.SPALTE21 NEU21
   INTO :A1,:A2,:A3 FROM TAB1, KERN.TAB2
   WHERE TAB1.SPALTE11 > 'KARIN'
      OR TAB1.SPALTE13=  TAB2.SPALTE21 !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT TAB1.SPALTE13 NEU13, TAB1.SPALTE11,
       KERN.TAB2.SPALTE21 NEU21
   INTO :A1,:A2,:A3 FROM TAB1, KERN.TAB2
   WHERE ( TAB1.SPALTE11 > 'KARIN'
      OR TAB1.SPALTE13=  TAB2.SPALTE21 ) !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT  KERN.TAB2.SPALTE22,KERN.TAB1.SPALTE13 NEU13,
        TAB2.SPALTE23
   INTO :A1, :A2,:A3
   FROM KERN.TAB2, TAB1
   WHERE KERN.TAB1.SPALTE13 = TAB2.SPALTE23
     AND (( TAB2.SPALTE21 <= 20 )) !
 
SPALTE22          :  JOACHIM
NEU13             :   0.0000E+00
SPALTE23          :   0.000E+00
 
Enter command:
SELECT * INTO :A1,:A2,:A3,:A4,:A5,:A6 FROM TAB1 , TAB2
   WHERE    TAB1.SPALTE12  = TAB2.SPALTE21
      OR  KERN.TAB2.SPALTE22 IN ( 'KLAUS' , 'FRIEDA' ) !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT * INTO :A1,:A2,:A3,:A4,:A5,:A6 FROM TAB1 , TAB2
   WHERE  ( TAB1.SPALTE12  = TAB2.SPALTE21 )
      OR  KERN.TAB2.SPALTE22 IN ( 'KLAUS' , 'FRIEDA' ) !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT * INTO :A1,:A2,:A3,:A4,:A5,:A6 FROM TAB1,TAB2
   WHERE TAB2.SPALTE23 <0
      OR  KERN.TAB1.SPALTE11= KERN.TAB2.SPALTE22
     AND KERN.TAB1.SPALTE12 <= TAB2.SPALTE21 !
 
SPALTE11          :  HANS
SPALTE12          :    22.52
SPALTE13          :  ???????????
SPALTE21          :    300
SPALTE22          :  HANS
SPALTE23          :  ??????????
 
Enter command:
SELECT * INTO :A1,:A2,:A3,:A4,:A5,:A6 FROM TAB1,TAB2
   WHERE  KERN.TAB1.SPALTE11= KERN.TAB2.SPALTE22
     AND KERN.TAB1.SPALTE12 <= TAB2.SPALTE21
      OR TAB2.SPALTE23 <0 !
 
SPALTE11          :  HANS
SPALTE12          :    22.52
SPALTE13          :  ???????????
SPALTE21          :    300
SPALTE22          :  HANS
SPALTE23          :  ??????????
 
Enter command:
SELECT TAB2.* INTO :A1,:A2,:A3 FROM KERN.TAB1,TAB2
   WHERE ( KERN.TAB1.SPALTE11 LIKE 'PA_L' )
     AND TAB1.SPALTE13 <> KERN.TAB2.SPALTE23
     AND ( TAB2.SPALTE22 < 'KARIN' ) !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT TAB2.* INTO :A1,:A2,:A3 FROM KERN.TAB1,TAB2
   WHERE ( KERN.TAB1.SPALTE11 LIKE 'PA_L' )
     AND TAB1.SPALTE13 <> KERN.TAB2.SPALTE23
     AND ( TAB2.SPALTE22 < 'INGE' ) !
 
SPALTE21          :     22
SPALTE22          :  FRIEDA
SPALTE23          :   0.000E+00
 
Enter command:
SELECT TAB2.* INTO :A1,:A2,:A3 FROM KERN.TAB1,TAB2
   WHERE  TAB1.SPALTE13 <> KERN.TAB2.SPALTE23
     AND KERN.TAB1.SPALTE11 LIKE 'PA_L'
     AND TAB2.SPALTE22 < 'INGE' !
 
SPALTE21          :     22
SPALTE22          :  FRIEDA
SPALTE23          :   0.000E+00
 
Enter command:
SELECT TAB2.* INTO :A1,:A2,:A3 FROM KERN.TAB1,TAB2
   WHERE (TAB1.SPALTE13 <> KERN.TAB2.SPALTE23
     AND KERN.TAB1.SPALTE11 LIKE 'PA_L' )
     AND TAB2.SPALTE22 < 'INGE' !
 
SPALTE21          :     22
SPALTE22          :  FRIEDA
SPALTE23          :   0.000E+00
 
Enter command:
SELECT TAB2.* INTO :A1,:A2,:A3 FROM KERN.TAB1,TAB2
   WHERE  (NOT ( TAB1.SPALTE13 = KERN.TAB2.SPALTE23 )
     AND KERN.TAB1.SPALTE11 LIKE 'PA_L' )
     AND TAB2.SPALTE22 < 'INGE' !
 
SPALTE21          :     22
SPALTE22          :  FRIEDA
SPALTE23          :   0.000E+00
 
Enter command:
SELECT TAB1.*, KERN.TAB2.*, KERN.TAB1.*
   INTO :A1,:A2,:A3,:A4,:A5,:A6,:A7,:A8,:A9 FROM TAB1,TAB2
   WHERE KERN.TAB2.SPALTE21 = TAB1.SPALTE12
      OR TAB1.SPALTE13 IS NULL
     AND TAB2.SPALTE21 > 100.00 !
 
SPALTE11          :  HANS
SPALTE12          :    22.52
SPALTE13          :  ???????????
SPALTE21          :    300
SPALTE22          :  HANS
SPALTE23          :  ??????????
SPALTE11          :  HANS
SPALTE12          :    22.52
SPALTE13          :  ???????????
 
Enter command:
SELECT ALL  * INTO :A1,:A2,:A3,:A4,:A5,:A6 FROM TAB2,TAB1
   WHERE TAB1.SPALTE13 = TAB2.SPALTE21 !
 
SPALTE21          :    300
SPALTE22          :  HANS
SPALTE23          :  ??????????
SPALTE11          :  PAUL
SPALTE12          :     0.00
SPALTE13          :   3.0000E+02
 
Enter command:
SELECT DISTINCT  * INTO :A1,:A2,:A3,:A4,:A5,:A6
   FROM  TAB2 , TAB1
   WHERE TAB1.SPALTE13  =  TAB2.SPALTE21 !
 
SPALTE21          :    300
SPALTE22          :  HANS
SPALTE23          :  ??????????
SPALTE11          :  PAUL
SPALTE12          :     0.00
SPALTE13          :   3.0000E+02
 
Enter command:
SELECT  *   INTO :A1,:A2,:A3,  :A4,:A5,:A6
   FROM TAB1  REF1, TAB2
   WHERE REF1.SPALTE13=TAB2.SPALTE21 !
 
SPALTE11          :  PAUL
SPALTE12          :     0.00
SPALTE13          :   3.0000E+02
SPALTE21          :    300
SPALTE22          :  HANS
SPALTE23          :  ??????????
 
Enter command:
SELECT REF1.SPALTE11 NEU11, KERN.TAB2.* INTO :A1,:A2,:A3,:A4
   FROM TAB1  REF1, KERN.TAB2
   WHERE REF1.SPALTE13 = KERN.TAB2.SPALTE21 !
 
NEU11             :  PAUL
SPALTE21          :    300
SPALTE22          :  HANS
SPALTE23          :  ??????????
 
Enter command:
SELECT KERN.TAB1.*, REF2.*
   INTO :A1,:A2,:A3,:A4,:A5,:A6
   FROM TAB1, TAB2 REF2
   WHERE TAB1.SPALTE13 = REF2.SPALTE21 !
 
SPALTE11          :  PAUL
SPALTE12          :     0.00
SPALTE13          :   3.0000E+02
SPALTE21          :    300
SPALTE22          :  HANS
SPALTE23          :  ??????????
 
Enter command:
SELECT ALL REF1.SPALTE11 NEU11 , REF1.SPALTE12,
    REF1.SPALTE13,REF2.SPALTE21 NEU21,REF2.SPALTE21 NEU21
   INTO :A1, :A2 ,:A3,:A4,:A5
   FROM TAB1  REF1, TAB2 REF2
   WHERE REF1.SPALTE13 = REF2.SPALTE21 !
 
NEU11             :  PAUL
SPALTE12          :     0.00
SPALTE13          :   3.0000E+02
NEU21             :    300
NEU21             :    300
 
Enter command:
SELECT DISTINCT KERN.TAB1.* , REF3.*
   INTO :A1,:A2,:A3,:A4,:A5,:A6
   FROM KERN.TAB1 , KERN.TAB3  REF3 , TAB1 REF1
   WHERE REF1.SPALTE13 < REF3.SPALTE31
     AND REF3.SPALTE33 = KERN.TAB1.SPALTE13 !
 
SPALTE11          :  JOACHIM
SPALTE12          :    17.10
SPALTE13          :   0.0000E+00
SPALTE31          :   300
SPALTE32          :  ANDREAS
SPALTE33          :     0
 
Enter command:
SELECT DISTINCT KERN.TAB1.* , REF3.*
   INTO :A1,:A2,:A3,:A4,:A5,:A6
   FROM KERN.TAB3  REF3 , KERN.TAB1
   WHERE TAB1.SPALTE13 < REF3.SPALTE31
     AND REF3.SPALTE33 = KERN.TAB1.SPALTE13
     AND TAB1.SPALTE12 BETWEEN 0 AND 100 !
 
SPALTE11          :  JOACHIM
SPALTE12          :    17.10
SPALTE13          :   0.0000E+00
SPALTE31          :   300
SPALTE32          :  ANDREAS
SPALTE33          :     0
 
Enter command:
SELECT DISTINCT KERN.TAB1.* , REF3.*
   INTO :A1,:A2,:A3,:A4,:A5,:A6
   FROM KERN.TAB3  REF3 , KERN.TAB1
   WHERE TAB1.SPALTE13 < REF3.SPALTE31
     AND KERN.TAB1.SPALTE13 = REF3.SPALTE33
     AND TAB1.SPALTE12 BETWEEN 0 AND 100 !
 
SPALTE11          :  JOACHIM
SPALTE12          :    17.10
SPALTE13          :   0.0000E+00
SPALTE31          :   300
SPALTE32          :  ANDREAS
SPALTE33          :     0
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
SELECT * INTO :A1,:A2,:A3,:A4,:A5,:A6,:A7,:A8,:A9
   FROM TAB1, TAB2, TAB3
   WHERE (TAB1.SPALTE13, TAB1.SPALTE11) IN ((TAB2.SPALTE23, TAB2.SPALTE22))
     AND TAB2.SPALTE23 < TAB3.SPALTE33 !
 
SPALTE11          :  JOACHIM
SPALTE12          :    17.10
SPALTE13          :   0.0000E+00
SPALTE21          :     12
SPALTE22          :  JOACHIM
SPALTE23          :   0.000E+00
SPALTE31          :  ????
SPALTE32          :  JOACHIM
SPALTE33          :   300
 
Enter command:
SELECT * INTO :A1,:A2,:A3,:A4,:A5,:A6,:A7,:A8,:A9
   FROM KERN.TAB1 , TAB2, KERN.TAB3
   WHERE (TAB1.SPALTE13, KERN.TAB2.SPALTE22, TAB1.SPALTE11)
     IN ((TAB2.SPALTE23, TAB1.SPALTE11,      KERN.TAB3.SPALTE32)) !
 
SPALTE11          :  JOACHIM
SPALTE12          :    17.10
SPALTE13          :   0.0000E+00
SPALTE21          :     12
SPALTE22          :  JOACHIM
SPALTE23          :   0.000E+00
SPALTE31          :  ????
SPALTE32          :  JOACHIM
SPALTE33          :   300
 
Enter command:
SELECT TAB1.*, TAB2.* , TAB3.*
   INTO :A1,:A2,:A3,:A4,:A5,:A6,:A7,:A8,:A9
   FROM TAB2, KERN.TAB1 , TAB3
   WHERE (KERN.TAB1.SPALTE13, TAB2.SPALTE22)
     IN ((KERN.TAB2.SPALTE23, TAB3.SPALTE32)) !
 
SPALTE11          :  JOACHIM
SPALTE12          :    17.10
SPALTE13          :   0.0000E+00
SPALTE21          :     12
SPALTE22          :  JOACHIM
SPALTE23          :   0.000E+00
SPALTE31          :  ????
SPALTE32          :  JOACHIM
SPALTE33          :   300
 
Enter command:
SELECT TAB1.* , TAB2.* , TAB3.*
   INTO :A1,:A2,:A3,:A4,:A5,:A6,:A7,:A8,:A9
   FROM TAB2, KERN.TAB1, TAB3
   WHERE (TAB1.SPALTE13, TAB2.SPALTE22) IN ((TAB2.SPALTE23, TAB3.SPALTE32))
     AND TAB3.SPALTE33>= TAB1.SPALTE12 !
 
SPALTE11          :  JOACHIM
SPALTE12          :    17.10
SPALTE13          :   0.0000E+00
SPALTE21          :     12
SPALTE22          :  JOACHIM
SPALTE23          :   0.000E+00
SPALTE31          :  ????
SPALTE32          :  JOACHIM
SPALTE33          :   300
 
Enter command:
SELECT REF2.*, TAB1.*, TAB3.*
   INTO :A1,:A2,:A3,:A4,:A5,:A6,:A7,:A8,:A9
   FROM KERN.TAB2  REF2, KERN.TAB3, TAB1
   WHERE TAB3.SPALTE33  IS  NULL
     AND  (KERN.TAB3.SPALTE32, REF2.SPALTE22)
      IN ((REF2.SPALTE22,      KERN.TAB1.SPALTE11))
     AND ( TAB1.SPALTE13 IS NULL
     AND   TAB1.SPALTE13 IS NULL ) !
 
SPALTE21          :    300
SPALTE22          :  HANS
SPALTE23          :  ??????????
SPALTE11          :  HANS
SPALTE12          :    22.52
SPALTE13          :  ???????????
SPALTE31          :    22
SPALTE32          :  HANS
SPALTE33          :  ????
 
Enter command:
SELECT ALL * INTO :A1,:A2,:A3,:A4,:A5,:A6,:A7,:A8,:A9
   FROM TAB2  REF2,TAB3 REF3, KERN.TAB1 REF1
   WHERE REF3.SPALTE33 IS NULL
     AND (REF2.SPALTE22, REF2.SPALTE22) IN ((REF3.SPALTE32, REF1.SPALTE11))
     AND ( REF1.SPALTE13 IS NULL )
     AND   REF1.SPALTE13 IS NULL
      OR REF2.SPALTE21 >100 !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT DISTINCT REF1_6789012345678.SPALTE11,
       REF1_6789012345678.SPALTE12 NEU12 ,
       REF1_6789012345678.SPALTE13 NEU13,
       KERN.TAB2.SPALTE22 NEU22, TAB3.SPALTE31 NEU31,
       KERN.TAB3.SPALTE32
    INTO :A1, :A2,:A3,:A4,:A5,:A6
    FROM KERN.TAB3, TAB2 , TAB1  REF1_6789012345678
    WHERE REF1_6789012345678.SPALTE13 > TAB2.SPALTE23
      AND (TAB2.SPALTE23, TAB2.SPALTE22) IN
          ((TAB3.SPALTE33, 'FRIEDA'), (TAB3.SPALTE33, 'HANS')) !
 
SPALTE11          :  PAUL
NEU12             :     0.00
NEU13             :   3.0000E+02
NEU22             :  FRIEDA
NEU31             :   300
SPALTE32          :  ANDREAS
 
Enter command:
SELECT DISTINCT REF3.*, TAB1.*, TAB3.*
   INTO :A1,:A2,:A3,:A4,:A5,:A6,:A7,:A8,:A9
   FROM TAB1 , TAB3 REF3 , TAB3
   WHERE REF3.SPALTE31 > TAB1.SPALTE13
     AND NOT ( REF3.SPALTE33 IS NULL )
     AND TAB3.SPALTE33 = REF3.SPALTE33 !
 
SPALTE31          :   300
SPALTE32          :  ANDREAS
SPALTE33          :     0
SPALTE11          :  JOACHIM
SPALTE12          :    17.10
SPALTE13          :   0.0000E+00
SPALTE31          :   300
SPALTE32          :  ANDREAS
SPALTE33          :     0
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
SELECT * INTO :A1 ,:A2 ,:A3 ,:A4 ,:A5 ,:A6 ,:A7 ,:A8 ,:A9 , :A10,
              :A11,:A12,:A13,:A14,:A15,:A16,:A17,:A18,:A19, :A20,
              :A21,:A22,:A23,:A24,:A25,:A26,:A27,:A28,:A29, :A30,
              :A31,:A32,:A33
    FROM TAB1 REF11 , TAB2 REF21 , TAB3 REF31 ,
         TAB1 REF12 , TAB2 REF22 , TAB3 REF32 ,
         TAB1 REF13 , TAB2 REF23 , TAB3 REF33 ,
         TAB1 REF14 , TAB2 REF24
     WHERE REF11.SPALTE13 < REF21.SPALTE21
       AND REF21.SPALTE21 = REF31.SPALTE31
       AND REF12.SPALTE13 < REF22.SPALTE21
       AND REF22.SPALTE21 = REF32.SPALTE31
       AND REF21.SPALTE21 = REF32.SPALTE31
       AND REF13.SPALTE13 < REF23.SPALTE21
       AND REF23.SPALTE21 = REF33.SPALTE31
       AND REF22.SPALTE21 = REF33.SPALTE31
       AND REF14.SPALTE13 < REF24.SPALTE21
       AND REF23.SPALTE21 = REF24.SPALTE21 !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT * INTO :A1,:A2,:A3,:A4,:A5,:A6
   FROM TAB1, TAB3
   WHERE TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31 !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT DISTINCT * INTO :A1,:A2,:A3,:A4,:A5,:A6
   FROM TAB1, TAB3
   WHERE TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31
     AND TAB1.SPALTE13 = TAB3.SPALTE31 !
 
SPALTE11          :  PAUL
SPALTE12          :     0.00
SPALTE13          :   3.0000E+02
SPALTE31          :   300
SPALTE32          :  ANDREAS
SPALTE33          :     0
 
Enter command:
SELECT ALL  * INTO :A1,:A2,:A3,:A4,:A5,:A6
   FROM TAB1, TAB2
   WHERE TAB1.SPALTE13 = TAB2.SPALTE21
     AND TAB1.SPALTE13 = TAB2.SPALTE21
     AND TAB1.SPALTE13 = TAB2.SPALTE21
     AND TAB1.SPALTE13 = TAB2.SPALTE21
     AND TAB1.SPALTE13 = TAB2.SPALTE21
     AND TAB1.SPALTE13 = TAB2.SPALTE21
     AND TAB1.SPALTE13 = TAB2.SPALTE21
     AND TAB1.SPALTE13 = TAB2.SPALTE21
     AND TAB1.SPALTE13 = TAB2.SPALTE21
     AND TAB1.SPALTE13 = TAB2.SPALTE21 !
 
SPALTE11          :  PAUL
SPALTE12          :     0.00
SPALTE13          :   3.0000E+02
SPALTE21          :    300
SPALTE22          :  HANS
SPALTE23          :  ??????????
 
Enter command:
SELECT DISTINCT * INTO :A1, :A2, :A3, :A4, :A5, :A6
   FROM TAB1, TAB3
   WHERE TAB1.SPALTE13 = TAB3.SPALTE33
     AND TAB1.SPALTE13 = TAB3.SPALTE33
     AND TAB1.SPALTE13 = TAB3.SPALTE33
     AND TAB1.SPALTE13 = TAB3.SPALTE33
     AND TAB1.SPALTE13 = TAB3.SPALTE33
     AND TAB1.SPALTE13 = TAB3.SPALTE33
     AND TAB1.SPALTE13 = TAB3.SPALTE33
     AND TAB1.SPALTE13 = TAB3.SPALTE33
     AND TAB1.SPALTE13 = TAB3.SPALTE33
     AND TAB1.SPALTE13 = TAB3.SPALTE33 !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT * INTO :A1 ,:A2 ,:A3 ,:A4 ,:A5 ,:A6 ,:A7 ,:A8 ,:A9 , :A10,
              :A11,:A12,:A13,:A14,:A15,:A16,:A17,:A18,:A19, :A20,
              :A21,:A22,:A23,:A24,:A25,:A26,:A27,:A28,:A29, :A30,
              :A31,:A32,:A33
    FROM TAB1 REF11 , TAB2 REF21 , TAB3 REF31 ,
         TAB1 REF12 , TAB2 REF22 , TAB3 REF32 ,
         TAB1 REF13 , TAB2 REF23 , TAB3 REF33 ,
         TAB1 REF14 , TAB2 REF24
     WHERE REF11.SPALTE13 < REF21.SPALTE21
       AND REF21.SPALTE21 = REF31.SPALTE31
       AND REF12.SPALTE13 < REF22.SPALTE21
       AND REF22.SPALTE21 = REF32.SPALTE31
       AND REF13.SPALTE13 < REF23.SPALTE21
       AND REF23.SPALTE21 = REF33.SPALTE31
       AND REF22.SPALTE21 = REF33.SPALTE31
       AND REF14.SPALTE13 < REF24.SPALTE21
       AND REF23.SPALTE21 = REF24.SPALTE21 !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT * INTO :A1 ,:A2 ,:A3 ,:A4 ,:A5 ,:A6 ,:A7 ,:A8 ,:A9 , :A10,
              :A11,:A12,:A13,:A14,:A15,:A16,:A17,:A18,:A19, :A20,
              :A21,:A22,:A23,:A24,:A25,:A26,:A27,:A28,:A29, :A30,
              :A31,:A32,:A33
    FROM TAB1 REF11 , TAB2 REF21 , TAB3 REF31 ,
         TAB1 REF12 , TAB2 REF22 , TAB3 REF32 ,
         TAB1 REF13 , TAB2 REF23 , TAB3 REF33 ,
         TAB1 REF14 , TAB2 REF24
     WHERE REF11.SPALTE13 < REF21.SPALTE21
       AND REF21.SPALTE21 = REF31.SPALTE31
       AND REF12.SPALTE13 < REF22.SPALTE21
       AND REF12.SPALTE13 < REF11.SPALTE13
       AND REF22.SPALTE21 = REF32.SPALTE31
       AND REF13.SPALTE13 < REF23.SPALTE21
       AND REF13.SPALTE13 < REF33.SPALTE31
       AND REF23.SPALTE21 = REF33.SPALTE31
       AND REF22.SPALTE21 = REF33.SPALTE31
       AND REF14.SPALTE13 < REF24.SPALTE21
       AND REF14.SPALTE13 < REF33.SPALTE31
       AND REF23.SPALTE21 = REF24.SPALTE21 !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
SELECT * INTO :A1 ,:A2 ,:A3 ,:A4 ,:A5 ,:A6 ,:A7 ,:A8 ,:A9 , :A10,
              :A11,:A12,:A13,:A14,:A15,:A16,:A17,:A18,:A19, :A20,
              :A21
    FROM TAB1 REF11 , TAB2 REF21 , TAB3 REF31 ,
         TAB1 REF12 , TAB2 REF22 , TAB3 REF32 ,
                                   TAB3 REF33
     WHERE REF11.SPALTE13 < REF21.SPALTE21
       AND REF21.SPALTE21 = REF31.SPALTE31
       AND REF12.SPALTE13 < REF22.SPALTE21
       AND REF22.SPALTE21 = REF32.SPALTE31
       AND REF31.SPALTE31 < REF33.SPALTE31
       AND REF32.SPALTE31 = REF33.SPALTE31 !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT * INTO :A1 ,:A2 ,:A3 ,:A4 ,:A5 ,:A6 ,:A7 ,:A8 ,:A9 , :A10,
              :A11,:A12,:A13,:A14,:A15,:A16,:A17,:A18,:A19, :A20,
              :A21,:A22,:A23,:A24,:A25,:A26,:A27,:A28,:A29, :A30,
              :A31,:A32,:A33
    FROM TAB1 REF11 , TAB2 REF21 , TAB3 REF31 ,
         TAB1 REF12 , TAB2 REF22 , TAB3 REF32 ,
         TAB1 REF13 , TAB2 REF23 , TAB3 REF33 ,
         TAB1 REF14 , TAB2 REF24
     WHERE REF11.SPALTE13 < REF21.SPALTE21
       AND REF21.SPALTE21 = REF31.SPALTE31
       AND REF12.SPALTE13 < REF22.SPALTE21
       AND REF22.SPALTE21 = REF32.SPALTE31
       AND REF13.SPALTE13 < REF23.SPALTE21
       AND REF23.SPALTE21 = REF33.SPALTE31
       AND REF22.SPALTE21 = REF33.SPALTE31
       AND REF14.SPALTE13 < REF24.SPALTE21
       AND REF14.SPALTE13 < REF32.SPALTE31
       AND REF23.SPALTE21 = REF24.SPALTE21 !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT * INTO :A1 ,:A2 ,:A3 ,:A4 ,:A5 ,:A6 ,:A7 ,:A8 ,:A9 , :A10,
              :A11,:A12,:A13,:A14,:A15,:A16,:A17,:A18,:A19, :A20,
              :A21,:A22,:A23,:A24,:A25,:A26,:A27,:A28,:A29, :A30,
              :A31,:A32,:A33
    FROM TAB1 REF11 , TAB2 REF21 , TAB3 REF31 ,
         TAB1 REF12 , TAB2 REF22 , TAB3 REF32 ,
         TAB1 REF13 , TAB2 REF23 , TAB3 REF33 ,
         TAB1 REF14 , TAB2 REF24
     WHERE REF11.SPALTE13 < REF21.SPALTE21
       AND REF21.SPALTE21 = REF31.SPALTE31
       AND REF12.SPALTE13 < REF22.SPALTE21
       AND REF12.SPALTE13 < REF31.SPALTE31
       AND REF22.SPALTE21 = REF32.SPALTE31
       AND REF13.SPALTE13 < REF23.SPALTE21
       AND REF23.SPALTE21 = REF33.SPALTE31
       AND REF22.SPALTE21 = REF33.SPALTE31
       AND REF14.SPALTE13 < REF24.SPALTE21
       AND REF14.SPALTE13 < REF32.SPALTE31
       AND REF23.SPALTE21 = REF24.SPALTE21 !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT * INTO :A1 ,:A2 ,:A3 ,:A4 ,:A5 ,:A6 ,:A7 ,:A8 ,:A9 , :A10,
              :A11,:A12,:A13,:A14,:A15,:A16,:A17,:A18,:A19, :A20,
              :A21,:A22,:A23,:A24,:A25,:A26,:A27,:A28,:A29, :A30,
              :A31,:A32,:A33
    FROM TAB1 REF11 , TAB2 REF21 , TAB3 REF31 ,
         TAB1 REF12 , TAB2 REF22 , TAB3 REF32 ,
         TAB1 REF13 , TAB2 REF23 , TAB3 REF33 ,
         TAB1 REF14 , TAB2 REF24
     WHERE REF11.SPALTE13 < REF21.SPALTE21
       AND REF11.SPALTE11 = REF13.SPALTE11
       AND REF21.SPALTE21 = REF31.SPALTE31
       AND REF12.SPALTE13 < REF22.SPALTE21
       AND REF22.SPALTE21 = REF32.SPALTE31
       AND REF22.SPALTE21 = REF31.SPALTE31
       AND REF13.SPALTE13 < REF23.SPALTE21
       AND REF23.SPALTE21 = REF33.SPALTE31
       AND REF22.SPALTE21 = REF33.SPALTE31
       AND REF14.SPALTE13 < REF24.SPALTE21
       AND REF14.SPALTE13 < REF32.SPALTE31
       AND REF23.SPALTE21 = REF24.SPALTE21 !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE APPL_TABLE
  ( NAME  CHAR(18) KEY,
    TYPE CHAR(5) NOT NULL,
    LEN FIXED(3) NOT NULL ) !
 
Enter command:
INSERT INTO APPL_TABLE VALUES ('A1','CHAR',20) !
 
Enter command:
INSERT INTO APPL_TABLE VALUES ('A2','CHAR',20) !
 
Enter command:
SELECT A1.TYPE, A1.LEN, A1.NAME
  INTO :A1, :A2, :A3
  FROM APPL_TABLE A1, APPL_TABLE A2
  WHERE A1.TYPE = A2.TYPE
    AND A1.LEN  = A2.LEN
    AND A1.NAME <> A2.NAME !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE  RELSHIP
(  DEFOBJTYPE     CHAR (8)  KEY,
   DEFUSER        CHAR (8)  KEY,
   DEFOBJN1       CHAR (18) KEY,
   DEFOBJN2       CHAR (18) KEY,
   REFOBJTYPE     CHAR (8)  KEY,
   REFUSER        CHAR (8)  KEY,
   REFOBJN1       CHAR (18) KEY,
   REFOBJN2       CHAR (18) KEY,
   RELTYPE        CHAR (18) RANGE IN ( 'CONTAINS', 'CALLS', 'OWNER',
                                       'DERIVED_FROM', 'USES', 'ALIAS',
                                       'PERMISSION_FOR', 'COMMENTED' ),
   CREATEDATE     DATE,
   CREATETIME     TIME,
   PRIVILEGS      CHAR( 19) ) !
 
Enter command:
CREATE VIEW ENTITY_CONTAINS ( DEFOBJTYPE, DEFUSER, DEFOBJN1,
                      DEFOBJN2, REFOBJTYPE, REFUSER,
                      REFOBJN1, REFOBJN2, RELTYPE )
           AS  SELECT DEFOBJTYPE, DEFUSER, DEFOBJN1,
                      DEFOBJN2, REFOBJTYPE, REFUSER,
                      REFOBJN1, REFOBJN2, RELTYPE
               FROM   RELSHIP
               WHERE  (RELTYPE,    DEFOBJTYPE, REFOBJTYPE)
                  IN (('CONTAINS', 'ENTITY',   'ATTR'))
           WITH CHECK OPTION !
 
Enter command:
CREATE TABLE  ATTRIBUTE_TYPE
(  ETYPE_NAME     CHAR (18) KEY,
   DESC_NAME      CHAR (32),
   AUTHID         CHAR (8),
   CREATEDATE     DATE,
   UPD_AUTHOR     CHAR (8),
   LAST_UPD       DATE,
   COMMENTS       CHAR (80) ) !
 
Enter command:
INSERT ENTITY_CONTAINS VALUES
   ( 'ENTITY','BARBARA','TABLE', ' ',
     'ATTR','BARBARA','AUTHID',' ','CONTAINS' ) !
 
Enter command:
INSERT ATTRIBUTE_TYPE VALUES
  ( 'AUTHID', 'Author des Eintrags', 'BARBARA',NULL,NULL,NULL,'aa' ) !
 
Enter command:
SELECT DEFOBJN1, REFOBJN1, DESC_NAME
  FROM ATTRIBUTE_TYPE, ENTITY_CONTAINS
  WHERE REFOBJN1 = ETYPE_NAME !
 
resultcount :                     1
 
Enter command:
FETCH !
 
DEFOBJN1           | REFOBJN1           | DESC_NAME
-------------------+--------------------+---------------------------------
TABLE              | AUTHID             | Author des Eintrags
 
resultcount :                     1
 
Enter command:
SELECT DEFOBJN1, REFOBJN1, DESC_NAME
  FROM ENTITY_CONTAINS, ATTRIBUTE_TYPE
  WHERE REFOBJN1 = ETYPE_NAME !
 
resultcount :                     1
 
Enter command:
FETCH !
 
DEFOBJN1           | REFOBJN1           | DESC_NAME
-------------------+--------------------+---------------------------------
TABLE              | AUTHID             | Author des Eintrags
 
resultcount :                     1
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 (
       S1         CHAR(19),
       S2         FIXED(10)
       ) !
 
Enter command:
INSERT T1 SET S1 = 't1 *        ', S2 = 1 !
 
Enter command:
INSERT T1 SET S1 = 't1   *      ', S2 = 1 !
 
Enter command:
INSERT T1 SET S1 = 't1  *       ', S2 = 1 !
 
Enter command:
CREATE TABLE T2 (
       S1         CHAR(19),
       S2         FIXED(10)
        ) !
 
Enter command:
INSERT T2 SET S1 = 't2       ***', S2 = 11111 !
 
Enter command:
INSERT T2 SET S1 = 't2      ****', S2 = 11111 !
 
Enter command:
INSERT T2 SET S1 = 't2        **', S2 = 44444 !
 
Enter command:
COMMIT WORK !
 
Enter command:
SELECT T1.S1, T2.S1, T1.S2, T2.S2
  FROM <T1, T2>
 WHERE (T1.S2 = 1 OR
       (T1.S2, T2.S2) IN ((2, 44444)))
  ORDER BY T2.S1, T1.S1
  !
 
resultcount :                     9
 
Enter command:
FETCH !
 
S1                  | S1                  | S2          | S2
--------------------+---------------------+-------------+------------
t1   *              | t2        **        |           1 |       44444
t1  *               | t2        **        |           1 |       44444
t1 *                | t2        **        |           1 |       44444
t1   *              | t2       ***        |           1 |       11111
t1  *               | t2       ***        |           1 |       11111
t1 *                | t2       ***        |           1 |       11111
t1   *              | t2      ****        |           1 |       11111
t1  *               | t2      ****        |           1 |       11111
t1 *                | t2      ****        |           1 |       11111
 
resultcount :                     9
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE KERN.TAB1 ( SPALTE11 CHAR(10) KEY ,
                           SPALTE12 FIXED(5,2),
                           SPALTE13 FLOAT(5) ) !
 
Enter command:
INSERT TAB1 VALUES ( 'HANS'    , 22.52 , NULL ) !
 
Enter command:
INSERT TAB1 VALUES ( 'PAUL'    ,   0   ,  3E2 ) !
 
Enter command:
INSERT TAB1 VALUES ( 'JOACHIM' , 17.1  ,   0  ) !
 
Enter command:
CREATE TABLE KERN.TAB2 ( SPALTE21 FIXED(4) NOT NULL,
                           SPALTE22 CHAR(8) ,
                           SPALTE23 FLOAT(4) ) !
 
Enter command:
INSERT TAB2 VALUES ( 300   , 'HANS'   , NULL ) !
 
Enter command:
INSERT TAB2 VALUES ( 22.00 , 'FRIEDA' , 0    ) !
 
Enter command:
INSERT TAB2 VALUES ( 12    , 'JOACHIM', 0    ) !
 
Enter command:
CREATE TABLE KERN.TAB3 ( SPALTE31 FIXED(3),
                           SPALTE32 CHAR(10) ,
                           SPALTE33 FIXED(3) ) !
 
Enter command:
INSERT TAB3 VALUES ( 22  , 'HANS'    , NULL ) !
 
Enter command:
INSERT TAB3 VALUES ( 300 , 'ANDREAS' , 0    ) !
 
Enter command:
INSERT TAB3 VALUES ( 300 , 'ANDREAS' , 0    ) !
 
Enter command:
INSERT TAB3 VALUES ( NULL, 'JOACHIM' , 300  ) !
 
Enter command:
COMMIT WORK !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
DECLARE SELECTTAB1 CURSOR FOR
SELECT TAB1.SPALTE11, KERN.TAB1.SPALTE13,
       REF2.SPALTE22 NEU22 ,
       REF2.SPALTE23 NEU23, KERN.TAB3.SPALTE33
   FROM KERN.TAB1, TAB2  REF2 , TAB3
   WHERE TAB1.SPALTE13 <= KERN.TAB3.SPALTE33
     AND REF2.SPALTE22 <> TAB1.SPALTE11
     AND NOT ( REF2.SPALTE23 IS NULL ) !
 
resultcount :                     5
 
Enter command:
FETCH SELECTTAB1 !
 
SPALTE11   | SPALTE13    | NEU22    | NEU23      | SPALTE33
-----------+-------------+----------+------------+---------
JOACHIM    |  0.0000E+00 | FRIEDA   |  0.000E+00 |    0
JOACHIM    |  0.0000E+00 | FRIEDA   |  0.000E+00 |    0
JOACHIM    |  0.0000E+00 | FRIEDA   |  0.000E+00 |  300
PAUL       |  3.0000E+02 | FRIEDA   |  0.000E+00 |  300
PAUL       |  3.0000E+02 | JOACHIM  |  0.000E+00 |  300
 
resultcount :                     5
 
Enter command:
DECLARE SELECTTAB2 CURSOR FOR
SELECT DISTINCT TAB1.SPALTE11, KERN.TAB1.SPALTE13,
       REF2.SPALTE22 NEU22 ,
       REF2.SPALTE23 NEU23, KERN.TAB3.SPALTE33
   FROM KERN.TAB1, TAB2  REF2 , TAB3
   WHERE TAB1.SPALTE13 <= KERN.TAB3.SPALTE33
     AND REF2.SPALTE22 <> TAB1.SPALTE11
     AND NOT ( REF2.SPALTE23 IS NULL )
        ORDER BY TAB1.SPALTE11, NEU22, KERN.TAB3.SPALTE33 DESC !
 
resultcount :                     4
 
Enter command:
FETCH SELECTTAB2 !
 
SPALTE11   | SPALTE13    | NEU22    | NEU23      | SPALTE33
-----------+-------------+----------+------------+---------
JOACHIM    |  0.0000E+00 | FRIEDA   |  0.000E+00 |  300
JOACHIM    |  0.0000E+00 | FRIEDA   |  0.000E+00 |    0
PAUL       |  3.0000E+02 | FRIEDA   |  0.000E+00 |  300
PAUL       |  3.0000E+02 | JOACHIM  |  0.000E+00 |  300
 
resultcount :                     4
 
Enter command:
DECLARE SELECTTAB3 CURSOR FOR
SELECT TAB1.SPALTE11, KERN.TAB1.SPALTE13,
       REF2.SPALTE22 NEU22 ,
       REF2.SPALTE23 NEU23, KERN.TAB3.SPALTE33
   FROM KERN.TAB1, TAB2  REF2 , TAB3
   WHERE TAB1.SPALTE13 <= KERN.TAB3.SPALTE33
     AND REF2.SPALTE22 <> TAB1.SPALTE11
     AND NOT ( REF2.SPALTE23 IS NULL )
   ORDER BY KERN.TAB1.SPALTE13 ASC, REF2.SPALTE22 DESC !
 
resultcount :                     5
 
Enter command:
FETCH SELECTTAB3 !
 
SPALTE11   | SPALTE13    | NEU22    | NEU23      | SPALTE33
-----------+-------------+----------+------------+---------
JOACHIM    |  0.0000E+00 | FRIEDA   |  0.000E+00 |    0
JOACHIM    |  0.0000E+00 | FRIEDA   |  0.000E+00 |    0
JOACHIM    |  0.0000E+00 | FRIEDA   |  0.000E+00 |  300
PAUL       |  3.0000E+02 | JOACHIM  |  0.000E+00 |  300
PAUL       |  3.0000E+02 | FRIEDA   |  0.000E+00 |  300
 
resultcount :                     5
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE TAB11
   ( COL1 CHAR(12) KEY,
     COL2 CHAR(12) KEY ) !
 
Enter command:
CREATE TABLE TAB41
   ( SPALTE1 CHAR(18) KEY,
     SPALTE2 CHAR(18) KEY ) !
 
Enter command:
INSERT TAB11 VALUES ( 'Y', 'M' ) !
 
Enter command:
INSERT TAB41 VALUES ( 'Y', 'M' ) !
 
Enter command:
SELECT TAB11.COL1, TAB11.COL2, REF.SPALTE1, REF.SPALTE2
    FROM TAB41 REF , TAB11
    WHERE (TAB11.COL1, TAB11.COL2) IN ((REF.SPALTE1, REF.SPALTE2)) !
 
resultcount :                     1
 
Enter command:
FETCH !
 
COL1         | COL2         | SPALTE1            | SPALTE2
-------------+--------------+--------------------+-------------------
Y            | M            | Y                  | M
 
resultcount :                     1
 
Enter command:
ROLLBACK WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE EINS ( WF CHAR (12), WNR FIXED (4))!
 
Enter command:
CREATE INDEX "eins.wf"
 ON EINS( WF ) !
 
Enter command:
INSERT EINS VALUES ('computer', 1)!
 
Enter command:
INSERT EINS VALUES ('software', 2)!
 
Enter command:
CREATE TABLE ZWEI (WNR FIXED(4))!
 
Enter command:
CREATE INDEX "zwei.wnr"
 ON ZWEI( WNR ) !
 
Enter command:
INSERT ZWEI SET WNR = 1!
 
Enter command:
INSERT ZWEI SET WNR = 2!
 
Enter command:
SELECT EINS.WNR, WF FROM EINS, ZWEI
  WHERE (EINS.WNR, WF) IN ((ZWEI.WNR, 'computer'), (ZWEI.WNR, 'software')) !
 
resultcount :                     2
 
Enter command:
FETCH!
 
WNR   | WF
------+-------------
    1 | computer
    2 | software
 
resultcount :                     2
 
Enter command:
ROLLBACK RELEASE !
 
Enter command:
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 ( C1 CHAR(10) ) !
 
Enter command:
CREATE TABLE T2 ( C2 FIXED(2) ) !
 
Enter command:
INSERT T1 SET C1 = 'a' !
 
Enter command:
INSERT T2 SET C2 = 1 !
 
Enter command:
SELECT * FROM T1, T2 WHERE T2.C2 = LENGTH (T1.C1 ) !
 
resultcount :                     1
 
Enter command:
FETCH !
 
C1         | C2
-----------+----
a          |   1
 
resultcount :                     1
 
Enter command:
ROLLBACK WORK !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T ( A CHAR (1) , B CHAR (10))!
 
Enter command:
INSERT T VALUES ('a', 'bbbbbbbbbb')!
 
Enter command:
INSERT T VALUES ('b', 'cccccccccc')!
 
Enter command:
CREATE TABLE T1 ( C CHAR (1), D CHAR (10))!
 
Enter command:
INSERT T1 VALUES ('d', 'eeeeeeeeee')!
 
Enter command:
INSERT T1 VALUES ('e', 'ffffffffff')!
 
Enter command:
CREATE TABLE T2 ( E CHAR (11))!
 
Enter command:
INSERT T2 SET E = 'eeeeeeeeeee' !
 
Enter command:
SELECT COUNT (DISTINCT A||B), COUNT (A||B), COUNT(DISTINCT A)
INTO :A, :B, :C FROM T,T1 !
 
EXPRESSION1       :            2
EXPRESSION2       :            4
EXPRESSION3       :            2
 
Enter command:
SELECT COUNT (DISTINCT A||D), COUNT (A||B), COUNT(DISTINCT A)
INTO :A, :B, :C FROM T,T1 !
 
EXPRESSION1       :            4
EXPRESSION2       :            4
EXPRESSION3       :            2
 
Enter command:
PARS_THEN_EX !
 
Enter command:
SELECT COUNT (DISTINCT A||B), COUNT (A||B), COUNT(DISTINCT A)
INTO :A, :B, :C FROM T,T1 !
 
EXPRESSION1       :            2
EXPRESSION2       :            4
EXPRESSION3       :            2
 
Enter command:
SELECT COUNT (DISTINCT E), COUNT (E) INTO :A, :B FROM T2 !
 
EXPRESSION1       :            1
EXPRESSION2       :            1
 
Enter command:
SELECT COUNT (DISTINCT A||D), COUNT (A||B), COUNT(DISTINCT A)
INTO :A, :B, :C FROM T,T1 !
 
EXPRESSION1       :            4
EXPRESSION2       :            4
EXPRESSION3       :            2
 
Enter command:
PARS_EXECUTE !
 
Enter command:
DROP TABLE T !
 
Enter command:
DROP TABLE T1 !
 
Enter command:
ROLLBACK WORK !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 ( ID INT,
CLIENT CHAR (12),
PRGUID CHAR (16) BYTE,
PROCTYPE CHAR (20) BYTE)!
 
Enter command:
INSERT INTO T1 VALUES (1, '001', X'ABCDEF11FE334455',
   X 'A9972913B959B545926BFB193FABFE24')!
 
Enter command:
INSERT INTO T1 VALUES (2, '001', X'ABCDEF11FE33',
   X 'A9972913B959B545926BFB193FABFE24')!
 
Enter command:
CREATE TABLE T2 (
CLIENT CHAR (12),
PRGUID CHAR (16) BYTE,
PRSTEPID INT,
ERROR CHAR (1))!
 
Enter command:
INSERT INTO T2 VALUES ('001', X'ABCDEF11FE334455', 1, ' ')!
 
Enter command:
INSERT INTO T2 VALUES ('001', X'ABCDEF11FE33', 1, ' ')!
 
Enter command:
 
CREATE VIEW "VSPICSPRTR" ("CLIENT", "PROCTYPE", "PRGUID", "PRSTEPID",
       "SERROR")
  AS SELECT T1."CLIENT", T1."PROCTYPE", T1."PRGUID", T2."PRSTEPID",
        T2."ERROR"
FROM T1,  T2
WHERE T1."CLIENT" = T2."CLIENT" AND T1."PRGUID" = T2."PRGUID"!
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST SQLMODE ORACLE !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST SQLMODE ORACLE ISOLATION LEVEL 1 !
 
Enter command:
PARS_THEN_EX !
 
Enter command:
SELECT COUNT( DISTINCT  "PRGUID" ) "PCOUNT" , "PRSTEPID" "STEPID" , "SERROR"
"ERROR" FROM "VSPICSPRTR" WHERE "CLIENT" = '001' AND "PROCTYPE" =
'A9972913B959B545926BFB193FABFE24' GROUP BY "PRSTEPID" , "SERROR"
!
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B, :C !
 
PCOUNT      | STEPID      | ERROR
------------+-------------+------
          2 |           1 |
 
resultcount :                     1
 
Enter command:
PARS_EXECUTE !
 
Enter command:
DROP TABLE T1 !
 
Enter command:
DROP TABLE T2 !
 
Enter command:
COMMIT RELEASE!
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T (WOCHE FIXED (4) KEY, MONAT FIXED (2))!
 
Enter command:
INSERT T VALUES (5000, 12)!
 
Enter command:
INSERT T VALUES ( 100,  4)!
 
Enter command:
CREATE TABLE T1 (A1 FIXED(8)KEY)!
 
Enter command:
INSERT T1 SET A1 = 100!
 
Enter command:
CREATE TABLE T2 (A2 FIXED(8)KEY)!
 
Enter command:
INSERT T2 SET A2 = 100!
 
Enter command:
CREATE VIEW V1 AS SELECT T1.*, T2.* FROM T1, T2
    WHERE T1.A1 = T2.A2 !
 
Enter command:
DECLARE MON CURSOR FOR
SELECT  100* TRUNC(WOCHE/100) + MONAT JJMM, WOCHE
FROM T WHERE WOCHE > 2 FOR REUSE!
 
resultcount :                     2
 
Enter command:
FETCH MON!
 
JJMM                                         | WOCHE
---------------------------------------------+------
 1.0400000000000000000000000000000000000E+02 |   100
 5.0120000000000000000000000000000000000E+03 |  5000
 
resultcount :                     2
 
Enter command:
DECLARE AUF CURSOR FOR
SELECT JJMM, SUM(TRUNC(A2)) AW, SUM(TRUNC(A1)) RS
FROM V1 A, MON B
WHERE A.A2 > 1 AND A.A1 = B.WOCHE
GROUP BY JJMM FOR REUSE !
 
resultcount :                     1
 
Enter command:
FETCH AUF!
 
JJMM              :   1.0400000000000000000000000000000000000E+02
AW                :   1.0000000000000000000000000000000000000E+02
RS                :   1.0000000000000000000000000000000000000E+02
 
resultcount :                     1
 
Enter command:
DECLARE AUF1 CURSOR FOR
SELECT JJMM, SUM(TRUNC(A2)) AW, SUM(TRUNC(A1)) RS
FROM V1 A, MON B
WHERE A.A1 = B.WOCHE AND A.A2 > 1
GROUP BY JJMM FOR REUSE !
 
resultcount :                     1
 
Enter command:
FETCH AUF1!
 
JJMM              :   1.0400000000000000000000000000000000000E+02
AW                :   1.0000000000000000000000000000000000000E+02
RS                :   1.0000000000000000000000000000000000000E+02
 
resultcount :                     1
 
Enter command:
DROP TABLE T!
 
Enter command:
DROP TABLE T1!
 
Enter command:
DROP TABLE T2!
 
Enter command:
CREATE TABLE A (SALARY FIXED (6,2))!
 
Enter command:
CREATE VIEW V (SAL) AS SELECT SUM(SALARY) FROM A !
 
Enter command:
INSERT A VALUES (100)!
 
Enter command:
INSERT A VALUES (500)!
 
Enter command:
SELECT A.SALARY / SUM(A1.SALARY) FROM A, A A1 GROUP BY A.SALARY!
 
resultcount :                     2
 
Enter command:
FETCH !
 
EXPRESSION1
--------------------------------------------
 1.6666666666666666666666666666666666666E-01
 8.3333333333333333333333333333333333333E-01
 
resultcount :                     2
 
Enter command:
DROP TABLE A!
 
Enter command:
COMMIT RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 ( T1XC1 CHAR(20),
                  T1XC2 FIXED(10),
                  T1XC3 CHAR(10) ASCII,
                  T1XC4 FIXED(10,5),
                  T1XC5 FLOAT(10),
                  T1XC6 FIXED(18) ) !
 
Enter command:
INSERT T1 VALUES ( 'Hans', 100, 'Muenchen', 100.100, NULL,
                    500000000000000000 ) !
 
Enter command:
INSERT T1 VALUES ( NULL, NULL, 'Hamburg', 0.00005, 8E-30, -2000 ) !
 
Enter command:
INSERT T1 VALUES ( 'Karin', -600000, NULL, NULL, -1E12,
                    800000000000000000 ) !
 
Enter command:
INSERT T1 VALUES ( 'Karin', 5, 'Bonn', -700, 1000, NULL ) !
 
Enter command:
INSERT T1 VALUES ( 'Hans', -500000, 'Bremen', 700.00005, NULL, 300 ) !
 
Enter command:
INSERT T1 VALUES ( ' Marianne', -80, 'Koeln 1', -300, 10E-10, NULL ) !
 
Enter command:
CREATE TABLE T2 ( T2XC1 FIXED(5) KEY,
                  T2XC2 CHAR(10) ASCII,
                  T2XC3 CHAR(15) ASCII,
                  T2XC4 FLOAT(5),
                  T2XC5 FIXED(5) RANGE BETWEEN -50000 AND +50000 ) !
 
Enter command:
INSERT T2 VALUES ( 10, 'Klaus', 'Mueller', 1E20, 20000 ) !
 
Enter command:
INSERT T2 VALUES ( 20, 'Elena', 'Meier', -5E10, -100 ) !
 
Enter command:
INSERT T2 VALUES ( 30, NULL, 'Lehmann', NULL, NULL ) !
 
Enter command:
INSERT T2 VALUES ( 40, 'Paul', 'Anse Rauch', 8 , -50000 ) !
 
Enter command:
CREATE TABLE T3 ( T3XC1 FIXED(2,1 ) KEY,
                  T3XC2 CHAR(20) KEY ,
                  T3XC3 FLOAT( 5) ,
                  T3XC4 CHAR(20) ASCII RANGE BETWEEN 'A' AND 'G' ,
                  T3XC5 FIXED(18) ) !
 
Enter command:
INSERT T3 VALUES ( 0.1, 'Frankreich', 80E50, 'Amsel',
                   700000000000000000 ) !
 
Enter command:
INSERT T3 VALUES ( 2.5, 'Belgien', 1E-30, 'Fink', NULL ) !
 
Enter command:
INSERT T3 VALUES ( 3.0, 'Italien', -5E30, 'Amsel', -1000 ) !
 
Enter command:
INSERT T3 VALUES ( 4.1, 'VR Polen', NULL, 'Fink', +200 ) !
 
Enter command:
SELECT SUM ( T1.T1XC2 ) , SUM ( T2.T2XC1 ) FROM T1, T2 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1       :  -4.3999000000000000000000000000000000000E+06
EXPRESSION2       :   6.0000000000000000000000000000000000000E+02
 
resultcount :                     1
 
Enter command:
SELECT SUM ( T1XC2 ) , SUM ( T2XC1 ) FROM T1, T2 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1       :  -4.3999000000000000000000000000000000000E+06
EXPRESSION2       :   6.0000000000000000000000000000000000000E+02
 
resultcount :                     1
 
Enter command:
SELECT SUM( T1.T1XC2 ), SUM ( T2.T2XC1 ),SUM ( T3.T3XC3 ) FROM T1,T2,T3 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1       :  -1.7599600000000000000000000000000000000E+07
EXPRESSION2       :   2.4000000000000000000000000000000000000E+03
EXPRESSION3       :   1.9199999999999999999988000000000000000E+53
 
resultcount :                     1
 
Enter command:
SELECT SUM ( T1XC2 ) FROM T1, T2 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1
--------------------------------------------
-4.3999000000000000000000000000000000000E+06
 
resultcount :                     1
 
Enter command:
SELECT COUNT (*), COUNT ( DISTINCT KERN.T2.T2XC2 ),
       COUNT ( ALL ( T3XC5)) FROM T1,T2,T3 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1 | EXPRESSION2 | EXPRESSION3
------------+-------------+------------
         96 |           3 |          72
 
resultcount :                     1
 
Enter command:
SELECT AVG ( DISTINCT T2.T2XC1 ) ,
       COUNT ( DISTINCT T2.T2XC1 ) ,
       AVG ( ALL KERN.T1.T1XC5 ) ,
       SUM ( ALL T1XC5 ) ,
       COUNT ( ALL ( T1XC5 ) ) FROM T1,T2 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1       :   2.5000000000000000000000000000000000000E+01
EXPRESSION2       :            4
EXPRESSION3       :  -2.4999999974999999999975000000000000000E+11
EXPRESSION4       :  -3.9999999959999999999960000000000000000E+12
EXPRESSION5       :           16
 
resultcount :                     1
 
Enter command:
SELECT SUM ( REF.T1XC4 ) , AVG ( REF.T1XC4) FROM T1,T1 REF !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1       :  -1.1993994000000000000000000000000000000E+03
EXPRESSION2       :  -3.9979980000000000000000000000000000000E+01
 
resultcount :                     1
 
Enter command:
SELECT SUM ( T1XC4 ), AVG ( T1XC4), T1XC1, COUNT(T1XC1)
    FROM T1,T2 GROUP BY T1XC1 !
 
resultcount :                     4
 
Enter command:
FETCH !
 
EXPRESSION1       :  -1.2000000000000000000000000000000000000E+03
EXPRESSION2       :  -3.0000000000000000000000000000000000000E+02
T1XC1             :   Marianne
EXPRESSION3       :            4
-----------------------------------------------------------------
EXPRESSION1       :   3.2004002000000000000000000000000000000E+03
EXPRESSION2       :   4.0005002500000000000000000000000000000E+02
T1XC1             :  Hans
EXPRESSION3       :            8
-----------------------------------------------------------------
EXPRESSION1       :  -2.8000000000000000000000000000000000000E+03
EXPRESSION2       :  -7.0000000000000000000000000000000000000E+02
T1XC1             :  Karin
EXPRESSION3       :            8
-----------------------------------------------------------------
EXPRESSION1       :   2.0000000000000000000000000000000000000E-04
EXPRESSION2       :   5.0000000000000000000000000000000000000E-05
T1XC1             :  ?????
EXPRESSION3       :            0
 
resultcount :                     4
 
Enter command:
SELECT SUM ( T1XC4 ), SUM ( T2XC4)
    FROM T1, T2 REF
    GROUP BY REF.T2XC1
    HAVING REF.T2XC1 > 10
       AND SUM ( REF.T2XC4) IS NOT NULL !
 
resultcount :                     2
 
Enter command:
FETCH !
 
EXPRESSION1       :  -1.9989990000000000000000000000000000000E+02
EXPRESSION2       :  -3.0000000000000000000000000000000000000E+11
-----------------------------------------------------------------
EXPRESSION1       :  -1.9989990000000000000000000000000000000E+02
EXPRESSION2       :   4.8000000000000000000000000000000000000E+01
 
resultcount :                     2
 
Enter command:
SELECT AVG ( T1XC2), AVG ( DISTINCT T1XC5 ) , T1.T1XC5
    FROM T1, T2
    GROUP BY T1XC1 , KERN.T1.T1XC5
    HAVING SUM ( T1XC5 ) > 0
    ORDER BY T1XC5, 2 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
EXPRESSION1       :  ????????????????????????????????????????????
EXPRESSION2       :   8.0000000000000000000000000000000000000E-30
T1XC5             :   8.000000000E-30
-----------------------------------------------------------------
EXPRESSION1       :  -8.0000000000000000000000000000000000000E+01
EXPRESSION2       :   1.0000000000000000000000000000000000000E-09
T1XC5             :   1.000000000E-09
-----------------------------------------------------------------
EXPRESSION1       :   5.0000000000000000000000000000000000000E+00
EXPRESSION2       :   1.0000000000000000000000000000000000000E+03
T1XC5             :   1.000000000E+03
 
resultcount :                     3
 
Enter command:
SELECT SUM( T1XC2) , COUNT ( T1XC2) , AVG (T1XC2)
    FROM T1,T3 GROUP BY T1XC1, T3.T3XC4 !
 
resultcount :                     8
 
Enter command:
FETCH !
 
EXPRESSION1       :  -1.6000000000000000000000000000000000000E+02
EXPRESSION2       :            2
EXPRESSION3       :  -8.0000000000000000000000000000000000000E+01
-----------------------------------------------------------------
EXPRESSION1       :  -1.6000000000000000000000000000000000000E+02
EXPRESSION2       :            2
EXPRESSION3       :  -8.0000000000000000000000000000000000000E+01
-----------------------------------------------------------------
EXPRESSION1       :  -9.9980000000000000000000000000000000000E+05
EXPRESSION2       :            4
EXPRESSION3       :  -2.4995000000000000000000000000000000000E+05
-----------------------------------------------------------------
EXPRESSION1       :  -9.9980000000000000000000000000000000000E+05
EXPRESSION2       :            4
EXPRESSION3       :  -2.4995000000000000000000000000000000000E+05
-----------------------------------------------------------------
EXPRESSION1       :  -1.1999900000000000000000000000000000000E+06
EXPRESSION2       :            4
EXPRESSION3       :  -2.9999750000000000000000000000000000000E+05
-----------------------------------------------------------------
EXPRESSION1       :  -1.1999900000000000000000000000000000000E+06
EXPRESSION2       :            4
EXPRESSION3       :  -2.9999750000000000000000000000000000000E+05
-----------------------------------------------------------------
EXPRESSION1       :  ????????????????????????????????????????????
EXPRESSION2       :            0
EXPRESSION3       :  ????????????????????????????????????????????
-----------------------------------------------------------------
EXPRESSION1       :  ????????????????????????????????????????????
EXPRESSION2       :            0
EXPRESSION3       :  ????????????????????????????????????????????
 
resultcount :                     8
 
Enter command:
SELECT SUM ( T1.T1XC2 + T2.T2XC1 ),
       AVG ( T1XC4 * 5 * T2XC5 ),
       ( SUM ( DISTINCT KERN.T1.T1XC4 / T2XC5 ) )
    FROM T1, T2
    GROUP BY T2XC1
    ORDER BY 1 DESC, 3 ASC !
 
resultcount :                     4
 
Enter command:
FETCH !
 
EXPRESSION1       :  -1.0997750000000000000000000000000000000E+06
EXPRESSION2       :   9.9949950000000000000000000000000000000E+06
EXPRESSION3       :   3.9979980000000000000000000000000000000E-03
-----------------------------------------------------------------
EXPRESSION1       :  -1.0998250000000000000000000000000000000E+06
EXPRESSION2       :  ????????????????????????????????????????????
EXPRESSION3       :  ????????????????????????????????????????????
-----------------------------------------------------------------
EXPRESSION1       :  -1.0998750000000000000000000000000000000E+06
EXPRESSION2       :   1.9989990000000000000000000000000000000E+04
EXPRESSION3       :   1.9989990000000000000000000000000000000E+00
-----------------------------------------------------------------
EXPRESSION1       :  -1.0999250000000000000000000000000000000E+06
EXPRESSION2       :  -3.9979980000000000000000000000000000000E+06
EXPRESSION3       :  -9.9949950000000000000000000000000000000E-03
 
resultcount :                     4
 
Enter command:
DROP TABLE T1 !
 
Enter command:
DROP TABLE T2 !
 
Enter command:
DROP TABLE T3 !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE MYTABLE(TABLEID VARCHAR(100) NOT NULL,
INDEXID INT NOT NULL DEFAULT 0, PRIMARY KEY (TABLEID) )!
 
Enter command:
INSERT INTO MYTABLE VALUES ('Test1',1)!
 
Enter command:
INSERT INTO MYTABLE VALUES ('Test2',1)!
 
Enter command:
INSERT INTO MYTABLE VALUES ('Test3',2)!
 
Enter command:
INSERT INTO MYTABLE VALUES ('Test4',2)!
 
Enter command:
SELECT TABLEID FROM MYTABLE GROUP BY TABLEID
ORDER BY MAX(INDEXID) DESC, TABLEID ASC!
 
resultcount :                     4
 
Enter command:
FETCH!
 
TABLEID           :  Test3
--------------------------------------------------------------------------------
TABLEID           :  Test4
--------------------------------------------------------------------------------
TABLEID           :  Test1
--------------------------------------------------------------------------------
TABLEID           :  Test2
 
resultcount :                     4
 
Enter command:
ROLLBACK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE TAB1 ( SPALTE1 CHAR(15) KEY , SPALTE2 FIXED(5) ) !
 
Enter command:
CREATE TABLE TAB2 ( COL1 FIXED(5), COL2 FIXED(5) ) !
 
Enter command:
INSERT TAB1 VALUES ( 'Hans', 1 ) !
 
Enter command:
INSERT TAB1 VALUES ( 'Paul', 3 ) !
 
Enter command:
INSERT TAB1 VALUES ( 'Ilse', 2 ) !
 
Enter command:
INSERT TAB1 VALUES ( 'John', NULL ) !
 
Enter command:
INSERT TAB1 VALUES ( 'Otto', 6 ) !
 
Enter command:
INSERT TAB2 VALUES ( 1, 3 ) !
 
Enter command:
INSERT TAB2 VALUES ( 5, 7 ) !
 
Enter command:
INSERT TAB2 VALUES ( NULL, NULL ) !
 
Enter command:
INSERT TAB2 VALUES ( 6, 3 ) !
 
Enter command:
INSERT TAB2 VALUES ( 1, NULL ) !
 
Enter command:
INSERT TAB2 VALUES ( 7, 6 ) !
 
Enter command:
DECLARE TAB1RES1 CURSOR FOR
SELECT * FROM TAB1 WHERE SPALTE2 > 2 FOR REUSE !
 
resultcount :                     2
 
Enter command:
FETCH TAB1RES1 !
 
SPALTE1         | SPALTE2
----------------+--------
Otto            |      6
Paul            |      3
 
resultcount :                     2
 
Enter command:
DECLARE RES1 CURSOR FOR
SELECT TAB1.SPALTE1 C1,
              TAB1.SPALTE2 C2 ,
              TAB1RES1.SPALTE2 C3
   FROM TAB1, TAB1RES1 WHERE TAB1.SPALTE2 < TAB1RES1.SPALTE2 FOR REUSE !
 
resultcount :                     5
 
Enter command:
FETCH RES1 !
 
C1              | C2     | C3
----------------+--------+-------
Hans            |      1 |      6
Hans            |      1 |      3
Ilse            |      2 |      6
Ilse            |      2 |      3
Paul            |      3 |      6
 
resultcount :                     5
 
Enter command:
DECLARE RES2 CURSOR FOR
SELECT RES1.C2 + REF1.SPALTE2 SP1, RES1.C2 * 3 SP2
   FROM RES1, TAB1RES1 REF1
   WHERE SPALTE1 = C1 FOR REUSE !
 
resultcount :                     1
 
Enter command:
FETCH RES2 !
 
SP1     | SP2
--------+--------
      6 |       9
 
resultcount :                     1
 
Enter command:
DECLARE RES3 CURSOR FOR
SELECT SUM ( C2 ) S1, SPALTE1
   FROM TAB1RES1, RES1
   WHERE RES1.C3 = SPALTE2
   GROUP BY SPALTE1
   ORDER BY 1 !
 
resultcount :                     2
 
Enter command:
FETCH RES3 !
 
S1                                           | SPALTE1
---------------------------------------------+----------------
 3.0000000000000000000000000000000000000E+00 | Paul
 6.0000000000000000000000000000000000000E+00 | Otto
 
resultcount :                     2
 
Enter command:
DECLARE RES4 CURSOR FOR
SELECT COL2,C1,SUM( COL1 ),AVG( C2 ) AVERAGE,COUNT( * )
   FROM TAB1RES1, TAB2, RES1
   WHERE C3 <> COL2
     AND COL1 > TAB1RES1.SPALTE2
   GROUP BY COL2, RES1.C1 !
 
resultcount :                     8
 
Enter command:
FETCH RES4 !
 
COL2              :       3
C1                :  Hans
EXPRESSION1       :   6.0000000000000000000000000000000000000E+00
AVERAGE           :   1.0000000000000000000000000000000000000E+00
EXPRESSION2       :            1
-----------------------------------------------------------------
COL2              :       3
C1                :  Ilse
EXPRESSION1       :   6.0000000000000000000000000000000000000E+00
AVERAGE           :   2.0000000000000000000000000000000000000E+00
EXPRESSION2       :            1
-----------------------------------------------------------------
COL2              :       3
C1                :  Paul
EXPRESSION1       :   6.0000000000000000000000000000000000000E+00
AVERAGE           :   3.0000000000000000000000000000000000000E+00
EXPRESSION2       :            1
-----------------------------------------------------------------
COL2              :       6
C1                :  Hans
EXPRESSION1       :   1.4000000000000000000000000000000000000E+01
AVERAGE           :   1.0000000000000000000000000000000000000E+00
EXPRESSION2       :            2
-----------------------------------------------------------------
COL2              :       6
C1                :  Ilse
EXPRESSION1       :   1.4000000000000000000000000000000000000E+01
AVERAGE           :   2.0000000000000000000000000000000000000E+00
EXPRESSION2       :            2
-----------------------------------------------------------------
COL2              :       7
C1                :  Hans
EXPRESSION1       :   1.0000000000000000000000000000000000000E+01
AVERAGE           :   1.0000000000000000000000000000000000000E+00
EXPRESSION2       :            2
-----------------------------------------------------------------
COL2              :       7
C1                :  Ilse
EXPRESSION1       :   1.0000000000000000000000000000000000000E+01
AVERAGE           :   2.0000000000000000000000000000000000000E+00
EXPRESSION2       :            2
-----------------------------------------------------------------
COL2              :       7
C1                :  Paul
EXPRESSION1       :   5.0000000000000000000000000000000000000E+00
AVERAGE           :   3.0000000000000000000000000000000000000E+00
EXPRESSION2       :            1
 
resultcount :                     8
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 ( T1XC1 CHAR(10) ASCII KEY,
                  T1XC2 CHAR(20),
                  T1XC3 FIXED(5,2) ) !
 
Enter command:
CREATE TABLE T2 ( T2XC1 FIXED(7,2) KEY,
                  T2XC2 CHAR(10) KEY,
                  T2XC3 CHAR(20) ASCII ) !
 
Enter command:
CREATE TABLE T3 ( T3XC1 CHAR(15) ASCII,
                  T3XC2 CHAR(20),
                  T3XC3 FIXED(6,3) ) !
 
Enter command:
INSERT T1 VALUES ( 'Hans', 'Bremen', 1 ) !
 
Enter command:
INSERT T1 VALUES ( 'Karl', 'Bremen', 100 ) !
 
Enter command:
INSERT T1 VALUES ( 'Karin', 'Hamburg', NULL ) !
 
Enter command:
INSERT T1 VALUES ( 'Lisa', NULL, NULL ) !
 
Enter command:
INSERT T2 VALUES ( 20, 'Paul', 'Muenchen' ) !
 
Enter command:
INSERT T2 VALUES ( 100, 'Emil', 'Hannover' ) !
 
Enter command:
INSERT T2 VALUES ( 100, 'Emma', NULL ) !
 
Enter command:
INSERT T3 VALUES ( 'Karl', 'Hannover', 1 ) !
 
Enter command:
INSERT T3 VALUES ( 'Otto', 'Dortmund', 300 ) !
 
Enter command:
INSERT T3 VALUES ( NULL, NULL, NULL ) !
 
Enter command:
INSERT T3 VALUES ( 'Ilse', 'Hamm', 200 ) !
 
Enter command:
COMMIT WORK !
 
Enter command:
SELECT * FROM T1, T3
  WHERE T1XC2 < ALL ( SELECT T3XC2 FROM T3 WHERE T3XC2 IS NOT NULL )
    AND ( T3XC2 IN ( SELECT T2XC3 FROM T2 WHERE T2XC3 <> 'Muenchen' )
     OR T3XC2 < 'F' )
  ORDER BY 4,1 !
 
resultcount :                     4
 
Enter command:
FETCH !
 
T1XC1             :  Hans
T1XC2             :  Bremen
T1XC3             :     1.00
T3XC1             :  Karl
T3XC2             :  Hannover
T3XC3             :     1.000
-----------------------------------------
T1XC1             :  Karl
T1XC2             :  Bremen
T1XC3             :   100.00
T3XC1             :  Karl
T3XC2             :  Hannover
T3XC3             :     1.000
-----------------------------------------
T1XC1             :  Hans
T1XC2             :  Bremen
T1XC3             :     1.00
T3XC1             :  Otto
T3XC2             :  Dortmund
T3XC3             :   300.000
-----------------------------------------
T1XC1             :  Karl
T1XC2             :  Bremen
T1XC3             :   100.00
T3XC1             :  Otto
T3XC2             :  Dortmund
T3XC3             :   300.000
 
resultcount :                     4
 
Enter command:
DROP TABLE T1 !
 
Enter command:
DROP TABLE T2 !
 
Enter command:
DROP TABLE T3 !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE TAB1 ( SPALTE1 FIXED(5) KEY,
                    SPALTE2 CHAR(10) KEY,
                    SPALTE3 FIXED(5) ) !
 
Enter command:
CREATE TABLE TAB2 ( COL1 FIXED(5),
                    COL2 FIXED(5),
                    COL3 CHAR(10) ,
                    COL4 CHAR(10) ) !
 
Enter command:
INSERT TAB1 VALUES ( 1 , 'Hans' , 1 ) !
 
Enter command:
INSERT TAB1 VALUES ( 2 , 'Otto' , NULL ) !
 
Enter command:
INSERT TAB1 VALUES ( 2 , 'Hans' , 3 ) !
 
Enter command:
INSERT TAB1 VALUES ( 9 , 'Paul', 1  ) !
 
Enter command:
INSERT TAB1 VALUES ( 4 , 'Ilse', 1 ) !
 
Enter command:
INSERT TAB1 VALUES ( 9 , 'Ilse', NULL ) !
 
Enter command:
INSERT TAB2 VALUES ( NULL, NULL, NULL, NULL ) !
 
Enter command:
INSERT TAB2 VALUES ( 4 , 5, 'Hans' , 'Paul' ) !
 
Enter command:
INSERT TAB2 VALUES ( 1, 8 , 'Paul', 'ILse' ) !
 
Enter command:
INSERT TAB2 VALUES ( 3, 4, 'Hans' , 'Hans' ) !
 
Enter command:
INSERT TAB2 VALUES ( 3, 9 , 'Otto' , NULL ) !
 
Enter command:
INSERT TAB2 VALUES ( 1 , NULL , 'Karin', 'Paul' ) !
 
Enter command:
INSERT TAB2 VALUES ( 7, 1, 'Ilse', 'Hans' ) !
 
Enter command:
COMMIT WORK !
 
Enter command:
SELECT TAB1.SPALTE1, TAB1.SPALTE2, COL4 FROM TAB1, TAB2
    WHERE COL4 = SPALTE2 !
 
resultcount :                     6
 
Enter command:
FETCH!
 
SPALTE1 | SPALTE2    | COL4
--------+------------+-----------
     9  | Paul       | Paul
     1  | Hans       | Hans
     2  | Hans       | Hans
     9  | Paul       | Paul
     1  | Hans       | Hans
     2  | Hans       | Hans
 
resultcount :                     6
 
Enter command:
SELECT TAB1.SPALTE1, TAB1.SPALTE2, COL4 FROM TAB1, TAB2
    WHERE COL4 = SPALTE2 AND ROWNO <= 3 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
SPALTE1 | SPALTE2    | COL4
--------+------------+-----------
     9  | Paul       | Paul
     1  | Hans       | Hans
     2  | Hans       | Hans
 
resultcount :                     3
 
Enter command:
SELECT DISTINCT SPALTE2 , COL4 FROM TAB1 , TAB2
    WHERE COL4 =SPALTE2
    ORDER BY TAB1.SPALTE2 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
SPALTE2    | COL4
-----------+-----------
Hans       | Hans
Paul       | Paul
 
resultcount :                     2
 
Enter command:
SELECT DISTINCT SPALTE2 , COL4 FROM TAB1 , TAB2
    WHERE COL4 =SPALTE2 AND ROWNO <= 3
    ORDER BY TAB1.SPALTE2 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
SPALTE2    | COL4
-----------+-----------
Hans       | Hans
Paul       | Paul
 
resultcount :                     2
 
Enter command:
SELECT SPALTE3, COL3 FROM TAB1, TAB2
  WHERE SPALTE3 IS NULL AND COL3 IS NULL AND ROWNO < 3 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
SPALTE3 | COL3
--------+-----------
??????  | ??????????
??????  | ??????????
 
resultcount :                     2
 
Enter command:
SELECT DISTINCT SPALTE3, COL3 FROM TAB1, TAB2
  WHERE SPALTE3 IS NULL AND COL3 IS NULL AND ROWNO < 3 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
SPALTE3 | COL3
--------+-----------
??????  | ??????????
 
resultcount :                     1
 
Enter command:
SELECT SPALTE1 + COL1, COL1, ROWNO FROM TAB1 , TAB2
    WHERE SPALTE2 = COL3 !
 
resultcount :                     8
 
Enter command:
FETCH !
 
EXPRESSION1 | COL1   | ROWNO
------------+--------+------------
      5     |      4 |           1
      4     |      3 |           2
      6     |      4 |           3
      5     |      3 |           4
      5     |      3 |           5
     11     |      7 |           6
     16     |      7 |           7
     10     |      1 |           8
 
resultcount :                     8
 
Enter command:
SELECT SUM ( SPALTE1 + COL1 ) , ROWNO FROM TAB1 , TAB2
    WHERE SPALTE2 = COL3 AND ROWNO < 4 GROUP BY COL1 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
EXPRESSION1                                  | ROWNO
---------------------------------------------+------------
 4.0000000000000000000000000000000000000E+00 |           1
 1.1000000000000000000000000000000000000E+01 |           2
 
resultcount :                     2
 
Enter command:
SELECT SPALTE2, TAB2.COL3 FROM TAB1, TAB2
    WHERE COL3 IS NOT NULL AND ROWNO < 6 !
 
resultcount :                     5
 
Enter command:
FETCH !
 
SPALTE2    | COL3
-----------+-----------
Hans       | Hans
Hans       | Paul
Hans       | Hans
Hans       | Otto
Hans       | Karin
 
resultcount :                     5
 
Enter command:
SELECT DISTINCT SPALTE2, TAB2.COL3 FROM TAB1, TAB2
    WHERE COL3 IS NOT NULL AND ROWNO < 6
    ORDER BY TAB1.SPALTE2 DESC, TAB2.COL3 !
 
resultcount :                     5
 
Enter command:
FETCH !
 
SPALTE2    | COL3
-----------+-----------
Hans       | Hans
Hans       | Ilse
Hans       | Karin
Hans       | Otto
Hans       | Paul
 
resultcount :                     5
 
Enter command:
SELECT  SPALTE1,  SPALTE2, TAB2.COL1
    FROM TAB1, TAB2 WHERE TAB1.SPALTE2 < TAB2.COL4 AND ( ROWNO <=5 )!
 
resultcount :                     5
 
Enter command:
FETCH !
 
SPALTE1 | SPALTE2    | COL1
--------+------------+-------
     1  | Hans       |      4
     2  | Hans       |      4
     2  | Otto       |      4
     4  | Ilse       |      4
     9  | Ilse       |      4
 
resultcount :                     5
 
Enter command:
SELECT  DISTINCT SUM ( DISTINCT SPALTE1 ),  SPALTE2,
    SUM ( DISTINCT TAB2.COL1 )
    FROM TAB1, TAB2 WHERE TAB1.SPALTE2 < TAB2.COL4 AND ( ROWNO <=5 )
    GROUP BY SPALTE2 ORDER BY SPALTE2 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
EXPRESSION1       :   3.0000000000000000000000000000000000000E+00
SPALTE2           :  Hans
EXPRESSION2       :   4.0000000000000000000000000000000000000E+00
-----------------------------------------------------------------
EXPRESSION1       :   1.3000000000000000000000000000000000000E+01
SPALTE2           :  Ilse
EXPRESSION2       :   4.0000000000000000000000000000000000000E+00
-----------------------------------------------------------------
EXPRESSION1       :   2.0000000000000000000000000000000000000E+00
SPALTE2           :  Otto
EXPRESSION2       :   4.0000000000000000000000000000000000000E+00
 
resultcount :                     3
 
Enter command:
SELECT TAB1.SPALTE1, REF.SPALTE3, TAB2.COL1 FROM TAB1, TAB1 REF, TAB2
    WHERE ( TAB1.SPALTE1 < REF.SPALTE3 ) AND
    TAB1.SPALTE1 < TAB2.COL1 !
 
resultcount :                    12
 
Enter command:
FETCH !
 
SPALTE1 | SPALTE3 | COL1
--------+---------+-------
     1  |      3  |      4
     1  |      3  |      3
     1  |      3  |      3
     1  |      3  |      7
     2  |      3  |      4
     2  |      3  |      3
     2  |      3  |      3
     2  |      3  |      7
     2  |      3  |      4
     2  |      3  |      3
     2  |      3  |      3
     2  |      3  |      7
 
resultcount :                    12
 
Enter command:
SELECT TAB1.SPALTE1, REF.SPALTE3, TAB2.COL1 FROM TAB1, TAB1 REF, TAB2
    WHERE ( TAB1.SPALTE1 < REF.SPALTE3 AND ROWNO < 4 ) AND
    TAB1.SPALTE1 < TAB2.COL1 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
SPALTE1 | SPALTE3 | COL1
--------+---------+-------
     1  |      3  |      4
     1  |      3  |      3
     1  |      3  |      3
 
resultcount :                     3
 
Enter command:
SELECT TAB1.SPALTE1, ROWNO FROM TAB1 T, TAB1 !
 
resultcount :                    36
 
Enter command:
FETCH!
 
SPALTE1 | ROWNO
--------+------------
     1  |           1
     2  |           2
     2  |           3
     4  |           4
     9  |           5
     9  |           6
     1  |           7
     2  |           8
     2  |           9
     4  |          10
     9  |          11
     9  |          12
     1  |          13
     2  |          14
     2  |          15
     4  |          16
     9  |          17
 
SPALTE1 | ROWNO
--------+------------
     9  |          18
     1  |          19
     2  |          20
     2  |          21
     4  |          22
     9  |          23
     9  |          24
     1  |          25
     2  |          26
     2  |          27
     4  |          28
     9  |          29
     9  |          30
     1  |          31
     2  |          32
     2  |          33
     4  |          34
 
SPALTE1 | ROWNO
--------+------------
     9  |          35
     9  |          36
 
resultcount :                    36
 
Enter command:
SELECT TAB1.SPALTE1, ROWNO,
       TAB1.SPALTE2, ROWNO
   FROM TAB1 T , TAB1 !
 
resultcount :                    36
 
Enter command:
FETCH!
 
SPALTE1 | ROWNO       | SPALTE2    | ROWNO
--------+-------------+------------+------------
     1  |           1 | Hans       |           1
     2  |           2 | Hans       |           2
     2  |           3 | Otto       |           3
     4  |           4 | Ilse       |           4
     9  |           5 | Ilse       |           5
     9  |           6 | Paul       |           6
     1  |           7 | Hans       |           7
     2  |           8 | Hans       |           8
     2  |           9 | Otto       |           9
     4  |          10 | Ilse       |          10
     9  |          11 | Ilse       |          11
     9  |          12 | Paul       |          12
     1  |          13 | Hans       |          13
     2  |          14 | Hans       |          14
     2  |          15 | Otto       |          15
     4  |          16 | Ilse       |          16
     9  |          17 | Ilse       |          17
 
SPALTE1 | ROWNO       | SPALTE2    | ROWNO
--------+-------------+------------+------------
     9  |          18 | Paul       |          18
     1  |          19 | Hans       |          19
     2  |          20 | Hans       |          20
     2  |          21 | Otto       |          21
     4  |          22 | Ilse       |          22
     9  |          23 | Ilse       |          23
     9  |          24 | Paul       |          24
     1  |          25 | Hans       |          25
     2  |          26 | Hans       |          26
     2  |          27 | Otto       |          27
     4  |          28 | Ilse       |          28
     9  |          29 | Ilse       |          29
     9  |          30 | Paul       |          30
     1  |          31 | Hans       |          31
     2  |          32 | Hans       |          32
     2  |          33 | Otto       |          33
     4  |          34 | Ilse       |          34
 
SPALTE1 | ROWNO       | SPALTE2    | ROWNO
--------+-------------+------------+------------
     9  |          35 | Ilse       |          35
     9  |          36 | Paul       |          36
 
resultcount :                    36
 
Enter command:
SELECT TAB1.SPALTE1, ROWNO FROM TAB1 T , TAB1 GROUP BY TAB1.SPALTE1!
 
resultcount :                     4
 
Enter command:
FETCH!
 
SPALTE1 | ROWNO
--------+------------
     1  |           1
     2  |           2
     4  |           3
     9  |           4
 
resultcount :                     4
 
Enter command:
SELECT SPALTE1, COL1 FROM TAB1, TAB2 !
 
resultcount :                    42
 
Enter command:
FETCH !
 
SPALTE1 | COL1
--------+-------
     1  | ??????
     1  |      4
     1  |      1
     1  |      3
     1  |      3
     1  |      1
     1  |      7
     2  | ??????
     2  |      4
     2  |      1
     2  |      3
     2  |      3
     2  |      1
     2  |      7
     2  | ??????
     2  |      4
     2  |      1
 
SPALTE1 | COL1
--------+-------
     2  |      3
     2  |      3
     2  |      1
     2  |      7
     4  | ??????
     4  |      4
     4  |      1
     4  |      3
     4  |      3
     4  |      1
     4  |      7
     9  | ??????
     9  |      4
     9  |      1
     9  |      3
     9  |      3
     9  |      1
 
SPALTE1 | COL1
--------+-------
     9  |      7
     9  | ??????
     9  |      4
     9  |      1
     9  |      3
     9  |      3
     9  |      1
     9  |      7
 
resultcount :                    42
 
Enter command:
SELECT ROWNO, SPALTE1, COL1 FROM TAB1, TAB2 !
 
resultcount :                    42
 
Enter command:
FETCH !
 
ROWNO       | SPALTE1 | COL1
------------+---------+-------
          1 |      1  | ??????
          2 |      1  |      4
          3 |      1  |      1
          4 |      1  |      3
          5 |      1  |      3
          6 |      1  |      1
          7 |      1  |      7
          8 |      2  | ??????
          9 |      2  |      4
         10 |      2  |      1
         11 |      2  |      3
         12 |      2  |      3
         13 |      2  |      1
         14 |      2  |      7
         15 |      2  | ??????
         16 |      2  |      4
         17 |      2  |      1
 
ROWNO       | SPALTE1 | COL1
------------+---------+-------
         18 |      2  |      3
         19 |      2  |      3
         20 |      2  |      1
         21 |      2  |      7
         22 |      4  | ??????
         23 |      4  |      4
         24 |      4  |      1
         25 |      4  |      3
         26 |      4  |      3
         27 |      4  |      1
         28 |      4  |      7
         29 |      9  | ??????
         30 |      9  |      4
         31 |      9  |      1
         32 |      9  |      3
         33 |      9  |      3
         34 |      9  |      1
 
ROWNO       | SPALTE1 | COL1
------------+---------+-------
         35 |      9  |      7
         36 |      9  | ??????
         37 |      9  |      4
         38 |      9  |      1
         39 |      9  |      3
         40 |      9  |      3
         41 |      9  |      1
         42 |      9  |      7
 
resultcount :                    42
 
Enter command:
SELECT DISTINCT ROWNO, SPALTE1, COL1 FROM TAB1, TAB2 !
 
resultcount :                    42
 
Enter command:
FETCH !
 
ROWNO       | SPALTE1 | COL1
------------+---------+-------
          1 |      1  | ??????
          2 |      1  |      4
          3 |      1  |      1
          4 |      1  |      3
          5 |      1  |      3
          6 |      1  |      1
          7 |      1  |      7
          8 |      2  | ??????
          9 |      2  |      4
         10 |      2  |      1
         11 |      2  |      3
         12 |      2  |      3
         13 |      2  |      1
         14 |      2  |      7
         15 |      2  | ??????
         16 |      2  |      4
         17 |      2  |      1
 
ROWNO       | SPALTE1 | COL1
------------+---------+-------
         18 |      2  |      3
         19 |      2  |      3
         20 |      2  |      1
         21 |      2  |      7
         22 |      4  | ??????
         23 |      4  |      4
         24 |      4  |      1
         25 |      4  |      3
         26 |      4  |      3
         27 |      4  |      1
         28 |      4  |      7
         29 |      9  | ??????
         30 |      9  |      4
         31 |      9  |      1
         32 |      9  |      3
         33 |      9  |      3
         34 |      9  |      1
 
ROWNO       | SPALTE1 | COL1
------------+---------+-------
         35 |      9  |      7
         36 |      9  | ??????
         37 |      9  |      4
         38 |      9  |      1
         39 |      9  |      3
         40 |      9  |      3
         41 |      9  |      1
         42 |      9  |      7
 
resultcount :                    42
 
Enter command:
SELECT DISTINCT ROWNO, SPALTE1, COL1 FROM TAB1, TAB2 WHERE SPALTE1=COL1!
 
resultcount :                     3
 
Enter command:
FETCH !
 
ROWNO       | SPALTE1 | COL1
------------+---------+-------
          1 |      4  |      4
          2 |      1  |      1
          3 |      1  |      1
 
resultcount :                     3
 
Enter command:
DROP TABLE TAB1 !
 
Enter command:
DROP TABLE TAB2 !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T ( A CHAR (8) KEY, B CHAR (4))!
 
Enter command:
INSERT T VALUES ('aaa', 'aaa')!
 
Enter command:
INSERT T VALUES ('a1a', 'a1a')!
 
Enter command:
CREATE TABLE T1 (C CHAR (8) KEY, D FIXED (6))!
 
Enter command:
INSERT T1 VALUES ('aaa', 1)!
 
Enter command:
INSERT T1 VALUES ('bbb', 5)!
 
Enter command:
INSERT T1 VALUES ('ccc', 1)!
 
Enter command:
CREATE TABLE T2 ( E FIXED (6)) !
 
Enter command:
CREATE INDEX I2 ON T2 (E)!
 
Enter command:
INSERT T2 SET E = 1!
 
Enter command:
INSERT T2 SET E = 5!
 
Enter command:
SELECT COUNT(*) FROM T,T1!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
          6
 
resultcount :                     1
 
Enter command:
SELECT * FROM T,T1 WHERE ROWNO <= 1 !
 
resultcount :                     1
 
Enter command:
FETCH!
 
A        | B    | C        | D
---------+------+----------+--------
a1a      | a1a  | aaa      |       1
 
resultcount :                     1
 
Enter command:
CREATE VIEW V AS SELECT * FROM T,T1 !
 
Enter command:
SELECT * FROM V !
 
resultcount :                     6
 
Enter command:
FETCH!
 
A        | B    | C        | D
---------+------+----------+--------
a1a      | a1a  | aaa      |       1
a1a      | a1a  | bbb      |       5
a1a      | a1a  | ccc      |       1
aaa      | aaa  | aaa      |       1
aaa      | aaa  | bbb      |       5
aaa      | aaa  | ccc      |       1
 
resultcount :                     6
 
Enter command:
SELECT * FROM V ORDER BY C, A !
 
resultcount :                     6
 
Enter command:
FETCH!
 
A        | B    | C        | D
---------+------+----------+--------
a1a      | a1a  | aaa      |       1
aaa      | aaa  | aaa      |       1
a1a      | a1a  | bbb      |       5
aaa      | aaa  | bbb      |       5
a1a      | a1a  | ccc      |       1
aaa      | aaa  | ccc      |       1
 
resultcount :                     6
 
Enter command:
SELECT COUNT(*) FROM V !
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
          6
 
resultcount :                     1
 
Enter command:
SELECT MAX(C) FROM V!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
ccc
 
resultcount :                     1
 
Enter command:
SELECT MAX(C) FROM V WHERE ROWNO <= 1!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
aaa
 
resultcount :                     1
 
Enter command:
SELECT MAX(C) FROM V WHERE ROWNO <= 3!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
ccc
 
resultcount :                     1
 
Enter command:
SELECT * FROM V WHERE ROWNO <= 1!
 
resultcount :                     1
 
Enter command:
FETCH!
 
A        | B    | C        | D
---------+------+----------+--------
a1a      | a1a  | aaa      |       1
 
resultcount :                     1
 
Enter command:
SELECT COUNT(*) FROM V WHERE ROWNO <= 1!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
          1
 
resultcount :                     1
 
Enter command:
SELECT COUNT(*) FROM V WHERE B = 'aaa' AND ROWNO <= 1!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
          1
 
resultcount :                     1
 
Enter command:
SELECT COUNT(*), C FROM V GROUP BY C !
 
resultcount :                     3
 
Enter command:
FETCH!
 
EXPRESSION1 | C
------------+---------
          2 | aaa
          2 | bbb
          2 | ccc
 
resultcount :                     3
 
Enter command:
SELECT COUNT(*), C FROM V WHERE ROWNO <= 1 GROUP BY C !
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1 | C
------------+---------
          1 | aaa
 
resultcount :                     1
 
Enter command:
CREATE VIEW VV AS SELECT T.* FROM T,T TT WHERE T.A=TT.A!
 
Enter command:
SELECT * FROM VV !
 
resultcount :                     2
 
Enter command:
FETCH!
 
A        | B
---------+-----
a1a      | a1a
aaa      | aaa
 
resultcount :                     2
 
Enter command:
SELECT COUNT(*) FROM VV !
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
          2
 
resultcount :                     1
 
Enter command:
SELECT * FROM VV WHERE ROWNO <= 1!
 
resultcount :                     1
 
Enter command:
FETCH!
 
A        | B
---------+-----
a1a      | a1a
 
resultcount :                     1
 
Enter command:
SELECT COUNT(*) FROM VV WHERE ROWNO <= 1!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
          1
 
resultcount :                     1
 
Enter command:
SELECT COUNT(*) FROM VV WHERE ROWNO <= 1 AND B = 'aaa' !
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
          1
 
resultcount :                     1
 
Enter command:
SELECT COUNT(*) FROM VV WHERE B = 'aaa' AND ROWNO <= 1!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
          1
 
resultcount :                     1
 
Enter command:
CREATE VIEW V1 AS SELECT * FROM T,T1,T2
  WHERE A=C AND D=E !
 
Enter command:
COMMIT !
 
Enter command:
SELECT * FROM V1 !
 
resultcount :                     1
 
Enter command:
FETCH!
 
A        | B    | C        | D       | E
---------+------+----------+---------+--------
aaa      | aaa  | aaa      |       1 |       1
 
resultcount :                     1
 
Enter command:
SELECT * FROM V1 WHERE B = 'aaa' AND E = 1!
 
resultcount :                     1
 
Enter command:
FETCH!
 
A        | B    | C        | D       | E
---------+------+----------+---------+--------
aaa      | aaa  | aaa      |       1 |       1
 
resultcount :                     1
 
Enter command:
SELECT * FROM V1 WHERE B = 'aaa' AND E = 1 AND ROWNO <= 1!
 
resultcount :                     1
 
Enter command:
FETCH!
 
A        | B    | C        | D       | E
---------+------+----------+---------+--------
aaa      | aaa  | aaa      |       1 |       1
 
resultcount :                     1
 
Enter command:
SELECT COUNT(*) FROM V1!
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1
-----------
          1
 
resultcount :                     1
 
Enter command:
SELECT COUNT(*) FROM V1 WHERE B = 'aaa' AND E = 1!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
          1
 
resultcount :                     1
 
Enter command:
SELECT COUNT(*) FROM V1 WHERE B = 'aaa' AND E = 1 AND ROWNO <= 1!
 
resultcount :                     1
 
Enter command:
SELECT MAX(A) FROM V1 WHERE B = 'aaa' AND E = 1 AND ROWNO <= 1!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
aaa
 
resultcount :                     1
 
Enter command:
DROP TABLE T!
 
Enter command:
DROP TABLE T1!
 
Enter command:
DROP TABLE T2!
 
Enter command:
COMMIT RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST SQLMODE SAPR3 !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST SQLMODE SAPR3 ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE VBAP (MANDT CHAR (3), VBELN CHAR (10),
POSNR INTEGER, FAKSP CHAR (1), PRIMARY KEY (MANDT, VBELN,POSNR))!
 
Enter command:
INSERT INTO VBAP VALUES ('204', '0070000147', 1, 'y')!
 
Enter command:
INSERT INTO VBAP VALUES ('204', '0070000147', 2, 'y')!
 
Enter command:
INSERT INTO VBAP VALUES ('204', '0070000147', 3, 'y')!
 
Enter command:
INSERT INTO VBAP VALUES ('204', '0070000147', 4, 'y')!
 
Enter command:
INSERT INTO VBAP VALUES ('204', '0070000147', 5, 'y')!
 
Enter command:
INSERT INTO VBAP VALUES ('204', '0070000147', 6, 'y')!
 
Enter command:
INSERT INTO VBAP VALUES ('204', '0070000147', 7, 'y')!
 
Enter command:
INSERT INTO VBAP VALUES ('204', '0070000147', 9, 'y')!
 
Enter command:
INSERT INTO VBAP VALUES ('204', '0070000250', 1, 'y')!
 
Enter command:
ANALYZE TABLE VBAP STATISTICS !
 
Enter command:
CREATE TABLE VBUP (MANDT CHAR (3), VBELN CHAR (10),
POSNR INTEGER, FKSTA CHAR (1), FKSAA CHAR(1),
PRIMARY KEY (MANDT, VBELN,POSNR))!
 
Enter command:
INSERT INTO VBUP VALUES ('204', '0070000147', 2, 'y', 'y')!
 
Enter command:
INSERT INTO VBUP VALUES ('204', '0070000147', 3, 'y', 'y')!
 
Enter command:
INSERT INTO VBUP VALUES ('204', '0070000147', 4, 'y', 'y')!
 
Enter command:
INSERT INTO VBUP VALUES ('204', '0070000147', 5, 'y', 'y')!
 
Enter command:
INSERT INTO VBUP VALUES ('204', '0070000300', 1, 'y', 'y')!
 
Enter command:
DECLARE C CURSOR FOR
SELECT T1."MANDT", T1."VBELN", T1."POSNR", T1."FAKSP", T2."FKSTA",
    T2."FKSAA"
  FROM <"VBAP" T1, "VBUP" T2>
 WHERE T2."MANDT" = T1."MANDT" AND T2."VBELN" = T1."VBELN" AND
       T2."POSNR" = T1."POSNR" AND T2."FKSTA" <> 'C' AND
       T2."FKSAA" <> 'C' AND T1.MANDT = '204' AND
       T1.VBELN = '0070000147' !
 
resultcount :                     0
 
Enter command:
FETCH C INTO :A, :B, :C, :D, :E, :F, :G, :H, :I !
 
MANDT | VBELN      | POSNR                 | FAKSP | FKSTA | FKSAA
------+------------+-----------------------+-------+-------+------
204   | 0070000147 |                     2 | y     | y     | y
204   | 0070000147 |                     3 | y     | y     | y
204   | 0070000147 |                     4 | y     | y     | y
204   | 0070000147 |                     5 | y     | y     | y
 
resultcount :                     4
 
Enter command:
 
PARS_THEN_EX !
 
Enter command:
DATA !
 
Enter command:
DECLARE C CURSOR FOR
SELECT T1."MANDT", T1."VBELN", T1."POSNR", T1."FAKSP", T2."FKSTA",
    T2."FKSAA"
  FROM <"VBAP" T1, "VBUP" T2>
 WHERE T2."MANDT" = T1."MANDT" AND T2."VBELN" = T1."VBELN" AND
       T2."POSNR" = T1."POSNR" AND T2."FKSTA" <> 'C' AND
       T2."FKSAA" <> 'C'
       AND T1.MANDT = :Q AND T1.VBELN = :R AND ROWNUM <= 1 !
 
c 3 '204' c 10 '0070000147'
 
resultcount :                     0
 
Enter command:
NODATA !
 
Enter command:
FETCH C INTO :A, :B, :C, :D, :E, :F, :G, :H, :I!
 
MANDT | VBELN      | POSNR                 | FAKSP | FKSTA | FKSAA
------+------------+-----------------------+-------+-------+------
204   | 0070000147 |                     2 | y     | y     | y
 
resultcount :                     1
 
Enter command:
PARS_EXECUTE !
 
Enter command:
ROLLBACK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE TAB ( SPALTE1 CHAR(10) ,
                   SPALTE2 FIXED(5,2),
                   SPALTE3 FLOAT(3),
                   SPALTE4 FIXED(18) ) !
 
Enter command:
INSERT TAB VALUES ( 'a', 100 , -12E12, 400000 ) !
 
Enter command:
INSERT TAB VALUES ( 'b', 100 , 1E-36, -700000000000000000 ) !
 
Enter command:
INSERT TAB VALUES ( 'a', NULL , 50, 900000000000000000 ) !
 
Enter command:
INSERT TAB VALUES ( NULL, 200, NULL, -800000 ) !
 
Enter command:
INSERT TAB VALUES ( 'a', 100, +1E-36 , 800000000000000000 ) !
 
Enter command:
INSERT TAB VALUES ( NULL, NULL, NULL, NULL ) !
 
Enter command:
INSERT TAB VALUES ( 'c', -600, -12E12, NULL ) !
 
Enter command:
INSERT TAB VALUES ( 'a', 100, +1E-36 , 800000000000000000 ) !
 
Enter command:
INSERT TAB VALUES ( 'b', NULL, NULL, + 900000000000000000 ) !
 
Enter command:
SELECT * FROM TAB !
 
resultcount :               unknown
 
Enter command:
FETCH !
 
SPALTE1    | SPALTE2 | SPALTE3   | SPALTE4
-----------+---------+-----------+--------------------
a          |  100.00 | -1.20E+13 |              400000
b          |  100.00 |  1.00E-36 | -700000000000000000
a          | ??????? |  5.00E+01 |  900000000000000000
?????????? |  200.00 | ????????? |             -800000
a          |  100.00 |  1.00E-36 |  800000000000000000
?????????? | ??????? | ????????? | ???????????????????
c          | -600.00 | -1.20E+13 | ???????????????????
a          |  100.00 |  1.00E-36 |  800000000000000000
b          | ??????? | ????????? |  900000000000000000
 
resultcount :                     9
 
Enter command:
CREATE INDEX "tab.spalte2" ON TAB( SPALTE2 ) !
 
Enter command:
CREATE INDEX "tab.spalte4" ON TAB( SPALTE4 ) !
 
Enter command:
COMMIT WORK !
 
Enter command:
SELECT TAB.SPALTE1, REF.SPALTE1,MAX( TAB.SPALTE4 ), MAX( REF.SPALTE4 )
    FROM TAB, TAB REF
    WHERE TAB.SPALTE4 > 0 GROUP BY TAB.SPALTE1, REF.SPALTE1
    HAVING MAX ( TAB.SPALTE4 ) = MIN ( REF.SPALTE4 ) ORDER BY 2 !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
SELECT TAB.SPALTE1, REF.SPALTE1,MAX( TAB.SPALTE4 ), MAX( REF.SPALTE4 )
    FROM TAB, TAB REF
    WHERE TAB.SPALTE4 > 0 GROUP BY TAB.SPALTE1, REF.SPALTE1
    HAVING MIN ( TAB.SPALTE4 ) = MAX ( REF.SPALTE4 ) ORDER BY 2 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
SPALTE1    | SPALTE1    | EXPRESSION1         | EXPRESSION2
-----------+------------+---------------------+--------------------
b          | a          |  900000000000000000 |  900000000000000000
b          | b          |  900000000000000000 |  900000000000000000
 
resultcount :                     2
 
Enter command:
ROLLBACK WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE AA (
AADSTNR    CHAR (5 ) KEY,
AADAT      CHAR (6 ) KEY,
AALFDNR    CHAR (5 ) KEY,
AASWA      CHAR (14) ,
AAADAT     CHAR (6 ) ,
AABKZA     CHAR (7 ) ,
AAREGDST   CHAR (2 ) ,
AAWVDAT    CHAR (6 ) ,
AAABEG     CHAR (6 ) ,
AABEWART   CHAR (1 ) ,
AABEWUL1   CHAR (1 ) ,
AAVAB      CHAR (6 ) ,
AAVBIS     CHAR (6 ) ,
AASCHART   CHAR (4 ) ,
AABEH      CHAR (1 ) ,
AANAT      CHAR (3 ) ,
AADAUF     CHAR (3 ) ,
AASOPRO    CHAR (1 ) ,
AASTATKN   CHAR (1 ) ,
AASTATDT   CHAR (6 ) ,
AAVSTAT    CHAR (1 ) ,
AABESR1    CHAR (1 ) ,
AABESR2    CHAR (3 ) ,
AALEVV     CHAR (6 ) ,
AAMITF1    CHAR (5 ) ,
AAMITF2    CHAR (5 ) ,
AAMITF3    CHAR (5 ) ,
AAMITF4    CHAR (5 ) ,
AAEVOR1    CHAR (24) ,
AAEVOR2    CHAR (30) ,
AAEVOR3    CHAR (30) ,
AAEVOR4    CHAR (30) ,
AAEVOR5    CHAR (16) ,
AABEWUL2   CHAR (1 ) ,
AABEWUL3   CHAR (1 ) ,
AAANZVV    CHAR (3 ) ,
AAGST      CHAR (3 ) ,
AAOST      CHAR (3 ) ) !
 
Enter command:
CREATE TABLE AB (
ABSWB      CHAR (14) KEY,
ABBKZB     CHAR (7 ) ,
ABWZW      CHAR (3 ) ,
ABSTRB     CHAR (32) ,
ABPLZB     CHAR (4 ) ,
ABORTB     CHAR (32) ,
ABAPARB    CHAR (32) ,
ABZUST     CHAR (3 ) ,
AB18AAB    CHAR (6 ) ,
AB18AAN    CHAR (6 ) ,
AB18ALE    CHAR (1 ) ,
ABTRART    CHAR (32) ,
ABEGRO     CHAR (3 ) ,
ABANGAM    CHAR (6 ) ,
ABSVKN1    CHAR (1 ) ,
ABSVDT1    CHAR (6 ) ,
ABSVKN2    CHAR (1 ) ,
ABSVDT2    CHAR (6 ) ,
ABSVKN3    CHAR (1 ) ,
ABSVDT3    CHAR (6 ) ,
ABSVKN4    CHAR (1 ) ,
ABSVDT4    CHAR (6 ) ,
ABSVKN5    CHAR (1 ) ,
ABSVDT5    CHAR (6 ) ,
ABSVKN6    CHAR (1 ) ,
ABSVDT6    CHAR (6 ) ,
ABBEMK1    CHAR (18) ,
ABBEMK2    CHAR (31) ,
ABBEMK3    CHAR (31) ,
ABBEMK4    CHAR (31) ,
ABBEMK5    CHAR (31) ,
ABBEMK6    CHAR (31) ,
ABBEMK7    CHAR (31) ,
ABBEMK8    CHAR (31) ,
ABBEMK9    CHAR (31) ,
ABLEKON    CHAR (1 ) ,
ABLEKDT    CHAR (6 ) ,
ABLEBAR    CHAR (6 ) ) !
 
Enter command:
CREATE INDEX "aa.aabkza" ON AA( AABKZA ) !
 
Enter command:
CREATE INDEX "aa.aaswa" ON AA( AASWA ) !
 
Enter command:
INSERT AA SET AADSTNR = '12345', AADAT = '050687', AALFDNR = '1',
AASWA = 'abcdef', AABKZA = '52301', AASTATKN = 'O' !
 
Enter command:
INSERT AB SET ABSWB = 'abcdef', ABBKZB = '52301',
ABORTB = 'A13' !
 
Enter command:
SELECT AB.ABORTB, AA.AABKZA, AB.ABSWB, AA.AASTATKN, AA.AAOST, AA.AAADAT
FROM AA, AB WHERE
AA.AABKZA = AB.ABBKZB AND
AB.ABSWB = AA.AASWA AND
AA.AABKZA BETWEEN '0110' AND '53120' AND
AB.ABORTB LIKE 'A13'
ORDER BY AB.ABORTB, AA.AABKZA, AB.ABSWB !
 
resultcount :                     1
 
Enter command:
FETCH !
 
ABORTB            :  A13
AABKZA            :  52301
ABSWB             :  abcdef
AASTATKN          :  O
AAOST             :  ?????
AAADAT            :  ?????
 
resultcount :                     1
 
Enter command:
SELECT AB.ABORTB, AA.AABKZA, AB.ABSWB, AA.AASTATKN, AA.AAOST, AA.AAADAT
FROM AA, AB WHERE
AA.AASTATKN = 'O' AND
AA.AABKZA = AB.ABBKZB AND
AB.ABSWB = AA.AASWA AND
AA.AABKZA BETWEEN '0110' AND '53120' AND
AB.ABORTB LIKE 'A13'
ORDER BY AB.ABORTB, AA.AABKZA, AB.ABSWB !
 
resultcount :                     1
 
Enter command:
FETCH !
 
ABORTB            :  A13
AABKZA            :  52301
ABSWB             :  abcdef
AASTATKN          :  O
AAOST             :  ?????
AAADAT            :  ?????
 
resultcount :                     1
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T ( A FIXED (3), B FIXED (6,0))!
 
Enter command:
INSERT T SET A = 3, B = 6!
 
Enter command:
CREATE INDEX I1 ON T (A DESC, B)!
 
Enter command:
CREATE TABLE T1 ( C FIXED (10))!
 
Enter command:
INSERT T1 SET C = 10!
 
Enter command:
SELECT * FROM T, T1 WHERE A = 3 AND B = 6!
 
resultcount :                     1
 
Enter command:
FETCH!
 
A    | B       | C
-----+---------+------------
   3 |       6 |          10
 
resultcount :                     1
 
Enter command:
PARS_THEN_EX !
 
Enter command:
DATA!
 
Enter command:
SELECT * FROM T, T1 WHERE A = :A AND B = :B!
 
n 3 3 n 6 6
 
resultcount :                     1
 
Enter command:
NODATA!
 
Enter command:
FETCH!
 
A    | B       | C
-----+---------+------------
   3 |       6 |          10
 
resultcount :                     1
 
Enter command:
PARS_EXECUTE!
 
Enter command:
ROLLBACK WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE TAB ( SPALTE1 FLOAT(3), SPALTE2 FLOAT(18), SPALTE3 FIXED(5),
   SPALTE4 FIXED(8,3), SPALTE5 CHAR(10) ) !
 
Enter command:
INSERT TAB VALUES ( 5E13, 9E-12, 88, 4444.555, 'aaa' ) !
 
Enter command:
COMMIT WORK !
 
Enter command:
CREATE TABLE T1 (A FIXED (7))!
 
Enter command:
INSERT T1 SET A = 3!
 
Enter command:
SELECT FIXED ( SPALTE1, 15, 1 ) + FIXED ( A , 15, 1 ) FROM TAB, T1!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
------------------
  50000000000003.0
 
resultcount :                     1
 
Enter command:
SELECT FIXED (SPALTE1 + A, 12, 4) FROM TAB, T1!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
--------------
##############
 
resultcount :                     1
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CLEARK !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT !
 
Enter command:
DROP USER KERN !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST SQLMODE DB2 !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST SQLMODE DB2 ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE TAB ( SPALTE1 FLOAT(3), SPALTE2 FLOAT(18), SPALTE3 DECIMAL(5),
   SPALTE4 DECIMAL(8,3), SPALTE5 CHAR(10) ) !
 
Enter command:
INSERT INTO TAB VALUES ( 5E13, 9E-12, 88, 4444.555, 'aaa' ) !
 
Enter command:
COMMIT WORK !
 
Enter command:
CREATE TABLE T1 (A DECIMAL (7))!
 
Enter command:
INSERT INTO T1 VALUES ( 3 )!
 
Enter command:
DECLARE C CURSOR FOR SELECT DECIMAL ( SPALTE1, 15, 1 ) +
   DECIMAL ( A , 15, 1 ) FROM TAB, T1!
 
resultcount :                     1
 
Enter command:
FETCH C INTO :A !
 
EXPRESSION1
------------------
  50000000000003.0
 
resultcount :                     1
 
Enter command:
CLOSE C!
 
Enter command:
DECLARE C CURSOR FOR SELECT DECIMAL (SPALTE1 + A, 12, 4) FROM TAB, T1!
 
resultcount :                     1
 
Enter command:
FETCH C INTO :A !
 
EXPRESSION1
--------------
##############
 
resultcount :                     1
 
Enter command:
CLOSE C!
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 ( T1XC1 FIXED(2) KEY, T1XC2 FIXED(2) KEY,
                  T1XC3 FIXED(2) ) !
 
Enter command:
CREATE TABLE T2 ( T2XC1 FIXED(2) KEY, T2XC2 FIXED(2), T2XC3 FIXED(2) ) !
 
Enter command:
CREATE TABLE T3 ( T3XC1 FIXED(2), T3XC2 FIXED(2), T3XC3 FIXED(2) ) !
 
Enter command:
CREATE VIEW V1 AS SELECT * FROM T1, T2, T3
   WHERE T1XC1 = T2XC1 AND T2XC2 = T3XC1 !
 
Enter command:
INSERT T1 VALUES ( 2, 3, 5 ) !
 
Enter command:
INSERT T1 VALUES ( 4, 1, 3 ) !
 
Enter command:
INSERT T1 VALUES ( 8, 3, 1 ) !
 
Enter command:
INSERT T2 VALUES ( 4, 2, 6 ) !
 
Enter command:
INSERT T2 VALUES ( 8, 1, 5 ) !
 
Enter command:
INSERT T2 VALUES ( 2, 5, 5 ) !
 
Enter command:
INSERT T3 VALUES ( 2, 3, 3 ) !
 
Enter command:
INSERT T3 VALUES ( 1, 6, 6 ) !
 
Enter command:
INSERT T3 VALUES ( 1, 2, 4 ) !
 
Enter command:
INSERT T3 VALUES ( 5, 2, 3 ) !
 
Enter command:
INSERT T3 VALUES ( 3, 1, 7 ) !
 
Enter command:
COMMIT WORK !
 
Enter command:
SELECT * FROM V1 !
 
resultcount :                     4
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T1XC3 | T2XC1 | T2XC2 | T2XC3 | T3XC1 | T3XC2 | T3XC3
------+-------+-------+-------+-------+-------+-------+-------+------
  4   |   1   |   3   |   4   |   2   |   6   |   2   |   3   |   3
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   6   |   6
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   2   |   4
  2   |   3   |   5   |   2   |   5   |   5   |   5   |   2   |   3
 
resultcount :                     4
 
Enter command:
SELECT * FROM V1 WHERE T1XC1 < T3XC1 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T1XC3 | T2XC1 | T2XC2 | T2XC3 | T3XC1 | T3XC2 | T3XC3
------+-------+-------+-------+-------+-------+-------+-------+------
  2   |   3   |   5   |   2   |   5   |   5   |   5   |   2   |   3
 
resultcount :                     1
 
Enter command:
SELECT * FROM V1 WHERE T1XC1 + T2XC3 < 7 !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
SELECT * FROM V1 WHERE T1XC2 > T2XC2 AND T1XC3 + T3XC1 = T3XC2 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T1XC3 | T2XC1 | T2XC2 | T2XC3 | T3XC1 | T3XC2 | T3XC3
------+-------+-------+-------+-------+-------+-------+-------+------
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   2   |   4
 
resultcount :                     1
 
Enter command:
SELECT * FROM V1 WHERE T1XC2 > T2XC2 AND T2XC3 > T3XC3 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T1XC3 | T2XC1 | T2XC2 | T2XC3 | T3XC1 | T3XC2 | T3XC3
------+-------+-------+-------+-------+-------+-------+-------+------
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   2   |   4
 
resultcount :                     1
 
Enter command:
DECLARE ERG1 CURSOR FOR
SELECT * FROM V1 WHERE T1XC2 = T3XC3 OR T1XC2 < T2XC2 !
 
resultcount :                     2
 
Enter command:
SELECT * FROM ERG1 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T1XC3 | T2XC1 | T2XC2 | T2XC3 | T3XC1 | T3XC2 | T3XC3
------+-------+-------+-------+-------+-------+-------+-------+------
  4   |   1   |   3   |   4   |   2   |   6   |   2   |   3   |   3
  2   |   3   |   5   |   2   |   5   |   5   |   5   |   2   |   3
 
resultcount :                     2
 
Enter command:
DECLARE ERG2 CURSOR FOR
SELECT * FROM V1 WHERE T1XC2 = T3XC3 AND T1XC3 = T2XC2 !
 
resultcount :                     1
 
Enter command:
FETCH ERG2!
 
T1XC1 | T1XC2 | T1XC3 | T2XC1 | T2XC2 | T2XC3 | T3XC1 | T3XC2 | T3XC3
------+-------+-------+-------+-------+-------+-------+-------+------
  2   |   3   |   5   |   2   |   5   |   5   |   5   |   2   |   3
 
resultcount :                     1
 
Enter command:
SELECT DISTINCT T1XC1, T2XC3 FROM V1 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
T1XC1 | T2XC3
------+------
  2   |   5
  4   |   6
  8   |   5
 
resultcount :                     3
 
Enter command:
SELECT * FROM V1 K WHERE K.T2XC2 = K.T1XC3 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T1XC3 | T2XC1 | T2XC2 | T2XC3 | T3XC1 | T3XC2 | T3XC3
------+-------+-------+-------+-------+-------+-------+-------+------
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   6   |   6
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   2   |   4
  2   |   3   |   5   |   2   |   5   |   5   |   5   |   2   |   3
 
resultcount :                     3
 
Enter command:
SELECT K.T1XC1, T1XC2 FROM V1 K WHERE T1XC1 < K.T1XC2 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
T1XC1 | T1XC2
------+------
  2   |   3
 
resultcount :                     1
 
Enter command:
SELECT T1XC1, T2XC2 NEU1 FROM V1 WHERE T1XC1 < 3 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
T1XC1 | NEU1
------+-----
  2   |   5
 
resultcount :                     1
 
Enter command:
SELECT V1.* FROM V1 !
 
resultcount :                     4
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T1XC3 | T2XC1 | T2XC2 | T2XC3 | T3XC1 | T3XC2 | T3XC3
------+-------+-------+-------+-------+-------+-------+-------+------
  4   |   1   |   3   |   4   |   2   |   6   |   2   |   3   |   3
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   6   |   6
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   2   |   4
  2   |   3   |   5   |   2   |   5   |   5   |   5   |   2   |   3
 
resultcount :                     4
 
Enter command:
SELECT K.* FROM V1 K !
 
resultcount :                     4
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T1XC3 | T2XC1 | T2XC2 | T2XC3 | T3XC1 | T3XC2 | T3XC3
------+-------+-------+-------+-------+-------+-------+-------+------
  4   |   1   |   3   |   4   |   2   |   6   |   2   |   3   |   3
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   6   |   6
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   2   |   4
  2   |   3   |   5   |   2   |   5   |   5   |   5   |   2   |   3
 
resultcount :                     4
 
Enter command:
SELECT T1.* FROM V1 !
 
***ERROR  -8010 Table name must be in from list                            0011
 
Enter command:
SELECT T1XC1 + T2XC2 + T3XC1 NEU1 FROM V1 WHERE T1XC1 / 2 = T3XC3 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
NEU1
-----
   10
 
resultcount :                     1
 
Enter command:
SELECT ALL V1.T1XC1, T1XC2, KERN.V1.T2XC2 FROM KERN.V1
   WHERE V1.T1XC1 + T1XC2 > KERN.V1.T2XC2  ORDER BY T1XC2 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T2XC2
------+-------+------
  4   |   1   |   2
  8   |   3   |   1
  8   |   3   |   1
 
resultcount :                     3
 
Enter command:
SELECT T1XC2, T2XC1, T3XC3 FROM V1
   WHERE T1XC2 < T3XC3 AND T1XC2 < T2XC1
   ORDER BY 3 ASC !
 
resultcount :                     3
 
Enter command:
FETCH !
 
T1XC2 | T2XC1 | T3XC3
------+-------+------
  1   |   4   |   3
  3   |   8   |   4
  3   |   8   |   6
 
resultcount :                     3
 
Enter command:
SELECT T1XC1, T1XC2, T2XC3 FROM V1
   WHERE T1XC1 + T1XC2 <= T2XC3
   ORDER BY 2 ASC, V1.T2XC3 DESC !
 
resultcount :                     2
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T2XC3
------+-------+------
  4   |   1   |   6
  2   |   3   |   5
 
resultcount :                     2
 
Enter command:
SELECT T1XC1, SUM ( T1XC1), MIN (T3XC3) FROM V1 GROUP BY T1XC1 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
T1XC1 | EXPRESSION1                                  | EXPRESSION2
------+----------------------------------------------+------------
  2   |  2.0000000000000000000000000000000000000E+00 |   3
  4   |  4.0000000000000000000000000000000000000E+00 |   3
  8   |  1.6000000000000000000000000000000000000E+01 |   4
 
resultcount :                     3
 
Enter command:
SELECT COUNT (*), T1XC2 FROM V1 WHERE T3XC2 <> 6
   GROUP BY T1XC2 HAVING SUM ( T1XC2 ) > 5 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1 | T1XC2
------------+------
          2 |   3
 
resultcount :                     1
 
Enter command:
CREATE VIEW V2 AS SELECT * FROM V1 WHERE T1XC2 < T3XC3 !
 
Enter command:
SELECT * FROM V2 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T1XC3 | T2XC1 | T2XC2 | T2XC3 | T3XC1 | T3XC2 | T3XC3
------+-------+-------+-------+-------+-------+-------+-------+------
  4   |   1   |   3   |   4   |   2   |   6   |   2   |   3   |   3
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   6   |   6
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   2   |   4
 
resultcount :                     3
 
Enter command:
SELECT * FROM V2 WHERE 2 * T1XC3 = T2XC3 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T1XC3 | T2XC1 | T2XC2 | T2XC3 | T3XC1 | T3XC2 | T3XC3
------+-------+-------+-------+-------+-------+-------+-------+------
  4   |   1   |   3   |   4   |   2   |   6   |   2   |   3   |   3
 
resultcount :                     1
 
Enter command:
DECLARE ERG3 CURSOR FOR
SELECT DISTINCT T1XC1, T1XC2, T2XC1, T2XC2  FROM V2 !
 
resultcount :                     2
 
Enter command:
FETCH ERG3!
 
T1XC1 | T1XC2 | T2XC1 | T2XC2
------+-------+-------+------
  4   |   1   |   4   |   2
  8   |   3   |   8   |   1
 
resultcount :                     2
 
Enter command:
CREATE VIEW V3 AS SELECT T1XC2, T1XC3, T2XC1, T2XC2, T3XC2 FROM V2
   WHERE  ( T1XC3 = T2XC2 AND ( T1XC2 > T3XC2 )) !
 
Enter command:
DECLARE ERG4 CURSOR FOR
SELECT * FROM V3 !
 
resultcount :                     1
 
Enter command:
FETCH ERG4!
 
T1XC2 | T1XC3 | T2XC1 | T2XC2 | T3XC2
------+-------+-------+-------+------
  3   |   1   |   8   |   1   |   2
 
resultcount :                     1
 
Enter command:
SELECT T1XC3 NEU1, 5 FROM V3 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
NEU1 | EXPRESSION1
-----+------------
  1  |  5
 
resultcount :                     1
 
Enter command:
SELECT * FROM V3 WHERE T1XC3 < T2XC1 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
T1XC2 | T1XC3 | T2XC1 | T2XC2 | T3XC2
------+-------+-------+-------+------
  3   |   1   |   8   |   1   |   2
 
resultcount :                     1
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE "COMPANY"
(
 "ID"   FLOAT (20)  ,
 "NAME"     VARCHAR (100) ASCII  ,
 "TOKEN"     VARCHAR (10) ASCII  ,
 "STREET"     VARCHAR (50) ASCII,
 "STREET_NR"     VARCHAR (5) ASCII,
 "POSTCODE"     VARCHAR (10) ASCII,
 "CITY"     VARCHAR (50) ASCII,
 "ZONE"     VARCHAR (5) ASCII,
 "TYPE"     CHAR (1) ASCII    DEFAULT '0',
 "STATUS"     CHAR (1) ASCII  ,
 "ORDER_SEQUENCE"     FIXED (3,0)    DEFAULT  0,
 "INSERTED"     TIMESTAMP    DEFAULT TIMESTAMP,
 "INSERTED_BY"     VARCHAR (50) ASCII    DEFAULT 'SYSTEM',
 "UPDATED"     TIMESTAMP    DEFAULT TIMESTAMP,
 "UPDATED_BY"     VARCHAR (50) ASCII    DEFAULT 'SYSTEM',
 PRIMARY KEY ("ID"),
 CONSTRAINT "ZONE" CHECK "ZONE" IN ('','A','B','C','D','E','F','G')   OR
     "ZONE" IS NULL,
 CONSTRAINT "STATUS" CHECK "STATUS" IN ('0','1'),
 CONSTRAINT "TYPE" CHECK "TYPE" IN ('0','1')
)
!
 
Enter command:
INSERT COMPANY (ID, NAME, STATUS) VALUES (1, 'SAP', '1')!
 
Enter command:
 
CREATE TABLE "POWER_PRICE"
(
 "ID_COMPANY"     FLOAT (20)  ,
 "ZONE"     VARCHAR (5) ASCII  ,
 "VALUE_DATE"     TIMESTAMP  ,
 "POWER1"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER2"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER3"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER4"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER5"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER6"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER7"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER8"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER9"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER10"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER11"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER12"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER13"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER14"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER15"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER16"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER17"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER18"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER19"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER20"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER21"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER22"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER23"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER24"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER25"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER26"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER27"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER28"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER29"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER30"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER31"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER32"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER33"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER34"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER35"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER36"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER37"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER38"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER39"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER40"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER41"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER42"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER43"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER44"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER45"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER46"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER47"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER48"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER49"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER50"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER51"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER52"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER53"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER54"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER55"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER56"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER57"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER58"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER59"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER60"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER61"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER62"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER63"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER64"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER65"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER66"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER67"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER68"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER69"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER70"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER71"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER72"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER73"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER74"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER75"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER76"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER77"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER78"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER79"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER80"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER81"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER82"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER83"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER84"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER85"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER86"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER87"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER88"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER89"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER90"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER91"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER92"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER93"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER94"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER95"     VARCHAR (7) ASCII    DEFAULT '0',
 "POWER96"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE1"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE2"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE3"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE4"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE5"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE6"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE7"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE8"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE9"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE10"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE11"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE12"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE13"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE14"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE15"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE16"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE17"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE18"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE19"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE20"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE21"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE22"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE23"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE24"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE25"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE26"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE27"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE28"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE29"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE30"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE31"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE32"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE33"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE34"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE35"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE36"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE37"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE38"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE39"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE40"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE41"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE42"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE43"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE44"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE45"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE46"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE47"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE48"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE49"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE50"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE51"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE52"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE53"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE54"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE55"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE56"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE57"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE58"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE59"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE60"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE61"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE62"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE63"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE64"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE65"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE66"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE67"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE68"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE69"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE70"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE71"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE72"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE73"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE74"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE75"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE76"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE77"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE78"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE79"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE80"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE81"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE82"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE83"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE84"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE85"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE86"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE87"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE88"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE89"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE90"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE91"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE92"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE93"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE94"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE95"     VARCHAR (7) ASCII    DEFAULT '0',
 "PRICE96"     VARCHAR (7) ASCII    DEFAULT '0',
 "INSERTED"     TIMESTAMP    DEFAULT TIMESTAMP,
 "INSERTED_BY"     VARCHAR (50) ASCII    DEFAULT 'SYSTEM',
 "UPDATED"     TIMESTAMP    DEFAULT TIMESTAMP,
 "UPDATED_BY"     VARCHAR (50) ASCII    DEFAULT 'SYSTEM',
 PRIMARY KEY ("ID_COMPANY", "ZONE", "VALUE_DATE"),
 CONSTRAINT "ZONE" CHECK "ZONE" IN ('','A','B','C','D','E','F','G'),
 FOREIGN KEY "FK_REF_4511" ("ID_COMPANY")
    REFERENCES "COMPANY" ("ID") ON DELETE CASCADE
)
!
 
Enter command:
INSERT POWER_PRICE (ID_COMPANY, POWER41,"ZONE", "VALUE_DATE")
 VALUES (1, '41', 'E', TIMESTAMP)!
 
Enter command:
 
CREATE INDEX "IX01_POWER_PRICE" ON "POWER_PRICE"("ID_COMPANY" ASC)!
 
Enter command:
CREATE INDEX "IX02_POWER_PRICE" ON "POWER_PRICE"("VALUE_DATE" ASC)!
 
Enter command:
 
CREATE TABLE "CONTACT"
(
 "ID"     FLOAT (20)  ,
 "ID_COMPANY"     FLOAT (20)  ,
 "TYPE"     FLOAT (20)  ,
 "TITLE"     VARCHAR (20) ASCII,
 "FIRSTNAME"     VARCHAR (50) ASCII,
 "SURNAME"     VARCHAR (50) ASCII,
 "PHONE_PREFIX"     VARCHAR (6) ASCII,
 "PHONE"     VARCHAR (25) ASCII,
 "PHONE_SUFFIX"     VARCHAR (4) ASCII,
 "FAX_PREFIX"     VARCHAR (6) ASCII,
 "FAX"     VARCHAR (25) ASCII,
 "FAX_SUFFIX"     VARCHAR (4) ASCII,
 "EMAIL"     VARCHAR (50) ASCII,
 "ORDER_SEQUENCE"     FIXED (3,0)    DEFAULT  0,
 "INSERTED"     TIMESTAMP    DEFAULT TIMESTAMP,
 "INSERTED_BY"     VARCHAR (50) ASCII    DEFAULT 'SYSTEM',
 "UPDATED"     TIMESTAMP    DEFAULT TIMESTAMP,
 "UPDATED_BY"     VARCHAR (50) ASCII    DEFAULT 'SYSTEM',
 PRIMARY KEY ("ID", "ID_COMPANY"),
 CONSTRAINT "TYPE" CHECK "TYPE" IN (10,20,30,40,50,60),
 FOREIGN KEY "FK_REF_2866" ("ID_COMPANY")
    REFERENCES "COMPANY" ("ID") ON DELETE CASCADE
)!
 
Enter command:
INSERT CONTACT (ID, TYPE, ID_COMPANY) VALUES (4711,40,1)!
 
Enter command:
 
CREATE VIEW "VW_COMPANY_CONTACT"
 (
 "ID_COMPANY",
 "TOKEN",
 "ZONE",
 "COMPANY_STATUS",
 "COMPANY_ORDER_SEQUENCE",
 "PHONE_PREFIX",
 "PHONE",
 "PHONE_SUFFIX"
)
AS
SELECT A.ID ID_COMPANY, A.TOKEN, A.ZONE, A.STATUS COMPANY_STATUS,
A.ORDER_SEQUENCE COMPANY_ORDER_SEQUENCE,
  B.PHONE_PREFIX, B.PHONE, B.PHONE_SUFFIX
FROM COMPANY A, CONTACT B
WHERE A.ID = B.ID_COMPANY(+) AND B.TYPE(+) = 40 !
 
Enter command:
 
PARS_THEN_EX !
 
Enter command:
SELECT A.ID_COMPANY, A.VALUE_DATE, B.TOKEN COMPANY_TOKEN, A.ZONE,
   DECODE(DECODE(B.PHONE_PREFIX,
     NULL,
      B.PHONE,
      DECODE(B.PHONE,
       NULL,
       B.PHONE_PREFIX,
 
B.PHONE_PREFIX || '/' || B.PHONE)),
    NULL,
    B.PHONE_SUFFIX,
    DECODE(B.PHONE_PREFIX,
     NULL,
      B.PHONE,
      DECODE(B.PHONE,
       NULL,
       B.PHONE_PREFIX,
 
B.PHONE_PREFIX || '/' || B.PHONE)) || DECODE(B.PHONE_SUFFIX,
 
     NULL,
 
     B.PHONE_SUFFIX,
'-' || B.PHONE_SUFFIX)) PHONE,
  NUM(A.POWER1)  POWER1 , NUM(A.POWER2)  POWER2 ,
NUM(A.POWER3)  POWER3 , NUM(A.POWER4)  POWER4 , NUM(A.POWER5)
 POWER5 , NUM(A.POWER6)  POWER6 ,
  NUM(A.POWER7)  POWER7 , NUM(A.POWER8)  POWER8 ,
NUM(A.POWER9)  POWER9 , NUM(A.POWER10) POWER10,
NUM(A.POWER11) POWER11, NUM(A.POWER12) POWER12,
  NUM(A.POWER13) POWER13, NUM(A.POWER14) POWER14,
NUM(A.POWER15) POWER15, NUM(A.POWER16) POWER16,
NUM(A.POWER17) POWER17, NUM(A.POWER18) POWER18,
  NUM(A.POWER19) POWER19, NUM(A.POWER20) POWER20,
NUM(A.POWER21) POWER21, NUM(A.POWER22) POWER22,
NUM(A.POWER23) POWER23, NUM(A.POWER24) POWER24,
  NUM(A.POWER25) POWER25, NUM(A.POWER26) POWER26,
NUM(A.POWER27) POWER27, NUM(A.POWER28) POWER28,
NUM(A.POWER29) POWER29, NUM(A.POWER30) POWER30,
  NUM(A.POWER31) POWER31, NUM(A.POWER32) POWER32,
NUM(A.POWER33) POWER33, NUM(A.POWER34) POWER34,
NUM(A.POWER35) POWER35, NUM(A.POWER36) POWER36,
  NUM(A.POWER37) POWER37, NUM(A.POWER38) POWER38,
NUM(A.POWER39) POWER39, NUM(A.POWER40) POWER40,
NUM(A.POWER41) POWER41, NUM(A.POWER42) POWER42,
  NUM(A.POWER43) POWER43, NUM(A.POWER44) POWER44,
NUM(A.POWER45) POWER45, NUM(A.POWER46) POWER46,
NUM(A.POWER47) POWER47, NUM(A.POWER48) POWER48,
  NUM(A.POWER49) POWER49, NUM(A.POWER50) POWER50,
NUM(A.POWER51) POWER51, NUM(A.POWER52) POWER52,
NUM(A.POWER53) POWER53, NUM(A.POWER54) POWER54,
  NUM(A.POWER55) POWER55, NUM(A.POWER56) POWER56,
NUM(A.POWER57) POWER57, NUM(A.POWER58) POWER58,
NUM(A.POWER59) POWER59, NUM(A.POWER60) POWER60,
  NUM(A.POWER61) POWER61, NUM(A.POWER62) POWER62,
NUM(A.POWER63) POWER63, NUM(A.POWER64) POWER64,
NUM(A.POWER65) POWER65, NUM(A.POWER66) POWER66,
  NUM(A.POWER67) POWER67, NUM(A.POWER68) POWER68,
NUM(A.POWER69) POWER69, NUM(A.POWER70) POWER70,
NUM(A.POWER71) POWER71, NUM(A.POWER72) POWER72,
  NUM(A.POWER73) POWER73, NUM(A.POWER74) POWER74,
NUM(A.POWER75) POWER75, NUM(A.POWER76) POWER76,
NUM(A.POWER77) POWER77, NUM(A.POWER78) POWER78,
  NUM(A.POWER79) POWER79, NUM(A.POWER80) POWER80,
NUM(A.POWER81) POWER81, NUM(A.POWER82) POWER82,
NUM(A.POWER83) POWER83, NUM(A.POWER84) POWER84,
  NUM(A.POWER85) POWER85, NUM(A.POWER86) POWER86,
NUM(A.POWER87) POWER87, NUM(A.POWER88) POWER88,
NUM(A.POWER89) POWER89, NUM(A.POWER90) POWER90,
  NUM(A.POWER91) POWER91, NUM(A.POWER92) POWER92,
NUM(A.POWER93) POWER93, NUM(A.POWER94) POWER94,
NUM(A.POWER95) POWER95, NUM(A.POWER96) POWER96,
  NUM(A.PRICE1)  PRICE1 , NUM(A.PRICE2)  PRICE2 ,
NUM(A.PRICE3)  PRICE3 , NUM(A.PRICE4)  PRICE4 , NUM(A.PRICE5)
 PRICE5 , NUM(A.PRICE6)  PRICE6 ,
  NUM(A.PRICE7)  PRICE7 , NUM(A.PRICE8)  PRICE8 ,
NUM(A.PRICE9)  PRICE9 , NUM(A.PRICE10) PRICE10,
NUM(A.PRICE11) PRICE11, NUM(A.PRICE12) PRICE12,
  NUM(A.PRICE13) PRICE13, NUM(A.PRICE14) PRICE14,
NUM(A.PRICE15) PRICE15, NUM(A.PRICE16) PRICE16,
NUM(A.PRICE17) PRICE17, NUM(A.PRICE18) PRICE18,
  NUM(A.PRICE19) PRICE19, NUM(A.PRICE20) PRICE20,
NUM(A.PRICE21) PRICE21, NUM(A.PRICE22) PRICE22,
NUM(A.PRICE23) PRICE23, NUM(A.PRICE24) PRICE24,
  NUM(A.PRICE25) PRICE25, NUM(A.PRICE26) PRICE26,
NUM(A.PRICE27) PRICE27, NUM(A.PRICE28) PRICE28,
NUM(A.PRICE29) PRICE29, NUM(A.PRICE30) PRICE30,
  NUM(A.PRICE31) PRICE31, NUM(A.PRICE32) PRICE32,
NUM(A.PRICE33) PRICE33, NUM(A.PRICE34) PRICE34,
NUM(A.PRICE35) PRICE35, NUM(A.PRICE36) PRICE36,
  NUM(A.PRICE37) PRICE37, NUM(A.PRICE38) PRICE38,
NUM(A.PRICE39) PRICE39, NUM(A.PRICE40) PRICE40,
NUM(A.PRICE41) PRICE41, NUM(A.PRICE42) PRICE42,
  NUM(A.PRICE43) PRICE43, NUM(A.PRICE44) PRICE44,
NUM(A.PRICE45) PRICE45, NUM(A.PRICE46) PRICE46,
NUM(A.PRICE47) PRICE47, NUM(A.PRICE48) PRICE48,
  NUM(A.PRICE49) PRICE49, NUM(A.PRICE50) PRICE50,
NUM(A.PRICE51) PRICE51, NUM(A.PRICE52) PRICE52,
NUM(A.PRICE53) PRICE53, NUM(A.PRICE54) PRICE54,
  NUM(A.PRICE55) PRICE55, NUM(A.PRICE56) PRICE56,
NUM(A.PRICE57) PRICE57, NUM(A.PRICE58) PRICE58,
NUM(A.PRICE59) PRICE59, NUM(A.PRICE60) PRICE60,
  NUM(A.PRICE61) PRICE61, NUM(A.PRICE62) PRICE62,
NUM(A.PRICE63) PRICE63, NUM(A.PRICE64) PRICE64,
NUM(A.PRICE65) PRICE65, NUM(A.PRICE66) PRICE66,
  NUM(A.PRICE67) PRICE67, NUM(A.PRICE68) PRICE68,
NUM(A.PRICE69) PRICE69, NUM(A.PRICE70) PRICE70,
NUM(A.PRICE71) PRICE71, NUM(A.PRICE72) PRICE72,
  NUM(A.PRICE73) PRICE73, NUM(A.PRICE74) PRICE74,
NUM(A.PRICE75) PRICE75, NUM(A.PRICE76) PRICE76,
NUM(A.PRICE77) PRICE77, NUM(A.PRICE78) PRICE78,
  NUM(A.PRICE79) PRICE79, NUM(A.PRICE80) PRICE80,
NUM(A.PRICE81) PRICE81, NUM(A.PRICE82) PRICE82,
NUM(A.PRICE83) PRICE83, NUM(A.PRICE84) PRICE84,
  NUM(A.PRICE85) PRICE85, NUM(A.PRICE86) PRICE86,
NUM(A.PRICE87) PRICE87, NUM(A.PRICE88) PRICE88,
NUM(A.PRICE89) PRICE89, NUM(A.PRICE90) PRICE90,
  NUM(A.PRICE91) PRICE91, NUM(A.PRICE92) PRICE92,
NUM(A.PRICE93) PRICE93, NUM(A.PRICE94) PRICE94,
NUM(A.PRICE95) PRICE95, NUM(A.PRICE96) PRICE96
FROM POWER_PRICE A, VW_COMPANY_CONTACT B
WHERE A.ID_COMPANY    = B.ID_COMPANY
AND   B.COMPANY_STATUS  = '1'
AND  (NUM(A.POWER1)  <> 0 OR NUM(A.POWER2)  <> 0 OR
NUM(A.POWER3)  <> 0 OR NUM(A.POWER4)  <> 0 OR NUM(A.POWER5)
<> 0 OR NUM(A.POWER6)  <> 0 OR NUM(A.POWER7)  <> 0
OR  NUM(A.POWER8)  <> 0 OR NUM(A.POWER9)  <> 0 OR
NUM(A.POWER10) <> 0 OR NUM(A.POWER11) <> 0 OR NUM(A.POWER12)
<> 0 OR NUM(A.POWER13) <> 0 OR NUM(A.POWER14) <> 0
OR  NUM(A.POWER15) <> 0 OR NUM(A.POWER16) <> 0 OR
NUM(A.POWER17) <> 0 OR NUM(A.POWER18) <> 0 OR NUM(A.POWER19)
<> 0 OR NUM(A.POWER20) <> 0 OR NUM(A.POWER21) <> 0
OR  NUM(A.POWER22) <> 0 OR NUM(A.POWER23) <> 0 OR
NUM(A.POWER24) <> 0 OR NUM(A.POWER25) <> 0 OR NUM(A.POWER26)
<> 0 OR NUM(A.POWER27) <> 0 OR NUM(A.POWER28) <> 0
OR  NUM(A.POWER29) <> 0 OR NUM(A.POWER30) <> 0 OR
NUM(A.POWER31) <> 0 OR NUM(A.POWER32) <> 0 OR NUM(A.POWER33)
<> 0 OR NUM(A.POWER34) <> 0 OR NUM(A.POWER35) <> 0
OR  NUM(A.POWER36) <> 0 OR NUM(A.POWER37) <> 0 OR
NUM(A.POWER38) <> 0 OR NUM(A.POWER39) <> 0 OR NUM(A.POWER40)
<> 0 OR NUM(A.POWER41) <> 0 OR NUM(A.POWER42) <> 0
OR  NUM(A.POWER43) <> 0 OR NUM(A.POWER44) <> 0 OR
NUM(A.POWER45) <> 0 OR NUM(A.POWER46) <> 0 OR NUM(A.POWER47)
<> 0 OR NUM(A.POWER48) <> 0 OR NUM(A.POWER49) <> 0
OR  NUM(A.POWER50) <> 0 OR NUM(A.POWER51) <> 0 OR
NUM(A.POWER52) <> 0 OR NUM(A.POWER53) <> 0 OR NUM(A.POWER54)
<> 0 OR NUM(A.POWER55) <> 0 OR NUM(A.POWER56) <> 0
OR  NUM(A.POWER57) <> 0 OR NUM(A.POWER58) <> 0 OR
NUM(A.POWER59) <> 0 OR NUM(A.POWER60) <> 0 OR NUM(A.POWER61)
<> 0 OR NUM(A.POWER62) <> 0 OR NUM(A.POWER63) <> 0
OR  NUM(A.POWER64) <> 0 OR NUM(A.POWER65) <> 0 OR
NUM(A.POWER66) <> 0 OR NUM(A.POWER67) <> 0 OR NUM(A.POWER68)
<> 0 OR NUM(A.POWER69) <> 0 OR NUM(A.POWER70) <> 0
OR  NUM(A.POWER71) <> 0 OR NUM(A.POWER72) <> 0 OR
NUM(A.POWER73) <> 0 OR NUM(A.POWER74) <> 0 OR NUM(A.POWER75)
<> 0 OR NUM(A.POWER76) <> 0 OR NUM(A.POWER77) <> 0
OR  NUM(A.POWER78) <> 0 OR NUM(A.POWER79) <> 0 OR
NUM(A.POWER80) <> 0 OR NUM(A.POWER81) <> 0 OR NUM(A.POWER82)
<> 0 OR NUM(A.POWER83) <> 0 OR NUM(A.POWER84) <> 0
OR  NUM(A.POWER85) <> 0 OR NUM(A.POWER86) <> 0 OR
NUM(A.POWER87) <> 0 OR NUM(A.POWER88) <> 0 OR NUM(A.POWER89)
<> 0 OR NUM(A.POWER90) <> 0 OR NUM(A.POWER91) <> 0
OR  NUM(A.POWER92) <> 0 OR NUM(A.POWER93) <> 0 OR
NUM(A.POWER94) <> 0 OR NUM(A.POWER95) <> 0 OR NUM(A.POWER96) <> 0)
!
 
resultcount :                     1
 
Enter command:
FETCH!
 
ID_COMPANY        :   1.0000000000000000000E+00
VALUE_DATE        :  TIMESTAMPXXXXXXXXXXX
COMPANY_TOKEN     :  ?????
ZONE              :  E
PHONE             :  ?????
POWER1            :   0.0000000000000000000000000000000000000E+00
POWER2            :   0.0000000000000000000000000000000000000E+00
POWER3            :   0.0000000000000000000000000000000000000E+00
POWER4            :   0.0000000000000000000000000000000000000E+00
POWER5            :   0.0000000000000000000000000000000000000E+00
POWER6            :   0.0000000000000000000000000000000000000E+00
POWER7            :   0.0000000000000000000000000000000000000E+00
POWER8            :   0.0000000000000000000000000000000000000E+00
POWER9            :   0.0000000000000000000000000000000000000E+00
POWER10           :   0.0000000000000000000000000000000000000E+00
POWER11           :   0.0000000000000000000000000000000000000E+00
POWER12           :   0.0000000000000000000000000000000000000E+00
POWER13           :   0.0000000000000000000000000000000000000E+00
POWER14           :   0.0000000000000000000000000000000000000E+00
POWER15           :   0.0000000000000000000000000000000000000E+00
POWER16           :   0.0000000000000000000000000000000000000E+00
POWER17           :   0.0000000000000000000000000000000000000E+00
POWER18           :   0.0000000000000000000000000000000000000E+00
POWER19           :   0.0000000000000000000000000000000000000E+00
POWER20           :   0.0000000000000000000000000000000000000E+00
POWER21           :   0.0000000000000000000000000000000000000E+00
POWER22           :   0.0000000000000000000000000000000000000E+00
POWER23           :   0.0000000000000000000000000000000000000E+00
POWER24           :   0.0000000000000000000000000000000000000E+00
POWER25           :   0.0000000000000000000000000000000000000E+00
POWER26           :   0.0000000000000000000000000000000000000E+00
POWER27           :   0.0000000000000000000000000000000000000E+00
POWER28           :   0.0000000000000000000000000000000000000E+00
POWER29           :   0.0000000000000000000000000000000000000E+00
POWER30           :   0.0000000000000000000000000000000000000E+00
POWER31           :   0.0000000000000000000000000000000000000E+00
POWER32           :   0.0000000000000000000000000000000000000E+00
POWER33           :   0.0000000000000000000000000000000000000E+00
POWER34           :   0.0000000000000000000000000000000000000E+00
POWER35           :   0.0000000000000000000000000000000000000E+00
POWER36           :   0.0000000000000000000000000000000000000E+00
POWER37           :   0.0000000000000000000000000000000000000E+00
POWER38           :   0.0000000000000000000000000000000000000E+00
POWER39           :   0.0000000000000000000000000000000000000E+00
POWER40           :   0.0000000000000000000000000000000000000E+00
POWER41           :   4.1000000000000000000000000000000000000E+01
POWER42           :   0.0000000000000000000000000000000000000E+00
POWER43           :   0.0000000000000000000000000000000000000E+00
POWER44           :   0.0000000000000000000000000000000000000E+00
POWER45           :   0.0000000000000000000000000000000000000E+00
POWER46           :   0.0000000000000000000000000000000000000E+00
POWER47           :   0.0000000000000000000000000000000000000E+00
POWER48           :   0.0000000000000000000000000000000000000E+00
POWER49           :   0.0000000000000000000000000000000000000E+00
POWER50           :   0.0000000000000000000000000000000000000E+00
POWER51           :   0.0000000000000000000000000000000000000E+00
POWER52           :   0.0000000000000000000000000000000000000E+00
POWER53           :   0.0000000000000000000000000000000000000E+00
POWER54           :   0.0000000000000000000000000000000000000E+00
POWER55           :   0.0000000000000000000000000000000000000E+00
POWER56           :   0.0000000000000000000000000000000000000E+00
POWER57           :   0.0000000000000000000000000000000000000E+00
POWER58           :   0.0000000000000000000000000000000000000E+00
POWER59           :   0.0000000000000000000000000000000000000E+00
POWER60           :   0.0000000000000000000000000000000000000E+00
POWER61           :   0.0000000000000000000000000000000000000E+00
POWER62           :   0.0000000000000000000000000000000000000E+00
POWER63           :   0.0000000000000000000000000000000000000E+00
POWER64           :   0.0000000000000000000000000000000000000E+00
POWER65           :   0.0000000000000000000000000000000000000E+00
POWER66           :   0.0000000000000000000000000000000000000E+00
POWER67           :   0.0000000000000000000000000000000000000E+00
POWER68           :   0.0000000000000000000000000000000000000E+00
POWER69           :   0.0000000000000000000000000000000000000E+00
POWER70           :   0.0000000000000000000000000000000000000E+00
POWER71           :   0.0000000000000000000000000000000000000E+00
POWER72           :   0.0000000000000000000000000000000000000E+00
POWER73           :   0.0000000000000000000000000000000000000E+00
POWER74           :   0.0000000000000000000000000000000000000E+00
POWER75           :   0.0000000000000000000000000000000000000E+00
POWER76           :   0.0000000000000000000000000000000000000E+00
POWER77           :   0.0000000000000000000000000000000000000E+00
POWER78           :   0.0000000000000000000000000000000000000E+00
POWER79           :   0.0000000000000000000000000000000000000E+00
POWER80           :   0.0000000000000000000000000000000000000E+00
POWER81           :   0.0000000000000000000000000000000000000E+00
POWER82           :   0.0000000000000000000000000000000000000E+00
POWER83           :   0.0000000000000000000000000000000000000E+00
POWER84           :   0.0000000000000000000000000000000000000E+00
POWER85           :   0.0000000000000000000000000000000000000E+00
POWER86           :   0.0000000000000000000000000000000000000E+00
POWER87           :   0.0000000000000000000000000000000000000E+00
POWER88           :   0.0000000000000000000000000000000000000E+00
POWER89           :   0.0000000000000000000000000000000000000E+00
POWER90           :   0.0000000000000000000000000000000000000E+00
POWER91           :   0.0000000000000000000000000000000000000E+00
POWER92           :   0.0000000000000000000000000000000000000E+00
POWER93           :   0.0000000000000000000000000000000000000E+00
POWER94           :   0.0000000000000000000000000000000000000E+00
POWER95           :   0.0000000000000000000000000000000000000E+00
POWER96           :   0.0000000000000000000000000000000000000E+00
PRICE1            :   0.0000000000000000000000000000000000000E+00
PRICE2            :   0.0000000000000000000000000000000000000E+00
PRICE3            :   0.0000000000000000000000000000000000000E+00
PRICE4            :   0.0000000000000000000000000000000000000E+00
PRICE5            :   0.0000000000000000000000000000000000000E+00
PRICE6            :   0.0000000000000000000000000000000000000E+00
PRICE7            :   0.0000000000000000000000000000000000000E+00
PRICE8            :   0.0000000000000000000000000000000000000E+00
PRICE9            :   0.0000000000000000000000000000000000000E+00
PRICE10           :   0.0000000000000000000000000000000000000E+00
PRICE11           :   0.0000000000000000000000000000000000000E+00
PRICE12           :   0.0000000000000000000000000000000000000E+00
PRICE13           :   0.0000000000000000000000000000000000000E+00
PRICE14           :   0.0000000000000000000000000000000000000E+00
PRICE15           :   0.0000000000000000000000000000000000000E+00
PRICE16           :   0.0000000000000000000000000000000000000E+00
PRICE17           :   0.0000000000000000000000000000000000000E+00
PRICE18           :   0.0000000000000000000000000000000000000E+00
PRICE19           :   0.0000000000000000000000000000000000000E+00
PRICE20           :   0.0000000000000000000000000000000000000E+00
PRICE21           :   0.0000000000000000000000000000000000000E+00
PRICE22           :   0.0000000000000000000000000000000000000E+00
PRICE23           :   0.0000000000000000000000000000000000000E+00
PRICE24           :   0.0000000000000000000000000000000000000E+00
PRICE25           :   0.0000000000000000000000000000000000000E+00
PRICE26           :   0.0000000000000000000000000000000000000E+00
PRICE27           :   0.0000000000000000000000000000000000000E+00
PRICE28           :   0.0000000000000000000000000000000000000E+00
PRICE29           :   0.0000000000000000000000000000000000000E+00
PRICE30           :   0.0000000000000000000000000000000000000E+00
PRICE31           :   0.0000000000000000000000000000000000000E+00
PRICE32           :   0.0000000000000000000000000000000000000E+00
PRICE33           :   0.0000000000000000000000000000000000000E+00
PRICE34           :   0.0000000000000000000000000000000000000E+00
PRICE35           :   0.0000000000000000000000000000000000000E+00
PRICE36           :   0.0000000000000000000000000000000000000E+00
PRICE37           :   0.0000000000000000000000000000000000000E+00
PRICE38           :   0.0000000000000000000000000000000000000E+00
PRICE39           :   0.0000000000000000000000000000000000000E+00
PRICE40           :   0.0000000000000000000000000000000000000E+00
PRICE41           :   0.0000000000000000000000000000000000000E+00
PRICE42           :   0.0000000000000000000000000000000000000E+00
PRICE43           :   0.0000000000000000000000000000000000000E+00
PRICE44           :   0.0000000000000000000000000000000000000E+00
PRICE45           :   0.0000000000000000000000000000000000000E+00
PRICE46           :   0.0000000000000000000000000000000000000E+00
PRICE47           :   0.0000000000000000000000000000000000000E+00
PRICE48           :   0.0000000000000000000000000000000000000E+00
PRICE49           :   0.0000000000000000000000000000000000000E+00
PRICE50           :   0.0000000000000000000000000000000000000E+00
PRICE51           :   0.0000000000000000000000000000000000000E+00
PRICE52           :   0.0000000000000000000000000000000000000E+00
PRICE53           :   0.0000000000000000000000000000000000000E+00
PRICE54           :   0.0000000000000000000000000000000000000E+00
PRICE55           :   0.0000000000000000000000000000000000000E+00
PRICE56           :   0.0000000000000000000000000000000000000E+00
PRICE57           :   0.0000000000000000000000000000000000000E+00
PRICE58           :   0.0000000000000000000000000000000000000E+00
PRICE59           :   0.0000000000000000000000000000000000000E+00
PRICE60           :   0.0000000000000000000000000000000000000E+00
PRICE61           :   0.0000000000000000000000000000000000000E+00
PRICE62           :   0.0000000000000000000000000000000000000E+00
PRICE63           :   0.0000000000000000000000000000000000000E+00
PRICE64           :   0.0000000000000000000000000000000000000E+00
PRICE65           :   0.0000000000000000000000000000000000000E+00
PRICE66           :   0.0000000000000000000000000000000000000E+00
PRICE67           :   0.0000000000000000000000000000000000000E+00
PRICE68           :   0.0000000000000000000000000000000000000E+00
PRICE69           :   0.0000000000000000000000000000000000000E+00
PRICE70           :   0.0000000000000000000000000000000000000E+00
PRICE71           :   0.0000000000000000000000000000000000000E+00
PRICE72           :   0.0000000000000000000000000000000000000E+00
PRICE73           :   0.0000000000000000000000000000000000000E+00
PRICE74           :   0.0000000000000000000000000000000000000E+00
PRICE75           :   0.0000000000000000000000000000000000000E+00
PRICE76           :   0.0000000000000000000000000000000000000E+00
PRICE77           :   0.0000000000000000000000000000000000000E+00
PRICE78           :   0.0000000000000000000000000000000000000E+00
PRICE79           :   0.0000000000000000000000000000000000000E+00
PRICE80           :   0.0000000000000000000000000000000000000E+00
PRICE81           :   0.0000000000000000000000000000000000000E+00
PRICE82           :   0.0000000000000000000000000000000000000E+00
PRICE83           :   0.0000000000000000000000000000000000000E+00
PRICE84           :   0.0000000000000000000000000000000000000E+00
PRICE85           :   0.0000000000000000000000000000000000000E+00
PRICE86           :   0.0000000000000000000000000000000000000E+00
PRICE87           :   0.0000000000000000000000000000000000000E+00
PRICE88           :   0.0000000000000000000000000000000000000E+00
PRICE89           :   0.0000000000000000000000000000000000000E+00
PRICE90           :   0.0000000000000000000000000000000000000E+00
PRICE91           :   0.0000000000000000000000000000000000000E+00
PRICE92           :   0.0000000000000000000000000000000000000E+00
PRICE93           :   0.0000000000000000000000000000000000000E+00
PRICE94           :   0.0000000000000000000000000000000000000E+00
PRICE95           :   0.0000000000000000000000000000000000000E+00
PRICE96           :   0.0000000000000000000000000000000000000E+00
 
resultcount :                     1
 
Enter command:
PARS_EXECUTE!
 
Enter command:
ROLLBACK RELEASE!
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 ( T1XC1 FIXED(2) KEY, T1XC2 FIXED(2) KEY,
                  T1XC3 FIXED(2) ) !
 
Enter command:
CREATE TABLE T2 ( T2XC1 FIXED(2) KEY, T2XC2 FIXED(2), T2XC3 FIXED(2) ) !
 
Enter command:
CREATE TABLE T3 ( T3XC1 FIXED(2), T3XC2 FIXED(2), T3XC3 FIXED(2) ) !
 
Enter command:
CREATE VIEW V1 AS SELECT * FROM T1, T2, T3
   WHERE T1XC1 = T2XC1 AND T2XC2 = T3XC1 !
 
Enter command:
CREATE VIEW V2 AS SELECT * FROM T1,T2,T3
   WHERE T1.T1XC3 = KERN.T2.T2XC2 AND (( T3XC1 + 1 ) < T2XC3 ) !
 
Enter command:
INSERT T1 VALUES ( 2, 3, 5 ) !
 
Enter command:
INSERT T1 VALUES ( 4, 1, 3 ) !
 
Enter command:
INSERT T1 VALUES ( 8, 3, 1 ) !
 
Enter command:
INSERT T2 VALUES ( 4, 2, 6 ) !
 
Enter command:
INSERT T2 VALUES ( 8, 1, 5 ) !
 
Enter command:
INSERT T2 VALUES ( 2, 5, 5 ) !
 
Enter command:
INSERT T3 VALUES ( 2, 3, 3 ) !
 
Enter command:
INSERT T3 VALUES ( 1, 6, 6 ) !
 
Enter command:
INSERT T3 VALUES ( 1, 2, 4 ) !
 
Enter command:
INSERT T3 VALUES ( 5, 2, 3 ) !
 
Enter command:
INSERT T3 VALUES ( 3, 1, 7 ) !
 
Enter command:
COMMIT WORK !
 
Enter command:
SELECT * FROM V1 !
 
resultcount :                     4
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T1XC3 | T2XC1 | T2XC2 | T2XC3 | T3XC1 | T3XC2 | T3XC3
------+-------+-------+-------+-------+-------+-------+-------+------
  4   |   1   |   3   |   4   |   2   |   6   |   2   |   3   |   3
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   6   |   6
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   2   |   4
  2   |   3   |   5   |   2   |   5   |   5   |   5   |   2   |   3
 
resultcount :                     4
 
Enter command:
SELECT * FROM V2 !
 
resultcount :                     8
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T1XC3 | T2XC1 | T2XC2 | T2XC3 | T3XC1 | T3XC2 | T3XC3
------+-------+-------+-------+-------+-------+-------+-------+------
  2   |   3   |   5   |   2   |   5   |   5   |   2   |   3   |   3
  8   |   3   |   1   |   8   |   1   |   5   |   2   |   3   |   3
  2   |   3   |   5   |   2   |   5   |   5   |   1   |   6   |   6
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   6   |   6
  2   |   3   |   5   |   2   |   5   |   5   |   1   |   2   |   4
  8   |   3   |   1   |   8   |   1   |   5   |   1   |   2   |   4
  2   |   3   |   5   |   2   |   5   |   5   |   3   |   1   |   7
  8   |   3   |   1   |   8   |   1   |   5   |   3   |   1   |   7
 
resultcount :                     8
 
Enter command:
COMMIT WORK !
 
Enter command:
CREATE VIEW V3 AS SELECT
   V1.T1XC1 V1T11, V1.T1XC2 V1T12, V1.T2XC1 V1T21,
   V1.T3XC1 V1T31, V1.T3XC3 V1T33,
   V2.T1XC1 V2T11, V2.T1XC2 V2T12, V2.T2XC1 V2T21,
   V2.T3XC1 V2T31, V2.T3XC3 V2T33
   FROM V1,V2
   WHERE V1.T1XC1 = V2.T1XC1 AND V1.T1XC2 = V2.T3XC1 !
 
Enter command:
SELECT * FROM V3 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
V1T11 | V1T12 | V1T21 | V1T31 | V1T33 | V2T11 | V2T12 | V2T21 | V2T31 | V2T33
------+-------+-------+-------+-------+-------+-------+-------+-------+------
  2   |   3   |   2   |   5   |   3   |   2   |   3   |   2   |   3   |   7
  8   |   3   |   8   |   1   |   6   |   8   |   3   |   8   |   3   |   7
  8   |   3   |   8   |   1   |   4   |   8   |   3   |   8   |   3   |   7
 
resultcount :                     3
 
Enter command:
SELECT * FROM V3 WHERE V1T33 < V2T21 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
V1T11 | V1T12 | V1T21 | V1T31 | V1T33 | V2T11 | V2T12 | V2T21 | V2T31 | V2T33
------+-------+-------+-------+-------+-------+-------+-------+-------+------
  8   |   3   |   8   |   1   |   6   |   8   |   3   |   8   |   3   |   7
  8   |   3   |   8   |   1   |   4   |   8   |   3   |   8   |   3   |   7
 
resultcount :                     2
 
Enter command:
SELECT K.V1T12, V1T33, V2T21 NEU FROM V3 K
   WHERE K.V1T12 < V1T33 AND ( V1T33 * 2 = K.V2T21 ) !
 
resultcount :                     1
 
Enter command:
FETCH !
 
V1T12 | V1T33 | NEU
------+-------+----
  3   |   4   |   8
 
resultcount :                     1
 
Enter command:
DECLARE ERG1 CURSOR FOR
SELECT V3.V1T11, KERN.V3.V1T33 , K.V2T33
   FROM V3, V3 K
   WHERE V3.V1T11 < K.V2T33 !
 
resultcount :                     3
 
Enter command:
SELECT * FROM ERG1 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
V1T11 | V1T33 | V2T33
------+-------+------
  2   |   3   |   7
  2   |   3   |   7
  2   |   3   |   7
 
resultcount :                     3
 
Enter command:
SELECT V3.V1T11, SUM (V1T33) FROM V3 GROUP BY V3.V1T11 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
V1T11 | EXPRESSION1
------+---------------------------------------------
  2   |  3.0000000000000000000000000000000000000E+00
  8   |  1.0000000000000000000000000000000000000E+01
 
resultcount :                     2
 
Enter command:
SELECT V1T33 + V2T21 FROM V3 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
EXPRESSION1
-----------
   5
  14
  12
 
resultcount :                     3
 
Enter command:
DROP TABLE T1 !
 
Enter command:
DROP TABLE T2 !
 
Enter command:
DROP TABLE T3 !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 ( T1XC1 FIXED(2) KEY, T1XC2 FIXED(2) KEY,
                  T1XC3 FIXED(2) ) !
 
Enter command:
CREATE TABLE T2 ( T2XC1 FIXED(2) KEY, T2XC2 FIXED(2), T2XC3 FIXED(2) ) !
 
Enter command:
INSERT T1 VALUES ( 2, 3, 5 ) !
 
Enter command:
INSERT T1 VALUES ( 4, 1, 3 ) !
 
Enter command:
INSERT T1 VALUES ( 8, 3, 1 ) !
 
Enter command:
INSERT T2 VALUES ( 4, 2, 6 ) !
 
Enter command:
INSERT T2 VALUES ( 8, 1, 5 ) !
 
Enter command:
INSERT T2 VALUES ( 2, 5, 5 ) !
 
Enter command:
COMMIT WORK !
 
Enter command:
CREATE VIEW V1 AS SELECT 3 * T1XC2 NEU1, T2XC3, T2XC1 + T2XC2
   FROM T1,T2 !
 
Enter command:
SELECT * FROM V1 !
 
resultcount :                     9
 
Enter command:
FETCH !
 
NEU1 | T2XC3 | EXPRESSION1
-----+-------+------------
   9 |   5   |    7
   9 |   6   |    6
   9 |   5   |    9
   3 |   5   |    7
   3 |   6   |    6
   3 |   5   |    9
   9 |   5   |    7
   9 |   6   |    6
   9 |   5   |    9
 
resultcount :                     9
 
Enter command:
DECLARE ERG1 CURSOR FOR
SELECT NEU1 NEU2 , EXPRESSION1 + 1
   FROM V1 WHERE NEU1 < T2XC3 !
 
resultcount :                     3
 
Enter command:
FETCH ERG1 !
 
NEU2 | EXPRESSION1
-----+------------
   3 |     8
   3 |     7
   3 |    10
 
resultcount :                     3
 
Enter command:
CREATE VIEW V2 AS SELECT  T1XC3 + T2.T2XC1 NEU1 FROM T1,T2
   WHERE T1XC1 < T2XC3 !
 
Enter command:
SELECT * FROM V2 !
 
resultcount :                     6
 
Enter command:
FETCH !
 
NEU1
----
   7
   9
  13
   5
   7
  11
 
resultcount :                     6
 
Enter command:
SELECT NEU1 FROM V2 !
 
resultcount :                     6
 
Enter command:
FETCH !
 
NEU1
----
   7
   9
  13
   5
   7
  11
 
resultcount :                     6
 
Enter command:
CREATE VIEW V3 ( S1, S2, S3, S4, S5 )
   AS SELECT T1XC2 + T2XC3, T1XC2, T2.T2XC3, T1XC1 SPALTE, T2XC1
   FROM T1,T2 WHERE T1XC1 = T2XC1 !
 
Enter command:
SELECT * FROM V3 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
S1   | S2  | S3  | S4  | S5
-----+-----+-----+-----+----
   8 |   3 |   5 |   2 |   2
   7 |   1 |   6 |   4 |   4
   8 |   3 |   5 |   8 |   8
 
resultcount :                     3
 
Enter command:
SELECT S1, S2, S3, V3.S4, KERN.V3.S5 FROM V3 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
S1   | S2  | S3  | S4  | S5
-----+-----+-----+-----+----
   8 |   3 |   5 |   2 |   2
   7 |   1 |   6 |   4 |   4
   8 |   3 |   5 |   8 |   8
 
resultcount :                     3
 
Enter command:
SELECT S1 + S2, S4 + S5 NEU FROM V3 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
EXPRESSION1 | NEU
------------+-----
   11       |    4
    8       |    8
   11       |   16
 
resultcount :                     3
 
Enter command:
SELECT S3, COUNT(S3), SUM ( S4 ) FROM V3 GROUP BY S3 ORDER BY 3 ASC !
 
resultcount :                     2
 
Enter command:
FETCH !
 
S3  | EXPRESSION1 | EXPRESSION2
----+-------------+---------------------------------------------
  6 |           1 |  4.0000000000000000000000000000000000000E+00
  5 |           2 |  1.0000000000000000000000000000000000000E+01
 
resultcount :                     2
 
Enter command:
SELECT SUM ( S2+S5), SUM ( S1 +S5 ) FROM V3
   GROUP BY S3 HAVING AVG ( S4) = 5 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1       :   1.6000000000000000000000000000000000000E+01
EXPRESSION2       :   2.6000000000000000000000000000000000000E+01
 
resultcount :                     1
 
Enter command:
CREATE VIEW V4 ( C1, C2 ) AS SELECT SUM ( T1XC2 ), COUNT ( T2XC1 )
   FROM T1,T2 !
 
Enter command:
CREATE VIEW V5 ( C1,C2,C3,C4,C5,C6 ) AS SELECT * FROM T1,T2
   WHERE T1XC2 + 2 = T2XC3 !
 
Enter command:
SELECT * FROM V5 !
 
resultcount :                     4
 
Enter command:
FETCH !
 
C1  | C2  | C3  | C4  | C5  | C6
----+-----+-----+-----+-----+----
  2 |   3 |   5 |   2 |   5 |   5
  8 |   3 |   1 |   2 |   5 |   5
  2 |   3 |   5 |   8 |   1 |   5
  8 |   3 |   1 |   8 |   1 |   5
 
resultcount :                     4
 
Enter command:
SELECT DISTINCT C4, C5 , 7 FROM V5 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
C4  | C5  | EXPRESSION1
----+-----+------------
  2 |   5 |  7
  8 |   1 |  7
 
resultcount :                     2
 
Enter command:
DROP TABLE T1 !
 
Enter command:
DROP TABLE T2 !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 ( T1XC1 FIXED(3) KEY, T1XC2 FIXED(3) ) !
 
Enter command:
CREATE TABLE T2 ( T2XC1 FIXED(3), T2XC2 FIXED(3) ) !
 
Enter command:
CREATE VIEW V1 AS SELECT * FROM T1,T2 WHERE T1XC1 = T2XC1 !
 
Enter command:
INSERT T1 VALUES ( 3, 11 ) !
 
Enter command:
INSERT T1 VALUES ( 5, 44 ) !
 
Enter command:
INSERT T1 VALUES ( 7, 11 ) !
 
Enter command:
INSERT T1 VALUES ( 1, 11 ) !
 
Enter command:
INSERT T2 VALUES ( 5, 66 ) !
 
Enter command:
INSERT T2 VALUES ( 5, 66 ) !
 
Enter command:
INSERT T2 VALUES ( 1, 11 ) !
 
Enter command:
INSERT T2 VALUES ( 5, 11 ) !
 
Enter command:
INSERT T2 VALUES ( 7, 22 ) !
 
Enter command:
INSERT T2 VALUES ( 7, 11 ) !
 
Enter command:
SELECT * FROM V1 !
 
resultcount :                     6
 
Enter command:
FETCH !
 
T1XC1 | T1XC2 | T2XC1 | T2XC2
------+-------+-------+------
   5  |   44  |    5  |   66
   5  |   44  |    5  |   66
   1  |   11  |    1  |   11
   5  |   44  |    5  |   11
   7  |   11  |    7  |   22
   7  |   11  |    7  |   11
 
resultcount :                     6
 
Enter command:
CREATE VIEW V3 AS
SELECT COUNT(*) * 3, ((MAX(T1XC1 + 6) + SUM(T2XC1)) * T1XC2) MOD 4 COL
   FROM V1 WHERE T2XC2 + T1XC1 > T1XC2
   GROUP BY T1XC2, T2XC1
   HAVING COUNT(*) + 30 < T1XC2 + SUM(T2XC2) !
 
Enter command:
SELECT * FROM V3 !
 
*** SQLSTATEMENT HAS BEEN OPTIMIZED
 
resultcount :                     2
 
Enter command:
FETCH !
 
EXPRESSION1  | COL
-------------+---------------------------------------------
           6 |  1.0000000000000000000000000000000000000E+00
           6 |  0.0000000000000000000000000000000000000E+00
 
resultcount :                     2
 
Enter command:
ROLLBACK WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 ( T1XC1 CHAR(20),
                  T1XC2 FIXED(10),
                  T1XC3 CHAR(10) ASCII,
                  T1XC4 FIXED(10,5),
                  T1XC5 FLOAT(10),
                  T1XC6 FIXED(18) ) !
 
Enter command:
INSERT T1 VALUES ( 'Hans', 100, 'Muenchen', 100.100, NULL,
                    500000000000000000 ) !
 
Enter command:
INSERT T1 VALUES ( NULL, NULL, 'Hamburg', 0.00005, 8E-30, -2000 ) !
 
Enter command:
INSERT T1 VALUES ( 'Karin', -600000, NULL, NULL, -1E12,
                    800000000000000000 ) !
 
Enter command:
INSERT T1 VALUES ( 'Karin', 5, 'Bonn', -700, 1000, NULL ) !
 
Enter command:
INSERT T1 VALUES ( 'Hans', -500000, 'Bremen', 700.00005, NULL, 300 ) !
 
Enter command:
INSERT T1 VALUES ( ' Marianne', -80, 'Koeln 1', -300, 10E-10, NULL ) !
 
Enter command:
CREATE TABLE T2 ( T2XC1 FIXED(5) KEY,
                  T2XC2 CHAR(10) ASCII,
                  T2XC3 CHAR(15) ASCII,
                  T2XC4 FLOAT(5),
                  T2XC5 FIXED(5) RANGE BETWEEN -50000 AND +50000 ) !
 
Enter command:
INSERT T2 VALUES ( 10, 'Klaus', 'Mueller', 1E20, 20000 ) !
 
Enter command:
INSERT T2 VALUES ( 20, 'Elena', 'Meier', -5E10, -100 ) !
 
Enter command:
INSERT T2 VALUES ( 30, NULL, 'Lehmann', NULL, NULL ) !
 
Enter command:
INSERT T2 VALUES ( 40, 'Paul', 'Anse Rauch', 8 , -50000 ) !
 
Enter command:
CREATE TABLE T3 ( T3XC1 FIXED(2,1 ) KEY,
                  T3XC2 CHAR(20) KEY ,
                  T3XC3 FLOAT( 5) ,
                  T3XC4 CHAR(20) ASCII RANGE BETWEEN 'A' AND 'G' ,
                  T3XC5 FIXED(18) ) !
 
Enter command:
INSERT T3 VALUES ( 0.1, 'Frankreich', 80E50, 'Amsel',
                   700000000000000000 ) !
 
Enter command:
INSERT T3 VALUES ( 2.5, 'Belgien', 1E-30, 'Fink', NULL ) !
 
Enter command:
INSERT T3 VALUES ( 3.0, 'Italien', -5E30, 'Amsel', -1000 ) !
 
Enter command:
INSERT T3 VALUES ( 4.1, 'VR Polen', NULL, 'Fink', +200 ) !
 
Enter command:
CREATE VIEW V1 AS
   SELECT SUM ( T1.T1XC2 ) AS COL1 , SUM ( T2.T2XC1 ) AS COL2 FROM T1, T2 !
 
Enter command:
SELECT 'BLABLA', COL1, 'BLABLA', COL2 FROM V1 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1       :  BLABLA
COL1              :  -4.3999000000000000000000000000000000000E+06
EXPRESSION2       :  BLABLA
COL2              :   6.0000000000000000000000000000000000000E+02
 
resultcount :                     1
 
Enter command:
CREATE VIEW V2 AS
SELECT COUNT (*), COUNT ( DISTINCT KERN.T2.T2XC2 ),
       COUNT ( ALL ( T3XC5)) FROM T1,T2,T3 !
 
Enter command:
SELECT * FROM V2 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1 | EXPRESSION2 | EXPRESSION3
------------+-------------+------------
         96 |           3 |          72
 
resultcount :                     1
 
Enter command:
CREATE VIEW V3 AS
SELECT AVG ( DISTINCT T2.T2XC1 ) ,
       COUNT ( DISTINCT T2.T2XC1 ) ,
       AVG ( ALL KERN.T1.T1XC5 ) ,
       SUM ( ALL T1XC5 ) ,
       COUNT ( ALL ( T1XC5 ) ) FROM T1,T2 !
 
Enter command:
SELECT * FROM V3 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1       :   2.5000000000000000000000000000000000000E+01
EXPRESSION2       :            4
EXPRESSION3       :  -2.4999999974999999999975000000000000000E+11
EXPRESSION4       :  -3.9999999959999999999960000000000000000E+12
EXPRESSION5       :           16
 
resultcount :                     1
 
Enter command:
CREATE VIEW V4 AS
SELECT SUM ( REF.T1XC6 ) , AVG ( REF.T1XC4) FROM T1,T1 REF !
 
Enter command:
SELECT * FROM V4 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1       :   7.7999999999999898000000000000000000000E+18
EXPRESSION2       :  -3.9979980000000000000000000000000000000E+01
 
resultcount :                     1
 
Enter command:
CREATE VIEW V5 AS
SELECT SUM ( T1XC4 ), AVG ( T1XC4), T1XC1, COUNT(T1XC1)
    FROM T1,T2 GROUP BY T1XC1 !
 
Enter command:
SELECT EXPRESSION1, EXPRESSION2, T1XC1 || ' aa', EXPRESSION3 + 1
   FROM V5 !
 
*** SQLSTATEMENT HAS BEEN OPTIMIZED
 
resultcount :                     4
 
Enter command:
FETCH !
 
EXPRESSION1       :  -1.2000000000000000000000000000000000000E+03
EXPRESSION2       :  -3.0000000000000000000000000000000000000E+02
EXPRESSION1       :   Marianne aa
EXPRESSION2       :             5
-----------------------------------------------------------------
EXPRESSION1       :   3.2004002000000000000000000000000000000E+03
EXPRESSION2       :   4.0005002500000000000000000000000000000E+02
EXPRESSION1       :  Hans aa
EXPRESSION2       :             9
-----------------------------------------------------------------
EXPRESSION1       :  -2.8000000000000000000000000000000000000E+03
EXPRESSION2       :  -7.0000000000000000000000000000000000000E+02
EXPRESSION1       :  Karin aa
EXPRESSION2       :             9
-----------------------------------------------------------------
EXPRESSION1       :   2.0000000000000000000000000000000000000E-04
EXPRESSION2       :   5.0000000000000000000000000000000000000E-05
EXPRESSION1       :  ?????
EXPRESSION2       :             1
 
resultcount :                     4
 
Enter command:
CREATE VIEW V6 AS
SELECT SUM ( T1XC4 ), SUM ( T2XC4)
    FROM T1, T2 REF
    GROUP BY REF.T2XC1
    HAVING REF.T2XC1 > 10
       AND SUM ( REF.T2XC4) IS NOT NULL !
 
Enter command:
DECLARE ERG1 CURSOR FOR
SELECT EXPRESSION1, MAX ( EXPRESSION2 ) EXP1 FROM V6
   WHERE EXPRESSION1 <> V6.EXPRESSION2
   GROUP BY EXPRESSION1
   HAVING COUNT(*) = 2 !
 
resultcount :                     1
 
Enter command:
FETCH ERG1 !
 
EXPRESSION1       :  -1.9989990000000000000000000000000000000E+02
EXP1              :   4.8000000000000000000000000000000000000E+01
 
resultcount :                     1
 
Enter command:
CREATE VIEW V7 AS
SELECT AVG ( T1XC2), AVG ( DISTINCT T1XC5 ) , T1.T1XC5
    FROM T1, T2
    GROUP BY T1XC1 , KERN.T1.T1XC5
    HAVING SUM ( T1XC5 ) > 0 !
 
Enter command:
SELECT * FROM V7 !
 
*** SQLSTATEMENT HAS BEEN OPTIMIZED
 
resultcount :                     3
 
Enter command:
FETCH !
 
EXPRESSION1       :  -8.0000000000000000000000000000000000000E+01
EXPRESSION2       :   1.0000000000000000000000000000000000000E-09
T1XC5             :   1.000000000E-09
-----------------------------------------------------------------
EXPRESSION1       :   5.0000000000000000000000000000000000000E+00
EXPRESSION2       :   1.0000000000000000000000000000000000000E+03
T1XC5             :   1.000000000E+03
-----------------------------------------------------------------
EXPRESSION1       :  ????????????????????????????????????????????
EXPRESSION2       :   8.0000000000000000000000000000000000000E-30
T1XC5             :   8.000000000E-30
 
resultcount :                     3
 
Enter command:
CREATE VIEW V8 AS
SELECT SUM( T1XC2) , COUNT ( T1XC2) , AVG (T1XC2)
    FROM T1,T3 GROUP BY T1XC1, T3.T3XC4 !
 
Enter command:
SELECT * FROM V8 WHERE EXPRESSION2 < 3 ORDER BY 1 !
 
resultcount :                     4
 
Enter command:
FETCH !
 
EXPRESSION1       :  -1.6000000000000000000000000000000000000E+02
EXPRESSION2       :            2
EXPRESSION3       :  -8.0000000000000000000000000000000000000E+01
-----------------------------------------------------------------
EXPRESSION1       :  -1.6000000000000000000000000000000000000E+02
EXPRESSION2       :            2
EXPRESSION3       :  -8.0000000000000000000000000000000000000E+01
-----------------------------------------------------------------
EXPRESSION1       :  ????????????????????????????????????????????
EXPRESSION2       :            0
EXPRESSION3       :  ????????????????????????????????????????????
-----------------------------------------------------------------
EXPRESSION1       :  ????????????????????????????????????????????
EXPRESSION2       :            0
EXPRESSION3       :  ????????????????????????????????????????????
 
resultcount :                     4
 
Enter command:
CREATE VIEW V9 AS
SELECT SUM ( T1.T1XC2 + T2.T2XC1 ),
       AVG ( T1XC4 * 5 * T2XC5 ),
       ( SUM ( DISTINCT KERN.T1.T1XC4 / T2XC5 ) )
    FROM T1, T2 GROUP BY T2XC1 !
 
Enter command:
SELECT * FROM V9 !
 
*** SQLSTATEMENT HAS BEEN OPTIMIZED
 
resultcount :                     4
 
Enter command:
FETCH !
 
EXPRESSION1       :  -1.0999250000000000000000000000000000000E+06
EXPRESSION2       :  -3.9979980000000000000000000000000000000E+06
EXPRESSION3       :  -9.9949950000000000000000000000000000000E-03
-----------------------------------------------------------------
EXPRESSION1       :  -1.0998750000000000000000000000000000000E+06
EXPRESSION2       :   1.9989990000000000000000000000000000000E+04
EXPRESSION3       :   1.9989990000000000000000000000000000000E+00
-----------------------------------------------------------------
EXPRESSION1       :  -1.0998250000000000000000000000000000000E+06
EXPRESSION2       :  ????????????????????????????????????????????
EXPRESSION3       :  ????????????????????????????????????????????
-----------------------------------------------------------------
EXPRESSION1       :  -1.0997750000000000000000000000000000000E+06
EXPRESSION2       :   9.9949950000000000000000000000000000000E+06
EXPRESSION3       :   3.9979980000000000000000000000000000000E-03
 
resultcount :                     4
 
Enter command:
CREATE TABLE I (I1 FLOAT (14), I2 FLOAT (14), I3 FIXED(18))!
 
Enter command:
CREATE VIEW V10 AS
SELECT SUM ( ALL T1.T1XC5 - T2XC4*T3XC1),
       AVG ( ALL  (T1.T1XC5  )- T2XC4 * T3XC1 ) ,
       COUNT (ALL ( T2XC4 * T3XC1 *((-1))+ T1.T1XC5 )) COL3
    FROM T1,T2, T3
    GROUP BY T3XC4 !
 
Enter command:
SELECT * FROM V10 !
 
*** SQLSTATEMENT HAS BEEN OPTIMIZED
 
resultcount :                     2
 
Enter command:
FETCH !
 
EXPRESSION1       :  -1.2400000053799999940991999999940000000E+21
EXPRESSION2       :  -5.1666666890833333087466666666416666666E+19
COL3              :           24
-----------------------------------------------------------------
EXPRESSION1       :  -2.6400000046799999942111999999940000000E+21
EXPRESSION2       :  -1.1000000019499999975879999999975000000E+20
COL3              :           24
 
resultcount :                     2
 
Enter command:
INSERT I SELECT * FROM V10 !
 
Enter command:
SELECT * FROM I !
 
resultcount :               unknown
 
Enter command:
FETCH !
 
I1                   | I2                   | I3
---------------------+----------------------+--------------------
-1.2400000053800E+21 | -5.1666666890833E+19 |                  24
-2.6400000046800E+21 | -1.1000000019500E+20 |                  24
 
resultcount :                     2
 
Enter command:
DECLARE ERG3 CURSOR FOR
SELECT MIN (V9.EXPRESSION1) N1, V10.EXPRESSION2 N2
   FROM V9, V10
   WHERE V9.EXPRESSION2 IS NOT NULL OR V9.EXPRESSION3 < 0
   GROUP BY V10.EXPRESSION1, V10.EXPRESSION2
   HAVING SUM (V9.EXPRESSION2) - SUM (V10.EXPRESSION2) > 0
   ORDER BY 2 DESC !
 
resultcount :                     2
 
Enter command:
FETCH ERG3 !
 
N1                :  -1.0999250000000000000000000000000000000E+06
N2                :  -5.1666666890833333087466666666416666666E+19
-----------------------------------------------------------------
N1                :  -1.0999250000000000000000000000000000000E+06
N2                :  -1.1000000019499999975879999999975000000E+20
 
resultcount :                     2
 
Enter command:
DECLARE ERG4 CURSOR FOR
SELECT N1 FROM ERG3 !
 
resultcount :                     2
 
Enter command:
FETCH ERG4 !
 
N1
--------------------------------------------
-1.0999250000000000000000000000000000000E+06
-1.0999250000000000000000000000000000000E+06
 
resultcount :                     2
 
Enter command:
SELECT * FROM V10 !
 
*** SQLSTATEMENT HAS BEEN OPTIMIZED
 
resultcount :                     2
 
Enter command:
FETCH!
 
EXPRESSION1       :  -1.2400000053799999940991999999940000000E+21
EXPRESSION2       :  -5.1666666890833333087466666666416666666E+19
COL3              :           24
-----------------------------------------------------------------
EXPRESSION1       :  -2.6400000046799999942111999999940000000E+21
EXPRESSION2       :  -1.1000000019499999975879999999975000000E+20
COL3              :           24
 
resultcount :                     2
 
Enter command:
SELECT V10.EXPRESSION1, T1.T1XC1, T1.T1XC2 FROM V10, T1 !
 
resultcount :                    12
 
Enter command:
FETCH !
 
EXPRESSION1       :  -1.2400000053799999940991999999940000000E+21
T1XC1             :  Hans
T1XC2             :          100
-----------------------------------------------------------------
EXPRESSION1       :  -1.2400000053799999940991999999940000000E+21
T1XC1             :  ?????
T1XC2             :  ???????????
-----------------------------------------------------------------
EXPRESSION1       :  -1.2400000053799999940991999999940000000E+21
T1XC1             :  Karin
T1XC2             :      -600000
-----------------------------------------------------------------
EXPRESSION1       :  -1.2400000053799999940991999999940000000E+21
T1XC1             :  Karin
T1XC2             :            5
-----------------------------------------------------------------
EXPRESSION1       :  -1.2400000053799999940991999999940000000E+21
T1XC1             :  Hans
T1XC2             :      -500000
-----------------------------------------------------------------
EXPRESSION1       :  -1.2400000053799999940991999999940000000E+21
T1XC1             :   Marianne
T1XC2             :          -80
-----------------------------------------------------------------
EXPRESSION1       :  -2.6400000046799999942111999999940000000E+21
T1XC1             :  Hans
T1XC2             :          100
-----------------------------------------------------------------
EXPRESSION1       :  -2.6400000046799999942111999999940000000E+21
T1XC1             :  ?????
T1XC2             :  ???????????
-----------------------------------------------------------------
EXPRESSION1       :  -2.6400000046799999942111999999940000000E+21
T1XC1             :  Karin
T1XC2             :      -600000
-----------------------------------------------------------------
EXPRESSION1       :  -2.6400000046799999942111999999940000000E+21
T1XC1             :  Karin
T1XC2             :            5
-----------------------------------------------------------------
EXPRESSION1       :  -2.6400000046799999942111999999940000000E+21
T1XC1             :  Hans
T1XC2             :      -500000
-----------------------------------------------------------------
EXPRESSION1       :  -2.6400000046799999942111999999940000000E+21
T1XC1             :   Marianne
T1XC2             :          -80
 
resultcount :                    12
 
Enter command:
PARS_THEN_EX !
 
Enter command:
SELECT V10.EXPRESSION1, T1.T1XC1, T1.T1XC2 FROM V10, T1 !
 
resultcount :                    12
 
Enter command:
FETCH INTO :A, :B, :C!
 
EXPRESSION1       :  -1.2400000053799999940991999999940000000E+21
T1XC1             :  Hans
T1XC2             :          100
-----------------------------------------------------------------
EXPRESSION1       :  -1.2400000053799999940991999999940000000E+21
T1XC1             :  ?????
T1XC2             :  ???????????
-----------------------------------------------------------------
EXPRESSION1       :  -1.2400000053799999940991999999940000000E+21
T1XC1             :  Karin
T1XC2             :      -600000
-----------------------------------------------------------------
EXPRESSION1       :  -1.2400000053799999940991999999940000000E+21
T1XC1             :  Karin
T1XC2             :            5
-----------------------------------------------------------------
EXPRESSION1       :  -1.2400000053799999940991999999940000000E+21
T1XC1             :  Hans
T1XC2             :      -500000
-----------------------------------------------------------------
EXPRESSION1       :  -1.2400000053799999940991999999940000000E+21
T1XC1             :   Marianne
T1XC2             :          -80
-----------------------------------------------------------------
EXPRESSION1       :  -2.6400000046799999942111999999940000000E+21
T1XC1             :  Hans
T1XC2             :          100
-----------------------------------------------------------------
EXPRESSION1       :  -2.6400000046799999942111999999940000000E+21
T1XC1             :  ?????
T1XC2             :  ???????????
-----------------------------------------------------------------
EXPRESSION1       :  -2.6400000046799999942111999999940000000E+21
T1XC1             :  Karin
T1XC2             :      -600000
-----------------------------------------------------------------
EXPRESSION1       :  -2.6400000046799999942111999999940000000E+21
T1XC1             :  Karin
T1XC2             :            5
-----------------------------------------------------------------
EXPRESSION1       :  -2.6400000046799999942111999999940000000E+21
T1XC1             :  Hans
T1XC2             :      -500000
-----------------------------------------------------------------
EXPRESSION1       :  -2.6400000046799999942111999999940000000E+21
T1XC1             :   Marianne
T1XC2             :          -80
 
resultcount :                    12
 
Enter command:
PARS_EXECUTE !
 
Enter command:
ROLLBACK WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 ( T1XC1 FIXED(5) KEY,
                  T1XC2 CHAR(5),
                  T1XC3 CHAR(5) ) !
 
Enter command:
CREATE TABLE T2 ( T2XC1 FIXED(5),
                  T2XC2 FIXED(5),
                  T2XC3 CHAR(5) ) !
 
Enter command:
INSERT T1 VALUES ( 2, 'aaa' , 'sss' ) !
 
Enter command:
INSERT T1 VALUES ( 3, 'nnn' , 'nnn' ) !
 
Enter command:
INSERT T1 VALUES ( 4, 'qqq' , 'aaa' ) !
 
Enter command:
INSERT T1 VALUES ( 9, 'aaa' , 'bbb' ) !
 
Enter command:
INSERT T1 VALUES ( 6, 'ccc' , 'bbb' ) !
 
Enter command:
INSERT T1 VALUES ( 8, 'aaa' , 'bbb' ) !
 
Enter command:
INSERT T1 VALUES ( 5, NULL  , NULL  ) !
 
Enter command:
INSERT T1 VALUES ( 1, 'aaa' , 'sss' ) !
 
Enter command:
INSERT T2 VALUES ( 3, 2, 'aaa' ) !
 
Enter command:
INSERT T2 VALUES ( 4, 1, 'nnn' ) !
 
Enter command:
INSERT T2 VALUES ( 4, 2, 'nnn' ) !
 
Enter command:
INSERT T2 VALUES ( 8, NULL, 'bbb' ) !
 
Enter command:
INSERT T2 VALUES ( 1, 4, 'sss' ) !
 
Enter command:
INSERT T2 VALUES ( NULL, 2, 'bbb' ) !
 
Enter command:
INSERT T2 VALUES ( 5, 1, NULL ) !
 
Enter command:
INSERT T2 VALUES ( 1, 8, 'aaa' ) !
 
Enter command:
INSERT T2 VALUES ( 1, 4, 'bbb' ) !
 
Enter command:
INSERT T2 VALUES ( 3, 2, 'nnn' ) !
 
Enter command:
INSERT T2 VALUES ( 2, 1, 'sss' ) !
 
Enter command:
INSERT T2 VALUES ( 3, 2, 'bbb' ) !
 
Enter command:
INSERT T2 VALUES ( 2, 1, 'bbb' ) !
 
Enter command:
CREATE VIEW V1 AS
  SELECT DISTINCT SUM ( DISTINCT 5 + T2XC1 ) + 2 * SUM ( T1XC1 ),
                  COUNT ( T2XC1 ),
                  MAX ( T1XC2 ),
                  T2XC2
  FROM T1, T2
  WHERE T1XC3 = T2.T2XC3
    AND T1XC1 > T2XC1 - 1
  GROUP BY T2XC2, T1XC2
  HAVING MIN ( T2XC1 ) < MAX ( ALL T1XC1 )
     AND AVG ( DISTINCT T1.T1XC1 ) + MIN ( T1XC1 ) <= KERN.T2.T2XC2 !
 
Enter command:
SELECT * FROM V1 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1       :   1.4000000000000000000000000000000000000E+01
EXPRESSION2       :            1
EXPRESSION3       :  qqq
T2XC2             :       8
 
resultcount :                     1
 
Enter command:
SELECT V1.T2XC2, REF.T2XC2, V1.T2XC2 + REF.T2XC2 FROM V1, V1 REF
   WHERE V1.T2XC2 = REF.T2XC2 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
T2XC2  | T2XC2  | EXPRESSION1
-------+--------+------------
     8 |      8 |      16
 
resultcount :                     1
 
Enter command:
ROLLBACK WORK !
 
Enter command:
CREATE TABLE T ( A CHAR (8))!
 
Enter command:
INSERT T SET A = 'aaa'!
 
Enter command:
CREATE TABLE T1 (B CHAR (8))!
 
Enter command:
CREATE VIEW V1 AS SELECT * FROM T,T1
   WHERE T.A = T1.B(+) !
 
Enter command:
SELECT * FROM V1 !
 
resultcount :                     1
 
Enter command:
FETCH!
 
A        | B
---------+---------
aaa      | ????????
 
resultcount :                     1
 
Enter command:
SELECT * INTO :A, :B FROM V1 WHERE V1.A = 'aaa'!
 
A                 :  aaa
B                 :  ?????
 
Enter command:
PARS_THEN_EX !
 
Enter command:
SELECT * FROM V1 !
 
resultcount :                     1
 
Enter command:
FETCH!
 
A        | B
---------+---------
aaa      | ????????
 
resultcount :                     1
 
Enter command:
SELECT * INTO :A, :B FROM V1 WHERE A = 'aaa'!
 
A                 :  aaa
B                 :  ?????
 
Enter command:
PARS_EXECUTE!
 
Enter command:
ROLLBACK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 ( A1 FIXED(5), B1 FIXED(5),
                  C1 FIXED(18), D1 FIXED(18),
                  E1 FIXED(7,2), F1 FIXED(7,2),
                  G1 FLOAT(3), H1 FLOAT(3), I1 FLOAT(18), J1 FLOAT(18),
                  K1 CHAR(5), L1 CHAR(5),
                  M1 TIME, N1 TIME, O1 DATE, P1 DATE ) !
 
Enter command:
CREATE TABLE T2 ( A2 FIXED(5), B2 FIXED(5),
                  C2 FIXED(18), D2 FIXED(18),
                  E2 FIXED(7,2), F2 FIXED(7,2),
                  G2 FLOAT(3), H2 FLOAT(3), I2 FLOAT(18), J2 FLOAT(18),
                  K2 CHAR(5), L2 CHAR(5),
                  M2 TIME, N2 TIME, O2 DATE, P2 DATE ) !
 
Enter command:
INSERT T1 VALUES ( 55555, 33333, 666666666666666666, 777777777777777777,
   22222.22, 99999.99, 8.88E+62, 7.77E+62, 8.88888888888888888E+62,
   9.99999999999999999E+62, 'aaaaa', 'bbbbb', '00214738', '23453612',
   '19841224', '20000712' ) !
 
Enter command:
INSERT T2 VALUES ( 55555, 33333, 666666666666666666, 777777777777777777,
   22222.22, 99999.99, 8.88E+62, 7.77E+62, 8.88888888888888888E+62,
   9.99999999999999999E+62, 'aaaaa', 'bbbbb', '00214738', '23453612',
   '19841224', '20000712' ) !
 
Enter command:
INSERT T1 VALUES ( NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
   NULL, NULL, NULL, NULL, NULL, NULL, NULL ) !
 
Enter command:
INSERT T2 VALUES ( NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
   NULL, NULL, NULL, NULL, NULL, NULL, NULL ) !
 
Enter command:
INSERT T1 VALUES ( 0,0,0,0,0,0,0,0,0,0, 'a' , 'a' ,
   '11111111', '11111111' , '11111111', '11111111' ) !
 
Enter command:
INSERT T2 VALUES ( 0,0,0,0,0,0,0,0,0,0, 'a' , 'a' ,
   '11111111', '11111111' , '11111111', '11111111' ) !
 
Enter command:
COMMIT WORK !
 
Enter command:
CREATE VIEW V1 (A1,I1,C1,C2) AS SELECT A1, I1, A1/B1, I1*J1 FROM T1 !
 
Enter command:
COMMIT WORK !
 
Enter command:
CREATE VIEW V2 ( Y1, Y2 ) AS SELECT A1, I1+J1 FROM T1 !
 
Enter command:
SELECT C1 * Y2 FROM V1, V2 !
 
resultcount :                     9
 
Enter command:
FETCH !
 
EXPRESSION1
--------------------------------------------
############################################
????????????????????????????????????????????
 0.0000000000000000000000000000000000000E+00
############################################
????????????????????????????????????????????
????????????????????????????????????????????
############################################
############################################
############################################
 
resultcount :                     9
 
Enter command:
SELECT * FROM V1, V2 WHERE Y1 > 0 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
A1                :   55555
I1                :   8.88888888888888888E+62
C1                :       1.666666666666666666666666666666667
C2                :  ############################################
Y1                :   55555
Y2                :  ############################################
-----------------------------------------------------------------
A1                :  ??????
I1                :  ????????????????????????
C1                :  ????????????????????????????????????????
C2                :  ????????????????????????????????????????????
Y1                :   55555
Y2                :  ############################################
-----------------------------------------------------------------
A1                :       0
I1                :   0.00000000000000000E+00
C1                :  ########################################
C2                :   0.0000000000000000000000000000000000000E+00
Y1                :   55555
Y2                :  ############################################
 
resultcount :                     3
 
Enter command:
SELECT * FROM V1, V2 WHERE A1 > 0 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
A1                :   55555
I1                :   8.88888888888888888E+62
C1                :       1.666666666666666666666666666666667
C2                :  ############################################
Y1                :   55555
Y2                :  ############################################
-----------------------------------------------------------------
A1                :   55555
I1                :   8.88888888888888888E+62
C1                :       1.666666666666666666666666666666667
C2                :  ############################################
Y1                :  ??????
Y2                :  ????????????????????????????????????????????
-----------------------------------------------------------------
A1                :   55555
I1                :   8.88888888888888888E+62
C1                :       1.666666666666666666666666666666667
C2                :  ############################################
Y1                :       0
Y2                :   0.0000000000000000000000000000000000000E+00
 
resultcount :                     3
 
Enter command:
CREATE VIEW V3 (V31, V32 ) AS SELECT C1, Y2 FROM V1,V2 !
 
Enter command:
SELECT * FROM V3 !
 
resultcount :                     9
 
Enter command:
FETCH !
 
V31               :       1.666666666666666666666666666666667
V32               :  ############################################
-----------------------------------------------------------------
V31               :       1.666666666666666666666666666666667
V32               :  ????????????????????????????????????????????
-----------------------------------------------------------------
V31               :       1.666666666666666666666666666666667
V32               :   0.0000000000000000000000000000000000000E+00
-----------------------------------------------------------------
V31               :  ????????????????????????????????????????
V32               :  ############################################
-----------------------------------------------------------------
V31               :  ????????????????????????????????????????
V32               :  ????????????????????????????????????????????
-----------------------------------------------------------------
V31               :  ????????????????????????????????????????
V32               :   0.0000000000000000000000000000000000000E+00
-----------------------------------------------------------------
V31               :  ########################################
V32               :  ############################################
-----------------------------------------------------------------
V31               :  ########################################
V32               :  ????????????????????????????????????????????
-----------------------------------------------------------------
V31               :  ########################################
V32               :   0.0000000000000000000000000000000000000E+00
 
resultcount :                     9
 
Enter command:
CREATE VIEW V4 (V41 ) AS SELECT C2*Y2 FROM V1, V2 !
 
Enter command:
SELECT * FROM V4 !
 
resultcount :                     9
 
Enter command:
FETCH !
 
V41
--------------------------------------------
############################################
############################################
############################################
############################################
????????????????????????????????????????????
????????????????????????????????????????????
############################################
????????????????????????????????????????????
 0.0000000000000000000000000000000000000E+00
 
resultcount :                     9
 
Enter command:
CREATE VIEW V5 ( V51) AS SELECT A1 FROM V1 WHERE C1 > 0 !
 
Enter command:
SELECT * FROM V5 !
 
resultcount :               unknown
 
Enter command:
FETCH !
 
V51
------
 55555
 
resultcount :                     1
 
***ERROR  -3024 Invalid numeric expression                                 0001
 
Enter command:
COMMIT WORK !
 
Enter command:
CREATE VIEW V6 (V61, V62) AS SELECT I1*J1, I2*J2 FROM T1,T2 !
 
Enter command:
CREATE VIEW V7 ( V71 ) AS SELECT V61*V62 FROM V6 !
 
Enter command:
SELECT * FROM V7 !
 
resultcount :                     9
 
Enter command:
FETCH !
 
V71
--------------------------------------------
############################################
############################################
############################################
############################################
????????????????????????????????????????????
????????????????????????????????????????????
############################################
????????????????????????????????????????????
 0.0000000000000000000000000000000000000E+00
 
resultcount :                     9
 
Enter command:
SELECT * FROM V7 WHERE V71 > 0 !
 
***ERROR  -3024 Invalid numeric expression                                 0001
 
Enter command:
FETCH !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 ( S1 FIXED(5), S2 FIXED(5), S3 FIXED(5) ) !
 
Enter command:
INSERT T1 VALUES ( NULL, NULL, NULL ) !
 
Enter command:
INSERT T1 VALUES ( NULL, NULL, 1    ) !
 
Enter command:
INSERT T1 VALUES ( NULL, 2   , NULL ) !
 
Enter command:
INSERT T1 VALUES ( NULL, NULL, 3    ) !
 
Enter command:
INSERT T1 VALUES ( NULL, 4   , 4    ) !
 
Enter command:
INSERT T1 VALUES ( 5   , NULL, 5    ) !
 
Enter command:
INSERT T1 VALUES ( 6   , 6   , NULL ) !
 
Enter command:
COMMIT WORK !
 
Enter command:
CREATE TABLE T2 ( C1 CHAR(8) , C2 CHAR(8) ,
                  C3 CHAR(8) ASCII, C4 CHAR(8) ASCII,
                  DATE1 DATE, DATE2 DATE, TIME1 TIME, TIME2 TIME ) !
 
Enter command:
INSERT T2 VALUES ( NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL ) !
 
Enter command:
INSERT T2 VALUES
   ( 'a', NULL, 'b', NULL, '19831212', NULL, '22223625', NULL ) !
 
Enter command:
INSERT T2 VALUES
   ( NULL, 'c', NULL, 'd', NULL, '19870904', NULL, '33334213' ) !
 
Enter command:
COMMIT WORK !
 
Enter command:
CREATE TABLE T4 ( SPALTE FLOAT(18) ) !
 
Enter command:
CREATE TABLE T5 ( COL    FLOAT(18) ) !
 
Enter command:
INSERT T4 VALUES ( 9E+62 ) !
 
Enter command:
INSERT T5 VALUES ( 9E+62 ) !
 
Enter command:
SELECT VALUE(SPALTE+COL, 12 ) FROM T4,T5 !
 
resultcount :                     1
 
Enter command:
SELECT * FROM T4,T5 WHERE VALUE( SPALTE+COL,SPALTE ) > 0 !
 
resultcount :                     1
 
Enter command:
SELECT VALUE( SPALTE, COL) FROM T4,T5 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1
------------------------
 9.00000000000000000E+62
 
resultcount :                     1
 
Enter command:
CREATE VIEW V1(NEU) AS SELECT T4.SPALTE + T5.COL FROM T4,T5 !
 
Enter command:
SELECT * FROM V1 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
NEU
--------------------------------------------
############################################
 
resultcount :                     1
 
Enter command:
SELECT VALUE ( NEU, NEU) FROM V1 !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1
--------------------------------------------
############################################
 
resultcount :                     1
 
Enter command:
SELECT VALUE ( 'aaa',NEU) FROM V1 !
 
***ERROR  -8006 Data types must be compatible                              0022
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T ( C FIXED(1) ) !
 
Enter command:
CREATE VIEW V1 (COL1,COL2) AS SELECT * FROM T, T REF !
 
Enter command:
CREATE VIEW V2
  ( A1,A2,A3,A4,A5,A6,A7,A8,A9,
  A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,
  A20,A21,A22,A23,A24,A25,A26,A27,A28,A29,
  A30,A31,A32,A33,A34,A35,A36,A37,A38,A39,
  A40,A41,A42,A43,A44,A45,A46,A47,A48,A49,
  A50,A51,A52,A53,A54,A55,A56,A57,A58,A59,
  A60,A61,A62,A63,A64)
  AS SELECT
         T001.C,T002.C,T003.C,T004.C,T005.C,T006.C,T007.C,T008.C,T009.C,
  T010.C,T011.C,T012.C,T013.C,T014.C,T015.C,T016.C,T017.C,T018.C,T019.C,
  T020.C,T021.C,T022.C,T023.C,T024.C,T025.C,T026.C,T027.C,T028.C,T029.C,
  T030.C,T031.C,T032.C,T033.C,T034.C,T035.C,T036.C,T037.C,T038.C,T039.C,
  T040.C,T041.C,T042.C,T043.C,T044.C,T045.C,T046.C,T047.C,T048.C,T049.C,
  T050.C,T051.C,T052.C,T053.C,T054.C,T055.C,T056.C,T057.C,T058.C,T059.C,
  T060.C,T061.C,T062.C,T063.C,T064.C
  FROM
  T T001,T T002,T T003,T T004,T T005,T T006,T T007,T T008,T T009,
  T T010,T T011,T T012,T T013,T T014,T T015,T T016,T T017,T T018,T T019,
  T T020,T T021,T T022,T T023,T T024,T T025,T T026,T T027,T T028,T T029,
  T T030,T T031,T T032,T T033,T T034,T T035,T T036,T T037,T T038,T T039,
  T T040,T T041,T T042,T T043,T T044,T T045,T T046,T T047,T T048,T T049,
  T T050,T T051,T T052,T T053,T T054,T T055,T T056,T T057,T T058,T T059,
  T T060,T T061,T T062,T T063,T T064,T T065,T T066,T T067,T T068,T T069,
  T T070,T T071,T T072,T T073,T T074,T T075,T T076,T T077,T T078,T T079,
  T T080,T T081,T T082,T T083,T T084,T T085,T T086,T T087,T T088,T T089,
  T T090,T T091,T T092,T T093,T T094,T T095,T T096,T T097,T T098,T T099,
  T T100,T T101,T T102,T T103,T T104,T T105,T T106,T T107,T T108,T T109,
  T T110,T T111,T T112,T T113,T T114,T T115,T T116,T T117,T T118,T T119,
  T T120,T T121,T T122,T T123,T T124,T T125,T T126,T T127,T T128,T T129,
  T T130,T T131,T T132,T T133,T T134,T T135,T T136,T T137,T T138,T T139,
  T T140,T T141,T T142,T T143,T T144,T T145,T T146,T T147,T T148,T T149,
  T T150,T T151,T T152,T T153,T T154,T T155,T T156,T T157,T T158,T T159,
  T T160,T T161,T T162,T T163,T T164,T T165,T T166,T T167,T T168,T T169,
  T T170,T T171,T T172,T T173,T T174,T T175,T T176,T T177,T T178,T T179,
  T T180,T T181,T T182,T T183 !
 
Enter command:
CREATE VIEW V3
  ( A1,A2,A3,A4,A5,A6,A7,A8,A9,
  A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,
  A20,A21,A22,A23,A24,A25,A26,A27,A28,A29,
  A30,A31,A32,A33,A34,A35,A36,A37,A38,A39,
  A40,A41,A42,A43,A44,A45,A46,A47,A48,A49,
  A50,A51,A52,A53,A54,A55,A56,A57,A58,A59,
  A60,A61,A62,A63,A64,A65)
  AS SELECT
         T001.C,T002.C,T003.C,T004.C,T005.C,T006.C,T007.C,T008.C,T009.C,
  T010.C,T011.C,T012.C,T013.C,T014.C,T015.C,T016.C,T017.C,T018.C,T019.C,
  T020.C,T021.C,T022.C,T023.C,T024.C,T025.C,T026.C,T027.C,T028.C,T029.C,
  T030.C,T031.C,T032.C,T033.C,T034.C,T035.C,T036.C,T037.C,T038.C,T039.C,
  T040.C,T041.C,T042.C,T043.C,T044.C,T045.C,T046.C,T047.C,T048.C,T049.C,
  T050.C,T051.C,T052.C,T053.C,T054.C,T055.C,T056.C,T057.C,T058.C,T059.C,
  T060.C,T061.C,T062.C,T063.C,T064.C,T065.C
  FROM
  T T001,T T002,T T003,T T004,T T005,T T006,T T007,T T008,T T009,
  T T010,T T011,T T012,T T013,T T014,T T015,T T016,T T017,T T018,T T019,
  T T020,T T021,T T022,T T023,T T024,T T025,T T026,T T027,T T028,T T029,
  T T030,T T031,T T032,T T033,T T034,T T035,T T036,T T037,T T038,T T039,
  T T040,T T041,T T042,T T043,T T044,T T045,T T046,T T047,T T048,T T049,
  T T050,T T051,T T052,T T053,T T054,T T055,T T056,T T057,T T058,T T059,
  T T060,T T061,T T062,T T063,T T064,T T065,T T066,T T067,T T068,T T069,
  T T070,T T071,T T072,T T073,T T074,T T075,T T076,T T077,T T078,T T079,
  T T080,T T081,T T082,T T083,T T084,T T085,T T086,T T087,T T088,T T089,
  T T090,T T091,T T092,T T093,T T094,T T095,T T096,T T097,T T098,T T099,
  T T100,T T101,T T102,T T103,T T104,T T105,T T106,T T107,T T108,T T109,
  T T110,T T111,T T112,T T113,T T114,T T115,T T116,T T117,T T118,T T119,
  T T120,T T121,T T122,T T123,T T124,T T125,T T126,T T127,T T128,T T129,
  T T130,T T131,T T132,T T133,T T134,T T135,T T136,T T137,T T138,T T139,
  T T140,T T141,T T142,T T143,T T144,T T145,T T146,T T147,T T148,T T149,
  T T150,T T151,T T152,T T153,T T154,T T155,T T156,T T157,T T158,T T159,
  T T160,T T161,T T162,T T163,T T164,T T165,T T166,T T167,T T168,T T169,
  T T170,T T171,T T172,T T173,T T174,T T175,T T176,T T177,T T178,T T179,
  T T180,T T181,T T182,T T183,T T184 !
 
***ERROR  -1014 Too many source tables                                     0001
 
Enter command:
CREATE VIEW V4
  ( A1,A2,A3,A4,A5,A6,A7,A8,A9,
  A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,
  A20,A21,A22,A23,A24,A25,A26,A27,A28,A29,
  A30,A31,A32,A33,A34,A35,A36,A37,A38,A39,
  A40,A41,A42,A43,A44,A45,A46,A47,A48,A49,
  A50,A51,A52,A53,A54,A55,A56,A57,A58,A59,
  A60,A61,A62,A63,A64)
  AS SELECT
         T001.C,T002.C,T003.C,T004.C,T005.C,T006.C,T007.C,T008.C,T009.C,
  T010.C,T011.C,T012.C,T013.C,T014.C,T015.C,T016.C,T017.C,T018.C,T019.C,
  T020.C,T021.C,T022.C,T023.C,T024.C,T025.C,T026.C,T027.C,T028.C,T029.C,
  T030.C,T031.C,T032.C,T033.C,T034.C,T035.C,T036.C,T037.C,T038.C,T039.C,
  T040.C,T041.C,T042.C,T043.C,T044.C,T045.C,T046.C,T047.C,T048.C,T049.C,
  T050.C,T051.C,T052.C,T053.C,T054.C,T055.C,T056.C,T057.C,T058.C,T059.C,
  T060.C,T061.C,T062.C,T063.C,T064.C
  FROM
  T T001,T T002,T T003,T T004,T T005,T T006,T T007,T T008,T T009,
  T T010,T T011,T T012,T T013,T T014,T T015,T T016,T T017,T T018,T T019,
  T T020,T T021,T T022,T T023,T T024,T T025,T T026,T T027,T T028,T T029,
  T T030,T T031,T T032,T T033,T T034,T T035,T T036,T T037,T T038,T T039,
  T T040,T T041,T T042,T T043,T T044,T T045,T T046,T T047,T T048,T T049,
  T T050,T T051,T T052,T T053,T T054,T T055,T T056,T T057,T T058,T T059,
  T T060,T T061,T T062,T T063,T T064,T T065,T T066,T T067,T T068,T T069,
  T T070,T T071,T T072,T T073,T T074,T T075,T T076,T T077,T T078,T T079,
  T T080,T T081,T T082,T T083,T T084,T T085,T T086,T T087,T T088,T T089,
  T T090,T T091,T T092,T T093,T T094,T T095,T T096,T T097,T T098,T T099,
  T T100,T T101,T T102,T T103,T T104,T T105,T T106,T T107,T T108,T T109,
  T T110,T T111,T T112,T T113,T T114,T T115,T T116,T T117,T T118,T T119,
  T T120,T T121,T T122,T T123,T T124,T T125,T T126,T T127,T T128,T T129,
  T T130,T T131,T T132,T T133,T T134,T T135,T T136,T T137,T T138,T T139,
  T T140,T T141,T T142,T T143,T T144,T T145,T T146,T T147,T T148,T T149,
  T T150,T T151,T T152,T T153,T T154,T T155,T T156,T T157,T T158,T T159,
  T T160,T T161,T T162,T T163,T T164,T T165,T T166,T T167,T T168,T T169,
  T T170,T T171,T T172,T T173,T T174,T T175,T T176,T T177,T T178,T T179,
  T T180,T T181, V1 !
 
Enter command:
CREATE VIEW V5
  ( A1,A2,A3,A4,A5,A6,A7,A8,A9,
  A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,
  A20,A21,A22,A23,A24,A25,A26,A27,A28,A29,
  A30,A31,A32,A33,A34,A35,A36,A37,A38,A39,
  A40,A41,A42,A43,A44,A45,A46,A47,A48,A49,
  A50,A51,A52,A53,A54,A55,A56,A57,A58,A59,
  A60,A61,A62)
  AS SELECT
         T001.C,T002.C,T003.C,T004.C,T005.C,T006.C,T007.C,T008.C,T009.C,
  T010.C,T011.C,T012.C,T013.C,T014.C,T015.C,T016.C,T017.C,T018.C,T019.C,
  T020.C,T021.C,T022.C,T023.C,T024.C,T025.C,T026.C,T027.C,T028.C,T029.C,
  T030.C,T031.C,T032.C,T033.C,T034.C,T035.C,T036.C,T037.C,T038.C,T039.C,
  T040.C,T041.C,T042.C,T043.C,T044.C,T045.C,T046.C,T047.C,T048.C,T049.C,
  T050.C,T051.C,T052.C,T053.C,T054.C,T055.C,T056.C,T057.C,T058.C,T059.C,
  T060.C,T061.C,T062.C
  FROM
  T T001,T T002,T T003,T T004,T T005,T T006,T T007,T T008,T T009,
  T T010,T T011,T T012,T T013,T T014,T T015,T T016,T T017,T T018,T T019,
  T T020,T T021,T T022,T T023,T T024,T T025,T T026,T T027,T T028,T T029,
  T T030,T T031,T T032,T T033,T T034,T T035,T T036,T T037,T T038,T T039,
  T T040,T T041,T T042,T T043,T T044,T T045,T T046,T T047,T T048,T T049,
  T T050,T T051,T T052,T T053,T T054,T T055,T T056,T T057,T T058,T T059,
  T T060,T T061,T T062,T T063,T T064,T T065,T T066,T T067,T T068,T T069,
  T T070,T T071,T T072,T T073,T T074,T T075,T T076,T T077,T T078,T T079,
  T T080,T T081,T T082,T T083,T T084,T T085,T T086,T T087,T T088,T T089,
  T T090,T T091,T T092,T T093,T T094,T T095,T T096,T T097,T T098,T T099,
  T T100,T T101,T T102,T T103,T T104,T T105,T T106,T T107,T T108,T T109,
  T T110,T T111,T T112,T T113,T T114,T T115,T T116,T T117,T T118,T T119,
  T T120,T T121,T T122,T T123,T T124,T T125,T T126,T T127,T T128,T T129,
  T T130,T T131,T T132,T T133,T T134,T T135,T T136,T T137,T T138,T T139,
  T T140,T T141,T T142,T T143,T T144,T T145,T T146,T T147,T T148,T T149,
  T T150,T T151,T T152,T T153,T T154,T T155,T T156,T T157,T T158,T T159,
  T T160,T T161,T T162,T T163,T T164,T T165,T T166,T T167,T T168,T T169,
  T T170,T T171,T T172,T T173,T T174,T T175,T T176,T T177,T T178,T T179,
  T T180,T T181 !
 
Enter command:
CREATE VIEW V6
  ( A1,A2,A3,A4,A5,A6,A7,A8,A9,
  A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,
  A20,A21,A22,A23,A24,A25,A26,A27,A28,A29,
  A30,A31,A32,A33,A34,A35,A36,A37,A38,A39,
  A40,A41,A42,A43,A44,A45,A46,A47,A48,A49,
  A50,A51,A52,A53,A54,A55,A56,A57,A58,A59,
  A60,A61,A62,A63,A64)
  AS SELECT * FROM V5, V1 !
 
Enter command:
CREATE VIEW V7
  ( A1,A2,A3,A4,A5,A6,A7,A8,A9,
  A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,
  A20,A21,A22,A23,A24,A25,A26,A27,A28,A29,
  A30,A31,A32,A33,A34,A35,A36,A37,A38,A39,
  A40,A41,A42,A43,A44,A45,A46,A47,A48,A49,
  A50,A51,A52,A53,A54,A55,A56,A57,A58,A59,
  A60,A61,A62,A63)
  AS SELECT * FROM V5, T !
 
Enter command:
INSERT T VALUES ( 1 ) !
 
Enter command:
SELECT
         T001.C,T002.C,T003.C,T004.C,T005.C,T006.C,T007.C,T008.C,T009.C,
  T010.C,T011.C,T012.C,T013.C,T014.C,T015.C,T016.C,T017.C,T018.C,T019.C,
  T020.C,T021.C,T022.C,T023.C,T024.C,T025.C,T026.C,T027.C,T028.C,T029.C,
  T030.C,T031.C,T032.C,T033.C,T034.C,T035.C,T036.C,T037.C,T038.C,T039.C,
  T040.C,T041.C,T042.C,T043.C,T044.C,T045.C,T046.C,T047.C,T048.C,T049.C,
  T050.C,T051.C,T052.C,T053.C,T054.C,T055.C,T056.C,T057.C,T058.C,T059.C,
  T060.C,T061.C,T062.C,T063.C,T064.C
  FROM
  T T001,T T002,T T003,T T004,T T005,T T006,T T007,T T008,T T009,
  T T010,T T011,T T012,T T013,T T014,T T015,T T016,T T017,T T018,T T019,
  T T020,T T021,T T022,T T023,T T024,T T025,T T026,T T027,T T028,T T029,
  T T030,T T031,T T032,T T033,T T034,T T035,T T036,T T037,T T038,T T039,
  T T040,T T041,T T042,T T043,T T044,T T045,T T046,T T047,T T048,T T049,
  T T050,T T051,T T052,T T053,T T054,T T055,T T056,T T057,T T058,T T059,
  T T060,T T061,T T062,T T063,T T064,T T065,T T066,T T067,T T068,T T069,
  T T070,T T071,T T072,T T073,T T074,T T075,T T076,T T077,T T078,T T079,
  T T080,T T081,T T082,T T083,T T084,T T085,T T086,T T087,T T088,T T089,
  T T090,T T091,T T092,T T093,T T094,T T095,T T096,T T097,T T098,T T099,
  T T100,T T101,T T102,T T103,T T104,T T105,T T106,T T107,T T108,T T109,
  T T110,T T111,T T112,T T113,T T114,T T115,T T116,T T117,T T118,T T119,
  T T120,T T121,T T122,T T123,T T124,T T125,T T126,T T127,T T128,T T129,
  T T130,T T131,T T132,T T133,T T134,T T135,T T136,T T137,T T138,T T139,
  T T140,T T141,T T142,T T143,T T144,T T145,T T146,T T147,T T148,T T149,
  T T150,T T151,T T152,T T153,T T154,T T155,T T156,T T157,T T158,T T159,
  T T160,T T161,T T162,T T163,T T164,T T165,T T166,T T167,T T168,T T169,
  T T170,T T171,T T172,T T173,T T174,T T175,T T176,T T177,T T178,T T179,
  T T180,T T181,T T182,T T183,T T184,T T185,T T186,T T187,T T188,T T189,
  T T190,T T191,T T192,T T193,T T194,T T195,T T196,T T197,T T198,T T199,
  T T200,T T201,T T202,T T203,T T204,T T205,T T206,T T207,T T208,T T209,
  T T210,T T211,T T212,T T213,T T214,T T215,T T216,T T217,T T218,T T219,
  T T220,T T221,T T222,T T223,T T224,T T225,T T226,T T227,T T228,T T229,
  T T230,T T231,T T232,T T233,T T234,T T235,T T236,T T237,T T238,T T239,
  T T240,T T241,T T242,T T243,T T244,T T245,T T246,T T247,T T248,T T249,
  T T250,T T251,T T252,T T253,T T254 !
 
resultcount :                     1
 
Enter command:
SELECT * FROM
  T T001,T T002,T T003,T T004,T T005,T T006,T T007,T T008,T T009,
  T T010,T T011,T T012,T T013,T T014,T T015,T T016,T T017,T T018,T T019,
  T T020,T T021,T T022,T T023,T T024,T T025,T T026,T T027,T T028,T T029,
  T T030,T T031,T T032,T T033,T T034,T T035,T T036,T T037,T T038,T T039,
  T T040,T T041,T T042,T T043,T T044,T T045,T T046,T T047,T T048,T T049,
  T T050,T T051,T T052,T T053,T T054,T T055,T T056,T T057,T T058,T T059,
  T T060,T T061,T T062,T T063,T T064,T T065,T T066,T T067,T T068,T T069,
  T T070,T T071,T T072,T T073,T T074,T T075,T T076,T T077,T T078,T T079,
  T T080,T T081,T T082,T T083,T T084,T T085,T T086,T T087,T T088,T T089,
  T T090,T T091,T T092,T T093,T T094,T T095,T T096,T T097,T T098,T T099,
  T T100,T T101,T T102,T T103,T T104,T T105,T T106,T T107,T T108,T T109,
  T T110,T T111,T T112,T T113,T T114,T T115,T T116,T T117,T T118,T T119,
  T T120,T T121,T T122,T T123,T T124,T T125,T T126,T T127,T T128,T T129,
  T T130,T T131,T T132,T T133,T T134,T T135,T T136,T T137,T T138,T T139,
  T T140,T T141,T T142,T T143,T T144,T T145,T T146,T T147,T T148,T T149,
  T T150,T T151,T T152,T T153,T T154,T T155,T T156,T T157,T T158,T T159,
  T T160,T T161,T T162,T T163,T T164,T T165,T T166,T T167,T T168,T T169,
  T T170,T T171,T T172,T T173,T T174,T T175,T T176,T T177,T T178,T T179,
  T T180,T T181,T T182,T T183,T T184,T T185,T T186,T T187,T T188,T T189,
  T T190,T T191,T T192,T T193,T T194,T T195,T T196,T T197,T T198,T T199,
  T T200,T T201,T T202,T T203,T T204,T T205,T T206,T T207,T T208,T T209,
  T T210,T T211,T T212,T T213,T T214,T T215,T T216,T T217,T T218,T T219,
  T T220,T T221,T T222,T T223,T T224,T T225,T T226,T T227,T T228,T T229,
  T T230,T T231,T T232,T T233,T T234,T T235,T T236,T T237,T T238,T T239,
  T T240,T T241,T T242,T T243,T T244,T T245,T T246,T T247,T T248,T T249,
  T T250,T T251,T T252,T T253,T T254,T T255 !
 
***ERROR  -1014 Too many source tables                                     0255
 
Enter command:
SELECT * FROM
  T T001,T T002,T T003,T T004,T T005,T T006,T T007,T T008,T T009,
  T T010,T T011,T T012,T T013,T T014,T T015,T T016,T T017,T T018,T T019,
  T T020,T T021,T T022,T T023,T T024,T T025,T T026,T T027,T T028,T T029,
  T T030,T T031,T T032,T T033,T T034,T T035,T T036,T T037,T T038,T T039,
  T T040,T T041,T T042,T T043,T T044,T T045,T T046,T T047,T T048,T T049,
  T T050,T T051,T T052,T T053,T T054,T T055,T T056,T T057,T T058,T T059,
  T T060,T T061,T T062,T T063,T T064,T T065,T T066,T T067,T T068,T T069,
  T T070,T T071,T T072,T T073,T T074,T T075,T T076,T T077,T T078,T T079,
  T T080,T T081,T T082,T T083,T T084,T T085,T T086,T T087,T T088,T T089,
  T T090,T T091,T T092,T T093,T T094,T T095,T T096,T T097,T T098,T T099,
  T T100,T T101,T T102,T T103,T T104,T T105,T T106,T T107,T T108,T T109,
  T T110,T T111,T T112,T T113,T T114,T T115,T T116,T T117,T T118,T T119,
  T T120,T T121,T T122,T T123,T T124,T T125,T T126,T T127,T T128,T T129,
  T T130,T T131,T T132,T T133,T T134,T T135,T T136,T T137,T T138,T T139,
  T T140,T T141,T T142,T T143,T T144,T T145,T T146,T T147,T T148,T T149,
  T T150,T T151,T T152,T T153,T T154,T T155,T T156,T T157,T T158,T T159,
  T T160,T T161,T T162,T T163,T T164,T T165,T T166,T T167,T T168,T T169,
  T T170,T T171,T T172,T T173,T T174,T T175,T T176,T T177,T T178,T T179,
  T T180,T T181,T T182,T T183,T T184,T T185,T T186,T T187,T T188,T T189,
  T T190,T T191,T T192,T T193,T T194,T T195,T T196,T T197,T T198,T T199,
  T T200,T T201,T T202,T T203,T T204,T T205,T T206,T T207,T T208,T T209,
  T T210,T T211,T T212,T T213,T T214,T T215,T T216,T T217,T T218,T T219,
  T T220,T T221,T T222,T T223,T T224,T T225,T T226,T T227,T T228,T T229,
  T T230,T T231,T T232,T T233,T T234,T T235,T T236,T T237,T T238,T T239,
  T T240,T T241,T T242,T T243,T T244,T T245,T T246,T T247,T T248,T T249,
  T T250,T T251,T T252,T T253, V1 !
 
***ERROR  -1014 Too many source tables                                     0255
 
Enter command:
SELECT
         T001.C,T002.C,T003.C,T004.C,T005.C,T006.C,T007.C,T008.C,T009.C,
  T010.C,T011.C,T012.C,T013.C,T014.C,T015.C,T016.C,T017.C,T018.C,T019.C,
  T020.C,T021.C,T022.C,T023.C,T024.C,T025.C,T026.C,T027.C,T028.C,T029.C,
  T030.C,T031.C,T032.C,T033.C,T034.C,T035.C,T036.C,T037.C,T038.C,T039.C,
  T040.C,T041.C,T042.C,T043.C,T044.C,T045.C,T046.C,T047.C,T048.C,T049.C,
  T050.C,T051.C,T052.C,T053.C,T054.C,T055.C,T056.C,T057.C,T058.C,T059.C,
  T060.C,T061.C,T062.C,T063.C,T064.C
  FROM
  T T001,T T002,T T003,T T004,T T005,T T006,T T007,T T008,T T009,
  T T010,T T011,T T012,T T013,T T014,T T015,T T016,T T017,T T018,T T019,
  T T020,T T021,T T022,T T023,T T024,T T025,T T026,T T027,T T028,T T029,
  T T030,T T031,T T032,T T033,T T034,T T035,T T036,T T037,T T038,T T039,
  T T040,T T041,T T042,T T043,T T044,T T045,T T046,T T047,T T048,T T049,
  T T050,T T051,T T052,T T053,T T054,T T055,T T056,T T057,T T058,T T059,
  T T060,T T061,T T062,T T063,T T064,T T065,T T066,T T067,T T068,T T069,
  T T070,T T071,T T072,T T073,T T074,T T075,T T076,T T077,T T078,T T079,
  T T080,T T081,T T082,T T083,T T084,T T085,T T086,T T087,T T088,T T089,
  T T090,T T091,T T092,T T093,T T094,T T095,T T096,T T097,T T098,T T099,
  T T100,T T101,T T102,T T103,T T104,T T105,T T106,T T107,T T108,T T109,
  T T110,T T111,T T112,T T113,T T114,T T115,T T116,T T117,T T118,T T119,
  T T120,T T121,T T122,T T123,T T124,T T125,T T126,T T127,T T128,T T129,
  T T130,T T131,T T132,T T133,T T134,T T135,T T136,T T137,T T138,T T139,
  T T140,T T141,T T142,T T143,T T144,T T145,T T146,T T147,T T148,T T149,
  T T150,T T151,T T152,T T153,T T154,T T155,T T156,T T157,T T158,T T159,
  T T160,T T161,T T162,T T163,T T164,T T165,T T166,T T167,T T168,T T169,
  T T170,T T171,T T172,T T173,T T174,T T175,T T176,T T177,T T178,T T179,
  T T180,T T181,T T182,T T183,T T184,T T185,T T186,T T187,T T188,T T189,
  T T190,T T191,T T192,T T193,T T194,T T195,T T196,T T197,T T198,T T199,
  T T200,T T201,T T202,T T203,T T204,T T205,T T206,T T207,T T208,T T209,
  T T210,T T211,T T212,T T213,T T214,T T215,T T216,T T217,T T218,T T219,
  T T220,T T221,T T222,T T223,T T224,T T225,T T226,T T227,T T228,T T229,
  T T230,T T231,T T232,T T233,T T234,T T235,T T236,T T237,T T238,T T239,
  T T240,T T241,T T242,T T243,T T244,T T245,T T246,T T247,T T248,T T249,
  T T250,T T251,T T252, V1 !
 
resultcount :                     1
 
Enter command:
SELECT * FROM V2 !
 
resultcount :                     1
 
Enter command:
SELECT * FROM V2, T !
 
resultcount :                     1
 
Enter command:
SELECT * FROM V4 !
 
resultcount :                     1
 
Enter command:
SELECT * FROM V4, T !
 
resultcount :                     1
 
Enter command:
SELECT * FROM V5 !
 
resultcount :                     1
 
Enter command:
SELECT * FROM V5, V1, T !
 
resultcount :                     1
 
Enter command:
SELECT * FROM V6 !
 
resultcount :                     1
 
Enter command:
SELECT * FROM V6, V1 !
 
resultcount :                     1
 
Enter command:
SELECT * FROM V6, T !
 
resultcount :                     1
 
Enter command:
SELECT * FROM V7, T !
 
resultcount :                     1
 
Enter command:
SELECT * FROM V7, T, T T1 !
 
resultcount :                     1
 
Enter command:
ROLLBACK WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST!
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T0 ( A FIXED(5) )!
 
Enter command:
CREATE TABLE T1 ( A FIXED(5) )!
 
Enter command:
INSERT T1 SET A = 1 !
 
Enter command:
INSERT T1 SET A = 2 !
 
Enter command:
INSERT T1 SET A = 3 !
 
Enter command:
INSERT T1 SET A = 4 !
 
Enter command:
INSERT T1 SET A = 5 !
 
Enter command:
INSERT T1 SET A = 2 !
 
Enter command:
INSERT T1 SET A = 3 !
 
Enter command:
INSERT T1 SET A = 4 !
 
Enter command:
CREATE TABLE T2 ( B FIXED(5) )!
 
Enter command:
INSERT T2 SET B = 3 !
 
Enter command:
INSERT T2 SET B = 4 !
 
Enter command:
INSERT T2 SET B = 5 !
 
Enter command:
INSERT T2 SET B = 6 !
 
Enter command:
INSERT T2 SET B = 7 !
 
Enter command:
INSERT T2 SET B = 4 !
 
Enter command:
INSERT T2 SET B = 5 !
 
Enter command:
INSERT T2 SET B = 6 !
 
Enter command:
COMMIT WORK !
 
Enter command:
SELECT * FROM T1, T2 WHERE A (+)= B
UNION
SELECT * FROM T1, T2 WHERE A =B (+)!
 
resultcount :                     7
 
Enter command:
FETCH !
 
A      | B
-------+-------
     1 | ??????
     2 | ??????
     3 |      3
     4 |      4
?????? |      6
     5 |      5
?????? |      7
 
resultcount :                     7
 
Enter command:
SELECT * FROM T1, T2 WHERE A (+)=B (+)!
 
resultcount :                    14
 
Enter command:
FETCH !
 
A      | B
-------+-------
     1 | ??????
     2 | ??????
     3 |      3
     4 |      4
     4 |      4
     5 |      5
     5 |      5
     2 | ??????
     3 |      3
     4 |      4
     4 |      4
?????? |      6
?????? |      7
?????? |      6
 
resultcount :                    14
 
Enter command:
SELECT DISTINCT * FROM T1, T2 WHERE NOT A =B (+)!
 
resultcount :                    22
 
Enter command:
FETCH !
 
A      | B
-------+-------
     1 |      3
     2 |      3
     1 |      4
     2 |      4
     1 |      5
     4 |      3
     3 |      4
     2 |      5
     1 |      6
     5 |      3
     3 |      5
     2 |      6
     1 |      7
     5 |      4
     4 |      5
     3 |      6
     2 |      7
 
A      | B
-------+-------
     4 |      6
     3 |      7
     5 |      6
     4 |      7
     5 |      7
 
resultcount :                    22
 
Enter command:
SELECT A, B FROM T1, T2 WHERE NOT A = B
UNION
SELECT A, NULL  FROM T1
    WHERE NOT EXISTS
         (SELECT B FROM T2 WHERE NOT T1.A = B) !
 
resultcount :                    22
 
Enter command:
FETCH !
 
A      | B
-------+-------
     1 |      3
     2 |      3
     1 |      4
     2 |      4
     1 |      5
     4 |      3
     3 |      4
     2 |      5
     1 |      6
     5 |      3
     3 |      5
     2 |      6
     1 |      7
     5 |      4
     4 |      5
     3 |      6
     2 |      7
 
A      | B
-------+-------
     4 |      6
     3 |      7
     5 |      6
     4 |      7
     5 |      7
 
resultcount :                    22
 
Enter command:
SELECT * FROM T1, T2 WHERE NOT A = B (+) ORDER BY A, B!
 
resultcount :                    56
 
Enter command:
FETCH !
 
A      | B
-------+-------
     1 |      3
     1 |      4
     1 |      4
     1 |      5
     1 |      5
     1 |      6
     1 |      6
     1 |      7
     2 |      3
     2 |      3
     2 |      4
     2 |      4
     2 |      4
     2 |      4
     2 |      5
     2 |      5
     2 |      5
 
A      | B
-------+-------
     2 |      5
     2 |      6
     2 |      6
     2 |      6
     2 |      6
     2 |      7
     2 |      7
     3 |      4
     3 |      4
     3 |      4
     3 |      4
     3 |      5
     3 |      5
     3 |      5
     3 |      5
     3 |      6
     3 |      6
 
A      | B
-------+-------
     3 |      6
     3 |      6
     3 |      7
     3 |      7
     4 |      3
     4 |      3
     4 |      5
     4 |      5
     4 |      5
     4 |      5
     4 |      6
     4 |      6
     4 |      6
     4 |      6
     4 |      7
     4 |      7
     5 |      3
 
A      | B
-------+-------
     5 |      4
     5 |      4
     5 |      6
     5 |      6
     5 |      7
 
resultcount :                    56
 
Enter command:
SELECT A, B FROM T1, T2 WHERE NOT A = B
UNION ALL
SELECT A, NULL  FROM T1
    WHERE NOT EXISTS
         (SELECT B FROM T2 WHERE NOT T1.A = B)
ORDER BY 1, 2 !
 
resultcount :                    56
 
Enter command:
FETCH !
 
A      | B
-------+-------
     1 |      3
     1 |      4
     1 |      4
     1 |      5
     1 |      5
     1 |      6
     1 |      6
     1 |      7
     2 |      3
     2 |      3
     2 |      4
     2 |      4
     2 |      4
     2 |      4
     2 |      5
     2 |      5
     2 |      5
 
A      | B
-------+-------
     2 |      5
     2 |      6
     2 |      6
     2 |      6
     2 |      6
     2 |      7
     2 |      7
     3 |      4
     3 |      4
     3 |      4
     3 |      4
     3 |      5
     3 |      5
     3 |      5
     3 |      5
     3 |      6
     3 |      6
 
A      | B
-------+-------
     3 |      6
     3 |      6
     3 |      7
     3 |      7
     4 |      3
     4 |      3
     4 |      5
     4 |      5
     4 |      5
     4 |      5
     4 |      6
     4 |      6
     4 |      6
     4 |      6
     4 |      7
     4 |      7
     5 |      3
 
A      | B
-------+-------
     5 |      4
     5 |      4
     5 |      6
     5 |      6
     5 |      7
 
resultcount :                    56
 
Enter command:
DROP TABLE T0 !
 
Enter command:
DROP TABLE T1 !
 
Enter command:
DROP TABLE T2 !
 
Enter command:
COMMIT !
 
Enter command:
CREATE TABLE T ( A CHAR (8) KEY)!
 
Enter command:
INSERT T SET A = 'aaa'!
 
Enter command:
CREATE TABLE T1 (A1 CHAR (8))!
 
Enter command:
INSERT T1 SET A1 = 'aa1'!
 
Enter command:
CREATE TABLE T2 (A2 CHAR (8))!
 
Enter command:
INSERT T2 SET A2 = 'aa2'!
 
Enter command:
SELECT * FROM T WHERE A IN (SELECT A FROM T )
  UNION
  SELECT A1 FROM T1,T2 !
 
resultcount :                     2
 
Enter command:
FETCH!
 
A
--------
aa1
aaa
 
resultcount :                     2
 
Enter command:
CREATE VIEW V1 AS
  SELECT * FROM T WHERE A IN (SELECT A FROM T )
  UNION
  SELECT A1 FROM T1,T2 !
 
Enter command:
SELECT * FROM V1 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
A
--------
aa1
aaa
 
resultcount :                     2
 
Enter command:
PARS_THEN_EX !
 
Enter command:
SELECT * FROM V1 !
 
resultcount :                     2
 
Enter command:
FETCH!
 
A
--------
aa1
aaa
 
resultcount :                     2
 
Enter command:
PARS_EXECUTE !
 
Enter command:
DROP TABLE T !
 
Enter command:
DROP TABLE T1 !
 
Enter command:
DROP TABLE T2 !
 
Enter command:
COMMIT RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE TAB1 ( SPALTE11 CHAR(10) KEY ,
                    SPALTE12 FIXED(5,2),
                    SPALTE13 FLOAT(5) ) !
 
Enter command:
INSERT TAB1 VALUES ( 'HANS'    , 22.52 , NULL ) !
 
Enter command:
INSERT TAB1 VALUES ( 'PAUL'    ,   0   ,  3E2 ) !
 
Enter command:
INSERT TAB1 VALUES ( 'JOACHIM' , 17.1  ,   0  ) !
 
Enter command:
CREATE TABLE TAB2 ( SPALTE21 FIXED(4),
                    SPALTE22 CHAR(32) ,
                    SPALTE23 FLOAT(4) ) !
 
Enter command:
INSERT TAB2 VALUES ( 300   , 'HANS'   , NULL ) !
 
Enter command:
INSERT TAB2 VALUES ( 22.00 , 'FRIEDA' , 0    ) !
 
Enter command:
INSERT TAB2 VALUES ( 12    , 'JOACHIM', 0    ) !
 
Enter command:
CREATE TABLE TAB3 ( SPALTE31 FIXED(4) ,
                    SPALTE32 CHAR(32) ,
                    SPALTE33 FLOAT(4) ) !
 
Enter command:
INSERT TAB3 VALUES ( 1000, 'HANS'    , NULL ) !
 
Enter command:
INSERT TAB3 VALUES ( 2000, 'VOLKER' , 100  ) !
 
Enter command:
INSERT TAB3 VALUES ( 3000, 'ANDREAS' , 200  ) !
 
Enter command:
INSERT TAB3 VALUES ( 4000, 'SIEGFRIED' , 300  ) !
 
Enter command:
COMMIT!
 
Enter command:
(SELECT * FROM TAB3, (SELECT * FROM TAB2, ((SELECT * FROM TAB3))),
 ((SELECT * FROM TAB3))) !
 
resultcount :                   192
 
Enter command:
DECLARE ERG CURSOR FOR
(SELECT * FROM TAB3, (SELECT * FROM TAB2, ((SELECT * FROM TAB3))),
 ((SELECT * FROM TAB3))) !
 
resultcount :                   192
 
Enter command:
CLOSE ERG !
 
Enter command:
 
DECLARE ERG CURSOR FOR
SELECT TAB2.SPALTE21, TAB2.SPALTE22, TAB2.SPALTE23 FROM TAB2,
(SELECT * FROM TAB2) !
 
resultcount :                     9
 
Enter command:
CLOSE ERG !
 
Enter command:
DECLARE ERG CURSOR FOR
SELECT * FROM TAB2,
(SELECT SPALTE21, SPALTE22, SPALTE23 FROM TAB2) !
 
resultcount :                     9
 
Enter command:
CLOSE ERG !
 
Enter command:
DECLARE ERG CURSOR FOR
SELECT * FROM TAB2,
(SELECT * FROM TAB2) !
 
resultcount :                     9
 
Enter command:
CLOSE ERG !
 
Enter command:
DECLARE ERG CURSOR FOR
SELECT TAB2.SPALTE21, TAB2.SPALTE22, TAB2.SPALTE23 FROM TAB2,
(SELECT SPALTE21, SPALTE22, SPALTE23 FROM TAB2) !
 
resultcount :                     9
 
Enter command:
CLOSE ERG !
 
Enter command:
DROP TABLE TAB1 !
 
Enter command:
DROP TABLE TAB2 !
 
Enter command:
DROP TABLE TAB3 !
 
Enter command:
DROP TABLE TAB4 !
 
***ERROR  -4004 Unknown table name:TAB4                                    0012
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CLEARK !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT !
 
Enter command:
DROP USER KERN !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 ( A CHAR (18))!
 
Enter command:
INSERT T1 SET A = 'aaa'!
 
Enter command:
CREATE TABLE T2 ( B CHAR (5)) !
 
Enter command:
INSERT T2 SET B = 'aaa'!
 
Enter command:
CREATE INDEX "T2.B"
 ON T2( B DESC ) !
 
Enter command:
EXPLAIN SELECT * FROM <T1, T2> WHERE T1.A = T2.B !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | T1                 |                    | TABLE SCAN                               |          1
KERN               | T2                 | T2.B               | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | B                  |      (USED INDEX COLUMN)                 |
                   |                    |                    |      NO TEMPORARY RESULTS CREATED        |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          2
 
Enter command:
SELECT * FROM <T1, T2> WHERE T1.A = T2.B !
 
resultcount :                     1
 
Enter command:
FETCH !
 
A                  | B
-------------------+------
aaa                | aaa
 
resultcount :                     1
 
Enter command:
DROP INDEX "T2.B" !
 
Enter command:
CREATE INDEX "t2.b" ON T2( B ) !
 
Enter command:
SELECT * FROM T1, T2 WHERE T1.A = T2.B !
 
resultcount :                     1
 
Enter command:
FETCH !
 
A                  | B
-------------------+------
aaa                | aaa
 
resultcount :                     1
 
Enter command:
ROLLBACK !
 
Enter command:
CREATE TABLE T1 ( A CHAR (38))!
 
Enter command:
INSERT T1 SET A = 'aaa'!
 
Enter command:
CREATE TABLE T2 ( B CHAR (25)) !
 
Enter command:
INSERT T2 SET B = 'aaa'!
 
Enter command:
CREATE INDEX "T2.B" ON T2( B DESC ) !
 
Enter command:
EXPLAIN SELECT * FROM <T1, T2> WHERE T1.A = T2.B !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | T1                 |                    | TABLE SCAN                               |          1
KERN               | T2                 | T2.B               | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | B                  |      (USED INDEX COLUMN)                 |
                   |                    |                    |      NO TEMPORARY RESULTS CREATED        |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          2
 
Enter command:
SELECT * FROM <T1, T2> WHERE T1.A = T2.B !
 
resultcount :                     1
 
Enter command:
FETCH !
 
A                                      | B
---------------------------------------+--------------------------
aaa                                    | aaa
 
resultcount :                     1
 
Enter command:
DROP INDEX "T2.B" !
 
Enter command:
CREATE INDEX "t2.b" ON T2( B ) !
 
Enter command:
SELECT * FROM T1, T2 WHERE T1.A = T2.B !
 
resultcount :                     1
 
Enter command:
FETCH !
 
A                                      | B
---------------------------------------+--------------------------
aaa                                    | aaa
 
resultcount :                     1
 
Enter command:
ROLLBACK WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T (S1 FIXED (5), S2 FIXED(5))!
 
Enter command:
INSERT T VALUES (1,1)!
 
Enter command:
INSERT T VALUES (2,2)!
 
Enter command:
CREATE VIEW V1 AS SELECT DISTINCT S1, S2 FROM T!
 
Enter command:
CREATE TABLE T1 ( A FIXED (6))!
 
Enter command:
INSERT T1 SET A = 3 !
 
Enter command:
SELECT * FROM V1, T1 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
S1     | S2     | A
-------+--------+--------
     1 |      1 |       3
     2 |      2 |       3
 
resultcount :                     2
 
Enter command:
SELECT DISTINCT * FROM V1, T1 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
S1     | S2     | A
-------+--------+--------
     1 |      1 |       3
     2 |      2 |       3
 
resultcount :                     2
 
Enter command:
CREATE VIEW V2 AS SELECT DISTINCT * FROM V1, T1 !
 
Enter command:
SELECT * FROM V2, T1 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
S1     | S2     | A       | A
-------+--------+---------+--------
     1 |      1 |       3 |       3
     2 |      2 |       3 |       3
 
resultcount :                     2
 
Enter command:
SELECT DISTINCT * FROM V2, T1 !
 
resultcount :                     2
 
Enter command:
FETCH !
 
S1     | S2     | A       | A
-------+--------+---------+--------
     1 |      1 |       3 |       3
     2 |      2 |       3 |       3
 
resultcount :                     2
 
Enter command:
DROP TABLE T !
 
Enter command:
DROP TABLE T1 !
 
Enter command:
COMMIT RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T ( A CHAR (30), B FIXED(18) )!
 
Enter command:
INSERT T SET A = 'abcdefghijklmnopqrstuvwxyzabcd',
       B = 333333333333333333!
 
Enter command:
CREATE TABLE T1 ( B1 FIXED(18))!
 
Enter command:
INSERT T1 SET B1 = 333333333333333333 !
 
Enter command:
PARSING !
 
Enter command:
SELECT * FROM T, T1 WHERE B = B1 !
parsing idnr :       1
 
Enter command:
PARS_EXECUTE !
 
Enter command:
SELECT * FROM T !
 
resultcount :               unknown
 
Enter command:
FETCH1 !
 
A                 :  abcdefghijklmnopqrstuvwxyzabcd
B                 :   333333333333333333
 
Enter command:
EXECUTING !
 
Enter command:
SELECT * !
Parsing idnr :      1
 
resultcount :                     1
 
Enter command:
PARS_EXECUTE !
 
Enter command:
ROLLBACK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T ( A CHAR (8), B CHAR (8), C CHAR (8))!
 
Enter command:
CREATE INDEX "t.c"
 ON T( C ) !
 
Enter command:
CREATE INDEX I1 ON T (A, B, C) !
 
Enter command:
INSERT T VALUES ('aaa', 'b', '123')!
 
Enter command:
INSERT T VALUES ('aaa', 'b', '234')!
 
Enter command:
INSERT T VALUES ('aaa', 'b', '345')!
 
Enter command:
CREATE TABLE T1 ( B1 CHAR (8))!
 
Enter command:
INSERT T1 SET B1 = 'b' !
 
Enter command:
CREATE INDEX "t1.b1" ON T1( B1 ) !
 
Enter command:
EXPLAIN SELECT DISTINCT A, C, B1
  FROM T, T1
  WHERE A = 'aaa' AND
        B = B1    AND
        (C BETWEEN '123' AND '234') !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | T                  |                    | TABLE SCAN                               |          1
KERN               | T1                 | t1.b1              | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | B1                 |      (USED INDEX COLUMN)                 |
                   |                    |                    |      NO TEMPORARY RESULTS CREATED        |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          2
 
Enter command:
SELECT DISTINCT A, C, B1
  FROM T, T1
  WHERE A = 'aaa' AND
        B = B1    AND
        (C BETWEEN '123' AND '234') !
 
resultcount :                     2
 
Enter command:
FETCH!
 
A        | C        | B1
---------+----------+---------
aaa      | 123      | b
aaa      | 234      | b
 
resultcount :                     2
 
Enter command:
EXPLAIN SELECT DISTINCT A, C, B1
  FROM T, T1
  WHERE A = 'aaa' AND
        B = B1    AND
        (C = '123' OR C = '234') !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | T                  |                    | TABLE SCAN                               |          1
KERN               | T1                 | t1.b1              | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | B1                 |      (USED INDEX COLUMN)                 |
                   |                    |                    |      NO TEMPORARY RESULTS CREATED        |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          2
 
Enter command:
SELECT DISTINCT A, C, B1
  FROM T, T1
  WHERE A = 'aaa' AND
        B = B1    AND
        (C = '123' OR C = '234') !
 
resultcount :                     2
 
Enter command:
FETCH!
 
A        | C        | B1
---------+----------+---------
aaa      | 123      | b
aaa      | 234      | b
 
resultcount :                     2
 
Enter command:
DROP TABLE T !
 
Enter command:
DROP TABLE T1 !
 
Enter command:
COMMIT RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T ( A CHAR ( 8),
B CHAR (8),
C CHAR (8),
D CHAR (8),
E CHAR (254),
F CHAR (254),
G CHAR (254),
H CHAR (254),
I CHAR (254),
J CHAR (127),
K CHAR (127),
L CHAR (127),
M CHAR (127))!
 
Enter command:
INSERT T VALUES ('aa', 'bb', 'cc', 'dd',
'eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',
'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
'ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg',
'hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh hhhh',
'iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii',
'jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj',
'kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk',
'lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll',
'mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm')!
 
Enter command:
CREATE UNIQUE INDEX I1 ON T (A, B, C, D) !
 
Enter command:
CREATE TABLE T1 (A1 CHAR (8), B1 CHAR (8))!
 
Enter command:
CREATE UNIQUE INDEX I1 ON T1 (A1, B1) !
 
Enter command:
INSERT T1 SET A1 = 'aaa', B1 = 'dd'!
 
Enter command:
PARS_THEN_EX !
 
Enter command:
DATA !
 
Enter command:
SELECT * FROM T, T1 WHERE A = :A AND B = :B AND C = :C AND D > :D AND
A1 = :A1 AND D = B1 !
 
c 8 'aa' c 8 'bb' c 8 'cc' c 8 'a' c 8 'aaa'
 
resultcount :                     1
 
Enter command:
NODATA !
 
Enter command:
FETCH INTO :A, :B, :C, :D, :E, :F, :G, :H, :I, :J, :K, :L, :M, :A1, :B1 !
 
A                 :  aa
B                 :  bb
C                 :  cc
D                 :  dd
E                 :  eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
F                 :  fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
G                 :  ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg
H                 :  hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh hhhh
I                 :  iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii
J                 :  jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj
K                 :  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk
L                 :  lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll
M                 :  mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
A1                :  aaa
B1                :  dd
 
resultcount :                     1
 
Enter command:
PARS_EXECUTE !
 
Enter command:
DROP TABLE T !
 
Enter command:
DROP TABLE T1 !
 
Enter command:
COMMIT RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 (A1 CHAR(5) KEY, A2 CHAR(5) KEY) !
 
Enter command:
INSERT T1 VALUES ('aaaaa','bbbbb') !
 
Enter command:
INSERT T1 VALUES ('bbbbb','xxxxx') !
 
Enter command:
INSERT T1 VALUES ('ccccc','zzzzz') !
 
Enter command:
DECLARE ERG CURSOR FOR SELECT * FROM T1 FOR REUSE !
 
resultcount :                     3
 
Enter command:
EXPLAIN SELECT * FROM ERG,
T1 R1, T1 R2, T1 R3, T1 R4, T1 R5, T1 R6, T1 R7
WHERE R1.A1 = ERG.A1 AND R2.A1 = ERG.A1 AND R3.A1 = ERG.A1 AND
R4.A1 = ERG.A1 AND R5.A1 = ERG.A1 AND R6.A1 = ERG.A1 AND R7.A1 = ERG.A1
AND  R1.A2 = 'xxxxx' AND R2.A2 = 'xxxxx' AND R3.A2 = 'xxxxx' AND
R4.A2 = 'xxxxx' AND R5.A2 = 'xxxxx' AND R6.A2 = 'xxxxx' AND
R7.A2 = 'xxxxx' AND ERG.A2 = 'xxxxx' !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | ERG                |                    | TABLE SCAN                               |          1
                   | R1                 |                    | JOIN VIA MULTIPLE KEY COLUMNS            |          1
                   |                    |                    | TABLE HASHED                             |
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
                   | R2                 |                    | JOIN VIA MULTIPLE KEY COLUMNS            |          1
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
                   | R3                 |                    | JOIN VIA MULTIPLE KEY COLUMNS            |          1
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
                   | R4                 |                    | JOIN VIA MULTIPLE KEY COLUMNS            |          1
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
                   | R5                 |                    | JOIN VIA MULTIPLE KEY COLUMNS            |          1
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
                   | R6                 |                    | JOIN VIA MULTIPLE KEY COLUMNS            |          1
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
                   | R7                 |                    | JOIN VIA MULTIPLE KEY COLUMNS            |          1
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
                   |                    |                    |      NO TEMPORARY RESULTS CREATED        |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          8
 
Enter command:
SELECT * FROM ERG,
T1 R1, T1 R2, T1 R3, T1 R4, T1 R5, T1 R6, T1 R7
WHERE R1.A1 = ERG.A1 AND R2.A1 = ERG.A1 AND R3.A1 = ERG.A1 AND
R4.A1 = ERG.A1 AND R5.A1 = ERG.A1 AND R6.A1 = ERG.A1 AND R7.A1 = ERG.A1
AND  R1.A2 = 'xxxxx' AND R2.A2 = 'xxxxx' AND R3.A2 = 'xxxxx' AND
R4.A2 = 'xxxxx' AND R5.A2 = 'xxxxx' AND R6.A2 = 'xxxxx' AND
R7.A2 = 'xxxxx' AND ERG.A2 = 'xxxxx' !
 
resultcount :                     1
 
Enter command:
FETCH !
 
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
 
resultcount :                     1
 
Enter command:
EXPLAIN SELECT * FROM ERG,
T1 R1, T1 R2, T1 R3, T1 R4, T1 R5, T1 R6, T1 R7
WHERE R1.A1 = ERG.A1 AND R2.A1 = ERG.A1 AND R3.A1 = ERG.A1 AND
R4.A1 = ERG.A1 AND R5.A1 = ERG.A1 AND R6.A1 = ERG.A1 AND R7.A1 = ERG.A1
AND  R1.A2 = 'xxxxx' AND R2.A1 = 'xxxxx' AND R3.A1 = 'xxxxx' AND
R4.A1 = 'xxxxx' AND R5.A1 = 'xxxxx' AND R6.A1 = 'xxxxx' AND
R7.A1 = 'xxxxx' !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | ERG                |                    | TABLE SCAN                               |          1
                   | R1                 |                    | JOIN VIA MULTIPLE KEY COLUMNS            |          1
                   |                    |                    | TABLE HASHED                             |
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
                   | R2                 | A1                 | JOIN VIA KEY RANGE                       |          1
                   | R3                 | A1                 | JOIN VIA KEY RANGE                       |          1
                   | R4                 | A1                 | JOIN VIA KEY RANGE                       |          1
                   | R5                 | A1                 | JOIN VIA KEY RANGE                       |          1
                   | R6                 | A1                 | JOIN VIA KEY RANGE                       |          1
                   | R7                 | A1                 | JOIN VIA KEY RANGE                       |          1
                   |                    |                    |      NO TEMPORARY RESULTS CREATED        |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          8
 
Enter command:
SELECT * FROM ERG,
T1 R1, T1 R2, T1 R3, T1 R4, T1 R5, T1 R6, T1 R7
WHERE R1.A1 = ERG.A1 AND R2.A1 = ERG.A1 AND R3.A1 = ERG.A1 AND
R4.A1 = ERG.A1 AND R5.A1 = ERG.A1 AND R6.A1 = ERG.A1 AND R7.A1 = ERG.A1
AND  R1.A2 = 'xxxxx' AND R2.A1 = 'xxxxx' AND R3.A1 = 'xxxxx' AND
R4.A1 = 'xxxxx' AND R5.A1 = 'xxxxx' AND R6.A1 = 'xxxxx' AND
R7.A1 = 'xxxxx' !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
FETCH !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
ROLLBACK WORK !
 
Enter command:
CREATE TABLE T1 (A1 CHAR(5) KEY, A2 CHAR(5) KEY) !
 
Enter command:
INSERT T1 VALUES ('aaaaa','bbbbb') !
 
Enter command:
INSERT T1 VALUES ('bbbbb','xxxxx') !
 
Enter command:
INSERT T1 VALUES ('ccccc','zzzzz') !
 
Enter command:
DECLARE ERG CURSOR FOR SELECT * FROM T1 FOR REUSE !
 
resultcount :                     3
 
Enter command:
SELECT * FROM ERG, T1 R1, T1 R2, T1 R3, T1 R4, T1 R5, T1 R6, T1 R7
WHERE R1.A1 = ERG.A1 AND R2.A1 = ERG.A1 AND R3.A1 = ERG.A1 AND
R4.A1 = ERG.A1 AND R5.A1 = ERG.A1 AND R6.A1 = ERG.A1 AND R7.A1 = ERG.A1 !
 
resultcount :                     3
 
Enter command:
FETCH !
 
A1                :  aaaaa
A2                :  bbbbb
A1                :  aaaaa
A2                :  bbbbb
A1                :  aaaaa
A2                :  bbbbb
A1                :  aaaaa
A2                :  bbbbb
A1                :  aaaaa
A2                :  bbbbb
A1                :  aaaaa
A2                :  bbbbb
A1                :  aaaaa
A2                :  bbbbb
A1                :  aaaaa
A2                :  bbbbb
--------------------------
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
--------------------------
A1                :  ccccc
A2                :  zzzzz
A1                :  ccccc
A2                :  zzzzz
A1                :  ccccc
A2                :  zzzzz
A1                :  ccccc
A2                :  zzzzz
A1                :  ccccc
A2                :  zzzzz
A1                :  ccccc
A2                :  zzzzz
A1                :  ccccc
A2                :  zzzzz
A1                :  ccccc
A2                :  zzzzz
 
resultcount :                     3
 
Enter command:
ROLLBACK WORK !
 
Enter command:
CREATE TABLE T1 (A1 CHAR(5) KEY, A2 CHAR(5) KEY) !
 
Enter command:
INSERT T1 VALUES ('aaaaa','bbbbb') !
 
Enter command:
INSERT T1 VALUES ('bbbbb','xxxxx') !
 
Enter command:
INSERT T1 VALUES ('ccccc','zzzzz') !
 
Enter command:
DECLARE ERG CURSOR FOR SELECT * FROM T1 FOR REUSE !
 
resultcount :                     3
 
Enter command:
EXPLAIN SELECT * FROM ERG,
T1 R1, T1 R2, T1 R3, T1 R4, T1 R5, T1 R6, T1 R7
WHERE R1.A2 = ERG.A2 AND R2.A2 = ERG.A2 AND R3.A2 = ERG.A2 AND
R4.A2 = ERG.A2 AND R5.A2 = ERG.A2 AND R6.A2 = ERG.A2 AND R7.A2 = ERG.A2
AND  R1.A1 = 'bbbbb' AND R2.A1 = 'bbbbb' AND R3.A1 = 'bbbbb' AND
R4.A1 = 'bbbbb' AND R5.A1 = 'bbbbb' AND R6.A1 = 'bbbbb' AND
R7.A1 = 'bbbbb' !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | ERG                |                    | TABLE SCAN                               |          1
                   | R1                 |                    | JOIN VIA MULTIPLE KEY COLUMNS            |          1
                   |                    |                    | TABLE HASHED                             |
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
                   | R2                 |                    | JOIN VIA MULTIPLE KEY COLUMNS            |          1
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
                   | R3                 |                    | JOIN VIA MULTIPLE KEY COLUMNS            |          1
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
                   | R4                 |                    | JOIN VIA MULTIPLE KEY COLUMNS            |          1
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
                   | R5                 |                    | JOIN VIA MULTIPLE KEY COLUMNS            |          1
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
                   | R6                 |                    | JOIN VIA MULTIPLE KEY COLUMNS            |          1
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
                   | R7                 |                    | JOIN VIA MULTIPLE KEY COLUMNS            |          1
                   |                    | A1                 |      (USED KEY COLUMN)                   |
                   |                    | A2                 |      (USED KEY COLUMN)                   |
                   |                    |                    |      NO TEMPORARY RESULTS CREATED        |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          8
 
Enter command:
SELECT * FROM ERG, T1 R1, T1 R2, T1 R3, T1 R4, T1 R5, T1 R6, T1 R7
WHERE R1.A2 = ERG.A2 AND R2.A2 = ERG.A2 AND R3.A2 = ERG.A2 AND
R4.A2 = ERG.A2 AND R5.A2 = ERG.A2 AND R6.A2 = ERG.A2 AND R7.A2 = ERG.A2
AND  R1.A1 = 'bbbbb' AND R2.A1 = 'bbbbb' AND R3.A1 = 'bbbbb' AND
R4.A1 = 'bbbbb' AND R5.A1 = 'bbbbb' AND R6.A1 = 'bbbbb' AND
R7.A1 = 'bbbbb' !
 
resultcount :                     1
 
Enter command:
FETCH !
 
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
A1                :  bbbbb
A2                :  xxxxx
 
resultcount :                     1
 
Enter command:
ROLLBACK WORK RELEASE !
 
Enter command:
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER D !
 
***ERROR  -4003 Unknown user name:D                                        0011
 
Enter command:
DROP USER P !
 
***ERROR  -4003 Unknown user name:P                                        0011
 
Enter command:
DROP USER R !
 
***ERROR  -4003 Unknown user name:R                                        0011
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE CLEARK !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT !
 
Enter command:
DROP USER KERN !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 (A1 CHAR(5), A2 CHAR(5)) !
 
Enter command:
INSERT T1 VALUES ('2aaaa','2bbbb') !
 
Enter command:
INSERT T1 VALUES ('1aaaa','1bbbb') !
 
Enter command:
INSERT T1 VALUES ('4aaaa','4bbbb') !
 
Enter command:
INSERT T1 VALUES ('3aaaa','3bbbb') !
 
Enter command:
INSERT T1 VALUES ('5aaaa','5bbbb') !
 
Enter command:
INSERT T1 VALUES ('7aaaa','7bbbb') !
 
Enter command:
INSERT T1 VALUES ('6aaaa','6bbbb') !
 
Enter command:
INSERT T1 VALUES ('9aaaa','9bbbb') !
 
Enter command:
INSERT T1 VALUES ('8aaaa','8bbbb') !
 
Enter command:
CREATE TABLE T2 (B1 CHAR(5), B2 CHAR(5)) !
 
Enter command:
INSERT T2 VALUES ('aaaaa','bbbbb') !
 
Enter command:
INSERT T2 VALUES ('aaaaa','xxxxx') !
 
Enter command:
CREATE VIEW TV1 (A1, "a2") AS SELECT A1, A2 FROM T1 !
 
Enter command:
CREATE VIEW TV2 (B1, "b2") AS SELECT B1, B2 FROM T2 !
 
Enter command:
DECLARE ERG CURSOR FOR
SELECT A1, B1, "b2" FROM <TV1, TV2> ORDER BY "a2" !
 
resultcount :                    18
 
Enter command:
FETCH ERG!
 
A1    | B1    | b2
------+-------+------
1aaaa | aaaaa | bbbbb
1aaaa | aaaaa | xxxxx
2aaaa | aaaaa | bbbbb
2aaaa | aaaaa | xxxxx
3aaaa | aaaaa | bbbbb
3aaaa | aaaaa | xxxxx
4aaaa | aaaaa | bbbbb
4aaaa | aaaaa | xxxxx
5aaaa | aaaaa | bbbbb
5aaaa | aaaaa | xxxxx
6aaaa | aaaaa | bbbbb
6aaaa | aaaaa | xxxxx
7aaaa | aaaaa | bbbbb
7aaaa | aaaaa | xxxxx
8aaaa | aaaaa | bbbbb
8aaaa | aaaaa | xxxxx
9aaaa | aaaaa | bbbbb
 
A1    | B1    | b2
------+-------+------
9aaaa | aaaaa | xxxxx
 
resultcount :                    18
 
Enter command:
DECLARE ERG CURSOR FOR
SELECT A1, B1, "b2" FROM <TV2, TV1> ORDER BY "a2" !
 
resultcount :                    18
 
Enter command:
FETCH ERG!
 
A1    | B1    | b2
------+-------+------
1aaaa | aaaaa | bbbbb
1aaaa | aaaaa | xxxxx
2aaaa | aaaaa | bbbbb
2aaaa | aaaaa | xxxxx
3aaaa | aaaaa | bbbbb
3aaaa | aaaaa | xxxxx
4aaaa | aaaaa | bbbbb
4aaaa | aaaaa | xxxxx
5aaaa | aaaaa | bbbbb
5aaaa | aaaaa | xxxxx
6aaaa | aaaaa | bbbbb
6aaaa | aaaaa | xxxxx
7aaaa | aaaaa | bbbbb
7aaaa | aaaaa | xxxxx
8aaaa | aaaaa | bbbbb
8aaaa | aaaaa | xxxxx
9aaaa | aaaaa | bbbbb
 
A1    | B1    | b2
------+-------+------
9aaaa | aaaaa | xxxxx
 
resultcount :                    18
 
Enter command:
DECLARE ERG CURSOR FOR
SELECT A1, B1, "b2" FROM <TV1, TV2> ORDER BY "a2" DESC !
 
resultcount :                    18
 
Enter command:
FETCH ERG!
 
A1    | B1    | b2
------+-------+------
9aaaa | aaaaa | bbbbb
9aaaa | aaaaa | xxxxx
8aaaa | aaaaa | bbbbb
8aaaa | aaaaa | xxxxx
7aaaa | aaaaa | bbbbb
7aaaa | aaaaa | xxxxx
6aaaa | aaaaa | bbbbb
6aaaa | aaaaa | xxxxx
5aaaa | aaaaa | bbbbb
5aaaa | aaaaa | xxxxx
4aaaa | aaaaa | bbbbb
4aaaa | aaaaa | xxxxx
3aaaa | aaaaa | bbbbb
3aaaa | aaaaa | xxxxx
2aaaa | aaaaa | bbbbb
2aaaa | aaaaa | xxxxx
1aaaa | aaaaa | bbbbb
 
A1    | B1    | b2
------+-------+------
1aaaa | aaaaa | xxxxx
 
resultcount :                    18
 
Enter command:
DECLARE ERG CURSOR FOR
SELECT A1, B1, "b2" FROM <TV2, TV1> ORDER BY "a2" DESC !
 
resultcount :                    18
 
Enter command:
FETCH ERG!
 
A1    | B1    | b2
------+-------+------
9aaaa | aaaaa | bbbbb
9aaaa | aaaaa | xxxxx
8aaaa | aaaaa | bbbbb
8aaaa | aaaaa | xxxxx
7aaaa | aaaaa | bbbbb
7aaaa | aaaaa | xxxxx
6aaaa | aaaaa | bbbbb
6aaaa | aaaaa | xxxxx
5aaaa | aaaaa | bbbbb
5aaaa | aaaaa | xxxxx
4aaaa | aaaaa | bbbbb
4aaaa | aaaaa | xxxxx
3aaaa | aaaaa | bbbbb
3aaaa | aaaaa | xxxxx
2aaaa | aaaaa | bbbbb
2aaaa | aaaaa | xxxxx
1aaaa | aaaaa | bbbbb
 
A1    | B1    | b2
------+-------+------
1aaaa | aaaaa | xxxxx
 
resultcount :                    18
 
Enter command:
DECLARE ERG CURSOR FOR
SELECT A1, "a2", B1, "b2" FROM <TV1, TV2> ORDER BY "a2" !
 
resultcount :                    18
 
Enter command:
FETCH ERG!
 
A1    | a2    | B1    | b2
------+-------+-------+------
1aaaa | 1bbbb | aaaaa | bbbbb
1aaaa | 1bbbb | aaaaa | xxxxx
2aaaa | 2bbbb | aaaaa | bbbbb
2aaaa | 2bbbb | aaaaa | xxxxx
3aaaa | 3bbbb | aaaaa | bbbbb
3aaaa | 3bbbb | aaaaa | xxxxx
4aaaa | 4bbbb | aaaaa | bbbbb
4aaaa | 4bbbb | aaaaa | xxxxx
5aaaa | 5bbbb | aaaaa | bbbbb
5aaaa | 5bbbb | aaaaa | xxxxx
6aaaa | 6bbbb | aaaaa | bbbbb
6aaaa | 6bbbb | aaaaa | xxxxx
7aaaa | 7bbbb | aaaaa | bbbbb
7aaaa | 7bbbb | aaaaa | xxxxx
8aaaa | 8bbbb | aaaaa | bbbbb
8aaaa | 8bbbb | aaaaa | xxxxx
9aaaa | 9bbbb | aaaaa | bbbbb
 
A1    | a2    | B1    | b2
------+-------+-------+------
9aaaa | 9bbbb | aaaaa | xxxxx
 
resultcount :                    18
 
Enter command:
DECLARE ERG CURSOR FOR
SELECT A1, "a2", B1, "b2" FROM <TV2, TV1> ORDER BY "a2" !
 
resultcount :                    18
 
Enter command:
FETCH ERG!
 
A1    | a2    | B1    | b2
------+-------+-------+------
1aaaa | 1bbbb | aaaaa | bbbbb
1aaaa | 1bbbb | aaaaa | xxxxx
2aaaa | 2bbbb | aaaaa | bbbbb
2aaaa | 2bbbb | aaaaa | xxxxx
3aaaa | 3bbbb | aaaaa | bbbbb
3aaaa | 3bbbb | aaaaa | xxxxx
4aaaa | 4bbbb | aaaaa | bbbbb
4aaaa | 4bbbb | aaaaa | xxxxx
5aaaa | 5bbbb | aaaaa | bbbbb
5aaaa | 5bbbb | aaaaa | xxxxx
6aaaa | 6bbbb | aaaaa | bbbbb
6aaaa | 6bbbb | aaaaa | xxxxx
7aaaa | 7bbbb | aaaaa | bbbbb
7aaaa | 7bbbb | aaaaa | xxxxx
8aaaa | 8bbbb | aaaaa | bbbbb
8aaaa | 8bbbb | aaaaa | xxxxx
9aaaa | 9bbbb | aaaaa | bbbbb
 
A1    | a2    | B1    | b2
------+-------+-------+------
9aaaa | 9bbbb | aaaaa | xxxxx
 
resultcount :                    18
 
Enter command:
DECLARE ERG CURSOR FOR
SELECT A1, "a2", B1, "b2" FROM <TV1, TV2> ORDER BY "a2" DESC !
 
resultcount :                    18
 
Enter command:
FETCH ERG!
 
A1    | a2    | B1    | b2
------+-------+-------+------
9aaaa | 9bbbb | aaaaa | bbbbb
9aaaa | 9bbbb | aaaaa | xxxxx
8aaaa | 8bbbb | aaaaa | bbbbb
8aaaa | 8bbbb | aaaaa | xxxxx
7aaaa | 7bbbb | aaaaa | bbbbb
7aaaa | 7bbbb | aaaaa | xxxxx
6aaaa | 6bbbb | aaaaa | bbbbb
6aaaa | 6bbbb | aaaaa | xxxxx
5aaaa | 5bbbb | aaaaa | bbbbb
5aaaa | 5bbbb | aaaaa | xxxxx
4aaaa | 4bbbb | aaaaa | bbbbb
4aaaa | 4bbbb | aaaaa | xxxxx
3aaaa | 3bbbb | aaaaa | bbbbb
3aaaa | 3bbbb | aaaaa | xxxxx
2aaaa | 2bbbb | aaaaa | bbbbb
2aaaa | 2bbbb | aaaaa | xxxxx
1aaaa | 1bbbb | aaaaa | bbbbb
 
A1    | a2    | B1    | b2
------+-------+-------+------
1aaaa | 1bbbb | aaaaa | xxxxx
 
resultcount :                    18
 
Enter command:
DECLARE ERG CURSOR FOR
SELECT A1, "a2", B1, "b2" FROM <TV2, TV1> ORDER BY "a2" DESC !
 
resultcount :                    18
 
Enter command:
FETCH ERG!
 
A1    | a2    | B1    | b2
------+-------+-------+------
9aaaa | 9bbbb | aaaaa | bbbbb
9aaaa | 9bbbb | aaaaa | xxxxx
8aaaa | 8bbbb | aaaaa | bbbbb
8aaaa | 8bbbb | aaaaa | xxxxx
7aaaa | 7bbbb | aaaaa | bbbbb
7aaaa | 7bbbb | aaaaa | xxxxx
6aaaa | 6bbbb | aaaaa | bbbbb
6aaaa | 6bbbb | aaaaa | xxxxx
5aaaa | 5bbbb | aaaaa | bbbbb
5aaaa | 5bbbb | aaaaa | xxxxx
4aaaa | 4bbbb | aaaaa | bbbbb
4aaaa | 4bbbb | aaaaa | xxxxx
3aaaa | 3bbbb | aaaaa | bbbbb
3aaaa | 3bbbb | aaaaa | xxxxx
2aaaa | 2bbbb | aaaaa | bbbbb
2aaaa | 2bbbb | aaaaa | xxxxx
1aaaa | 1bbbb | aaaaa | bbbbb
 
A1    | a2    | B1    | b2
------+-------+-------+------
1aaaa | 1bbbb | aaaaa | xxxxx
 
resultcount :                    18
 
Enter command:
ROLLBACK WORK RELEASE !
 
Enter command:
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
SENDERID DBM !
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE A(A1 INT, A2 INT, A3 INT , PRIMARY KEY(A1, A2))!
 
Enter command:
CREATE TABLE B(B1 INT, B2 INT, B3 INT , PRIMARY KEY(B1, B2))!
 
Enter command:
CREATE TABLE C(C1 INT, C2 INT, C3 INT , PRIMARY KEY(C1, C2))!
 
Enter command:
CREATE TABLE D(D1 INT, D2 INT, D3 INT , PRIMARY KEY(D1, D2))!
 
Enter command:
CREATE TABLE E(E1 INT, E2 INT, E3 INT , PRIMARY KEY(E1, E2))!
 
Enter command:
CREATE INDEX AI1 ON A(A1)!
 
Enter command:
CREATE INDEX AI2 ON A(A1,A3)!
 
Enter command:
CREATE INDEX BI1 ON B(B1)!
 
Enter command:
CREATE INDEX BI2 ON B(B1,B3)!
 
Enter command:
CREATE INDEX CI1 ON C(C1)!
 
Enter command:
CREATE INDEX CI2 ON C(C1,C3)!
 
Enter command:
CREATE INDEX DI1 ON D(D1)!
 
Enter command:
CREATE INDEX DI2 ON D(D1,D3)!
 
Enter command:
CREATE INDEX EI1 ON E(E1)!
 
Enter command:
CREATE INDEX EI2 ON E(E1,E3)!
 
Enter command:
 
EXPLAIN SELECT *
FROM A, B, C, D WHERE
A.A1=B.B1 AND B.B1=C.C1 AND C.C1=D.D1 !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | A                  |                    | TABLE SCAN                               |          1
KERN               | B                  | BI1                | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | B1                 |      (USED INDEX COLUMN)                 |
KERN               | C                  | CI1                | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | C1                 |      (USED INDEX COLUMN)                 |
KERN               | D                  | DI1                | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | D1                 |      (USED INDEX COLUMN)                 |
                   |                    |                    |      NO TEMPORARY RESULTS CREATED        |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          2
 
Enter command:
!* KEYACCESS FOR A, B, C; D AUTOMATIC
 
Enter command:
EXPLAIN SELECT /*+JOIN(KEYACCESS;KEYACCESS;KEYACCESS)*/ *
FROM A, B, C, D WHERE
A.A1=B.B1 AND B.B1=C.C1 AND C.C1=D.D1 !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | A                  |                    | TABLE SCAN                               |          1
KERN               | B                  | B1                 | JOIN VIA KEY RANGE                       |          1
KERN               | C                  | C1                 | JOIN VIA KEY RANGE                       |          1
KERN               | D                  | DI1                | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | D1                 |      (USED INDEX COLUMN)                 |
                   |                    |                    |      NO TEMPORARY RESULTS CREATED        |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          4
 
Enter command:
!* KEYACCESS FOR A, B, C; D AUTOMATIC
 
Enter command:
EXPLAIN SELECT /*+JOIN(KEYACCESS;KEYACCESS;;KEYACCESS)*/ *
FROM A, B, D, C WHERE
A.A1=B.B1 AND B.B1=C.C1 AND C.C1=D.D1 !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | A                  |                    | TABLE SCAN                               |          1
KERN               | B                  | B1                 | JOIN VIA KEY RANGE                       |          1
KERN               | D                  | DI1                | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | D1                 |      (USED INDEX COLUMN)                 |
KERN               | C                  | C1                 | JOIN VIA KEY RANGE                       |          1
                   |                    |                    |      NO TEMPORARY RESULTS CREATED        |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          4
 
Enter command:
!* KEYACCESS FOR A, C; INDEXACCESS FOR B; D AUTOMATIC
 
Enter command:
EXPLAIN SELECT /*+JOIN(KEYACCESS;INDEXACCESS;;KEYACCESS)*/ *
FROM A, B, D, C WHERE
A.A1=B.B1 AND B.B1=C.C1 AND C.C1=D.D1 !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | A                  |                    | TABLE SCAN                               |          1
KERN               | B                  | BI1                | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | B1                 |      (USED INDEX COLUMN)                 |
KERN               | D                  | DI1                | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | D1                 |      (USED INDEX COLUMN)                 |
KERN               | C                  | C1                 | JOIN VIA KEY RANGE                       |          1
                   |                    |                    |      NO TEMPORARY RESULTS CREATED        |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          3
 
Enter command:
!* KEYACCESS FOR A, C; INDEXACCESS FOR B; DEDICATED INDEXACCESS FOR D
 
Enter command:
EXPLAIN
SELECT /*+ORDERED,JOIN(KEYACCESS;INDEXACCESS;INDEXACCESS(DI2);KEYACCESS)*/ *
FROM A, B, D, C WHERE
A.A1=B.B1 AND B.B1=C.C1 AND C.C1=D.D1 !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | A                  |                    | TABLE SCAN                               |          1
KERN               | B                  | BI1                | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | B1                 |      (USED INDEX COLUMN)                 |
KERN               | D                  | DI2                | JOIN VIA RANGE OF MULTIPLE INDEXED COL.  |          1
                   |                    | D1                 |      (USED INDEX COLUMN)                 |
KERN               | C                  | C1                 | JOIN VIA KEY RANGE                       |          1
                   |                    |                    |      NO TEMPORARY RESULTS CREATED        |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          4
 
Enter command:
!* NO ACCESS PATH FOR B; A,B,D AUTOMATIC
 
Enter command:
EXPLAIN
SELECT /*+ORDERED,JOIN(;NOACCESSPATH)*/ *
FROM A, B, D, C WHERE
A.A1=B.B1 AND B.B1=C.C1 AND C.C1=D.D1 !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | A                  |                    | TABLE SCAN                               |          1
KERN               | B                  |                    | JOIN VIA KEY RANGE                       |          1
                   |                    |                    | TABLE TEMPORARY SORTED                   |
                   |                    | B1                 |      (USED SORT COLUMN)                  |
KERN               | D                  | DI1                | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | D1                 |      (USED INDEX COLUMN)                 |
KERN               | C                  | CI1                | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | C1                 |      (USED INDEX COLUMN)                 |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          3
 
Enter command:
!* NO ACCESS PATH FOR B; A,B,D AUTOMATIC; SPECIAL ACCESS FOR A
 
Enter command:
EXPLAIN
SELECT /*+ORDERED,JOIN(ACCESS=INDEXACCESS,INDEXSCAN;NOACCESSPATH)*/ *
FROM A, B, D, C WHERE
A.A1=B.B1 AND B.B1=C.C1 AND C.C1=D.D1 !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | A                  | AI2                | INDEX SCAN                               |          1
                   |                    |                    | ONLY INDEX ACCESSED                      |
KERN               | B                  |                    | JOIN VIA KEY RANGE                       |          1
                   |                    |                    | TABLE TEMPORARY SORTED                   |
                   |                    | B1                 |      (USED SORT COLUMN)                  |
KERN               | D                  | DI1                | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | D1                 |      (USED INDEX COLUMN)                 |
KERN               | C                  | CI1                | JOIN VIA INDEXED COLUMN                  |          1
                   |                    | C1                 |      (USED INDEX COLUMN)                 |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          3
 
Enter command:
ROLLBACK WORK !
 
Enter command:
 
!* TEST ONE PHASE HANDLING AND OUTER JOIN
 
Enter command:
CREATE TABLE A (C1 CHAR(3))!
 
Enter command:
INSERT INTO A VALUES ('aaa')!
 
Enter command:
INSERT INTO A VALUES ('bbb')!
 
Enter command:
 
CREATE TABLE B (C1 CHAR(3))!
 
Enter command:
INSERT INTO B VALUES ('bbb')!
 
Enter command:
 
CREATE TABLE C (C1 CHAR(3) KEY)!
 
Enter command:
INSERT INTO C VALUES ('aaa')!
 
Enter command:
INSERT INTO C VALUES ('bbb')!
 
Enter command:
 
CREATE TABLE D (C1 CHAR(3) KEY)!
 
Enter command:
INSERT INTO D VALUES ('bbb')!
 
Enter command:
 
COMMIT RELEASE !
 
Enter command:
SENDERID DBM !
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
SET PARAMETER OPTIMIZE_JOIN_ONEPHASE = 'NO'!
 
Enter command:
COMMIT RELEASE !
 
Enter command:
SENDERID XCI !
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
EXPLAIN
SELECT UPPER(A.C1), UPPER(B.C1) FROM <A, B> WHERE A.C1 = B.C1(+)!
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | A                  |                    | TABLE SCAN                               |          1
KERN               | B                  |                    | JOIN VIA KEY RANGE                       |          1
                   |                    |                    | TABLE TEMPORARY SORTED                   |
                   |                    | C1                 |      (USED SORT COLUMN)                  |
INTERNAL           | TEMPORARY RESULT   |                    | TABLE SCAN                               |          1
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          6
 
Enter command:
SELECT UPPER(A.C1), UPPER(B.C1) FROM <A, B> WHERE A.C1 = B.C1(+)!
 
resultcount :                     2
 
Enter command:
FETCH!
 
EXPRESSION1 | EXPRESSION2
------------+------------
AAA         | ???????????
BBB         | BBB
 
resultcount :                     2
 
Enter command:
EXPLAIN
SELECT UPPER(C.C1), UPPER(D.C1) FROM <C, D> WHERE C.C1 = D.C1(+)!
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | C                  |                    | TABLE SCAN                               |          1
KERN               | D                  | C1                 | JOIN VIA KEY COLUMN                      |          1
                   |                    |                    |      NO TEMPORARY RESULTS CREATED        |
INTERNAL           | TEMPORARY RESULT   |                    | TABLE SCAN                               |          1
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          6
 
Enter command:
SELECT UPPER(C.C1), UPPER(D.C1) FROM <C, D> WHERE C.C1 = D.C1(+)!
 
resultcount :                     2
 
Enter command:
FETCH!
 
EXPRESSION1 | EXPRESSION2
------------+------------
AAA         | ???????????
BBB         | BBB
 
resultcount :                     2
 
Enter command:
 
EXPLAIN
SELECT SUM(1) FROM <A, B> WHERE A.C1 = B.C1(+)!
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | A                  |                    | TABLE SCAN                               |          1
KERN               | B                  |                    | JOIN VIA KEY RANGE                       |          1
                   |                    |                    | TABLE TEMPORARY SORTED                   |
                   |                    | C1                 |      (USED SORT COLUMN)                  |
INTERNAL           | TEMPORARY RESULT   |                    | TABLE SCAN                               |          1
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          6
 
Enter command:
SELECT SUM(1) FROM <A, B> WHERE A.C1 = B.C1(+)!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
--------------------------------------------
 2.0000000000000000000000000000000000000E+00
 
resultcount :                     1
 
Enter command:
EXPLAIN
SELECT SUM(1) FROM <C, D> WHERE C.C1 = D.C1(+)!
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | C                  |                    | TABLE SCAN                               |          1
KERN               | D                  | C1                 | JOIN VIA KEY COLUMN                      |          1
                   |                    |                    |      NO TEMPORARY RESULTS CREATED        |
INTERNAL           | TEMPORARY RESULT   |                    | TABLE SCAN                               |          1
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          6
 
Enter command:
SELECT SUM(1) FROM <C, D> WHERE C.C1 = D.C1(+)!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
--------------------------------------------
 2.0000000000000000000000000000000000000E+00
 
resultcount :                     1
 
Enter command:
 
EXPLAIN
SELECT MIN(A.C1) FROM <A, B> WHERE A.C1 = B.C1 AND A.C1 = 'ddd'!
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | A                  |                    | TABLE SCAN                               |          1
KERN               | B                  |                    | JOIN VIA KEY RANGE                       |          1
                   |                    |                    | TABLE TEMPORARY SORTED                   |
                   |                    | C1                 |      (USED SORT COLUMN)                  |
INTERNAL           | TEMPORARY RESULT   |                    | TABLE SCAN                               |          1
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          6
 
Enter command:
SELECT MIN(A.C1) FROM <A, B> WHERE A.C1 = B.C1 AND A.C1 = 'ddd'!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
???????????
 
resultcount :                     1
 
Enter command:
 
EXPLAIN
SELECT MIN(C.C1) FROM <C, D> WHERE C.C1 = D.C1 AND C.C1 = 'ddd'!
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | C                  |                    | EQUAL CONDITION FOR KEY                  |          1
                   |                    | C1                 |      (USED KEY COLUMN)                   |
KERN               | D                  | C1                 | JOIN VIA KEY COLUMN                      |          1
                   |                    |                    |      NO TEMPORARY RESULTS CREATED        |
INTERNAL           | TEMPORARY RESULT   |                    | TABLE SCAN                               |          1
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          6
 
Enter command:
SELECT MIN(C.C1) FROM <C, D> WHERE C.C1 = D.C1 AND C.C1 = 'ddd'!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
???????????
 
resultcount :                     1
 
Enter command:
COMMIT RELEASE !
 
Enter command:
SENDERID DBM !
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
SET PARAMETER OPTIMIZE_JOIN_ONEPHASE = 'YES'!
 
Enter command:
COMMIT RELEASE !
 
Enter command:
SENDERID XCI !
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
EXPLAIN
SELECT UPPER(A.C1), UPPER(B.C1) FROM <A, B> WHERE A.C1 = B.C1(+)!
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | A                  |                    | TABLE SCAN                               |          1
KERN               | B                  |                    | JOIN VIA KEY RANGE                       |          1
                   |                    |                    | TABLE TEMPORARY SORTED                   |
                   |                    | C1                 |      (USED SORT COLUMN)                  |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          3
 
Enter command:
SELECT UPPER(A.C1), UPPER(B.C1) FROM <A, B> WHERE A.C1 = B.C1(+)!
 
resultcount :                     2
 
Enter command:
FETCH!
 
EXPRESSION1 | EXPRESSION2
------------+------------
AAA         | ???????????
BBB         | BBB
 
resultcount :                     2
 
Enter command:
EXPLAIN
SELECT UPPER(C.C1), UPPER(D.C1) FROM <C, D> WHERE C.C1 = D.C1(+)!
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | C                  |                    | TABLE SCAN                               |          1
KERN               | D                  | C1                 | JOIN VIA KEY COLUMN                      |          1
                   |                    |                    |      NO TEMPORARY RESULTS CREATED        |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          3
 
Enter command:
SELECT UPPER(C.C1), UPPER(D.C1) FROM <C, D> WHERE C.C1 = D.C1(+)!
 
resultcount :                     2
 
Enter command:
FETCH!
 
EXPRESSION1 | EXPRESSION2
------------+------------
AAA         | ???????????
BBB         | BBB
 
resultcount :                     2
 
Enter command:
 
EXPLAIN
SELECT SUM(1) FROM <A, B> WHERE A.C1 = B.C1(+)!
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | A                  |                    | TABLE SCAN                               |          1
KERN               | B                  |                    | JOIN VIA KEY RANGE                       |          1
                   |                    |                    | TABLE TEMPORARY SORTED                   |
                   |                    | C1                 |      (USED SORT COLUMN)                  |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          3
 
Enter command:
SELECT SUM(1) FROM <A, B> WHERE A.C1 = B.C1(+)!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
--------------------------------------------
 2.0000000000000000000000000000000000000E+00
 
resultcount :                     1
 
Enter command:
EXPLAIN
SELECT SUM(1) FROM <C, D> WHERE C.C1 = D.C1(+)!
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | C                  |                    | TABLE SCAN                               |          1
KERN               | D                  | C1                 | JOIN VIA KEY COLUMN                      |          1
                   |                    |                    |      NO TEMPORARY RESULTS CREATED        |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          3
 
Enter command:
SELECT SUM(1) FROM <C, D> WHERE C.C1 = D.C1(+)!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
--------------------------------------------
 2.0000000000000000000000000000000000000E+00
 
resultcount :                     1
 
Enter command:
 
EXPLAIN
SELECT MIN(A.C1) FROM <A, B> WHERE A.C1 = B.C1 AND A.C1 = 'ddd'!
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | A                  |                    | TABLE SCAN                               |          1
KERN               | B                  |                    | JOIN VIA KEY RANGE                       |          1
                   |                    |                    | TABLE TEMPORARY SORTED                   |
                   |                    | C1                 |      (USED SORT COLUMN)                  |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          3
 
Enter command:
SELECT MIN(A.C1) FROM <A, B> WHERE A.C1 = B.C1 AND A.C1 = 'ddd'!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
???????????
 
resultcount :                     1
 
Enter command:
 
EXPLAIN
SELECT MIN(C.C1) FROM <C, D> WHERE C.C1 = D.C1 AND C.C1 = 'ddd'!
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | C                  |                    | EQUAL CONDITION FOR KEY                  |          1
                   |                    | C1                 |      (USED KEY COLUMN)                   |
KERN               | D                  | C1                 | JOIN VIA KEY COLUMN                      |          1
                   |                    |                    |      NO TEMPORARY RESULTS CREATED        |
                   |                    |                    |      RESULT IS COPIED   , COSTVALUE IS   |          3
 
Enter command:
SELECT MIN(C.C1) FROM <C, D> WHERE C.C1 = D.C1 AND C.C1 = 'ddd'!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
???????????
 
resultcount :                     1
 
Enter command:
ROLLBACK WORK!
 
Enter command:
COMMIT WORK RELEASE!
 
Enter command:
SENDERID XCI !
 
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
 
 
FILE SHUTDOWN !
 
Enter command:
DBMCLI SUPERDBA,COLDUSER!
UTIL_CONNECT SUT,SUT!
OK
 
DB_OFFLINE!
OK
 
BYE!
 
Enter command:
VDNEXIT !
SESSION END
 
