SUBQUERY.vdnts
 
Enter command:
FILE XINITDBK !
 
Enter command:
FILE XRESTORE !
 
Enter command:
DBMCLI SUPERDBA,COLDUSER!
UTIL_CONNECT SUPERDBA,COLDUSER!
OK
 
BACKUP_RESTORE XINITDB DATA!
OK
Returncode           0
Date                 DATEXXXX
Time                 TIMEYYYY
Server               <servernode>
Database             <serverdb>
Kernel Version       KERNEL    vv.vv.vv Build bbb-bbb-bbb-bbb
Pages Transferred    000
Pages Left           0
Volumes              1
Medianame            xinitdb
Location             xinitdb.sav
Errortext
Label                <label>
Is Consistent        true
First LOG Page       000
Last LOG Page
DB Stamp 1 Date      DATEXXXX
DB Stamp 1 Time      TIMEYYYY
DB Stamp 2 Date
DB Stamp 2 Time
Page Count           000
Devices Used         1
Database ID          <servernode>:<serverdb>_DATEXXXX_<timestamp>
Max Used Data Page  000
Converter Page Count 8
 
UTIL_EXECUTE CLEAR LOG!
OK
 
DB_ONLINE!
OK
 
UTIL_RELEASE!
OK
 
UTIL_CONNECT SUT,SUT!
OK
 
UTIL_RELEASE!
OK
 
BYE!
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT!
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
 ***************************
 ***   T 0 1 I N I T     ***
 ***************************!
 
Enter command:
CREATE TABLE EMP  ( NAME CHAR (15) KEY,
                       DEPTNO FIXED (2) NOT NULL RANGE BETWEEN 10 AND 90,
                       CURRSAL FIXED (5) NOT NULL,
                       MANAGER CHAR (15) NOT NULL,
                       STARTSAL FIXED (5) NOT NULL,
                       SEX CHAR (6) NOT NULL ) !
 
Enter command:
CREATE TABLE FAM   ( NAME CHAR (15) KEY,
                       DEPTNO FIXED (2) NOT NULL RANGE BETWEEN 10 AND 90,
                       STATUS CHAR (8) NOT NULL,
                       DEPEND FIXED (2) NOT NULL RANGE BETWEEN 0 AND 15,
                       ADDRESS CHAR (30) NOT NULL ) !
 
Enter command:
CREATE TABLE DEPT  ( DEPTNO FIXED (2) KEY RANGE BETWEEN 10 AND 90 ,
                        DEPTNAME CHAR (10) NOT NULL,
                        LOCNAME  CHAR (15) NOT NULL )  !
 
Enter command:
COMMIT WORK !
 
Enter command:
LOCK TABLE EMP, FAM, DEPT IN EXCLUSIVE MODE !
 
Enter command:
INSERT INTO EMP SET NAME = 'Fred Gerard',
             DEPTNO = 50,
             CURRSAL = 15000,
             MANAGER = 'George Taylor',
             STARTSAL = 8000,
             SEX = 'male'!
 
Enter command:
INSERT INTO EMP SET NAME = 'Norma Wilson',
             DEPTNO = 40,
             CURRSAL = 15500,
             MANAGER = 'Jill Crowley',
             STARTSAL = 7500,
             SEX = 'female'!
 
Enter command:
INSERT INTO EMP SET NAME = 'Paul Brown',
             DEPTNO = 70,
             CURRSAL = 15000,
             MANAGER = 'George Taylor',
             STARTSAL = 7000,
             SEX = 'male'!
 
Enter command:
INSERT INTO EMP SET NAME = 'Paul Rogers',
             DEPTNO = 40,
             CURRSAL = 15000,
             MANAGER = 'Jill Crowley',
             STARTSAL = 8000,
             SEX = 'male'!
 
Enter command:
INSERT INTO EMP SET NAME = 'John Johnes',
             DEPTNO = 60,
             CURRSAL = 16500,
             MANAGER = 'Dana Smith',
             STARTSAL = 8500,
             SEX = 'male'!
 
Enter command:
INSERT INTO EMP SET NAME = 'Pat Mingo',
             DEPTNO = 50,
             CURRSAL = 13000,
             MANAGER = 'Fred Gerard',
             STARTSAL = 6500,
             SEX = 'female'!
 
Enter command:
INSERT INTO EMP SET NAME = 'Dana Smith',
             DEPTNO = 60,
             CURRSAL = 16000,
             MANAGER = 'George Taylor',
             STARTSAL = 7500,
             SEX = 'female'!
 
Enter command:
INSERT INTO EMP SET NAME = 'Mary Rowen',
             DEPTNO = 60,
             CURRSAL = 15500,
             MANAGER = 'Dana Smith',
             STARTSAL = 9000,
             SEX = 'female'!
 
Enter command:
INSERT INTO EMP SET NAME = 'Jill Crowley',
             DEPTNO = 40,
             CURRSAL = 17000,
             MANAGER = 'George Taylor',
             STARTSAL = 8250,
             SEX = 'female'!
 
Enter command:
INSERT INTO EMP SET NAME = 'Jerry Denny',
             DEPTNO = 70,
             CURRSAL = 14000,
             MANAGER = 'Paul Brown',
             STARTSAL = 6000,
             SEX = 'male'!
 
Enter command:
INSERT INTO EMP SET NAME = 'Alice Teir',
             DEPTNO = 50,
             CURRSAL = 13500,
             MANAGER = 'Fred Gerard',
             STARTSAL = 8500,
             SEX = 'female'!
 
Enter command:
INSERT INTO EMP SET NAME = 'Dave Cowel',
             DEPTNO = 60,
             CURRSAL = 14000,
             MANAGER = 'Dana Smith',
             STARTSAL = 7500,
             SEX = 'male'!
 
Enter command:
INSERT INTO EMP SET NAME = 'George Taylor',
             DEPTNO = 10,
             CURRSAL = 20000,
             MANAGER = ' ',
             STARTSAL = 10000,
             SEX = 'male'!
 
Enter command:
INSERT INTO EMP SET NAME = 'Joan Bird',
             DEPTNO = 50,
             CURRSAL = 14500,
             MANAGER = 'Fred Gerard',
             STARTSAL = 8000,
             SEX = 'female'!
 
Enter command:
INSERT INTO EMP SET NAME = 'Ed Nader',
             DEPTNO = 70,
             CURRSAL = 8000,
             MANAGER = 'Paul Brown',
             STARTSAL = 8000,
             SEX = 'male'!
 
Enter command:
INSERT INTO EMP SET NAME = 'Joyce Adams',
             DEPTNO = 70,
             CURRSAL = 16000,
             MANAGER = 'Paul Brown',
             STARTSAL = 6500,
             SEX = 'female'!
 
Enter command:
INSERT INTO FAM SET NAME = 'Fred Gerard',
                    DEPTNO = 50,
               STATUS = 'married',
               DEPEND = 3,
               ADDRESS = '37 Drake St. #2, Carmichael'!
 
Enter command:
INSERT INTO FAM SET NAME = 'Norma Wilson',
                    DEPTNO = 40,
               STATUS = 'single',
               DEPEND = 1,
               ADDRESS = '4175 Oak Ct., Daly City'!
 
Enter command:
INSERT INTO FAM SET NAME = 'Paul Brown',
                    DEPTNO = 70,
               STATUS = 'married',
               DEPEND = 4,
               ADDRESS = '271 Oxnard St., Lodi'!
 
Enter command:
INSERT INTO FAM SET NAME = 'Paul Rogers',
                    DEPTNO = 40,
               STATUS = 'divorced',
               DEPEND = 5,
               ADDRESS = '27811 Embarcodero, S.F.'!
 
Enter command:
INSERT INTO FAM SET NAME = 'John Johnes',
                    DEPTNO = 60,
               STATUS = 'single',
               DEPEND = 1,
               ADDRESS = '2785 Drake St., Stockton'!
 
Enter command:
INSERT INTO  FAM SET NAME = 'Pat Mingo',
                    DEPTNO = 50,
               STATUS = 'married',
               DEPEND = 2,
               ADDRESS = '2751 Peer St., #1, Reno'!
 
Enter command:
INSERT INTO FAM SET NAME = 'Dana Smith',
                    DEPTNO = 60,
               STATUS = 'divorced',
               DEPEND = 1,
               ADDRESS = 'PO Box 571, Rt 51, Waterloo'!
 
Enter command:
INSERT INTO FAM SET NAME = 'Mary Rowen',
                    DEPTNO = 60,
               STATUS = 'married',
               DEPEND = 3,
               ADDRESS = '27451 Mills St., San Rafael'!
 
Enter command:
INSERT INTO FAM SET NAME = 'Jill Crowley',
                    DEPTNO = 40,
               STATUS = 'divorced',
               DEPEND = 1,
               ADDRESS = '5671 Powell St., S.F.'!
 
Enter command:
INSERT INTO FAM SET NAME = 'Jerry Denny',
                    DEPTNO = 70,
               STATUS = 'married',
               DEPEND = 4,
               ADDRESS = '67511 Market St., Stockton'!
 
Enter command:
INSERT INTO FAM SET NAME = 'Alice Teir',
                    DEPTNO = 50,
               STATUS = 'single',
               DEPEND = 1,
               ADDRESS = '2751 Maple Ct., Davis'!
 
Enter command:
INSERT INTO FAM SET NAME = 'Dave Cowel',
                    DEPTNO = 60,
               STATUS = 'divorced',
               DEPEND = 1,
               ADDRESS = '1561 Main St., French Camp'!
 
Enter command:
INSERT INTO FAM SET NAME = 'George Taylor',
                    DEPTNO = 10,
               STATUS = 'married',
               DEPEND = 5,
               ADDRESS = '56715 - 31st St., Sacramento'!
 
Enter command:
INSERT INTO FAM SET NAME = 'Joan Bird',
                    DEPTNO = 50,
               STATUS = 'divorced',
               DEPEND = 1,
               ADDRESS = '2731 Coronado Wy, Pacifica'!
 
Enter command:
INSERT INTO FAM SET NAME = 'Ed Nader',
                    DEPTNO = 70,
               STATUS = 'divorced',
               DEPEND = 1,
               ADDRESS = '774 S. St., Victor'!
 
Enter command:
INSERT INTO FAM SET NAME = 'Joyce Adams',
                    DEPTNO = 70,
               STATUS = 'married',
               DEPEND = 2,
               ADDRESS = '8741 Takay Bowl Blvd, Lodi'!
 
Enter command:
INSERT INTO DEPT SET DEPTNO = 10,
              DEPTNAME = 'Management',
              LOCNAME  = 'San Francisco'!
 
Enter command:
INSERT INTO DEPT SET DEPTNO = 40,
              DEPTNAME = 'Sales',
              LOCNAME  = 'San Francisco'!
 
Enter command:
INSERT INTO DEPT SET DEPTNO = 50,
              DEPTNAME = 'Materials',
              LOCNAME   = 'Sacramento'!
 
Enter command:
INSERT INTO DEPT SET DEPTNO = 60,
              DEPTNAME = 'Production',
              LOCNAME  = 'Stockton'!
 
Enter command:
INSERT INTO DEPT SET DEPTNO = 70,
              DEPTNAME = 'Supply',
              LOCNAME  = 'Lodi'!
 
Enter command:
SELECT * FROM EMP !
 
resultcount :               unknown
 
Enter command:
FETCH !
 
NAME            | DEPTNO | CURRSAL | MANAGER         | STARTSAL | SEX
----------------+--------+---------+-----------------+----------+-------
Alice Teir      |  50    |  13500  | Fred Gerard     |   8500   | female
Dana Smith      |  60    |  16000  | George Taylor   |   7500   | female
Dave Cowel      |  60    |  14000  | Dana Smith      |   7500   | male
Ed Nader        |  70    |   8000  | Paul Brown      |   8000   | male
Fred Gerard     |  50    |  15000  | George Taylor   |   8000   | male
George Taylor   |  10    |  20000  |                 |  10000   | male
Jerry Denny     |  70    |  14000  | Paul Brown      |   6000   | male
Jill Crowley    |  40    |  17000  | George Taylor   |   8250   | female
Joan Bird       |  50    |  14500  | Fred Gerard     |   8000   | female
John Johnes     |  60    |  16500  | Dana Smith      |   8500   | male
Joyce Adams     |  70    |  16000  | Paul Brown      |   6500   | female
Mary Rowen      |  60    |  15500  | Dana Smith      |   9000   | female
Norma Wilson    |  40    |  15500  | Jill Crowley    |   7500   | female
Pat Mingo       |  50    |  13000  | Fred Gerard     |   6500   | female
Paul Brown      |  70    |  15000  | George Taylor   |   7000   | male
Paul Rogers     |  40    |  15000  | Jill Crowley    |   8000   | male
 
resultcount :                    16
 
Enter command:
SELECT * FROM FAM !
 
resultcount :               unknown
 
Enter command:
FETCH !
 
NAME            | DEPTNO | STATUS   | DEPEND | ADDRESS
----------------+--------+----------+--------+-------------------------------
Alice Teir      |  50    | single   |   1    | 2751 Maple Ct., Davis
Dana Smith      |  60    | divorced |   1    | PO Box 571, Rt 51, Waterloo
Dave Cowel      |  60    | divorced |   1    | 1561 Main St., French Camp
Ed Nader        |  70    | divorced |   1    | 774 S. St., Victor
Fred Gerard     |  50    | married  |   3    | 37 Drake St. #2, Carmichael
George Taylor   |  10    | married  |   5    | 56715 - 31st St., Sacramento
Jerry Denny     |  70    | married  |   4    | 67511 Market St., Stockton
Jill Crowley    |  40    | divorced |   1    | 5671 Powell St., S.F.
Joan Bird       |  50    | divorced |   1    | 2731 Coronado Wy, Pacifica
John Johnes     |  60    | single   |   1    | 2785 Drake St., Stockton
Joyce Adams     |  70    | married  |   2    | 8741 Takay Bowl Blvd, Lodi
Mary Rowen      |  60    | married  |   3    | 27451 Mills St., San Rafael
Norma Wilson    |  40    | single   |   1    | 4175 Oak Ct., Daly City
Pat Mingo       |  50    | married  |   2    | 2751 Peer St., #1, Reno
Paul Brown      |  70    | married  |   4    | 271 Oxnard St., Lodi
Paul Rogers     |  40    | divorced |   5    | 27811 Embarcodero, S.F.
 
resultcount :                    16
 
Enter command:
SELECT * FROM DEPT !
 
resultcount :               unknown
 
Enter command:
FETCH !
 
DEPTNO | DEPTNAME   | LOCNAME
-------+------------+----------------
 10    | Management | San Francisco
 40    | Sales      | San Francisco
 50    | Materials  | Sacramento
 60    | Production | Stockton
 70    | Supply     | Lodi
 
resultcount :                     5
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
SELECT SUM(DEPEND) FROM FAM F, EMP
  WHERE F.NAME > 'B' AND
        F.NAME = EMP.NAME AND
        F.NAME = ANY (SELECT NAME FROM EMP
                 WHERE EMP.DEPTNO > 0 AND
                       EMP.NAME = F.NAME AND
                       DEPTNO = ANY (SELECT DEPTNO FROM DEPT
                                       WHERE DEPT.DEPTNO = F.DEPTNO))
   AND
        F.DEPTNO = ALL ( SELECT DISTINCT DEPTNO FROM EMP
                 WHERE EMP.DEPTNO = F.DEPTNO) !
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
--------------------------------------------
 3.5000000000000000000000000000000000000E+01
 
resultcount :                     1
 
Enter command:
SELECT SUM(DEPEND) FROM FAM F
  WHERE NAME > 'B' AND
        NAME = ANY (SELECT NAME FROM EMP
                 WHERE DEPTNO > 0 AND
                       NAME = F.NAME AND
                       DEPTNO = ANY (SELECT DEPTNO FROM DEPT
                                       WHERE DEPTNO = F.DEPTNO))
   AND
        DEPTNO = ALL ( SELECT DISTINCT DEPTNO FROM EMP
                 WHERE DEPTNO = F.DEPTNO) !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1
--------------------------------------------
 3.5000000000000000000000000000000000000E+01
 
resultcount :                     1
 
Enter command:
SELECT F.NAME, ADDRESS, DEPEND FROM FAM F, EMP
  WHERE F.NAME > 'B' AND
        F.NAME = EMP.NAME AND
        F.NAME = ANY (SELECT NAME FROM EMP
                 WHERE EMP.DEPTNO > 0 AND
                       EMP.NAME = F.NAME AND
                       DEPTNO = ANY (SELECT DEPTNO FROM DEPT
                                       WHERE DEPT.DEPTNO = F.DEPTNO))
   AND
        F.DEPTNO = ALL ( SELECT DISTINCT DEPTNO FROM EMP
                 WHERE EMP.DEPTNO = F.DEPTNO) !
 
resultcount :                    15
 
Enter command:
FETCH !
 
NAME            | ADDRESS                        | DEPEND
----------------+--------------------------------+-------
Dana Smith      | PO Box 571, Rt 51, Waterloo    |   1
Dave Cowel      | 1561 Main St., French Camp     |   1
Ed Nader        | 774 S. St., Victor             |   1
Fred Gerard     | 37 Drake St. #2, Carmichael    |   3
George Taylor   | 56715 - 31st St., Sacramento   |   5
Jerry Denny     | 67511 Market St., Stockton     |   4
Jill Crowley    | 5671 Powell St., S.F.          |   1
Joan Bird       | 2731 Coronado Wy, Pacifica     |   1
John Johnes     | 2785 Drake St., Stockton       |   1
Joyce Adams     | 8741 Takay Bowl Blvd, Lodi     |   2
Mary Rowen      | 27451 Mills St., San Rafael    |   3
Norma Wilson    | 4175 Oak Ct., Daly City        |   1
Pat Mingo       | 2751 Peer St., #1, Reno        |   2
Paul Brown      | 271 Oxnard St., Lodi           |   4
Paul Rogers     | 27811 Embarcodero, S.F.        |   5
 
resultcount :                    15
 
Enter command:
SELECT NAME, ADDRESS, DEPEND FROM FAM F
  WHERE NAME > 'B' AND
        NAME = ANY (SELECT NAME FROM EMP
                 WHERE DEPTNO > 0 AND
                       NAME = F.NAME)!
 
resultcount :                    15
 
Enter command:
FETCH !
 
NAME            | ADDRESS                        | DEPEND
----------------+--------------------------------+-------
Dana Smith      | PO Box 571, Rt 51, Waterloo    |   1
Dave Cowel      | 1561 Main St., French Camp     |   1
Ed Nader        | 774 S. St., Victor             |   1
Fred Gerard     | 37 Drake St. #2, Carmichael    |   3
George Taylor   | 56715 - 31st St., Sacramento   |   5
Jerry Denny     | 67511 Market St., Stockton     |   4
Jill Crowley    | 5671 Powell St., S.F.          |   1
Joan Bird       | 2731 Coronado Wy, Pacifica     |   1
John Johnes     | 2785 Drake St., Stockton       |   1
Joyce Adams     | 8741 Takay Bowl Blvd, Lodi     |   2
Mary Rowen      | 27451 Mills St., San Rafael    |   3
Norma Wilson    | 4175 Oak Ct., Daly City        |   1
Pat Mingo       | 2751 Peer St., #1, Reno        |   2
Paul Brown      | 271 Oxnard St., Lodi           |   4
Paul Rogers     | 27811 Embarcodero, S.F.        |   5
 
resultcount :                    15
 
Enter command:
SELECT SUM(DEPEND) FROM FAM F, EMP
  WHERE F.NAME > 'B' AND
        F.NAME = EMP.NAME AND
        F.NAME = ANY (SELECT MIN(NAME) & ' ' FROM EMP
                 WHERE DEPTNO > 0 AND
                       EMP.NAME >= F.NAME)!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
--------------------------------------------
 3.5000000000000000000000000000000000000E+01
 
resultcount :                     1
 
Enter command:
SELECT F.NAME, ADDRESS, DEPEND FROM FAM F, EMP
  WHERE F.NAME > 'B' AND
        F.NAME = EMP.NAME AND
        F.NAME = ANY (SELECT NAME FROM EMP
                 WHERE EMP.DEPTNO > 0 AND
                       EMP.NAME = F.NAME AND
                       DEPTNO = ANY (SELECT DEPTNO FROM DEPT
                                       WHERE DEPT.DEPTNO = F.DEPTNO))
   AND
        F.DEPTNO = ALL ( SELECT DISTINCT DEPTNO FROM EMP
                 WHERE EMP.DEPTNO = F.DEPTNO) ORDER BY DEPEND !
 
resultcount :                    15
 
Enter command:
FETCH !
 
NAME            | ADDRESS                        | DEPEND
----------------+--------------------------------+-------
Dana Smith      | PO Box 571, Rt 51, Waterloo    |   1
Dave Cowel      | 1561 Main St., French Camp     |   1
Ed Nader        | 774 S. St., Victor             |   1
Jill Crowley    | 5671 Powell St., S.F.          |   1
Joan Bird       | 2731 Coronado Wy, Pacifica     |   1
John Johnes     | 2785 Drake St., Stockton       |   1
Norma Wilson    | 4175 Oak Ct., Daly City        |   1
Joyce Adams     | 8741 Takay Bowl Blvd, Lodi     |   2
Pat Mingo       | 2751 Peer St., #1, Reno        |   2
Fred Gerard     | 37 Drake St. #2, Carmichael    |   3
Mary Rowen      | 27451 Mills St., San Rafael    |   3
Jerry Denny     | 67511 Market St., Stockton     |   4
Paul Brown      | 271 Oxnard St., Lodi           |   4
George Taylor   | 56715 - 31st St., Sacramento   |   5
Paul Rogers     | 27811 Embarcodero, S.F.        |   5
 
resultcount :                    15
 
Enter command:
SELECT SUM(DEPEND) FROM FAM F, EMP
  WHERE F.NAME > 'B' AND
        F.NAME = EMP.NAME AND
        F.NAME = ANY (SELECT FAM.NAME FROM EMP, FAM
                 WHERE EMP.DEPTNO > 0 AND
                       EMP.NAME >= F.NAME)!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
--------------------------------------------
 3.5000000000000000000000000000000000000E+01
 
resultcount :                     1
 
Enter command:
SELECT NAME FROM EMP
   WHERE NAME > 'Paul' AND
         EXISTS (SELECT DEPTNO FROM DEPT) !
 
resultcount :                     2
 
Enter command:
FETCH !
 
NAME
---------------
Paul Brown
Paul Rogers
 
resultcount :                     2
 
Enter command:
SELECT DISTINCT NAME FROM EMP
   WHERE NAME > 'Paul' AND
         EXISTS (SELECT DEPTNO FROM DEPT) !
 
resultcount :                     2
 
Enter command:
SELECT NAME FROM EMP
   WHERE NAME > 'Paul R' AND
         EXISTS (SELECT DEPTNO FROM DEPT
                   WHERE DEPTNO = EMP.DEPTNO) !
 
resultcount :                     1
 
Enter command:
FETCH !
 
NAME
---------------
Paul Rogers
 
resultcount :                     1
 
Enter command:
SELECT NAME INTO :A FROM EMP
   WHERE NAME > 'Paul' AND
         EXISTS (SELECT DEPTNO FROM DEPT) !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT DISTINCT NAME INTO :A FROM EMP
   WHERE NAME > 'Paul' AND
         EXISTS (SELECT DEPTNO FROM DEPT) !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT DISTINCT DEPTNO INTO :A FROM EMP
   WHERE NAME BETWEEN 'Da' AND 'Daz' AND
         EXISTS (SELECT DEPTNO FROM DEPT) !
 
DEPTNO            :   60
 
Enter command:
SELECT NAME INTO :A FROM EMP
   WHERE NAME > 'Paul R' AND
         EXISTS (SELECT DEPTNO FROM DEPT
                   WHERE DEPTNO = EMP.DEPTNO) !
 
NAME              :  Paul Rogers
 
Enter command:
SELECT NAME INTO :A FROM EMP
   WHERE NAME > 'Paul Ru' AND
         EXISTS (SELECT DEPTNO FROM DEPT
                   WHERE DEPTNO = EMP.DEPTNO) !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
SELECT DISTINCT DEPTNO INTO :A FROM EMP
   WHERE NAME > 'B' AND
         EXISTS (SELECT DEPTNO FROM DEPT
                   WHERE DEPTNO = EMP.DEPTNO) !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT DISTINCT DEPTNO INTO :A FROM EMP
   WHERE NAME BETWEEN 'Da' AND 'Daz' AND
         EXISTS (SELECT NAME FROM FAM
                   WHERE NAME = EMP.NAME) !
 
DEPTNO            :   60
 
Enter command:
PARS_THEN_EX !
 
Enter command:
SELECT NAME INTO :A FROM EMP
   WHERE NAME > 'Paul R' AND
         EXISTS (SELECT DEPTNO FROM DEPT
                   WHERE DEPTNO = EMP.DEPTNO) !
 
NAME              :  Paul Rogers
 
Enter command:
SELECT NAME INTO :A FROM EMP
   WHERE NAME > 'Paul Ru' AND
         EXISTS (SELECT DEPTNO FROM DEPT
                   WHERE DEPTNO = EMP.DEPTNO) !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
SELECT DISTINCT DEPTNO INTO :A FROM EMP
   WHERE NAME > 'B' AND
         EXISTS (SELECT DEPTNO FROM DEPT
                   WHERE DEPTNO = EMP.DEPTNO) !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT DISTINCT DEPTNO INTO :A FROM EMP
   WHERE NAME BETWEEN 'Da' AND 'Daz' AND
         EXISTS (SELECT NAME FROM FAM
                   WHERE NAME = EMP.NAME) !
 
DEPTNO            :   60
 
Enter command:
SELECT DISTINCT DEPTNO INTO :A FROM EMP
   WHERE NAME BETWEEN 'Da' AND 'Daz' AND
         EXISTS (SELECT NAME FROM FAM
                   WHERE NAME = EMP.NAME) !
 
DEPTNO            :   60
 
Enter command:
PARS_EXECUTE !
 
Enter command:
SELECT NAME, ADDRESS, DEPEND FROM FAM F
  WHERE NAME > 'B' AND
        NAME = ANY (SELECT NAME FROM EMP
                 WHERE DEPTNO = F.DEPTNO)!
 
resultcount :                    15
 
Enter command:
PARSING!
 
Enter command:
SELECT NAME, ADDRESS, DEPEND FROM FAM F
  WHERE NAME > 'B' AND
        NAME = ANY (SELECT NAME FROM EMP
                 WHERE DEPTNO = F.DEPTNO)!
parsing idnr :       1
 
Enter command:
FETCH INTO :A, :B, :C !
parsing idnr :       2
 
Enter command:
EXECUTING !
 
Enter command:
SELECT !
Parsing idnr :      1
 
resultcount :                    15
 
Enter command:
PARS_THEN_EX!
 
Enter command:
FETCH INTO :A, :B, :C !
 
NAME            | ADDRESS                        | DEPEND
----------------+--------------------------------+-------
George Taylor   | 56715 - 31st St., Sacramento   |   5
Jill Crowley    | 5671 Powell St., S.F.          |   1
Norma Wilson    | 4175 Oak Ct., Daly City        |   1
Paul Rogers     | 27811 Embarcodero, S.F.        |   5
Fred Gerard     | 37 Drake St. #2, Carmichael    |   3
Joan Bird       | 2731 Coronado Wy, Pacifica     |   1
Pat Mingo       | 2751 Peer St., #1, Reno        |   2
Dana Smith      | PO Box 571, Rt 51, Waterloo    |   1
Dave Cowel      | 1561 Main St., French Camp     |   1
John Johnes     | 2785 Drake St., Stockton       |   1
Mary Rowen      | 27451 Mills St., San Rafael    |   3
Ed Nader        | 774 S. St., Victor             |   1
Jerry Denny     | 67511 Market St., Stockton     |   4
Joyce Adams     | 8741 Takay Bowl Blvd, Lodi     |   2
Paul Brown      | 271 Oxnard St., Lodi           |   4
 
resultcount :                    15
 
Enter command:
DECLARE ERG CURSOR FOR
SELECT NAME, ADDRESS, DEPEND FROM FAM F
  WHERE NAME > 'B' AND
        NAME = ANY (SELECT NAME FROM EMP
                 WHERE DEPTNO = F.DEPTNO)!
 
resultcount :                    15
 
Enter command:
FETCH ERG INTO :A, :B, :C !
 
NAME            | ADDRESS                        | DEPEND
----------------+--------------------------------+-------
George Taylor   | 56715 - 31st St., Sacramento   |   5
Jill Crowley    | 5671 Powell St., S.F.          |   1
Norma Wilson    | 4175 Oak Ct., Daly City        |   1
Paul Rogers     | 27811 Embarcodero, S.F.        |   5
Fred Gerard     | 37 Drake St. #2, Carmichael    |   3
Joan Bird       | 2731 Coronado Wy, Pacifica     |   1
Pat Mingo       | 2751 Peer St., #1, Reno        |   2
Dana Smith      | PO Box 571, Rt 51, Waterloo    |   1
Dave Cowel      | 1561 Main St., French Camp     |   1
John Johnes     | 2785 Drake St., Stockton       |   1
Mary Rowen      | 27451 Mills St., San Rafael    |   3
Ed Nader        | 774 S. St., Victor             |   1
Jerry Denny     | 67511 Market St., Stockton     |   4
Joyce Adams     | 8741 Takay Bowl Blvd, Lodi     |   2
Paul Brown      | 271 Oxnard St., Lodi           |   4
 
resultcount :                    15
 
Enter command:
SELECT *, NAME FROM ERG !
 
resultcount :                    15
 
Enter command:
FETCH INTO :A, :B, :C, :D!
 
NAME            | ADDRESS                        | DEPEND | NAME
----------------+--------------------------------+--------+----------------
George Taylor   | 56715 - 31st St., Sacramento   |   5    | George Taylor
Jill Crowley    | 5671 Powell St., S.F.          |   1    | Jill Crowley
Norma Wilson    | 4175 Oak Ct., Daly City        |   1    | Norma Wilson
Paul Rogers     | 27811 Embarcodero, S.F.        |   5    | Paul Rogers
Fred Gerard     | 37 Drake St. #2, Carmichael    |   3    | Fred Gerard
Joan Bird       | 2731 Coronado Wy, Pacifica     |   1    | Joan Bird
Pat Mingo       | 2751 Peer St., #1, Reno        |   2    | Pat Mingo
Dana Smith      | PO Box 571, Rt 51, Waterloo    |   1    | Dana Smith
Dave Cowel      | 1561 Main St., French Camp     |   1    | Dave Cowel
John Johnes     | 2785 Drake St., Stockton       |   1    | John Johnes
Mary Rowen      | 27451 Mills St., San Rafael    |   3    | Mary Rowen
Ed Nader        | 774 S. St., Victor             |   1    | Ed Nader
Jerry Denny     | 67511 Market St., Stockton     |   4    | Jerry Denny
Joyce Adams     | 8741 Takay Bowl Blvd, Lodi     |   2    | Joyce Adams
Paul Brown      | 271 Oxnard St., Lodi           |   4    | Paul Brown
 
resultcount :                    15
 
Enter command:
PARSING !
 
Enter command:
DECLARE ERG1 CURSOR FOR
SELECT NAME, ADDRESS, DEPEND FROM FAM F
  WHERE NAME > 'B' AND
        NAME = ANY (SELECT NAME FROM EMP
                 WHERE DEPTNO = F.DEPTNO)!
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
SELECT !
Parsing idnr :      1
 
resultcount :                    15
 
Enter command:
PARSING !
 
Enter command:
SELECT *, NAME FROM ERG1 !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
SELECT !
Parsing idnr :      1
 
resultcount :                    15
 
Enter command:
PARS_THEN_EX!
 
Enter command:
FETCH ERG1 INTO :A, :B, :C, :D !
 
NAME            | ADDRESS                        | DEPEND
----------------+--------------------------------+-------
George Taylor   | 56715 - 31st St., Sacramento   |   5
Jill Crowley    | 5671 Powell St., S.F.          |   1
Norma Wilson    | 4175 Oak Ct., Daly City        |   1
Paul Rogers     | 27811 Embarcodero, S.F.        |   5
Fred Gerard     | 37 Drake St. #2, Carmichael    |   3
Joan Bird       | 2731 Coronado Wy, Pacifica     |   1
Pat Mingo       | 2751 Peer St., #1, Reno        |   2
Dana Smith      | PO Box 571, Rt 51, Waterloo    |   1
Dave Cowel      | 1561 Main St., French Camp     |   1
John Johnes     | 2785 Drake St., Stockton       |   1
Mary Rowen      | 27451 Mills St., San Rafael    |   3
Ed Nader        | 774 S. St., Victor             |   1
Jerry Denny     | 67511 Market St., Stockton     |   4
Joyce Adams     | 8741 Takay Bowl Blvd, Lodi     |   2
Paul Brown      | 271 Oxnard St., Lodi           |   4
 
resultcount :                    15
 
Enter command:
FETCH INTO :A, :B, :C, :D !
 
NAME            | ADDRESS                        | DEPEND | NAME
----------------+--------------------------------+--------+----------------
George Taylor   | 56715 - 31st St., Sacramento   |   5    | George Taylor
Jill Crowley    | 5671 Powell St., S.F.          |   1    | Jill Crowley
Norma Wilson    | 4175 Oak Ct., Daly City        |   1    | Norma Wilson
Paul Rogers     | 27811 Embarcodero, S.F.        |   5    | Paul Rogers
Fred Gerard     | 37 Drake St. #2, Carmichael    |   3    | Fred Gerard
Joan Bird       | 2731 Coronado Wy, Pacifica     |   1    | Joan Bird
Pat Mingo       | 2751 Peer St., #1, Reno        |   2    | Pat Mingo
Dana Smith      | PO Box 571, Rt 51, Waterloo    |   1    | Dana Smith
Dave Cowel      | 1561 Main St., French Camp     |   1    | Dave Cowel
John Johnes     | 2785 Drake St., Stockton       |   1    | John Johnes
Mary Rowen      | 27451 Mills St., San Rafael    |   3    | Mary Rowen
Ed Nader        | 774 S. St., Victor             |   1    | Ed Nader
Jerry Denny     | 67511 Market St., Stockton     |   4    | Jerry Denny
Joyce Adams     | 8741 Takay Bowl Blvd, Lodi     |   2    | Joyce Adams
Paul Brown      | 271 Oxnard St., Lodi           |   4    | Paul Brown
 
resultcount :                    15
 
Enter command:
PARS_THEN_EX !
 
Enter command:
SELECT NAME, ADDRESS, DEPEND FROM FAM F
  WHERE DEPTNO IN (10, 40, 50)!
 
resultcount :               unknown
 
Enter command:
FETCH INTO :A, :B, :C !
 
NAME            | ADDRESS                        | DEPEND
----------------+--------------------------------+-------
Alice Teir      | 2751 Maple Ct., Davis          |   1
Fred Gerard     | 37 Drake St. #2, Carmichael    |   3
George Taylor   | 56715 - 31st St., Sacramento   |   5
Jill Crowley    | 5671 Powell St., S.F.          |   1
Joan Bird       | 2731 Coronado Wy, Pacifica     |   1
Norma Wilson    | 4175 Oak Ct., Daly City        |   1
Pat Mingo       | 2751 Peer St., #1, Reno        |   2
Paul Rogers     | 27811 Embarcodero, S.F.        |   5
 
resultcount :                     8
 
Enter command:
DATA !
 
Enter command:
SELECT NAME, ADDRESS, DEPEND FROM FAM F
  WHERE
        (DEPTNO = :B OR
        NAME = ANY (SELECT NAME FROM EMP
                 WHERE DEPTNO BETWEEN :B AND 50 AND
                       DEPTNO = F.DEPTNO))!
 
n 2 10 n 2 40
 
resultcount :                     8
 
Enter command:
NODATA !
 
Enter command:
FETCH INTO :A, :B, :C !
 
NAME            | ADDRESS                        | DEPEND
----------------+--------------------------------+-------
George Taylor   | 56715 - 31st St., Sacramento   |   5
Jill Crowley    | 5671 Powell St., S.F.          |   1
Norma Wilson    | 4175 Oak Ct., Daly City        |   1
Paul Rogers     | 27811 Embarcodero, S.F.        |   5
Alice Teir      | 2751 Maple Ct., Davis          |   1
Fred Gerard     | 37 Drake St. #2, Carmichael    |   3
Joan Bird       | 2731 Coronado Wy, Pacifica     |   1
Pat Mingo       | 2751 Peer St., #1, Reno        |   2
 
resultcount :                     8
 
Enter command:
DATA !
 
Enter command:
SELECT NAME, ADDRESS, DEPEND FROM FAM F
  WHERE NAME > :A AND
        (DEPTNO = :B OR
        NAME = ANY (SELECT NAME FROM EMP
                 WHERE DEPTNO BETWEEN :B AND 50 AND
                       DEPTNO = F.DEPTNO))!
 
c 15 'B' n 2 10 n 2 40
 
resultcount :                     7
 
Enter command:
NODATA !
 
Enter command:
FETCH INTO :A, :B, :C !
 
NAME            | ADDRESS                        | DEPEND
----------------+--------------------------------+-------
George Taylor   | 56715 - 31st St., Sacramento   |   5
Jill Crowley    | 5671 Powell St., S.F.          |   1
Norma Wilson    | 4175 Oak Ct., Daly City        |   1
Paul Rogers     | 27811 Embarcodero, S.F.        |   5
Fred Gerard     | 37 Drake St. #2, Carmichael    |   3
Joan Bird       | 2731 Coronado Wy, Pacifica     |   1
Pat Mingo       | 2751 Peer St., #1, Reno        |   2
 
resultcount :                     7
 
Enter command:
DATA !
 
Enter command:
SELECT NAME, ADDRESS, DEPEND FROM FAM F
  WHERE NAME > :A AND
        NAME < 'Paul' AND
        (DEPTNO = :B OR
        NAME = ANY (SELECT NAME FROM EMP
                 WHERE DEPTNO BETWEEN :B AND 50 AND
                       DEPTNO = F.DEPTNO))!
 
c 15 'B' n 2 10 n 2 40
 
resultcount :                     6
 
Enter command:
NODATA !
 
Enter command:
FETCH INTO :A, :B, :C !
 
NAME            | ADDRESS                        | DEPEND
----------------+--------------------------------+-------
George Taylor   | 56715 - 31st St., Sacramento   |   5
Jill Crowley    | 5671 Powell St., S.F.          |   1
Norma Wilson    | 4175 Oak Ct., Daly City        |   1
Fred Gerard     | 37 Drake St. #2, Carmichael    |   3
Joan Bird       | 2731 Coronado Wy, Pacifica     |   1
Pat Mingo       | 2751 Peer St., #1, Reno        |   2
 
resultcount :                     6
 
Enter command:
PARS_EXECUTE!
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE SUB !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE VIEW V1 AS SELECT EMP.NAME, EMP.DEPTNO, FAM.ADDRESS
                     FROM EMP, FAM !
 
Enter command:
SELECT * FROM V1
    WHERE DEPTNO > 65 AND
    EXISTS ( SELECT DEPTNO FROM DEPT WHERE V1.DEPTNO = DEPTNO) !
 
resultcount :                    64
 
Enter command:
FETCH !
 
NAME            | DEPTNO | ADDRESS
----------------+--------+-------------------------------
Ed Nader        |  70    | 2751 Maple Ct., Davis
Ed Nader        |  70    | PO Box 571, Rt 51, Waterloo
Ed Nader        |  70    | 1561 Main St., French Camp
Ed Nader        |  70    | 774 S. St., Victor
Ed Nader        |  70    | 37 Drake St. #2, Carmichael
Ed Nader        |  70    | 56715 - 31st St., Sacramento
Ed Nader        |  70    | 67511 Market St., Stockton
Ed Nader        |  70    | 5671 Powell St., S.F.
Ed Nader        |  70    | 2731 Coronado Wy, Pacifica
Ed Nader        |  70    | 2785 Drake St., Stockton
Ed Nader        |  70    | 8741 Takay Bowl Blvd, Lodi
Ed Nader        |  70    | 27451 Mills St., San Rafael
Ed Nader        |  70    | 4175 Oak Ct., Daly City
Ed Nader        |  70    | 2751 Peer St., #1, Reno
Ed Nader        |  70    | 271 Oxnard St., Lodi
Ed Nader        |  70    | 27811 Embarcodero, S.F.
Jerry Denny     |  70    | 2751 Maple Ct., Davis
 
NAME            | DEPTNO | ADDRESS
----------------+--------+-------------------------------
Jerry Denny     |  70    | PO Box 571, Rt 51, Waterloo
Jerry Denny     |  70    | 1561 Main St., French Camp
Jerry Denny     |  70    | 774 S. St., Victor
Jerry Denny     |  70    | 37 Drake St. #2, Carmichael
Jerry Denny     |  70    | 56715 - 31st St., Sacramento
Jerry Denny     |  70    | 67511 Market St., Stockton
Jerry Denny     |  70    | 5671 Powell St., S.F.
Jerry Denny     |  70    | 2731 Coronado Wy, Pacifica
Jerry Denny     |  70    | 2785 Drake St., Stockton
Jerry Denny     |  70    | 8741 Takay Bowl Blvd, Lodi
Jerry Denny     |  70    | 27451 Mills St., San Rafael
Jerry Denny     |  70    | 4175 Oak Ct., Daly City
Jerry Denny     |  70    | 2751 Peer St., #1, Reno
Jerry Denny     |  70    | 271 Oxnard St., Lodi
Jerry Denny     |  70    | 27811 Embarcodero, S.F.
Joyce Adams     |  70    | 2751 Maple Ct., Davis
Joyce Adams     |  70    | PO Box 571, Rt 51, Waterloo
 
NAME            | DEPTNO | ADDRESS
----------------+--------+-------------------------------
Joyce Adams     |  70    | 1561 Main St., French Camp
Joyce Adams     |  70    | 774 S. St., Victor
Joyce Adams     |  70    | 37 Drake St. #2, Carmichael
Joyce Adams     |  70    | 56715 - 31st St., Sacramento
Joyce Adams     |  70    | 67511 Market St., Stockton
Joyce Adams     |  70    | 5671 Powell St., S.F.
Joyce Adams     |  70    | 2731 Coronado Wy, Pacifica
Joyce Adams     |  70    | 2785 Drake St., Stockton
Joyce Adams     |  70    | 8741 Takay Bowl Blvd, Lodi
Joyce Adams     |  70    | 27451 Mills St., San Rafael
Joyce Adams     |  70    | 4175 Oak Ct., Daly City
Joyce Adams     |  70    | 2751 Peer St., #1, Reno
Joyce Adams     |  70    | 271 Oxnard St., Lodi
Joyce Adams     |  70    | 27811 Embarcodero, S.F.
Paul Brown      |  70    | 2751 Maple Ct., Davis
Paul Brown      |  70    | PO Box 571, Rt 51, Waterloo
Paul Brown      |  70    | 1561 Main St., French Camp
 
NAME            | DEPTNO | ADDRESS
----------------+--------+-------------------------------
Paul Brown      |  70    | 774 S. St., Victor
Paul Brown      |  70    | 37 Drake St. #2, Carmichael
Paul Brown      |  70    | 56715 - 31st St., Sacramento
Paul Brown      |  70    | 67511 Market St., Stockton
Paul Brown      |  70    | 5671 Powell St., S.F.
Paul Brown      |  70    | 2731 Coronado Wy, Pacifica
Paul Brown      |  70    | 2785 Drake St., Stockton
Paul Brown      |  70    | 8741 Takay Bowl Blvd, Lodi
Paul Brown      |  70    | 27451 Mills St., San Rafael
Paul Brown      |  70    | 4175 Oak Ct., Daly City
Paul Brown      |  70    | 2751 Peer St., #1, Reno
Paul Brown      |  70    | 271 Oxnard St., Lodi
Paul Brown      |  70    | 27811 Embarcodero, S.F.
 
resultcount :                    64
 
Enter command:
CREATE VIEW V2 (MUL) AS SELECT EMP.DEPTNO * FAM.DEPTNO
      FROM EMP, FAM !
 
Enter command:
SELECT * FROM V2 WHERE EXISTS
      (SELECT LOCNAME FROM DEPT WHERE V2.MUL > DEPTNO)!
 
***ERROR  -7022 Columns from more than one table not allowed:MUL           0066
 
Enter command:
FETCH!
 
***ERROR    100 Row not found                                              0001
 
Enter command:
SELECT * FROM EMP, FAM, DEPT
   WHERE EMP.DEPTNO * FAM.DEPTNO > DEPT.DEPTNO AND
         EMP.NAME = FAM.NAME AND
         EMP.DEPTNO = ANY ( SELECT DEPTNO FROM DEPT
                               WHERE EMP.NAME > DEPT.LOCNAME )!
 
resultcount :                     5
 
Enter command:
FETCH !
 
NAME              :  Paul Brown
DEPTNO            :   70
CURRSAL           :   15000
MANAGER           :  George Taylor
STARTSAL          :    7000
SEX               :  male
NAME              :  Paul Brown
DEPTNO            :   70
STATUS            :  married
DEPEND            :    4
ADDRESS           :  271 Oxnard St., Lodi
DEPTNO            :   10
DEPTNAME          :  Management
LOCNAME           :  San Francisco
---------------------------------------------------
NAME              :  Paul Brown
DEPTNO            :   70
CURRSAL           :   15000
MANAGER           :  George Taylor
STARTSAL          :    7000
SEX               :  male
NAME              :  Paul Brown
DEPTNO            :   70
STATUS            :  married
DEPEND            :    4
ADDRESS           :  271 Oxnard St., Lodi
DEPTNO            :   40
DEPTNAME          :  Sales
LOCNAME           :  San Francisco
---------------------------------------------------
NAME              :  Paul Brown
DEPTNO            :   70
CURRSAL           :   15000
MANAGER           :  George Taylor
STARTSAL          :    7000
SEX               :  male
NAME              :  Paul Brown
DEPTNO            :   70
STATUS            :  married
DEPEND            :    4
ADDRESS           :  271 Oxnard St., Lodi
DEPTNO            :   50
DEPTNAME          :  Materials
LOCNAME           :  Sacramento
---------------------------------------------------
NAME              :  Paul Brown
DEPTNO            :   70
CURRSAL           :   15000
MANAGER           :  George Taylor
STARTSAL          :    7000
SEX               :  male
NAME              :  Paul Brown
DEPTNO            :   70
STATUS            :  married
DEPEND            :    4
ADDRESS           :  271 Oxnard St., Lodi
DEPTNO            :   60
DEPTNAME          :  Production
LOCNAME           :  Stockton
---------------------------------------------------
NAME              :  Paul Brown
DEPTNO            :   70
CURRSAL           :   15000
MANAGER           :  George Taylor
STARTSAL          :    7000
SEX               :  male
NAME              :  Paul Brown
DEPTNO            :   70
STATUS            :  married
DEPEND            :    4
ADDRESS           :  271 Oxnard St., Lodi
DEPTNO            :   70
DEPTNAME          :  Supply
LOCNAME           :  Lodi
 
resultcount :                     5
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE SUB1!
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE TS ( A CHAR (8))!
 
Enter command:
INSERT TS SET A = 'aaa'!
 
Enter command:
SELECT * FROM TS WHERE
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) !
 
resultcount :                     1
 
Enter command:
SELECT * FROM TS WHERE
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) !
 
resultcount :                     1
 
Enter command:
SELECT * FROM TS WHERE
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) AND
A IN (SELECT A FROM TS) !
 
resultcount :                     1
 
Enter command:
CREATE TABLE X ( A CHAR (8))!
 
Enter command:
INSERT X SET A = 'aaa'!
 
Enter command:
CREATE TABLE X1 (A1 CHAR (8))!
 
Enter command:
INSERT X1 SET A1 = 'bbb'!
 
Enter command:
SELECT MIN(A) FROM X, X1 WHERE A = A1 !
 
resultcount :                     1
 
Enter command:
SELECT * FROM X WHERE EXISTS (SELECT MIN(A1) FROM X1 WHERE A1 = X.A)!
 
resultcount :                     1
 
Enter command:
FETCH!
 
A
--------
aaa
 
resultcount :                     1
 
Enter command:
ROLLBACK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T (A CHAR (8))!
 
Enter command:
INSERT T SET A = 'aa'!
 
Enter command:
PARS_THEN_EX !
 
Enter command:
DATA !
 
Enter command:
SELECT * FROM T WHERE ? IN (SELECT * FROM T)!
 
c 256 'aa'
 
resultcount :                     1
 
Enter command:
PARS_EXECUTE!
 
Enter command:
ROLLBACK RELEASE!
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T (A CHAR (8) ASCII, TDUMMY CHAR (2))!
 
Enter command:
INSERT T SET A = 'aaa'!
 
Enter command:
CREATE TABLE U (A CHAR (8), UDUMMY CHAR (2)) !
 
Enter command:
INSERT U SET A = 'aaa'!
 
Enter command:
SELECT T.A,U.A INTO :A, :B FROM T,U WHERE T.A = U.A !
 
A                 :  aaa
A                 :  aaa
 
Enter command:
SELECT T.A,U.A INTO :A, :B FROM T,U WHERE T.A BETWEEN U.A AND 'bbb'!
 
A                 :  aaa
A                 :  aaa
 
Enter command:
SELECT T.A,U.A INTO :A, :B FROM T,U WHERE T.A IN (U.A, 'bbb')!
 
A                 :  aaa
A                 :  aaa
 
Enter command:
SELECT T.A INTO :A FROM T WHERE T.A IN (SELECT U.A FROM U)!
 
A                 :  aaa
 
Enter command:
SELECT U.A INTO :A FROM U WHERE U.A IN (SELECT T.A FROM T)!
 
A                 :  aaa
 
Enter command:
CREATE INDEX TI ON T (A,TDUMMY)!
 
Enter command:
CREATE INDEX UI ON U (A,UDUMMY)!
 
Enter command:
SELECT T.A,U.A INTO :A, :B FROM T,U WHERE T.A = U.A !
 
A                 :  aaa
A                 :  aaa
 
Enter command:
SELECT T.A,U.A INTO :A, :B FROM T,U WHERE T.A BETWEEN U.A AND 'bbb'!
 
A                 :  aaa
A                 :  aaa
 
Enter command:
SELECT T.A,U.A INTO :A, :B FROM T,U WHERE T.A IN (U.A, 'bbb')!
 
A                 :  aaa
A                 :  aaa
 
Enter command:
SELECT T.A INTO :A FROM T WHERE T.A IN (SELECT U.A FROM U)!
 
A                 :  aaa
 
Enter command:
SELECT U.A INTO :A FROM U WHERE U.A IN (SELECT T.A FROM T)!
 
A                 :  aaa
 
Enter command:
ROLLBACK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST SQLMODE ORACLE !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST SQLMODE ORACLE ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T ( A CHAR (8))!
 
Enter command:
INSERT INTO T VALUES ('aaa')!
 
Enter command:
INSERT INTO T VALUES ('bbb')!
 
Enter command:
INSERT INTO T VALUES ('ccc')!
 
Enter command:
INSERT INTO T VALUES ('ddd')!
 
Enter command:
SELECT * FROM T WHERE
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T)
!
 
***ERROR  -1102 Too complicated SQL statement (too many subqueries)        6647
 
Enter command:
FETCH INTO :A !
 
***ERROR  -4000 Unknown result table                                       0001
 
Enter command:
SELECT * FROM T WHERE
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND A IN(SELECT * FROM T) AND
A IN(SELECT * FROM T) AND A IN(SELECT * FROM T)
!
 
resultcount :                     0
 
Enter command:
FETCH INTO :A !
 
A
--------
aaa
bbb
ccc
ddd
 
resultcount :                     4
 
Enter command:
SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL)
)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) !
 
***ERROR  -1102 Too complicated SQL statement (too many subqueries)        3809
 
Enter command:
FETCH INTO :A !
 
***ERROR  -4000 Unknown result table                                       0001
 
Enter command:
SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT * FROM T WHERE A = ANY
          (SELECT A FROM T WHERE EXISTS (SELECT * FROM T WHERE A <> ALL
(SELECT * FROM T WHERE A IN(SELECT 'v' FROM DUAL)
))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) !
 
resultcount :                     0
 
Enter command:
FETCH INTO :A !
 
A
--------
aaa
bbb
ccc
ddd
 
resultcount :                     4
 
Enter command:
DROP TABLE T !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST SQLMODE ORACLE!
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST SQLMODE ORACLE ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T ( A CHAR (8), B NUMBER (6))!
 
Enter command:
INSERT INTO T VALUES ('1', 1)!
 
Enter command:
INSERT INTO T VALUES ('2', 200) !
 
Enter command:
INSERT INTO T VALUES ('-3', -3)!
 
Enter command:
INSERT INTO T VALUES ('0004', 4)!
 
Enter command:
INSERT INTO T VALUES ('5e0', 5)!
 
Enter command:
CREATE TABLE TA AS SELECT A FROM T !
 
Enter command:
CREATE TABLE TB AS SELECT B FROM T !
 
Enter command:
SELECT * FROM T WHERE A = ANY (SELECT B FROM T)!
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B !
 
A        | B
---------+--------
1        |       1
-3       |      -3
0004     |       4
5e0      |       5
 
resultcount :                     4
 
Enter command:
SELECT * FROM T WHERE B = ANY (SELECT A FROM T)!
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B !
 
A        | B
---------+--------
1        |       1
-3       |      -3
0004     |       4
5e0      |       5
 
resultcount :                     4
 
Enter command:
SELECT * FROM T WHERE A = ANY (SELECT * FROM TB)!
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B !
 
A        | B
---------+--------
1        |       1
-3       |      -3
0004     |       4
5e0      |       5
 
resultcount :                     4
 
Enter command:
SELECT * FROM T WHERE B = ANY (SELECT * FROM TA)!
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B !
 
A        | B
---------+--------
1        |       1
-3       |      -3
0004     |       4
5e0      |       5
 
resultcount :                     4
 
Enter command:
SELECT * FROM T WHERE A = ANY (SELECT B*1 FROM T)!
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B !
 
A        | B
---------+--------
1        |       1
-3       |      -3
0004     |       4
5e0      |       5
 
resultcount :                     4
 
Enter command:
SELECT * FROM T WHERE B = ANY (SELECT * FROM TA)!
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B !
 
A        | B
---------+--------
1        |       1
-3       |      -3
0004     |       4
5e0      |       5
 
resultcount :                     4
 
Enter command:
SELECT * FROM T WHERE (A,B) = ANY (SELECT B,A FROM T)!
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B !
 
A        | B
---------+--------
1        |       1
-3       |      -3
0004     |       4
5e0      |       5
 
resultcount :                     4
 
Enter command:
SELECT * FROM T WHERE (B,A) = ANY (SELECT A,B FROM T)!
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B !
 
A        | B
---------+--------
1        |       1
-3       |      -3
0004     |       4
5e0      |       5
 
resultcount :                     4
 
Enter command:
SELECT * FROM T WHERE A IN (SELECT B FROM T)!
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B !
 
A        | B
---------+--------
1        |       1
-3       |      -3
0004     |       4
5e0      |       5
 
resultcount :                     4
 
Enter command:
SELECT * FROM T WHERE B IN (SELECT A FROM T)!
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B !
 
A        | B
---------+--------
1        |       1
-3       |      -3
0004     |       4
5e0      |       5
 
resultcount :                     4
 
Enter command:
SELECT * FROM T WHERE (A,B) IN (SELECT B,A FROM T)!
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B !
 
A        | B
---------+--------
1        |       1
-3       |      -3
0004     |       4
5e0      |       5
 
resultcount :                     4
 
Enter command:
SELECT * FROM T WHERE (B,A) IN (SELECT A,B FROM T)!
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B !
 
A        | B
---------+--------
1        |       1
-3       |      -3
0004     |       4
5e0      |       5
 
resultcount :                     4
 
Enter command:
SELECT * FROM T WHERE A = ANY (SELECT B FROM T T1 WHERE T.A = T1.B)!
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B !
 
A        | B
---------+--------
-3       |      -3
0004     |       4
1        |       1
5e0      |       5
 
resultcount :                     4
 
Enter command:
SELECT * FROM T WHERE B = ANY (SELECT TO_NUMBER(A)
    FROM T T1 WHERE T.A = T1.B)!
 
resultcount :                     0
 
Enter command:
SELECT * FROM T WHERE B = ANY (SELECT A FROM T T1 WHERE T.A = T1.B)!
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B !
 
A        | B
---------+--------
-3       |      -3
0004     |       4
1        |       1
5e0      |       5
 
resultcount :                     4
 
Enter command:
SELECT * FROM T WHERE A = ANY (SELECT B FROM TB T1 WHERE T.A = T1.B)!
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B !
 
A        | B
---------+--------
-3       |      -3
0004     |       4
1        |       1
5e0      |       5
 
resultcount :                     4
 
Enter command:
SELECT * FROM T WHERE B = ANY (SELECT A FROM TA T1 WHERE T.A = T1.B)!
 
***ERROR  -4005 Unknown column name:B                                      0067
 
Enter command:
FETCH INTO :A, :B !
 
***ERROR  -4000 Unknown result table                                       0001
 
Enter command:
SELECT * FROM T WHERE A = ANY (SELECT B*1 FROM T T1 WHERE T.A = T1.B)!
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B !
 
A        | B
---------+--------
-3       |      -3
0004     |       4
1        |       1
5e0      |       5
 
resultcount :                     4
 
Enter command:
SELECT * FROM T WHERE B = ANY
        (SELECT SUBSTR(A, 1) FROM T T1 WHERE T.A = T1.B)!
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B !
 
A        | B
---------+--------
-3       |      -3
0004     |       4
1        |       1
5e0      |       5
 
resultcount :                     4
 
Enter command:
SELECT * FROM T WHERE (A,B) = ANY
        (SELECT B,A FROM T T1 WHERE T.A = T1.B)!
 
***ERROR  -8006 Data types must be compatible                              0024
 
Enter command:
FETCH INTO :A, :B !
 
***ERROR  -4000 Unknown result table                                       0001
 
Enter command:
SELECT * FROM T WHERE (B,A) = ANY
        (SELECT A,B FROM T T1 WHERE T.A = T1.B)!
 
***ERROR  -8006 Data types must be compatible                              0026
 
Enter command:
FETCH INTO :A, :B !
 
***ERROR  -4000 Unknown result table                                       0001
 
Enter command:
SELECT * FROM T WHERE A IN
        (SELECT B FROM T T1 WHERE T.A = T1.B)!
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B !
 
A        | B
---------+--------
-3       |      -3
0004     |       4
1        |       1
5e0      |       5
 
resultcount :                     4
 
Enter command:
SELECT * FROM T WHERE B IN
        (SELECT A FROM T T1 WHERE T.A = T1.B)!
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B !
 
A        | B
---------+--------
-3       |      -3
0004     |       4
1        |       1
5e0      |       5
 
resultcount :                     4
 
Enter command:
SELECT * FROM T WHERE (A,B) IN
        (SELECT B,A FROM T T1 WHERE T.A = T1.B)!
 
***ERROR  -8006 Data types must be compatible                              0024
 
Enter command:
FETCH INTO :A, :B !
 
***ERROR  -4000 Unknown result table                                       0001
 
Enter command:
SELECT * FROM T WHERE (B,A) IN
        (SELECT A,B FROM T T1 WHERE T.A = T1.B)!
 
***ERROR  -8006 Data types must be compatible                              0026
 
Enter command:
FETCH INTO :A, :B !
 
***ERROR  -4000 Unknown result table                                       0001
 
Enter command:
DROP TABLE T !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE SUB1VAL !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE BASE ( A CHAR (8), F FIXED (10))!
 
Enter command:
CREATE TABLE T ( A CHAR (12) CONSTRAINT C CHECK A >
                          (SELECT A FROM BASE) )!
 
***ERROR  -7056 Subquery not allowed                                       0053
 
Enter command:
 
CREATE TABLE T ( A CHAR (12), B FIXED (11))!
 
Enter command:
 
 
INSERT T VALUES ((SELECT A FROM BASE), (SELECT F FROM BASE))!
 
Enter command:
SELECT * FROM T !
 
resultcount :               unknown
 
Enter command:
FETCH !
 
A            | B
-------------+-------------
???????????? | ????????????
 
resultcount :                     1
 
Enter command:
 
INSERT BASE VALUES ('abc', 4711)!
 
Enter command:
 
INSERT T VALUES ((SELECT A FROM BASE), (SELECT F FROM BASE))!
 
Enter command:
SELECT * FROM T !
 
resultcount :               unknown
 
Enter command:
FETCH !
 
A            | B
-------------+-------------
???????????? | ????????????
abc          |         4711
 
resultcount :                     2
 
Enter command:
 
INSERT T VALUES ((SELECT A FROM BASE)||'xyz',
                  (SELECT F FROM BASE) * 4)!
 
Enter command:
SELECT * FROM T !
 
resultcount :               unknown
 
Enter command:
FETCH !
 
A            | B
-------------+-------------
???????????? | ????????????
abc          |         4711
abcxyz       |        18844
 
resultcount :                     3
 
Enter command:
 
INSERT T VALUES ((SELECT * FROM BASE))!
 
***ERROR  -2013 Select column list too long                                0026
 
Enter command:
 
DELETE T !
 
resultcount :                     3
 
Enter command:
INSERT T VALUES ('old', 4711)!
 
Enter command:
 
UPDATE T SET A = 'new' || (SELECT A FROM BASE) !
 
resultcount :                     1
 
Enter command:
SELECT * INTO :A, :B FROM T !
 
A                 :  newabc
B                 :          4711
 
Enter command:
 
UPDATE T SET A = (SELECT A FROM BASE) || 'new' !
 
resultcount :                     1
 
Enter command:
SELECT * INTO :A, :B FROM T !
 
A                 :  abcnew
B                 :          4711
 
Enter command:
UPDATE T SET A = UPPER((SELECT A FROM BASE)) !
 
resultcount :                     1
 
Enter command:
SELECT * INTO :A, :B FROM T !
 
A                 :  ABC
B                 :          4711
 
Enter command:
UPDATE T SET A = LOWER((SELECT A FROM BASE)),
             B = 12 * (SELECT F FROM BASE) !
 
resultcount :                     1
 
Enter command:
 
SELECT * INTO :A, :B FROM T !
 
A                 :  abc
B                 :         56532
 
Enter command:
 
UPDATE T (A,B) VALUES (SELECT * FROM BASE)!
 
***ERROR  -5010 Missing value specification                                0024
 
Enter command:
SELECT * INTO :A, :B FROM T !
 
A                 :  abc
B                 :         56532
 
Enter command:
UPDATE T (A,B) VALUES ((SELECT A FROM BASE), (SELECT F FROM BASE))!
 
***ERROR  -5010 Missing value specification                                0024
 
Enter command:
SELECT * INTO :A, :B FROM T !
 
A                 :  abc
B                 :         56532
 
Enter command:
UPDATE T (A,B) VALUES ('UPP' || UPPER((SELECT A FROM BASE)),
                  7 * (SELECT A FROM BASE)) !
 
***ERROR  -5015 Missing keyword:WITH                                       0030
 
Enter command:
SELECT * INTO :A, :B FROM T !
 
A                 :  abc
B                 :         56532
 
Enter command:
 
 
 
 
SELECT '"' || (SELECT A FROM BASE) || '"' FROM T !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1
-----------
"abc"
 
resultcount :                     1
 
Enter command:
SELECT A || '"' || (SELECT A FROM BASE) || '"', B FROM T !
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1            | B
-----------------------+-------------
abc"abc"               |        56532
 
resultcount :                     1
 
Enter command:
SELECT '"' || SUBSTR((SELECT A FROM BASE), 1, 2) || '"' FROM T !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1
-----------
"ab"
 
resultcount :                     1
 
Enter command:
SELECT A, UPPER((SELECT A FROM BASE)), B FROM T !
 
resultcount :                     1
 
Enter command:
FETCH !
 
A            | EXPRESSION1 | B
-------------+-------------+-------------
abc          | ABC         |        56532
 
resultcount :                     1
 
Enter command:
 
SELECT '"' || (SELECT * FROM BASE) || '"' FROM T !
 
***ERROR  -2013 Select column list too long                                0023
 
Enter command:
FETCH !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
 
INSERT T VALUES ('fed', -4)!
 
Enter command:
SELECT * FROM T
  WHERE A BETWEEN 'aaa' AND (SELECT A FROM BASE) || 'xyz'!
 
resultcount :                     1
 
Enter command:
FETCH !
 
A            | B
-------------+-------------
abc          |        56532
 
resultcount :                     1
 
Enter command:
SELECT * FROM T
  WHERE (SELECT A FROM BASE) BETWEEN A AND 'abcxyz'!
 
resultcount :                     1
 
Enter command:
FETCH !
 
A            | B
-------------+-------------
abc          |        56532
 
resultcount :                     1
 
Enter command:
SELECT * FROM T
  WHERE (SELECT A FROM BASE) || 'xyz' > A !
 
resultcount :                     1
 
Enter command:
FETCH !
 
A            | B
-------------+-------------
abc          |        56532
 
resultcount :                     1
 
Enter command:
SELECT * FROM T
  WHERE (SELECT A FROM BASE) = A !
 
resultcount :                     1
 
Enter command:
FETCH !
 
A            | B
-------------+-------------
abc          |        56532
 
resultcount :                     1
 
Enter command:
SELECT * FROM T
  WHERE A || 'xyz' = (SELECT A FROM BASE) || 'xyz' !
 
resultcount :                     1
 
Enter command:
FETCH!
 
A            | B
-------------+-------------
abc          |        56532
 
resultcount :                     1
 
Enter command:
SELECT * FROM T
  WHERE A || 'xyz' = ANY (SELECT A FROM BASE) || 'xyz' !
 
***ERROR  -7056 Subquery not allowed                                       0041
 
Enter command:
FETCH!
 
***ERROR    100 Row not found                                              0001
 
Enter command:
SELECT * FROM T
  WHERE (A ,B) = (((SELECT A FROM BASE), 56532)) !
 
resultcount :                     1
 
Enter command:
FETCH !
 
A            | B
-------------+-------------
abc          |        56532
 
resultcount :                     1
 
Enter command:
SELECT * FROM T
  WHERE (A || 'xyz',B) = (((SELECT A FROM BASE) || 'xyz', 56532)) !
 
resultcount :                     1
 
Enter command:
FETCH !
 
A            | B
-------------+-------------
abc          |        56532
 
resultcount :                     1
 
Enter command:
SELECT * FROM T
  WHERE A IN ((SELECT A FROM BASE), 'fed')!
 
resultcount :                     2
 
Enter command:
FETCH !
 
A            | B
-------------+-------------
abc          |        56532
fed          |           -4
 
resultcount :                     2
 
Enter command:
SELECT * FROM T
  WHERE A || 'xyz' LIKE (SELECT A FROM BASE) || 'xyz'!
 
resultcount :                     1
 
Enter command:
FETCH !
 
A            | B
-------------+-------------
abc          |        56532
 
resultcount :                     1
 
Enter command:
SELECT * FROM T
  WHERE (SELECT A FROM BASE) IS NOT NULL !
 
resultcount :                     2
 
Enter command:
FETCH !
 
A            | B
-------------+-------------
abc          |        56532
fed          |           -4
 
resultcount :                     2
 
Enter command:
SELECT * FROM T
  WHERE A SOUNDS LIKE (SELECT A FROM BASE)!
 
resultcount :                     1
 
Enter command:
FETCH !
 
A            | B
-------------+-------------
abc          |        56532
 
resultcount :                     1
 
Enter command:
 
 
SELECT SUM(F) FROM T GROUP BY (SELECT A FROM BASE)!
 
***ERROR  -5010 Missing value specification                                0032
 
Enter command:
SELECT SUM(F) FROM T GROUP BY (SELECT A FROM T)!
 
***ERROR  -5010 Missing value specification                                0032
 
Enter command:
SELECT * FROM T ORDER BY (SELECT A FROM BASE)!
 
***ERROR  -5010 Missing value specification                                0027
 
Enter command:
 
 
SELECT '"', UPPER(
           (SELECT A
              FROM BASE
             WHERE A||'wert' > (SELECT A FROM BASE))), '"' FROM T !
 
resultcount :                     2
 
Enter command:
FETCH!
 
EXPRESSION1 | EXPRESSION2 | EXPRESSION3
------------+-------------+------------
"           | ABC         | "
"           | ABC         | "
 
resultcount :                     2
 
Enter command:
 
 
CREATE DBPROC A1(IN OID INT) AS
DECLARE C CURSOR FOR SELECT '"', (SELECT A FROM KERN.BASE), '"'
   FROM KERN.T ;
   STOP((SELECT F FROM KERN.BASE));
!
 
***ERROR  -5010 Missing value specification                                0117
 
Enter command:
CREATE DBPROC A2(IN OID INT) AS
DECLARE C CURSOR FOR SELECT '"', (SELECT A FROM KERN.BASE), '"'
   FROM KERN.T ;
   IF (SELECT A FROM KERN.BASE) > 'a'
   THEN
   STOP(3);
!
 
***ERROR  -7080 Query in IF statement not allowed                          0115
 
Enter command:
CREATE DBPROC A3(IN OID INT) AS
DECLARE C CURSOR FOR SELECT '"', (SELECT A FROM KERN.BASE), '"'
   FROM KERN.T ;
   WHILE (SELECT A FROM KERN.BASE) > 'a' DO
     STOP(3);
!
 
***ERROR  -7080 Query in WHILE statement not allowed                       0118
 
Enter command:
CREATE DBPROC A4(IN OID INT) AS
DECLARE C CURSOR FOR SELECT '"', (SELECT A FROM KERN.BASE), '"'
   FROM KERN.T ;
   INT MYINT;
   SET MYINT = (SELECT F FROM KERN.BASE);
!
 
***ERROR  -5015 Missing keyword:RETURN,FETCH,EXECUTE,DELETE,CLOSE,CALL,WHI 0111
 
Enter command:
CREATE DBPROC AGOOD(IN OID INT) AS
VAR
   MYINT INT;
   SET MYINT = OID + 3;
!
 
Enter command:
CALL AGOOD ((SELECT F FROM BASE))!
 
***ERROR  -5010 Missing value specification                                0014
 
Enter command:
 
INSERT T VALUES ((SELECT A FROM BASE WHERE BASE.A = T.A),
                 (SELECT F FROM BASE))!
 
***ERROR  -8010 Table name must be in from list                            0053
 
Enter command:
SELECT * FROM T !
 
resultcount :               unknown
 
Enter command:
FETCH !
 
A            | B
-------------+-------------
abc          |        56532
fed          |           -4
 
resultcount :                     2
 
Enter command:
 
DELETE T !
 
resultcount :                     2
 
Enter command:
INSERT T VALUES ('old', 4711)!
 
Enter command:
 
UPDATE T SET A = (SELECT A FROM BASE WHERE BASE.A <> T.A) !
 
resultcount :                     1
 
Enter command:
SELECT * INTO :A, :B FROM T !
 
A                 :  abc
B                 :          4711
 
Enter command:
UPDATE T SET A = 'new' || (SELECT A FROM BASE WHERE BASE.A = T.A) !
 
resultcount :                     1
 
Enter command:
SELECT * INTO :A, :B FROM T !
 
A                 :  newabc
B                 :          4711
 
Enter command:
UPDATE T SET A = (SELECT A FROM BASE WHERE BASE.A <> T.A) || 'new' !
 
resultcount :                     1
 
Enter command:
SELECT * INTO :A, :B FROM T !
 
A                 :  abcnew
B                 :          4711
 
Enter command:
 
SELECT A || '"' || (SELECT A FROM BASE WHERE BASE.A = T.A) || '"',
                                                           B FROM T !
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1            | B
-----------------------+-------------
?????????????????????? |         4711
 
resultcount :                     1
 
Enter command:
SELECT A || '"' || (SELECT A FROM BASE WHERE BASE.A <> T.A) || '"',
                                                           B FROM T !
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1            | B
-----------------------+-------------
abcnew"abc"            |         4711
 
resultcount :                     1
 
Enter command:
SELECT A || '"' || (SELECT SUBSTR(T.A, 1, 1) || A
                                 FROM BASE WHERE BASE.A = T.A) || '"',
                                                           B FROM T !
 
***ERROR  -7011 Correlated subquery not allowed                            0021
 
Enter command:
FETCH!
 
***ERROR    100 Row not found                                              0001
 
Enter command:
SELECT A || '"' || V.A || '"', B FROM T,
         (SELECT A FROM BASE WHERE BASE.A = T.A) V  !
 
***ERROR  -8010 Table name must be in from list                            0077
 
Enter command:
FETCH!
 
***ERROR    100 Row not found                                              0001
 
Enter command:
 
SELECT * FROM T !
 
resultcount :               unknown
 
Enter command:
FETCH!
 
A            | B
-------------+-------------
abcnew       |         4711
 
resultcount :                     1
 
Enter command:
SELECT * FROM BASE !
 
resultcount :               unknown
 
Enter command:
FETCH !
 
A        | F
---------+------------
abc      |        4711
 
resultcount :                     1
 
Enter command:
SELECT * FROM T
  WHERE A BETWEEN 'aaa' AND
               (SELECT A FROM BASE WHERE BASE.A =  T.A) || 'xyz'!
 
***ERROR    100 Row not found                                              0001
 
Enter command:
FETCH !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
SELECT * FROM T
  WHERE A BETWEEN 'aaa' AND
               (SELECT A FROM BASE WHERE BASE.A <> T.A) || 'xyz'!
 
resultcount :                     1
 
Enter command:
FETCH!
 
A            | B
-------------+-------------
abcnew       |         4711
 
resultcount :                     1
 
Enter command:
 
 
DELETE T !
 
resultcount :                     1
 
Enter command:
INSERT T VALUES ('old', 4711)!
 
Enter command:
 
UPDATE T SET A = 'new' || (SELECT A,B FROM BASE) !
 
***ERROR  -2013 Select column list too long                                0037
 
Enter command:
 
INSERT BASE VALUES ('def', 2)!
 
Enter command:
 
SELECT * FROM T
  WHERE A || 'xyz' = (SELECT A FROM BASE) || 'xyz' !
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
FETCH !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
 
DROP TABLE BASE!
 
Enter command:
DROP TABLE T!
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE FOO (ID FIXED(20) PRIMARY KEY,
X FIXED(20), Y FIXED(20))!
 
Enter command:
CREATE TABLE BAR (ID FIXED(20) PRIMARY KEY)!
 
Enter command:
PARSING !
 
Enter command:
SELECT * FROM FOO FOO1
 WHERE (? = (SELECT O2.ID FROM BAR O2 WHERE FOO1.X = O2.ID)) OR
     (? = (SELECT M3.ID FROM BAR M3 WHERE FOO1.Y = M3.ID)) !
parsing idnr :       1
 
Enter command:
SELECT * FROM FOO FOO1
 WHERE ((SELECT O2.ID FROM BAR O2 WHERE FOO1.X = O2.ID) = ?) OR
     ((SELECT M3.ID FROM BAR M3 WHERE FOO1.Y = M3.ID) = ?) !
parsing idnr :       2
 
Enter command:
PARS_EXECUTE !
 
Enter command:
ROLLBACK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE "OPS_FPO_WORKLOAD"
("MASTER_ID"               INTEGER    NOT NULL,
"OP_ID"               INTEGER,
"FPO_ID"               FIXED (14,0))!
 
Enter command:
CREATE TABLE "OP_MESSAGING"
("SENDER_OP_ID"               INTEGER,
"RECEIVER_OP_ID"               INTEGER,
"MSG_QUEUE"               VARCHAR (4000) ASCII,
"CREATED"               TIMESTAMP,
"UPDATED"               TIMESTAMP)!
 
Enter command:
CREATE TABLE "ACCOUNTS_OPS"
("OP_ID"               INTEGER,
"MASTER_ID"               INTEGER    NOT NULL,
"LOGIN"               VARCHAR (15) ASCII    NOT NULL,
"PASSWORD"               VARCHAR (15) ASCII,
"FIRST_NAME"               VARCHAR (40) ASCII,
"LAST_NAME"               VARCHAR (40) ASCII,
"EMAIL"               VARCHAR (40) ASCII,
"CREATED"               TIMESTAMP,
"LAST_LOGIN"               TIMESTAMP,
PRIMARY KEY ("OP_ID"))!
 
Enter command:
CREATE TABLE "OPS_ONLINE"
("OP_ID"               INTEGER    NOT NULL,
"MASTER_ID"               INTEGER    NOT NULL,
"LAST_FPO_RECEIVED"               TIMESTAMP,
"CREATED"               TIMESTAMP,
"UPDATED"               TIMESTAMP)!
 
Enter command:
CREATE TABLE "DEPARTMENTS"
("DEPT_ID"               INTEGER,
"MASTER_ID"               INTEGER    NOT NULL,
"NAME"               VARCHAR (50) ASCII,
"EMAIL"               VARCHAR (50) ASCII,
"CAN_INITIATE"               BOOLEAN,
"CAN_SHARE"               BOOLEAN,
"GREETING"               VARCHAR (120) ASCII,
"DEFAULT_IMAGE_OFFLINE"               VARCHAR (120) ASCII,
"DEFAULT_IMAGE_ONLINE"               VARCHAR (120) ASCII,
PRIMARY KEY ("DEPT_ID"))!
 
Enter command:
CREATE TABLE "DEPARTMENTS_ROSTER"
("DEPT_ID"               INTEGER    NOT NULL,
"OP_ID"               INTEGER    NOT NULL)!
 
Enter command:
 
SELECT
  AO.OP_ID,
  AO.FIRST_NAME,
  AO.LAST_NAME,
  D.NAME AS DEPT_NAME,
  D.DEPT_ID,
( SELECT
    COUNT(OPFPOW.OP_ID)
  FROM
    OPS_FPO_WORKLOAD OPFPOW
  WHERE
    OPFPOW.OP_ID=AO.OP_ID) AS FPO_COUNT
FROM
  ACCOUNTS_OPS AO,
  OPS_ONLINE OO,
  DEPARTMENTS D,
  DEPARTMENTS_ROSTER DR
WHERE
  AO.MASTER_ID=1 AND
  AO.OP_ID<>1 AND
  AO.OP_ID=OO.OP_ID AND
  AO.OP_ID=DR.OP_ID AND
  DR.DEPT_ID=D.DEPT_ID
ORDER BY
  D.NAME ASC!
 
***ERROR    100 Row not found                                              0001
 
Enter command:
SELECT
  AO.OP_ID,
  AO.FIRST_NAME,
  AO.LAST_NAME,
  D.NAME AS DEPT_NAME,
  D.DEPT_ID,
( SELECT
    COUNT(OPFPOW.OP_ID)
  FROM
    OPS_FPO_WORKLOAD OPFPOW
  WHERE
    OPFPOW.OP_ID=AO.OP_ID) AS FPO_COUNT,
( SELECT
    OM.MSG_QUEUE
  FROM
    OP_MESSAGING OM
  WHERE
    OM.SENDER_OP_ID=AO.OP_ID AND
    OM.RECEIVER_OP_ID=1) AS OP_MSG_QUEUE
FROM
  ACCOUNTS_OPS AO,
  OPS_ONLINE OO,
  DEPARTMENTS D,
  DEPARTMENTS_ROSTER DR
WHERE
  AO.MASTER_ID=1 AND
  AO.OP_ID<>1 AND
  AO.OP_ID=OO.OP_ID AND
  AO.OP_ID=DR.OP_ID AND
  DR.DEPT_ID=D.DEPT_ID
ORDER BY
  D.NAME ASC!
 
***ERROR    100 Row not found                                              0001
 
Enter command:
SELECT (SELECT MSGNO+MSGNO FROM DUAL) FROM SYSDBA.MESSAGES!
 
***ERROR  -7011 Correlated subquery not allowed                            0009
 
Enter command:
SELECT (SELECT MSGNO+MSGNO FROM DUAL) FROM SYSDBA.MESSAGES!
 
***ERROR  -7011 Correlated subquery not allowed                            0009
 
Enter command:
SELECT (SELECT MAX(1) FROM DUAL ) FROM DUAL !
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1
-----------
 1
 
resultcount :                     1
 
Enter command:
CREATE VIEW VMAX AS SELECT (SELECT MAX(1) FROM DUAL ) FROM DUAL !
 
Enter command:
SELECT * FROM VMAX !
 
*** SQLSTATEMENT HAS BEEN OPTIMIZED
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
 1
 
resultcount :                     1
 
Enter command:
ROLLBACK WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST SQLMODE ORACLE !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST SQLMODE ORACLE ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE TAB89P_1 (B CHAR (8), C INT)!
 
Enter command:
INSERT INTO TAB89P_1 VALUES ('milk', 1)!
 
Enter command:
INSERT INTO TAB89P_1 VALUES ('bread', 2)!
 
Enter command:
INSERT INTO TAB89P_1 VALUES ('butter', 12)!
 
Enter command:
CREATE TABLE TAB89P_2 (B CHAR (8), C INT)!
 
Enter command:
INSERT INTO TAB89P_2 VALUES ('milk', 0)!
 
Enter command:
INSERT INTO TAB89P_2 VALUES ('bread', 1)!
 
Enter command:
INSERT INTO TAB89P_2 VALUES ('butter', 30)!
 
Enter command:
CREATE TABLE TAB89P_3 (A INT, B CHAR (8), C INT)!
 
Enter command:
SELECT (SELECT B FROM TAB89P_1), (SELECT C FROM TAB89P_2) FROM DUAL!
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
INSERT INTO TAB89P_3 VALUES (2,
        (SELECT FT.B FROM TAB89P_1 FT, TAB89P_2 SC
          WHERE FT.B = SC.B AND FT.C < SC.C
UNION    SELECT SC.B FROM TAB89P_1 FT, TAB89P_2 SC
          WHERE FT.B = SC.B AND FT.C > SC.C),
3)!
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
INSERT INTO TAB89P_3 VALUES (20,
        (SELECT FT.B FROM TAB89P_1 FT, TAB89P_2 SC
          WHERE FT.B = SC.B AND FT.C < SC.C
UNION ALL SELECT SC.B FROM TAB89P_1 FT, TAB89P_2 SC
          WHERE FT.B = SC.B AND FT.C > SC.C),
30)!
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
INSERT INTO TAB89P_3 VALUES (
        (SELECT 3 FROM DUAL),
        (SELECT FT.B FROM TAB89P_1 FT, TAB89P_2 SC
          WHERE FT.B = SC.B AND FT.C > SC.C),
        (SELECT 4 FROM DUAL))!
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
INSERT INTO TAB89P_3 (A,B,C) VALUES (12,
        (SELECT FT.B FROM TAB89P_1 FT, TAB89P_2 SC
          WHERE FT.B = SC.B AND FT.C < SC.C
UNION    SELECT SC.B FROM TAB89P_1 FT, TAB89P_2 SC
          WHERE FT.B = SC.B AND FT.C > SC.C),
13)!
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
INSERT INTO TAB89P_3 VALUES (4,
        (SELECT FT.B FROM TAB89P_1 FT, TAB89P_2 SC
          WHERE FT.B = SC.B
MINUS   SELECT SC.B FROM TAB89P_1 FT, TAB89P_2 SC
          WHERE FT.B = SC.B AND FT.C > SC.C),
5)!
 
Enter command:
INSERT INTO TAB89P_3 VALUES (5,
        (SELECT FT.B FROM TAB89P_1 FT, TAB89P_2 SC
          WHERE FT.B = SC.B
MINUS   SELECT SC.B FROM TAB89P_1 FT, TAB89P_2 SC
          WHERE FT.B = SC.B AND FT.C < SC.C),
6)!
 
***ERROR  -7015 More than one result row not allowed                       0001
 
Enter command:
SELECT * FROM TAB89P_3!
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B, :C!
 
A                     | B        | C
----------------------+----------+----------------------
                    4 | butter   |                     5
 
resultcount :                     1
 
Enter command:
ROLLBACK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE I (
PLAN_BELEGNUMMER INTEGER,
SATZ_NR FIXED(3),
DATUM DATE DEFAULT DATE,
MENGE FLOAT(8) DEFAULT 0,
FERTIGENM1 CHAR(6),
FERTIGENMENGEM1  FLOAT(9) DEFAULT 0,
FERTIGENM2 CHAR(6),
FERTIGENMENGEM2  FLOAT(9) DEFAULT 0,
MATERIAL CHAR(6),
MATERIALMENGE INTEGER DEFAULT 0,
SAP_NR CHAR(10),
SAP_ERROR CHAR(255),
STORNIERT FIXED(1) DEFAULT 0,
STORNO_NR CHAR(10),
STORNIERDATUM DATE,
CONSTRAINT PK_I PRIMARY KEY (PLAN_BELEGNUMMER, SATZ_NR) )
!
 
Enter command:
CREATE TABLE ISTBELEG_SATZ (
PLAN_BELEGNUMMER INTEGER,
SATZ_NR FIXED(3),
DATUM DATE DEFAULT DATE,
MENGE FLOAT(8) DEFAULT 0,
FERTIGENM1 CHAR(6),
FERTIGENMENGEM1  FLOAT(9) DEFAULT 0,
FERTIGENM2 CHAR(6),
FERTIGENMENGEM2  FLOAT(9) DEFAULT 0,
MATERIAL CHAR(6),
MATERIALMENGE INTEGER DEFAULT 0,
SAP_NR CHAR(10),
SAP_ERROR CHAR(255),
STORNIERT FIXED(1) DEFAULT 0,
STORNO_NR CHAR(10),
STORNIERDATUM DATE,
CONSTRAINT PK_I PRIMARY KEY (PLAN_BELEGNUMMER, SATZ_NR) )
!
 
Enter command:
CREATE TABLE R_INFO( LAST_RUN DATE, MAX_PLAN_BELEGNUMMER INTEGER)!
 
Enter command:
INSERT INTO R_INFO VALUES ('20030415', 17)!
 
Enter command:
INSERT INTO ISTBELEG_SATZ
          (PLAN_BELEGNUMMER, SATZ_NR, STORNIERT, STORNIERDATUM)
   VALUES (10              , 1      , 0        , NULL)!
 
Enter command:
INSERT INTO ISTBELEG_SATZ
          (PLAN_BELEGNUMMER, SATZ_NR, STORNIERT, STORNIERDATUM)
   VALUES (12              , 1      , 1        , DATE)!
 
Enter command:
INSERT INTO ISTBELEG_SATZ
          (PLAN_BELEGNUMMER, SATZ_NR, STORNIERT, STORNIERDATUM)
   VALUES ( 8              , 1      , 1        , '20030331')!
 
Enter command:
SELECT * FROM ISTBELEG_SATZ WHERE PLAN_BELEGNUMMER <= (SELECT
MAX_PLAN_BELEGNUMMER FROM R_INFO) AND STORNIERT=1 AND STORNIERDATUM >
(SELECT LAST_RUN FROM R_INFO)!
 
resultcount :                     1
 
Enter command:
FETCH!
 
PLAN_BELEGNUMMER  :           12
SATZ_NR           :     1
DATUM             :  DATEXXXX
MENGE             :   0.0000000E+00
FERTIGENM1        :  ?????
FERTIGENMENGEM1   :   0.00000000E+00
FERTIGENM2        :  ?????
FERTIGENMENGEM2   :   0.00000000E+00
MATERIAL          :  ?????
MATERIALMENGE     :            0
SAP_NR            :  ?????
SAP_ERROR         :  ?????
STORNIERT         :   1
STORNO_NR         :  ?????
STORNIERDATUM     :  DATEXXXX
 
resultcount :                     1
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
INSERT INTO I SELECT * FROM ISTBELEG_SATZ WHERE PLAN_BELEGNUMMER <= (SELECT
MAX_PLAN_BELEGNUMMER FROM R_INFO) AND STORNIERT=1 AND STORNIERDATUM >
(SELECT LAST_RUN FROM R_INFO)!
 
Enter command:
SELECT PLAN_BELEGNUMMER, SATZ_NR, STORNIERT, STORNIERDATUM FROM I!
 
resultcount :               unknown
 
Enter command:
FETCH!
 
PLAN_BELEGNUMMER | SATZ_NR | STORNIERT | STORNIERDATUM
-----------------+---------+-----------+--------------
         12      |    1    |  1        | DATEXXXX
 
resultcount :                     1
 
Enter command:
ROLLBACK RELEASE !
 
Enter command:
SENDERID ODB !
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
INSERT INTO I SELECT * FROM ISTBELEG_SATZ WHERE PLAN_BELEGNUMMER <= (SELECT
MAX_PLAN_BELEGNUMMER FROM R_INFO) AND STORNIERT=1 AND
CHAR(STORNIERDATUM, ISO) >
CHAR((SELECT LAST_RUN FROM R_INFO), ISO)!
 
Enter command:
SELECT PLAN_BELEGNUMMER, SATZ_NR, STORNIERT, STORNIERDATUM FROM I!
 
resultcount :               unknown
 
Enter command:
FETCH!
 
PLAN_BELEGNUMMER | SATZ_NR | STORNIERT | STORNIERDATUM
-----------------+---------+-----------+--------------
         12      |    1    |  1        | YYYY-MM-DD
 
resultcount :                     1
 
Enter command:
ROLLBACK!
 
Enter command:
INSERT INTO I SELECT * FROM ISTBELEG_SATZ WHERE PLAN_BELEGNUMMER <= (SELECT
MAX_PLAN_BELEGNUMMER FROM R_INFO) AND STORNIERT=1 AND
CHAR(STORNIERDATUM, ISO) >
CHAR(ADDDATE ((SELECT LAST_RUN FROM R_INFO), 1), ISO)!
 
Enter command:
SELECT PLAN_BELEGNUMMER, SATZ_NR, STORNIERT, STORNIERDATUM FROM I!
 
resultcount :               unknown
 
Enter command:
FETCH!
 
PLAN_BELEGNUMMER | SATZ_NR | STORNIERT | STORNIERDATUM
-----------------+---------+-----------+--------------
         12      |    1    |  1        | YYYY-MM-DD
 
resultcount :                     1
 
Enter command:
ROLLBACK!
 
Enter command:
INSERT INTO I (PLAN_BELEGNUMMER, SATZ_NR, STORNIERT, STORNIERDATUM)
   SELECT 20, 1, 1,(SELECT LAST_RUN FROM R_INFO) FROM DUAL!
 
Enter command:
SELECT PLAN_BELEGNUMMER, SATZ_NR, STORNIERT, STORNIERDATUM FROM I!
 
resultcount :               unknown
 
Enter command:
FETCH!
 
PLAN_BELEGNUMMER | SATZ_NR | STORNIERT | STORNIERDATUM
-----------------+---------+-----------+--------------
         20      |    1    |  1        | YYYY-MM-DD
 
resultcount :                     1
 
Enter command:
ROLLBACK!
 
Enter command:
INSERT INTO I SELECT * FROM ISTBELEG_SATZ WHERE PLAN_BELEGNUMMER <= (SELECT
MAX_PLAN_BELEGNUMMER FROM R_INFO) AND STORNIERT=1 AND STORNIERDATUM >
(SELECT LAST_RUN FROM R_INFO)!
 
Enter command:
SELECT PLAN_BELEGNUMMER, SATZ_NR, STORNIERT, STORNIERDATUM FROM I!
 
resultcount :               unknown
 
Enter command:
FETCH!
 
PLAN_BELEGNUMMER | SATZ_NR | STORNIERT | STORNIERDATUM
-----------------+---------+-----------+--------------
         12      |    1    |  1        | YYYY-MM-DD
 
resultcount :                     1
 
Enter command:
ROLLBACK RELEASE !
 
Enter command:
SENDERID XCI !
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
DROP TABLE I !
 
Enter command:
DROP TABLE ISTBELEG_SATZ!
 
Enter command:
DROP TABLE R_INFO !
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T ( A FIXED (18,2), B INT)!
 
Enter command:
INSERT T VALUES (1.23, 1)!
 
Enter command:
INSERT T VALUES (2.34, 2)!
 
Enter command:
CREATE TABLE T2 ( C CHAR (8))!
 
Enter command:
INSERT T2 VALUES ('abc')!
 
Enter command:
DECLARE CURS CURSOR FOR
SELECT C, (SELECT SUM(A) FROM T) FROM T2 !
 
resultcount :                     1
 
Enter command:
FETCH CURS!
 
C        | EXPRESSION1
---------+---------------------------------------------
abc      |  3.5700000000000000000000000000000000000E+00
 
resultcount :                     1
 
Enter command:
DECLARE CURS CURSOR FOR
SELECT C, (SELECT SUM(A) FROM T) MYSUM FROM T2 !
 
resultcount :                     1
 
Enter command:
FETCH CURS!
 
C        | MYSUM
---------+---------------------------------------------
abc      |  3.5700000000000000000000000000000000000E+00
 
resultcount :                     1
 
Enter command:
SELECT COLUMNNAME, DATATYPE, LEN, DEC FROM COLUMNS
  WHERE TABLENAME = 'CURS' !
 
resultcount :                     2
 
Enter command:
FETCH!
 
COLUMNNAME                       | DATATYPE   | LEN   | DEC
---------------------------------+------------+-------+-----
C                                | CHAR       |     8 | ????
MYSUM                            | FLOAT      |    38 | ????
 
resultcount :                     2
 
Enter command:
ROLLBACK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE XY ( K INT, A INT )!
 
Enter command:
INSERT INTO XY VALUES (1,2)!
 
Enter command:
SELECT 1+MAX(K) FROM XY!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
------------
           2
 
resultcount :                     1
 
Enter command:
SELECT (SELECT K FROM XY)+1 FROM XY!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
------------
           2
 
resultcount :                     1
 
Enter command:
SELECT (SELECT K FROM XY)+MAX(K) FROM XY!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
------------
           2
 
resultcount :                     1
 
Enter command:
SELECT FIXED ((SELECT K FROM XY), 10, 0)+MAX(K) FROM XY!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
------------
           2
 
resultcount :                     1
 
Enter command:
SELECT (SELECT K FROM XY)+A FROM XY!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
------------
           3
 
resultcount :                     1
 
Enter command:
SELECT MAX(K+(SELECT K FROM XY )) FROM XY !
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
------------
           2
 
resultcount :                     1
 
Enter command:
ROLLBACK RELEASE !
 
Enter command:
 * PTS 1136877, 1137020/1 !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE DT ( A INT )!
 
Enter command:
SELECT SUM(A+1)+2, 'hallo' FROM DT !
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1                                  | EXPRESSION2
---------------------------------------------+------------
???????????????????????????????????????????? | hallo
 
resultcount :                     1
 
Enter command:
SELECT SUM(A+1)+2, (SELECT * FROM DUAL) FROM DT !
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1                                  | EXPRESSION2
---------------------------------------------+------------
???????????????????????????????????????????? | a
 
resultcount :                     1
 
Enter command:
SELECT SUM(A+1)+2, (SELECT * FROM DUAL UNION SELECT * FROM DUAL)
FROM DT!
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1                                  | EXPRESSION2
---------------------------------------------+------------
???????????????????????????????????????????? | a
 
resultcount :                     1
 
Enter command:
SELECT * FROM DUAL WHERE EXISTS ( SELECT COUNT(*) FROM DUAL )!
 
resultcount :                     1
 
Enter command:
FETCH!
 
DUMMY
-----
a
 
resultcount :                     1
 
Enter command:
SELECT * FROM DUAL WHERE EXISTS ( SELECT (SELECT * FROM DUAL) FROM DUAL )!
 
resultcount :                     1
 
Enter command:
FETCH!
 
DUMMY
-----
a
 
resultcount :                     1
 
Enter command:
PARS_THEN_EX!
 
Enter command:
DATA!
 
Enter command:
SELECT * FROM DUAL WHERE EXISTS ( SELECT :A + 1 FROM DUAL )!
 
n 38 1
 
resultcount :                     1
 
Enter command:
NODATA!
 
Enter command:
FETCH!
 
DUMMY
-----
a
 
resultcount :                     1
 
Enter command:
 
PARS_EXECUTE!
 
Enter command:
ROLLBACK RELEASE !
 
Enter command:
 * PTS 1138682/3 !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
SELECT (SELECT * FROM DUAL) Y
FROM DUAL!
 
resultcount :                     1
 
Enter command:
SELECT (SELECT * FROM DUAL UNION SELECT * FROM DUAL) Y
FROM DUAL!
 
resultcount :                     1
 
Enter command:
SELECT (SELECT * FROM DUAL UNION SELECT * FROM DUAL)
FROM DUAL!
 
resultcount :                     1
 
Enter command:
ROLLBACK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST!
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
 CREATE TABLE "TBL_STAFFELRUECKM"
(
 "LFD_RUECKFRAGENUMMER"               INTEGER    NOT NULL,
 "ANGEFR_VOLUMEN"               INTEGER    NOT NULL,
 "ID"               FIXED (2,0),
 "ZIELPREIS"               FIXED (10,2),
 "ID1"               FIXED (2,0),
 "ZIELPREIS_WKZ"               FIXED (10,2),
 "LFD_STAFFELNR"               FIXED (10,0)    NOT NULL    DEFAULT
SERIAL (1),
 "STAFFELNRTBL_TEILE"               INTEGER,
 PRIMARY KEY ("LFD_STAFFELNR"))!
 
Enter command:
INSERT TBL_STAFFELRUECKM VALUES (1,2,3,4,5,6,0,1)!
 
Enter command:
SELECT CASE WHEN EXISTS (SELECT LFD_RUECKFRAGENUMMER FROM
TBL_STAFFELRUECKM WHERE LFD_RUECKFRAGENUMMER = 1) THEN 1 ELSE -5678
END FROM TBL_STAFFELRUECKM!
 
resultcount :                     1
 
Enter command:
FETCH !
 
EXPRESSION1
-----------
    1
 
resultcount :                     1
 
Enter command:
ROLLBACK RELEASE !
 
Enter command:
FILE CONNECT ( SUT SUT!
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE BUT000 (
CLIENT VARCHAR( 3),
PARTNER VARCHAR( 10),
TYPE VARCHAR( 1),
BPKIND VARCHAR( 4),
BU_GROUP VARCHAR( 4),
BPEXT VARCHAR( 20),
BU_SORT1 VARCHAR( 20),
BU_SORT2 VARCHAR( 20),
SOURCE VARCHAR( 4),
TITLE VARCHAR( 4),
XDELE VARCHAR( 1),
XBLCK VARCHAR( 1),
AUGRP VARCHAR( 4),
TITLE_LET VARCHAR( 50),
BU_LOGSYS VARCHAR( 10),
CONTACT VARCHAR( 1),
NOT_RELEASED VARCHAR( 1),
NAME_ORG1 VARCHAR( 40),
NAME_ORG2 VARCHAR( 40),
NAME_ORG3 VARCHAR( 40),
NAME_ORG4 VARCHAR( 40),
LEGAL_ENTY VARCHAR( 2),
IND_SECTOR VARCHAR( 10),
LEGAL_ORG VARCHAR( 2),
FOUND_DAT VARCHAR( 8),
LIQUID_DAT VARCHAR( 8),
LOCATION_1 VARCHAR( 7),
LOCATION_2 VARCHAR( 5),
LOCATION_3 VARCHAR( 1),
NAME_LAST VARCHAR( 40),
NAME_FIRST VARCHAR( 40),
NAME_LST2 VARCHAR( 40),
NAME_LAST2 VARCHAR( 40),
NAMEMIDDLE VARCHAR( 40),
TITLE_ACA1 VARCHAR( 4),
TITLE_ACA2 VARCHAR( 4),
TITLE_ROYL VARCHAR( 4),
PREFIX1 VARCHAR( 4),
PREFIX2 VARCHAR( 4),
NAME1_TEXT VARCHAR( 80),
NICKNAME VARCHAR( 40),
INITIALS VARCHAR( 10),
NAMEFORMAT VARCHAR( 2),
NAMCOUNTRY VARCHAR( 3),
LANGU_CORR VARCHAR( 1),
XSEXM VARCHAR( 1),
XSEXF VARCHAR( 1),
BIRTHPL VARCHAR( 40),
MARST VARCHAR( 1),
EMPLO VARCHAR( 35),
JOBGR VARCHAR( 4),
NATIO VARCHAR( 3),
CNTAX VARCHAR( 3),
CNDSC VARCHAR( 3),
PERSNUMBER VARCHAR( 10),
XSEXU VARCHAR( 1),
XUBNAME VARCHAR( 12),
BU_LANGU VARCHAR( 1),
BIRTHDT VARCHAR( 8),
DEATHDT VARCHAR( 8),
PERNO VARCHAR( 8),
CHILDREN VARCHAR( 2),
MEM_HOUSE FIXED ( 2,0),
PARTGRPTYP VARCHAR( 4),
NAME_GRP1 VARCHAR( 40),
NAME_GRP2 VARCHAR( 40),
MC_NAME1 VARCHAR( 35),
MC_NAME2 VARCHAR( 35),
CRUSR VARCHAR( 12),
CRDAT VARCHAR( 8),
CRTIM VARCHAR( 6),
CHUSR VARCHAR( 12),
CHDAT VARCHAR( 8),
CHTIM VARCHAR( 6),
PARTNER_GUID CHAR ( 16) BYTE,
ADDRCOMM VARCHAR( 10),
NATPERS VARCHAR( 1),
BP_EEW_DUMMY VARCHAR( 1),
TD_SWITCH VARCHAR( 1),
PRIMARY KEY (CLIENT,PARTNER))!
 
Enter command:
CREATE INDEX "BUT000~EXT" ON BUT000 (CLIENT, BPEXT)!
 
Enter command:
CREATE INDEX "BUT000~GUI" ON BUT000 (CLIENT, PARTNER_GUID)!
 
Enter command:
CREATE INDEX "BUT000~NAM" ON BUT000 (CLIENT, MC_NAME1)!
 
Enter command:
CREATE INDEX "BUT000~SRT" ON BUT000 (CLIENT, BU_SORT1, BU_SORT2)!
 
Enter command:
 
CREATE TABLE BUT020 (
CLIENT VARCHAR( 3),
PARTNER VARCHAR( 10),
ADDRNUMBER VARCHAR( 10),
XDFADR VARCHAR( 1),
ADEXT VARCHAR( 20),
DATE_FROM VARCHAR( 8),
NATION VARCHAR( 1),
GUID VARCHAR( 32),
ADDRESS_GUID CHAR ( 16) BYTE,
MOVE_ADDR VARCHAR( 10),
ADDR_VALID_FROM FIXED ( 15),
ADDR_VALID_TO FIXED ( 15),
ADDR_MOVE_DATE FIXED ( 15),
PRIMARY KEY (CLIENT,PARTNER,ADDRNUMBER))!
 
Enter command:
CREATE INDEX "BUT020~ADR" ON BUT020 (CLIENT,ADDRNUMBER)!
 
Enter command:
CREATE INDEX "BUT020~EXT" ON BUT020 (CLIENT,ADEXT)!
 
Enter command:
CREATE INDEX "BUT020~GUI" ON BUT020 (CLIENT,ADDRESS_GUID)!
 
Enter command:
CREATE INDEX "BUT020~MAD" ON BUT020 (CLIENT,MOVE_ADDR)!
 
Enter command:
 
CREATE TABLE BUT100 (
MANDT VARCHAR( 3),
PARTNER VARCHAR( 10),
RLTYP VARCHAR( 6),
DFVAL VARCHAR( 20),
VALID_FROM FIXED ( 15),
VALID_TO FIXED ( 15),
PRIMARY KEY (MANDT, PARTNER, RLTYP, DFVAL))!
 
Enter command:
CREATE INDEX "BUT100~ROL" ON BUT100 (MANDT, RLTYP, DFVAL)!
 
Enter command:
 
CREATE TABLE ADRC (
CLIENT VARCHAR( 3),
ADDRNUMBER VARCHAR( 10),
DATE_FROM VARCHAR( 8),
NATION VARCHAR( 1),
DATE_TO VARCHAR( 8),
TITLE VARCHAR( 4),
NAME1 VARCHAR( 40),
NAME2 VARCHAR( 40),
NAME3 VARCHAR( 40),
NAME4 VARCHAR( 40),
NAME_TEXT VARCHAR( 50),
NAME_CO VARCHAR( 40),
CITY1 VARCHAR( 40),
CITY2 VARCHAR( 40),
CITY_CODE VARCHAR( 12),
CITYP_CODE VARCHAR( 8),
HOME_CITY VARCHAR( 40),
CITYH_CODE VARCHAR( 12),
CHCKSTATUS VARCHAR( 1),
REGIOGROUP VARCHAR( 8),
POST_CODE1 VARCHAR( 10),
POST_CODE2 VARCHAR( 10),
POST_CODE3 VARCHAR( 10),
PCODE1_EXT VARCHAR( 10),
PCODE2_EXT VARCHAR( 10),
PCODE3_EXT VARCHAR( 10),
PO_BOX VARCHAR( 10),
DONT_USE_P VARCHAR( 4),
PO_BOX_NUM VARCHAR( 1),
PO_BOX_LOC VARCHAR( 40),
CITY_CODE2 VARCHAR( 12),
PO_BOX_REG VARCHAR( 3),
PO_BOX_CTY VARCHAR( 3),
POSTALAREA VARCHAR( 15),
TRANSPZONE VARCHAR( 10),
STREET VARCHAR( 60),
DONT_USE_S VARCHAR( 4),
STREETCODE VARCHAR( 12),
STREETABBR VARCHAR( 2),
HOUSE_NUM1 VARCHAR( 10),
HOUSE_NUM2 VARCHAR( 10),
HOUSE_NUM3 VARCHAR( 10),
STR_SUPPL1 VARCHAR( 40),
STR_SUPPL2 VARCHAR( 40),
STR_SUPPL3 VARCHAR( 40),
LOCATION VARCHAR( 40),
BUILDING VARCHAR( 20),
"FLOOR" VARCHAR( 10),
ROOMNUMBER VARCHAR( 10),
COUNTRY VARCHAR( 3),
LANGU VARCHAR( 1),
REGION VARCHAR( 3),
ADDR_GROUP VARCHAR( 4),
FLAGGROUPS VARCHAR( 1),
PERS_ADDR VARCHAR( 1),
SORT1 VARCHAR( 20),
SORT2 VARCHAR( 20),
SORT_PHN VARCHAR( 20),
DEFLT_COMM VARCHAR( 3),
TEL_NUMBER VARCHAR( 30),
TEL_EXTENS VARCHAR( 10),
FAX_NUMBER VARCHAR( 30),
FAX_EXTENS VARCHAR( 10),
FLAGCOMM2 VARCHAR( 1),
FLAGCOMM3 VARCHAR( 1),
FLAGCOMM4 VARCHAR( 1),
FLAGCOMM5 VARCHAR( 1),
FLAGCOMM6 VARCHAR( 1),
FLAGCOMM7 VARCHAR( 1),
FLAGCOMM8 VARCHAR( 1),
FLAGCOMM9 VARCHAR( 1),
FLAGCOMM10 VARCHAR( 1),
FLAGCOMM11 VARCHAR( 1),
FLAGCOMM12 VARCHAR( 1),
FLAGCOMM13 VARCHAR( 1),
ADDRORIGIN VARCHAR( 4),
MC_NAME1 VARCHAR( 25),
MC_CITY1 VARCHAR( 25),
MC_STREET VARCHAR( 25),
EXTENSION1 VARCHAR( 40),
EXTENSION2 VARCHAR( 40),
TIME_ZONE VARCHAR( 6),
TAXJURCODE VARCHAR( 15),
ADDRESS_ID VARCHAR( 10),
LANGU_CREA VARCHAR( 1),
PRIMARY KEY (CLIENT, ADDRNUMBER,DATE_FROM, NATION))!
 
Enter command:
CREATE INDEX "ADRC~I01" ON ADRC (MC_NAME1)!
 
Enter command:
CREATE INDEX "ADRC~I03" ON ADRC (MC_CITY1)!
 
Enter command:
CREATE INDEX "ADRC~I09" ON ADRC (MC_STREET)!
 
Enter command:
CREATE INDEX "ADRC~I13" ON ADRC (SORT1)!
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE CONNECT ( SUT SUT!
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
PARSING !
 
Enter command:
EXPLAIN SELECT DISTINCT  T_00 . "PARTNER_GUID" ,
                  T_01 . "ADDRNUMBER"
    FROM "BUT000" T_00 , "BUT020" T_01
   WHERE ( T_01 . "CLIENT" =  '001'
          AND T_00 . "PARTNER" = T_01 . "PARTNER" )
          AND T_00 . "CLIENT" =  '001'
          AND T_00 . "PARTNER" =  '0000860105'
          AND T_00 . "PARTNER" IN
             ( SELECT T_100 . "PARTNER"
                    FROM "BUT100" T_100
                   WHERE T_100 . "MANDT" =  '001'
                     AND T_100 . "PARTNER" =  '0000860105'  )
          AND T_01 . "ADDRNUMBER" IN
             ( SELECT T_200 . "ADDRNUMBER"
                 FROM "ADRC" T_200
                WHERE T_200 . "CLIENT" =  '001'  )!
parsing idnr :       1
 
Enter command:
PARS_EXECUTE !
 
Enter command:
DROP TABLE BUT000!
 
Enter command:
DROP TABLE BUT020!
 
Enter command:
DROP TABLE BUT100!
 
Enter command:
DROP TABLE ADRC!
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE TAB ( A INT )!
 
Enter command:
INSERT INTO TAB VALUES ( 1 )!
 
Enter command:
INSERT INTO TAB VALUES ( 2 )!
 
Enter command:
SELECT /*+QUERYREWRITE_NO*/ * FROM TAB
WHERE A = (SELECT MAX(A) FROM TAB )!
 
resultcount :                     1
 
Enter command:
FETCH!
 
A
-----------
          2
 
resultcount :                     1
 
Enter command:
SELECT /*+QUERYREWRITE_NO*/ * FROM TAB
WHERE (A,A) = ANY ( SELECT MAX(A),MAX(A) FROM TAB )!
 
resultcount :                     1
 
Enter command:
FETCH!
 
A
-----------
          2
 
resultcount :                     1
 
Enter command:
SELECT /*+QUERYREWRITE_NO*/ * FROM TAB
WHERE (A,A) = ( SELECT MAX(A),MAX(A) FROM TAB )!
 
resultcount :                     1
 
Enter command:
FETCH!
 
A
-----------
          2
 
resultcount :                     1
 
Enter command:
ROLLBACK RELEASE !
 
Enter command:
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
SELECT /*+QUERYREWRITE_NO*/ * FROM ( SELECT * FROM DUAL  ) X
WHERE X.DUMMY IN
 ( SELECT T1.DUMMY FROM DUAL T1, DUAL T2
 WHERE T1.DUMMY=T2.DUMMY )!
 
resultcount :                     1
 
Enter command:
SELECT /*+QUERYREWRITE_NO*/ * FROM ( SELECT * FROM DUAL  ) X
WHERE X.DUMMY IN
 ( SELECT T1.DUMMY FROM DUAL T1, DUAL T2
 WHERE T1.DUMMY=T2.DUMMY )!
 
resultcount :                     1
 
Enter command:
SELECT /*+QUERYREWRITE_NO*/ * FROM ( SELECT * FROM DUAL  ) X
WHERE X.DUMMY IN
 ( SELECT T1.DUMMY FROM DUAL T1, DUAL T2
 WHERE T1.DUMMY=T2.DUMMY )!
 
resultcount :                     1
 
Enter command:
SELECT /*+QUERYREWRITE_NO*/ * FROM ( SELECT * FROM DUAL  ) X
WHERE X.DUMMY IN
 ( SELECT T1.DUMMY FROM DUAL T1 )!
 
resultcount :                     1
 
Enter command:
SELECT /*+QUERYREWRITE_NO*/ * FROM ( SELECT * FROM DUAL  ) X
WHERE X.DUMMY IN
 ( SELECT T1.DUMMY FROM DUAL T1 )!
 
resultcount :                     1
 
Enter command:
SELECT /*+QUERYREWRITE_NO*/ * FROM ( SELECT * FROM DUAL  ) X
WHERE X.DUMMY IN
 ( SELECT T1.DUMMY FROM DUAL T1 )!
 
resultcount :                     1
 
Enter command:
ROLLBACK RELEASE !
 
Enter command:
FILE SHUTDWNK !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE SHUTDOWN !
 
Enter command:
DBMCLI SUPERDBA,COLDUSER!
UTIL_CONNECT SUT,SUT!
OK
 
DB_OFFLINE!
OK
 
BYE!
 
Enter command:
VDNEXIT !
SESSION END
 
