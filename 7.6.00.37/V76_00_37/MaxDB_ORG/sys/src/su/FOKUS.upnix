FOKUS.vdnts
 
Enter command:
FILE XINITDBK !
 
Enter command:
FILE XRESTORE !
 
Enter command:
DBMCLI SUPERDBA,COLDUSER!
UTIL_CONNECT SUPERDBA,COLDUSER!
OK
 
BACKUP_RESTORE XINITDB DATA!
OK
Returncode           0
Date                 DATEXXXX
Time                 TIMEYYYY
Server               <servernode>
Database             <serverdb>
Kernel Version       KERNEL    vv.vv.vv Build bbb-bbb-bbb-bbb
Pages Transferred    000
Pages Left           0
Volumes              1
Medianame            xinitdb
Location             xinitdb.sav
Errortext
Label                <label>
Is Consistent        true
First LOG Page       000
Last LOG Page
DB Stamp 1 Date      DATEXXXX
DB Stamp 1 Time      TIMEYYYY
DB Stamp 2 Date
DB Stamp 2 Time
Page Count           000
Devices Used         1
Database ID          <servernode>:<serverdb>_DATEXXXX_<timestamp>
Max Used Data Page  000
Converter Page Count 8
 
UTIL_EXECUTE CLEAR LOG!
OK
 
DB_ONLINE!
OK
 
UTIL_RELEASE!
OK
 
UTIL_CONNECT SUT,SUT!
OK
 
UTIL_RELEASE!
OK
 
BYE!
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT!
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST SQLMODE ORACLE !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST SQLMODE ORACLE ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE MITARBEITER (
   MA_ID        NUMBER (3) NOT NULL PRIMARY KEY,
   NAME         CHAR (30)  NOT NULL,
   SOLL_STUNDEN NUMBER (3) NOT NULL)!
 
Enter command:
INSERT INTO MITARBEITER VALUES (1, 'Ladewig', 40)!
 
Enter command:
INSERT INTO MITARBEITER VALUES (2, 'Schweiberger', 40)!
 
Enter command:
INSERT INTO MITARBEITER VALUES (3, 'Crossley', 20)!
 
Enter command:
INSERT INTO MITARBEITER VALUES (4, 'Ellis', 20)!
 
Enter command:
CREATE TABLE PROJEKT (
   PROJEKTID   NUMBER(3) NOT NULL PRIMARY KEY,
   ITS_NAME  CHAR(30) NOT NULL)!
 
Enter command:
INSERT INTO PROJEKT VALUES (1, 'Beratung IT Verlag')!
 
Enter command:
INSERT INTO PROJEKT VALUES (2, 'Loesung SQL Reatsel')!
 
Enter command:
INSERT INTO PROJEKT VALUES (3, 'Uebersetzung/Dokumentation')!
 
Enter command:
INSERT INTO PROJEKT VALUES (4, 'Vernetzung IT Verlag')!
 
Enter command:
CREATE TABLE PROJEKT_ZUORDNUNG (
   MA_ID                NUMBER (3) NOT NULL REFERENCES MITARBEITER,
   PROJEKTID           NUMBER (3) NOT NULL REFERENCES PROJEKT,
   ZEIT_ANTEIL_PROZENT  NUMBER (3),
        PRIMARY KEY (MA_ID, PROJEKTID))!
 
Enter command:
INSERT INTO PROJEKT_ZUORDNUNG VALUES (1, 1, 50)!
 
Enter command:
INSERT INTO PROJEKT_ZUORDNUNG VALUES (1, 2, 50)!
 
Enter command:
INSERT INTO PROJEKT_ZUORDNUNG VALUES (2, 1, 30)!
 
Enter command:
INSERT INTO PROJEKT_ZUORDNUNG VALUES (2, 2, 60)!
 
Enter command:
INSERT INTO PROJEKT_ZUORDNUNG VALUES (2, 3, 10)!
 
Enter command:
INSERT INTO PROJEKT_ZUORDNUNG VALUES (3, 2, 10)!
 
Enter command:
INSERT INTO PROJEKT_ZUORDNUNG VALUES (3, 3, 90)!
 
Enter command:
CREATE TABLE PROJZEIT (
   MA_ID       NUMBER (3) NOT NULL,
   PROJEKTID  NUMBER(3) NOT NULL,
   DATUM       DATE NOT NULL,
   WOCHE       NUMBER (4) NOT NULL,
   STUNDEN     NUMBER (2) NOT NULL,
        PRIMARY KEY (MA_ID, PROJEKTID, DATUM),
        FOREIGN KEY (MA_ID, PROJEKTID) REFERENCES PROJEKT_ZUORDNUNG)!
 
Enter command:
INSERT INTO PROJZEIT VALUES (1, 1, '21-JUN-93', 9325, 8)!
 
Enter command:
INSERT INTO PROJZEIT VALUES (1, 1, '22-JUN-93', 9325, 8)!
 
Enter command:
INSERT INTO PROJZEIT VALUES (1, 2, '23-JUN-93', 9325, 8)!
 
Enter command:
INSERT INTO PROJZEIT VALUES (1, 2, '24-JUN-93', 9325, 8)!
 
Enter command:
INSERT INTO PROJZEIT VALUES (1, 2, '25-JUN-93', 9325, 8)!
 
Enter command:
INSERT INTO PROJZEIT VALUES (2, 1, '21-JUN-93', 9325, 8)!
 
Enter command:
INSERT INTO PROJZEIT VALUES (2, 1, '22-JUN-93', 9325, 8)!
 
Enter command:
INSERT INTO PROJZEIT VALUES (2, 2, '23-JUN-93', 9325, 8)!
 
Enter command:
INSERT INTO PROJZEIT VALUES (2, 2, '24-JUN-93', 9325, 8)!
 
Enter command:
INSERT INTO PROJZEIT VALUES (2, 2, '25-JUN-93', 9325, 8)!
 
Enter command:
INSERT INTO PROJZEIT VALUES (3, 2, '21-JUN-93', 9325, 4)!
 
Enter command:
INSERT INTO PROJZEIT VALUES (3, 3, '21-JUN-93', 9325, 4)!
 
Enter command:
INSERT INTO PROJZEIT VALUES (3, 3, '22-JUN-93', 9325, 8)!
 
Enter command:
INSERT INTO PROJZEIT VALUES (3, 3, '23-JUN-93', 9325, 8)!
 
Enter command:
INSERT INTO PROJZEIT VALUES (3, 3, '24-JUN-93', 9325, 8)!
 
Enter command:
INSERT INTO PROJZEIT VALUES (3, 3, '25-JUN-93', 9325, 8)!
 
Enter command:
COMMIT WORK !
 
Enter command:
SELECT MITARBEITER.NAME,
       PROJEKT.ITS_NAME
  FROM MITARBEITER, PROJEKT_ZUORDNUNG, PROJEKT
 WHERE MITARBEITER.MA_ID = PROJEKT_ZUORDNUNG.MA_ID
   AND PROJEKT_ZUORDNUNG.PROJEKTID = PROJEKT.PROJEKTID
 AND (MITARBEITER.SOLL_STUNDEN * PROJEKT_ZUORDNUNG.ZEIT_ANTEIL_PROZENT)
        / 100
     > (SELECT NVL(SUM(PROJZEIT.STUNDEN), 0)
          FROM PROJZEIT
         WHERE PROJZEIT.MA_ID = MITARBEITER.MA_ID
           AND PROJZEIT.PROJEKTID = PROJEKT.PROJEKTID
           AND WOCHE = 9325)!
 
resultcount :                     0
 
Enter command:
FETCH INTO :MA, :PR !
 
NAME                           | ITS_NAME
-------------------------------+-------------------------------
Ladewig                        | Beratung IT Verlag
Schweiberger                   | Uebersetzung/Dokumentation
 
resultcount :                     2
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST  !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
DECLARE R_PRO CURSOR FOR
SELECT A.MA_ID, A.PROJEKTID, FIXED ( ((A.ABSH/SOLL_STUNDEN)*100), 3, 1) RELH
       FROM MITARBEITER M,
            ( SELECT MA_ID, PROJEKTID, SUM(STUNDEN) ABSH
                     FROM PROJZEIT GROUP BY MA_ID, PROJEKTID ) A
       WHERE A.MA_ID = M.MA_ID
 UNION
SELECT MA_ID, PROJEKTID, 0
       FROM PROJEKT_ZUORDNUNG ZU
       WHERE NOT EXISTS ( SELECT * FROM PROJZEIT ZE WHERE
                                 (ZU.MA_ID      = ZE.MA_ID) AND
                                 (ZU.PROJEKTID = ZE.PROJEKTID)) !
 
resultcount :                     7
 
Enter command:
FETCH R_PRO !
 
MA_ID | PROJEKTID | RELH
------+-----------+------
   2  |    3      |   0.0
   1  |    1      |  40.0
   3  |    2      |  20.0
   2  |    1      |  40.0
   1  |    2      |  60.0
   2  |    2      |  60.0
   3  |    3      | #####
 
resultcount :                     7
 
Enter command:
SELECT SOLL.MA_ID, SOLL.NAME, ITS_NAME, SOLL, GELEISTET
    FROM
    (SELECT FIXED (SUM (STUNDEN), 5,2) GELEISTET, MA_ID, PROJEKTID
       FROM PROJZEIT
       GROUP BY MA_ID, PROJEKTID
     UNION
     SELECT 0, MA_ID, PROJEKTID FROM PROJEKT_ZUORDNUNG WHERE
        CHR (MA_ID) || CHR (PROJEKTID) NOT IN
          (SELECT CHR(MA_ID) || CHR (PROJEKTID) FROM PROJZEIT)
    ) GELEISTET,
    (SELECT A.MA_ID, A.NAME, B.PROJEKTID, ITS_NAME,
       FIXED (SOLL_STUNDEN / 100 * ZEIT_ANTEIL_PROZENT, 5, 2) SOLL
                    FROM MITARBEITER A,
                    PROJEKT_ZUORDNUNG B,
                    PROJEKT WHERE A.MA_ID = B.MA_ID AND
                    B.PROJEKTID = PROJEKT.PROJEKTID) SOLL
WHERE
SOLL.MA_ID      = GELEISTET.MA_ID      AND
SOLL.PROJEKTID = GELEISTET.PROJEKTID AND
SOLL > GELEISTET !
 
resultcount :                     2
 
Enter command:
FETCH !
 
MA_ID             :     2
NAME              :  Schweiberger
ITS_NAME          :  Uebersetzung/Dokumentation
SOLL              :     4.00
GELEISTET         :     0.00
---------------------------------------------------
MA_ID             :     1
NAME              :  Ladewig
ITS_NAME          :  Beratung IT Verlag
SOLL              :    20.00
GELEISTET         :    16.00
 
resultcount :                     2
 
Enter command:
 
SELECT SOLL.MA_ID, SOLL.NAME, ITS_NAME, SOLL, GELEISTET
    FROM
    (SELECT A.MA_ID, A.NAME, B.PROJEKTID, ITS_NAME,
       FIXED (SOLL_STUNDEN / 100 * ZEIT_ANTEIL_PROZENT, 5, 2) SOLL
                    FROM MITARBEITER A,
                    PROJEKT_ZUORDNUNG B,
                    PROJEKT WHERE A.MA_ID = B.MA_ID AND
                    B.PROJEKTID = PROJEKT.PROJEKTID) SOLL,
    (SELECT FIXED (SUM (STUNDEN), 5,2) GELEISTET, MA_ID, PROJEKTID
       FROM PROJZEIT
       GROUP BY MA_ID, PROJEKTID
     UNION
     SELECT 0, MA_ID, PROJEKTID FROM PROJEKT_ZUORDNUNG WHERE
        CHR (MA_ID) || CHR (PROJEKTID) NOT IN
          (SELECT CHR(MA_ID) || CHR (PROJEKTID) FROM PROJZEIT)
    ) GELEISTET
WHERE
SOLL.MA_ID      = GELEISTET.MA_ID      AND
SOLL.PROJEKTID = GELEISTET.PROJEKTID AND
SOLL > GELEISTET !
 
resultcount :                     2
 
Enter command:
FETCH!
 
MA_ID             :     2
NAME              :  Schweiberger
ITS_NAME          :  Uebersetzung/Dokumentation
SOLL              :     4.00
GELEISTET         :     0.00
---------------------------------------------------
MA_ID             :     1
NAME              :  Ladewig
ITS_NAME          :  Beratung IT Verlag
SOLL              :    20.00
GELEISTET         :    16.00
 
resultcount :                     2
 
Enter command:
 
SELECT SOLL.MA_ID, SOLL.NAME, ITS_NAME, SOLL, GELEISTET
    FROM
    (SELECT A.MA_ID, A.NAME, B.PROJEKTID, ITS_NAME,
       FIXED (SOLL_STUNDEN / 100 * ZEIT_ANTEIL_PROZENT, 5, 2) SOLL
                    FROM MITARBEITER A,
                    PROJEKT_ZUORDNUNG B,
                    PROJEKT WHERE A.MA_ID = B.MA_ID AND
                    B.PROJEKTID = PROJEKT.PROJEKTID) SOLL,
    (SELECT FIXED (SUM (STUNDEN), 5,2) GELEISTET , MA_ID, PROJEKTID
       FROM PROJZEIT
       GROUP BY MA_ID, PROJEKTID
     UNION
     SELECT 0, MA_ID, PROJEKTID FROM PROJEKT_ZUORDNUNG WHERE
        CHR (MA_ID) || CHR (PROJEKTID) NOT IN
          (SELECT CHR(MA_ID) || CHR (PROJEKTID) FROM PROJZEIT)
    ) GELEISTET
WHERE
SOLL.MA_ID      = GELEISTET.MA_ID      AND
SOLL.PROJEKTID = GELEISTET.PROJEKTID AND
SOLL > GELEISTET !
 
resultcount :                     2
 
Enter command:
FETCH !
 
MA_ID             :     2
NAME              :  Schweiberger
ITS_NAME          :  Uebersetzung/Dokumentation
SOLL              :     4.00
GELEISTET         :     0.00
---------------------------------------------------
MA_ID             :     1
NAME              :  Ladewig
ITS_NAME          :  Beratung IT Verlag
SOLL              :    20.00
GELEISTET         :    16.00
 
resultcount :                     2
 
Enter command:
 
DROP TABLE MITARBEITER !
 
Enter command:
DROP TABLE PROJEKT !
 
Enter command:
DROP TABLE PROJEKT_ZUORDNUNG!
 
Enter command:
DROP TABLE PROJZEIT!
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE TAHEF
           (EJJ CHAR(2),
            AUS FIXED(5),
            OBJ FIXED(5),
            EMM CHAR(2),
            JJJ FIXED(5),
            HHH FIXED(5)) !
 
Enter command:
CREATE TABLE TAAGN
           (AGN FIXED(10),
            VBE FIXED(5),
            TX1 CHAR(30))!
 
Enter command:
CREATE TABLE TAWER
           (KDN FIXED(10),
            PRN FIXED(10),
            ANT FIXED(11),
            VOL FIXED(5),
            AUS FIXED(5),
            OBJ FIXED(5),
            AGN FIXED(10),
            JJJ FIXED(5),
            HHH FIXED(5))!
 
Enter command:
CREATE TABLE TAKP1
           (BRH FIXED(5),
            BRU FIXED(5),
            PRN FIXED(10),
            KDN FIXED(10))!
 
Enter command:
 
COMMIT WORK!
 
Enter command:
SELECT H.EJJ , H.AUS , H.OBJ , S.KDN , S.PRN , A.VBE , K.VBE , P.BRH ,
       P.BRU , S.ANT , S.VOL
 FROM TAHEF  H , TAWER  S , TAAGN  K , TAAGN  A , TAKP1  P
UNION ALL SELECT H.EJJ , H.AUS , H.OBJ , S.KDN , S.PRN ,     99 ,
  K.VBE , P.BRH , P.BRU , S.ANT , S.VOL
 FROM TAHEF  H , TAWER  S , TAAGN  K , TAKP1  P
 WHERE  NOT  EXISTS
   (SELECT  *  FROM TAAGN  A  WHERE A.AGN  = S.AGN )
UNION ALL SELECT H.EJJ , H.AUS , H.OBJ , S.KDN , S.PRN , A.VBE ,
 K.VBE ,   9999 ,     99 , S.ANT , S.VOL  FROM TAHEF  H , TAWER  S ,
 TAAGN  K , TAAGN  A
 WHERE  NOT  EXISTS
  (SELECT  *  FROM TAKP1  P
  WHERE P.KDN  = S.KDN  AND P.PRN  = S.PRN )
   UNION ALL SELECT H.EJJ , H.AUS , H.OBJ , S.KDN , S.PRN ,     99 ,
   K.VBE ,   9999 ,     99 , S.ANT , S.VOL
   FROM TAHEF  H , TAWER  S , TAAGN  K  WHERE NOT  EXISTS
  (SELECT  *  FROM TAAGN  A  WHERE A.AGN  = S.AGN )  AND  NOT  EXISTS
  (SELECT  *  FROM TAKP1  P  WHERE P.KDN  = S.KDN  AND P.PRN  = S.PRN )
  ORDER BY      4 ,      5 !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
 
SELECT H.EJJ , H.AUS , H.OBJ , S.KDN , S.PRN , A.VBE , K.VBE , P.BRH ,
       P.BRU , S.ANT , S.VOL
 FROM TAHEF  H , TAWER  S , TAAGN  K , TAAGN  A , TAKP1  P
 WHERE  (H.OBJ  =      4 )  AND  (H.EJJ  = '92' )  AND  (H.EMM  = '01' )
  AND  (K.VBE  =      2 )  AND  (K.AGN  = S.KDN )  AND  (S.OBJ  = H.OBJ )
  AND  (S.AUS  = H.AUS )  AND  (S.JJJ  = H.JJJ )  AND  (S.HHH  = H.HHH )
  AND  (K.AGN  = S.KDN )  AND  (A.AGN  = S.AGN )  AND  (P.PRN  = S.PRN )
  AND  (P.KDN  = S.KDN )
UNION ALL SELECT H.EJJ , H.AUS , H.OBJ , S.KDN , S.PRN ,     99 ,
  K.VBE , P.BRH , P.BRU , S.ANT , S.VOL
 FROM TAHEF  H , TAWER  S , TAAGN  K , TAKP1  P
 WHERE  (H.OBJ  =    4 )
  AND  (H.EJJ  = '92' )  AND  (H.EMM  = '01' )  AND  (K.VBE  =      2 )
  AND  (K.AGN  = S.KDN )  AND  (S.OBJ  = H.OBJ )  AND  (S.AUS  = H.AUS )
  AND  (S.JJJ  = H.JJJ )  AND  (S.HHH  = H.HHH )  AND  (P.PRN  = S.PRN )
  AND  (P.KDN  = S.KDN )  AND  NOT  EXISTS
   (SELECT  *  FROM TAAGN  A  WHERE A.AGN  = S.AGN )
UNION ALL SELECT H.EJJ , H.AUS , H.OBJ , S.KDN , S.PRN , A.VBE ,
 K.VBE ,   9999 ,     99 , S.ANT , S.VOL  FROM TAHEF  H , TAWER  S ,
 TAAGN  K , TAAGN  A
 WHERE  (H.OBJ  =      4 )  AND  (H.EJJ  = '92' )
  AND  (H.EMM  = '01' )  AND  (K.VBE  =      2 )  AND  (K.AGN  = S.KDN )
  AND  (S.OBJ  = H.OBJ )  AND  (S.AUS  = H.AUS )  AND  (S.JJJ  = H.JJJ )
  AND  (S.HHH  = H.HHH )  AND  (A.AGN  = S.AGN )  AND  NOT  EXISTS
  (SELECT  *  FROM TAKP1  P
  WHERE P.KDN  = S.KDN  AND P.PRN  = S.PRN )
   UNION ALL SELECT H.EJJ , H.AUS , H.OBJ , S.KDN , S.PRN ,     99 ,
   K.VBE ,   9999 ,     99 , S.ANT , S.VOL
   FROM TAHEF  H , TAWER  S , TAAGN  K  WHERE  (H.OBJ  =      4 )
  AND  (H.EJJ  = '92' )  AND  (H.EMM  = '01' )  AND  (K.VBE  =      2 )
  AND  (K.AGN  = S.KDN )  AND  (S.OBJ  = H.OBJ )  AND  (S.AUS  = H.AUS )
  AND  (S.JJJ  = H.JJJ )  AND  (S.HHH  = H.HHH )  AND  NOT  EXISTS
  (SELECT  *  FROM TAAGN  A  WHERE A.AGN  = S.AGN )  AND  NOT  EXISTS
  (SELECT  *  FROM TAKP1  P  WHERE P.KDN  = S.KDN  AND P.PRN  = S.PRN )
  ORDER BY      4 ,      5 !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
 
 
 
SELECT H.EJJ , H.AUS , H.OBJ , S.KDN , S.PRN , A.VBE , K.VBE , P.BRH ,
       P.BRU , S.ANT , S.VOL
 FROM TAHEF  H , TAWER  S , TAAGN  K , TAAGN  A , TAKP1  P
 WHERE  (H.OBJ  =      4 )  AND  (H.EJJ  = '92' )  AND  (H.EMM  = '01' )
  AND  (K.VBE  =      2 )  AND  (K.AGN  = S.KDN )  AND  (S.OBJ  = H.OBJ )
  AND  (S.AUS  = H.AUS )  AND  (S.JJJ  = H.JJJ )  AND  (S.HHH  = H.HHH )
  AND  (K.AGN  = S.KDN )  AND  (A.AGN  = S.AGN )  AND  (P.PRN  = S.PRN )
  AND  (P.KDN  = S.KDN )
UNION ALL SELECT H.EJJ , H.AUS , H.OBJ , S.KDN , S.PRN ,     99 ,
  K.VBE , P.BRH , P.BRU , S.ANT , S.VOL
 FROM TAHEF  H , TAWER  S , TAAGN  K , TAKP1  P
 WHERE  (H.OBJ  =    4 )
  AND  (H.EJJ  = '92' )  AND  (H.EMM  = '01' )  AND  (K.VBE  =      2 )
  AND  (K.AGN  = S.KDN )  AND  (S.OBJ  = H.OBJ )  AND  (S.AUS  = H.AUS )
  AND  (S.JJJ  = H.JJJ )  AND  (S.HHH  = H.HHH )  AND  (P.PRN  = S.PRN )
  AND  (P.KDN  = S.KDN )  AND  NOT  EXISTS
   (SELECT  *  FROM TAAGN  A  WHERE A.AGN  = S.AGN )
UNION ALL SELECT H.EJJ , H.AUS , H.OBJ , S.KDN , S.PRN , A.VBE ,
 K.VBE ,   9999 ,     99 , S.ANT , S.VOL  FROM TAHEF  H , TAWER  S ,
 TAAGN  K , TAAGN  A
 WHERE  (H.OBJ  =      4 )  AND  (H.EJJ  = '92' )
  AND  (H.EMM  = '01' )  AND  (K.VBE  =      2 )  AND  (K.AGN  = S.KDN )
  AND  (S.OBJ  = H.OBJ )  AND  (S.AUS  = H.AUS )  AND  (S.JJJ  = H.JJJ )
  AND  (S.HHH  = H.HHH )  AND  (A.AGN  = S.AGN )  AND  NOT  EXISTS
  (SELECT  *  FROM TAKP1  P
  WHERE P.KDN  = S.KDN  AND P.PRN  = S.PRN )
   UNION ALL SELECT H.EJJ , H.AUS , H.OBJ , S.KDN , S.PRN ,     99 ,
   K.VBE ,   9999 ,     99 , S.ANT , S.VOL
   FROM TAHEF  H , TAWER  S , TAAGN  K  WHERE  (H.OBJ  =      4 )
  AND  (H.EJJ  = '92' )  AND  (H.EMM  = '01' )  AND  (K.VBE  =      2 )
  AND  (K.AGN  = S.KDN )  AND  (S.OBJ  = H.OBJ )  AND  (S.AUS  = H.AUS )
  AND  (S.JJJ  = H.JJJ )  AND  (S.HHH  = H.HHH )  AND  NOT  EXISTS
  (SELECT  *  FROM TAAGN  A  WHERE A.AGN  = S.AGN )  AND  NOT  EXISTS
  (SELECT  *  FROM TAKP1  P  WHERE P.KDN  = S.KDN  AND P.PRN  = S.PRN )
  ORDER BY      4 ,      5 !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
DROP TABLE TAHEF  !
 
Enter command:
DROP TABLE TAAGN  !
 
Enter command:
DROP TABLE TAWER  !
 
Enter command:
DROP TABLE TAKP1  !
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE FLUEGE
 (FLUG_NR       FIXED(3) KEY,
  GES_PLAETZE   FIXED(3) NOT NULL,
  VERF_PLAETZE  FIXED(3) NOT NULL)!
 
Enter command:
INSERT INTO FLUEGE VALUES (1, 200, 5)!
 
Enter command:
INSERT INTO FLUEGE VALUES (2, 300, 3)!
 
Enter command:
INSERT INTO FLUEGE VALUES (3, 450, 4)!
 
Enter command:
CREATE TABLE BUCHUNGEN
 (ID      FIXED (5) KEY,
  FLUG_NR FIXED(3) NOT NULL REFERENCES FLUEGE,
  NAME    CHAR (20) NOT NULL)!
 
Enter command:
INSERT INTO BUCHUNGEN VALUES ( 3, 3, 'Albrecht')!
 
Enter command:
INSERT INTO BUCHUNGEN VALUES (10, 1, 'Baader')!
 
Enter command:
INSERT INTO BUCHUNGEN VALUES (11, 1, 'Chall')!
 
Enter command:
INSERT INTO BUCHUNGEN VALUES ( 4, 1, 'Hansen')!
 
Enter command:
INSERT INTO BUCHUNGEN VALUES ( 1, 1, 'Jonas')!
 
Enter command:
INSERT INTO BUCHUNGEN VALUES ( 6, 3, 'Kauffmann')!
 
Enter command:
INSERT INTO BUCHUNGEN VALUES ( 7, 2, 'Lindemann')!
 
Enter command:
INSERT INTO BUCHUNGEN VALUES ( 8, 1, 'Linke')!
 
Enter command:
INSERT INTO BUCHUNGEN VALUES ( 2, 2, 'Medinger')!
 
Enter command:
INSERT INTO BUCHUNGEN VALUES ( 5, 2, 'Weiss')!
 
Enter command:
INSERT INTO BUCHUNGEN VALUES ( 9, 2, 'Weyhausen')!
 
Enter command:
SELECT A.FLUG_NR, A.NAME
  FROM BUCHUNGEN A, FLUEGE
 WHERE A.FLUG_NR = FLUEGE.FLUG_NR
   AND VERF_PLAETZE >=
           (SELECT COUNT(*)
              FROM BUCHUNGEN
             WHERE BUCHUNGEN.ID <= A.ID
               AND BUCHUNGEN.FLUG_NR = A.FLUG_NR)
 ORDER BY A.FLUG_NR, ID !
 
resultcount :                    10
 
Enter command:
FETCH !
 
FLUG_NR | NAME
--------+---------------------
   1    | Jonas
   1    | Hansen
   1    | Linke
   1    | Baader
   1    | Chall
   2    | Medinger
   2    | Weiss
   2    | Lindemann
   3    | Albrecht
   3    | Kauffmann
 
resultcount :                    10
 
Enter command:
DROP TABLE FLUEGE !
 
Enter command:
DROP TABLE BUCHUNGEN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE RECHNUNGEN (RENR FIXED (4) KEY,
                         KDNR FIXED (4) NOT NULL,
                       BETRAG FIXED(9,2) NOT NULL)!
 
Enter command:
INSERT INTO RECHNUNGEN VALUES (1, 1, 1000)!
 
Enter command:
INSERT INTO RECHNUNGEN VALUES (2, 2, 1000)!
 
Enter command:
INSERT INTO RECHNUNGEN VALUES (3, 3, 1000)!
 
Enter command:
INSERT INTO RECHNUNGEN VALUES (4, 4, 1000)!
 
Enter command:
INSERT INTO RECHNUNGEN VALUES (5, 2, 2000)!
 
Enter command:
INSERT INTO RECHNUNGEN VALUES (6, 1, 3000)!
 
Enter command:
INSERT INTO RECHNUNGEN VALUES (7, 2, 1000)!
 
Enter command:
SELECT A.KDNR, A.RENR, A.BETRAG BETRAG,
       A.BETRAG / SUM (B.BETRAG) * 100 PROZENT
FROM RECHNUNGEN A, RECHNUNGEN B
GROUP BY A.KDNR, A.RENR, A.BETRAG !
 
resultcount :                     7
 
Enter command:
FETCH !
 
KDNR  | RENR  | BETRAG      | PROZENT
------+-------+-------------+---------------------------------------------
    1 |     1 |     1000.00 |  1.0000000000000000000000000000000000000E+01
    1 |     6 |     3000.00 |  3.0000000000000000000000000000000000000E+01
    2 |     2 |     1000.00 |  1.0000000000000000000000000000000000000E+01
    2 |     5 |     2000.00 |  2.0000000000000000000000000000000000000E+01
    2 |     7 |     1000.00 |  1.0000000000000000000000000000000000000E+01
    3 |     3 |     1000.00 |  1.0000000000000000000000000000000000000E+01
    4 |     4 |     1000.00 |  1.0000000000000000000000000000000000000E+01
 
resultcount :                     7
 
Enter command:
SELECT A.KDNR,
       FLOAT(SUM (A.BETRAG) / COUNT (DISTINCT B.RENR),18) BETRAG,
       FLOAT(SUM (A.BETRAG) / COUNT (DISTINCT B.RENR) /
      (SUM (B.BETRAG) / COUNT (DISTINCT A.RENR)) * 100,18) PROZENT
FROM RECHNUNGEN A, RECHNUNGEN B
GROUP BY A.KDNR !
 
resultcount :                     4
 
Enter command:
FETCH!
 
KDNR  | BETRAG                   | PROZENT
------+--------------------------+-------------------------
    1 |  4.00000000000000000E+03 |  4.00000000000000000E+01
    2 |  4.00000000000000000E+03 |  4.00000000000000000E+01
    3 |  1.00000000000000000E+03 |  1.00000000000000000E+01
    4 |  1.00000000000000000E+03 |  1.00000000000000000E+01
 
resultcount :                     4
 
Enter command:
SELECT A.KDNR,
       FLOAT(SUM (A.BETRAG), 18),
       FLOAT(SUM (A.BETRAG) / B.SUMBETRAG * 100, 18) PROZENT
FROM RECHNUNGEN A,
     (SELECT SUM (BETRAG) SUMBETRAG
      FROM RECHNUNGEN) B
GROUP BY A.KDNR !
 
***ERROR  -8017 Column must be group column:SUMBETRAG                      0068
 
Enter command:
FETCH!
 
***ERROR    100 Row not found                                              0001
 
Enter command:
SELECT A.KDNR,
       FLOAT(SUM (A.BETRAG), 18),
       FLOAT(SUM (A.BETRAG) / SUM(B.SUMBETRAG) * 100, 18) PROZENT
FROM RECHNUNGEN A,
     (SELECT SUM (BETRAG) SUMBETRAG
      FROM RECHNUNGEN) B
GROUP BY A.KDNR !
 
resultcount :                     4
 
Enter command:
FETCH!
 
KDNR  | EXPRESSION1              | PROZENT
------+--------------------------+-------------------------
    1 |  4.00000000000000000E+03 |  2.00000000000000000E+01
    2 |  4.00000000000000000E+03 |  1.33333333333333333E+01
    3 |  1.00000000000000000E+03 |  1.00000000000000000E+01
    4 |  1.00000000000000000E+03 |  1.00000000000000000E+01
 
resultcount :                     4
 
Enter command:
SELECT A.KDNR,
       FLOAT(SUM (A.BETRAG), 18),
       FLOAT(SUM (A.BETRAG) / B.SUMBETRAG * 100, 18) PROZENT
FROM RECHNUNGEN A,
     (SELECT SUM (BETRAG) SUMBETRAG
      FROM RECHNUNGEN) B
GROUP BY A.KDNR, B.SUMBETRAG !
 
resultcount :                     4
 
Enter command:
FETCH!
 
KDNR  | EXPRESSION1              | PROZENT
------+--------------------------+-------------------------
    1 |  4.00000000000000000E+03 |  4.00000000000000000E+01
    2 |  4.00000000000000000E+03 |  4.00000000000000000E+01
    3 |  1.00000000000000000E+03 |  1.00000000000000000E+01
    4 |  1.00000000000000000E+03 |  1.00000000000000000E+01
 
resultcount :                     4
 
Enter command:
SELECT A.KDNR,
       FIXED(SUM (A.BETRAG), 10) BETRAG,
       FIXED(SUM (A.BETRAG) / B.SUMBETRAG * 100, 3) PROZENT
FROM RECHNUNGEN A,
     (SELECT SUM (BETRAG) SUMBETRAG
      FROM RECHNUNGEN) B
GROUP BY A.KDNR, B.SUMBETRAG !
 
resultcount :                     4
 
Enter command:
FETCH!
 
KDNR  | BETRAG      | PROZENT
------+-------------+--------
    1 |        4000 |   40
    2 |        4000 |   40
    3 |        1000 |   10
    4 |        1000 |   10
 
resultcount :                     4
 
Enter command:
DROP TABLE RECHNUNGEN!
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST SQLMODE ORACLE !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST SQLMODE ORACLE ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE LAGER_FREI (
REGAL     NUMBER (3) NOT NULL,
FREI_VON  NUMBER (4) NOT NULL,
FREI_BIS  NUMBER (4) NOT NULL,
CHECK (FREI_VON < FREI_BIS),
PRIMARY KEY (REGAL, FREI_VON)) !
 
Enter command:
INSERT INTO LAGER_FREI VALUES (1,  25,3767)!
 
Enter command:
INSERT INTO LAGER_FREI VALUES (1,4234,4965)!
 
Enter command:
INSERT INTO LAGER_FREI VALUES (1,5001,5010)!
 
Enter command:
INSERT INTO LAGER_FREI VALUES (2, 702, 711)!
 
Enter command:
INSERT INTO LAGER_FREI VALUES (1,8001,8029)!
 
Enter command:
INSERT INTO LAGER_FREI VALUES (2,   1,  23)!
 
Enter command:
INSERT INTO LAGER_FREI VALUES (3,  25, 234)!
 
Enter command:
INSERT INTO LAGER_FREI VALUES (2,  55, 600)!
 
Enter command:
INSERT INTO LAGER_FREI VALUES (2, 800,7000)!
 
Enter command:
INSERT INTO LAGER_FREI VALUES (3, 255, 900)!
 
Enter command:
INSERT INTO LAGER_FREI VALUES (1,   1,  23)!
 
Enter command:
INSERT INTO LAGER_FREI VALUES (3,1002,7000)!
 
Enter command:
INSERT INTO LAGER_FREI VALUES (3, 921, 943)!
 
Enter command:
COMMIT WORK !
 
Enter command:
PARS_THEN_EX !
 
Enter command:
DATA !
 
Enter command:
SELECT * FROM LAGER_FREI
WHERE (FREI_BIS - FREI_VON) =
      (SELECT MIN (FREI_BIS - FREI_VON)
       FROM LAGER_FREI
       WHERE :BENOETIGTE_ANZAHL <=
             FREI_BIS - FREI_VON +1)
AND    FREI_VON =
      (SELECT MIN (FREI_VON)
       FROM   LAGER_FREI
       WHERE (FREI_BIS - FREI_VON) =
             (SELECT MIN (FREI_BIS - FREI_VON)
              FROM LAGER_FREI
              WHERE :BENOETIGTE_ANZAHL <=
                    FREI_BIS - FREI_VON + 1))
AND    REGAL =
      (SELECT MIN (REGAL)
       FROM   LAGER_FREI
       WHERE (FREI_BIS - FREI_VON) =
             (SELECT MIN (FREI_BIS - FREI_VON)
              FROM LAGER_FREI
              WHERE :BENOETIGTE_ANZAHL <=
                    FREI_BIS - FREI_VON + 1)
       AND    FREI_VON =
             (SELECT MIN (FREI_VON)
              FROM   LAGER_FREI
              WHERE  (FREI_BIS - FREI_VON) =
                     (SELECT MIN (FREI_BIS - FREI_VON)
                      FROM LAGER_FREI
                      WHERE :BENOETIGTE_ANZAHL <=
                            FREI_BIS - FREI_VON + 1))) !
 
n 4 10
n 4 10
n 4 10
n 4 10
 
resultcount :                     0
 
Enter command:
NODATA !
 
Enter command:
FETCH INTO :A, :B, :C !
 
REGAL | FREI_VON | FREI_BIS
------+----------+---------
   2  |   702    |   711
 
resultcount :                     1
 
Enter command:
DATA !
 
Enter command:
SELECT * FROM LAGER_FREI
WHERE (FREI_BIS - FREI_VON) =
      (SELECT MIN (FREI_BIS - FREI_VON)
       FROM LAGER_FREI
       WHERE :BENOETIGTE_ANZAHL <=
             FREI_BIS - FREI_VON +1)
AND    FREI_VON =
      (SELECT MIN (FREI_VON)
       FROM   LAGER_FREI
       WHERE (FREI_BIS - FREI_VON) =
             (SELECT MIN (FREI_BIS - FREI_VON)
              FROM LAGER_FREI
              WHERE :BENOETIGTE_ANZAHL <=
                    FREI_BIS - FREI_VON + 1))
AND    REGAL =
      (SELECT MIN (REGAL)
       FROM   LAGER_FREI
       WHERE (FREI_BIS - FREI_VON) =
             (SELECT MIN (FREI_BIS - FREI_VON)
              FROM LAGER_FREI
              WHERE :BENOETIGTE_ANZAHL <=
                    FREI_BIS - FREI_VON + 1)
       AND    FREI_VON =
             (SELECT MIN (FREI_VON)
              FROM   LAGER_FREI
              WHERE  (FREI_BIS - FREI_VON) =
                     (SELECT MIN (FREI_BIS - FREI_VON)
                      FROM LAGER_FREI
                      WHERE :BENOETIGTE_ANZAHL <=
                            FREI_BIS - FREI_VON + 1))) !
 
n 4 20
n 4 20
n 4 20
n 4 20
 
resultcount :                     0
 
Enter command:
NODATA !
 
Enter command:
FETCH INTO :A, :B, :C !
 
REGAL | FREI_VON | FREI_BIS
------+----------+---------
   1  |     1    |    23
 
resultcount :                     1
 
Enter command:
PARS_THEN_EX !
 
Enter command:
DATA !
 
Enter command:
SELECT *
FROM LAGER_FREI
WHERE (REGAL, FREI_VON, FREI_BIS - FREI_VON) =
      (SELECT MIN (REGAL), FREI_VON, FREI_BIS - FREI_VON
       FROM LAGER_FREI
       WHERE (FREI_VON, FREI_BIS - FREI_VON) =
             (SELECT MIN (FREI_VON), FREI_BIS - FREI_VON
              FROM LAGER_FREI
              WHERE (FREI_BIS - FREI_VON) =
                    (SELECT MIN (FREI_BIS - FREI_VON)
                     FROM LAGER_FREI
                     WHERE :BENOETIGTE_ANZAHL <=
                           FREI_BIS - FREI_VON + 1)
              GROUP BY FREI_BIS - FREI_VON)
       GROUP BY FREI_BIS - FREI_VON, FREI_VON) !
 
n 20 10
n 20 10
n 20 10
n 20 10
 
resultcount :                     0
 
Enter command:
NODATA !
 
Enter command:
FETCH INTO :A, :B, :C !
 
REGAL | FREI_VON | FREI_BIS
------+----------+---------
   2  |   702    |   711
 
resultcount :                     1
 
Enter command:
DATA !
 
Enter command:
SELECT *
FROM LAGER_FREI
WHERE (REGAL, FREI_VON, FREI_BIS - FREI_VON) =
      (SELECT MIN (REGAL), FREI_VON, FREI_BIS - FREI_VON
       FROM LAGER_FREI
       WHERE (FREI_VON, FREI_BIS - FREI_VON) =
             (SELECT MIN (FREI_VON), FREI_BIS - FREI_VON
              FROM LAGER_FREI
              WHERE (FREI_BIS - FREI_VON) =
                    (SELECT MIN (FREI_BIS - FREI_VON)
                     FROM LAGER_FREI
                     WHERE :BENOETIGTE_ANZAHL <=
                           FREI_BIS - FREI_VON + 1)
              GROUP BY FREI_BIS - FREI_VON)
       GROUP BY FREI_VON, FREI_BIS - FREI_VON) !
 
n 20 10
n 20 10
n 20 10
n 20 10
 
resultcount :                     0
 
Enter command:
NODATA !
 
Enter command:
FETCH INTO :A, :B, :C !
 
REGAL | FREI_VON | FREI_BIS
------+----------+---------
   2  |   702    |   711
 
resultcount :                     1
 
Enter command:
DATA !
 
Enter command:
SELECT *
FROM LAGER_FREI
WHERE (REGAL, FREI_VON, FREI_BIS - FREI_VON) =
      (SELECT MIN (REGAL), FREI_VON, FREI_BIS - FREI_VON
       FROM LAGER_FREI
       WHERE (FREI_VON, FREI_BIS - FREI_VON) =
             (SELECT MIN (FREI_VON), FREI_BIS - FREI_VON
              FROM LAGER_FREI
              WHERE (FREI_BIS - FREI_VON) =
                    (SELECT MIN (FREI_BIS - FREI_VON)
                     FROM LAGER_FREI
                     WHERE :BENOETIGTE_ANZAHL <=
                           FREI_BIS - FREI_VON + 1)
              GROUP BY FREI_BIS - FREI_VON)
       GROUP BY FREI_VON, FREI_BIS - FREI_VON) !
 
n 20 20
n 20 20
n 20 20
n 20 20
 
resultcount :                     0
 
Enter command:
NODATA !
 
Enter command:
FETCH INTO :A, :B, :C !
 
REGAL | FREI_VON | FREI_BIS
------+----------+---------
   1  |     1    |    23
 
resultcount :                     1
 
Enter command:
PARS_EXECUTE!
 
Enter command:
DROP TABLE LAGER_FREI !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST SQLMODE ORACLE !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST SQLMODE ORACLE ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE TABLES
  (NAME         VARCHAR (30) PRIMARY KEY,
   STORAGE_SIZE NUMBER) !
 
Enter command:
INSERT INTO TABLES VALUES ('KONTO'  , 1000)!
 
Enter command:
INSERT INTO TABLES VALUES ('ARTIKEL', 1000)!
 
Enter command:
COMMIT !
 
Enter command:
CREATE TABLE INDEXES
  (NAME        VARCHAR2 (30) PRIMARY KEY,
   TABLE_NAME  VARCHAR2 (30) NOT NULL REFERENCES TABLES,
   UNIQUE_FLAG VARCHAR2 ( 4) NOT NULL
                      CHECK (UNIQUE_FLAG IN ('YES', 'NO'))) !
 
Enter command:
INSERT INTO INDEXES VALUES ('KT01', 'KONTO'  , 'YES')!
 
Enter command:
INSERT INTO INDEXES VALUES ('KT02', 'KONTO'  , 'YES')!
 
Enter command:
INSERT INTO INDEXES VALUES ('KT03', 'KONTO'  , 'YES')!
 
Enter command:
INSERT INTO INDEXES VALUES ('KT04', 'KONTO'  , 'YES')!
 
Enter command:
INSERT INTO INDEXES VALUES ('ART1', 'ARTIKEL', 'YES')!
 
Enter command:
INSERT INTO INDEXES VALUES ('ART2', 'ARTIKEL', 'YES')!
 
Enter command:
INSERT INTO INDEXES VALUES ('ART3', 'ARTIKEL', 'YES')!
 
Enter command:
INSERT INTO INDEXES VALUES ('ART4', 'ARTIKEL', 'YES')!
 
Enter command:
COMMIT !
 
Enter command:
CREATE TABLE INDEX_COLUMNS
  (INDEX_NAME      VARCHAR2 (30) REFERENCES INDEXES,
   COLUMN_NAME     VARCHAR2 (30) NOT NULL,
   COLUMN_POSITION NUMBER NOT NULL
                          CHECK (COLUMN_POSITION > 0),
   PRIMARY KEY (INDEX_NAME, COLUMN_NAME),
   CONSTRAINT C1_INDEX_NAME UNIQUE (INDEX_NAME, COLUMN_POSITION)) !
 
Enter command:
INSERT INTO INDEX_COLUMNS VALUES ('KT01', 'COL1', 1)!
 
Enter command:
INSERT INTO INDEX_COLUMNS VALUES ('KT02', 'COL1', 1)!
 
Enter command:
INSERT INTO INDEX_COLUMNS VALUES ('KT02', 'COL2', 2)!
 
Enter command:
INSERT INTO INDEX_COLUMNS VALUES ('KT03', 'COL1', 1)!
 
Enter command:
INSERT INTO INDEX_COLUMNS VALUES ('KT03', 'COL2', 2)!
 
Enter command:
INSERT INTO INDEX_COLUMNS VALUES ('KT03', 'COL3', 3)!
 
Enter command:
INSERT INTO INDEX_COLUMNS VALUES ('KT04', 'COL3', 1)!
 
Enter command:
INSERT INTO INDEX_COLUMNS VALUES ('KT04', 'COL4', 2)!
 
Enter command:
INSERT INTO INDEX_COLUMNS VALUES ('ART1', 'COLA', 1)!
 
Enter command:
INSERT INTO INDEX_COLUMNS VALUES ('ART1', 'COLB', 2)!
 
Enter command:
INSERT INTO INDEX_COLUMNS VALUES ('ART2', 'COLB', 1)!
 
Enter command:
INSERT INTO INDEX_COLUMNS VALUES ('ART2', 'COLC', 2)!
 
Enter command:
INSERT INTO INDEX_COLUMNS VALUES ('ART3', 'COLC', 1)!
 
Enter command:
INSERT INTO INDEX_COLUMNS VALUES ('ART3', 'COLD', 2)!
 
Enter command:
INSERT INTO INDEX_COLUMNS VALUES ('ART4', 'COLC', 1)!
 
Enter command:
INSERT INTO INDEX_COLUMNS VALUES ('ART4', 'COLD', 2)!
 
Enter command:
INSERT INTO INDEX_COLUMNS VALUES ('ART4', 'COLE', 3)!
 
Enter command:
INSERT INTO INDEX_COLUMNS VALUES ('ART4', 'COLF', 4)!
 
Enter command:
COMMIT !
 
Enter command:
SELECT SUBSTR(I1.TABLE_NAME, 1, 10),
       SUBSTR(I1.NAME, 1, 10),
       SUBSTR(I2.NAME, 1, 10)
  FROM INDEXES I1, INDEXES I2
 WHERE I1.TABLE_NAME = I2.TABLE_NAME
   AND I1.NAME <> I2.NAME
   AND NOT EXISTS
           (SELECT COLUMN_NAME, COLUMN_POSITION
              FROM INDEX_COLUMNS C1
             WHERE I2.NAME = C1.INDEX_NAME
           MINUS
           SELECT COLUMN_NAME, COLUMN_POSITION
             FROM INDEX_COLUMNS C2
            WHERE I1.NAME = C2.INDEX_NAME) !
 
***ERROR  -7011 Correlated subquery not allowed                            0255
 
Enter command:
FETCH INTO :A, :B, :C!
 
***ERROR  -4000 Unknown result table                                       0001
 
Enter command:
SELECT SUBSTR(I1.TABLE_NAME, 1, 10),
       SUBSTR(I1.NAME, 1, 10),
       SUBSTR(I2.NAME, 1, 10)
  FROM INDEXES I1, INDEXES I2
 WHERE I1.TABLE_NAME = I2.TABLE_NAME
   AND I1.NAME <> I2.NAME
   AND NOT EXISTS
           (SELECT *
              FROM INDEX_COLUMNS IC1
             WHERE IC1.INDEX_NAME = I2.NAME
               AND NOT EXISTS
                       (SELECT *
                          FROM INDEX_COLUMNS IC2
                         WHERE IC2.INDEX_NAME = I1.NAME
                           AND IC1.COLUMN_NAME = IC2.COLUMN_NAME)) !
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B, :C!
 
EXPRESSION1 | EXPRESSION2 | EXPRESSION3
------------+-------------+------------
ARTIKEL     | ART4        | ART3
KONTO       | KT02        | KT01
KONTO       | KT03        | KT01
KONTO       | KT03        | KT02
 
resultcount :                     4
 
Enter command:
SELECT SUBSTR(I1.TABLE_NAME, 1, 10),
       SUBSTR(I2.NAME, 1, 10),
       SUBSTR(I1.NAME, 1, 10)
  FROM INDEXES I1,
       INDEXES I2,
       INDEX_COLUMNS IC1
 WHERE I1.TABLE_NAME = I2.TABLE_NAME
   AND I1.NAME = IC1.INDEX_NAME
   AND I1.NAME <> I2.NAME
   AND IC1.COLUMN_POSITION =
                (SELECT COUNT(*)
                   FROM INDEX_COLUMNS
                  WHERE INDEX_NAME = I1.NAME)
   AND IC1.COLUMN_POSITION =
                (SELECT COUNT(*)
                   FROM INDEX_COLUMNS IC2,
                        INDEX_COLUMNS IC3
                  WHERE IC2.INDEX_NAME = I1.NAME
                    AND IC3.INDEX_NAME = I2.NAME
                    AND IC2.COLUMN_NAME = IC3.COLUMN_NAME
                    AND IC2.COLUMN_POSITION = IC3.COLUMN_POSITION) !
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B, :C!
 
EXPRESSION1 | EXPRESSION2 | EXPRESSION3
------------+-------------+------------
ARTIKEL     | ART4        | ART3
KONTO       | KT02        | KT01
KONTO       | KT03        | KT01
KONTO       | KT03        | KT02
 
resultcount :                     4
 
Enter command:
DROP TABLE TABLES !
 
Enter command:
DROP TABLE INDEXES !
 
Enter command:
DROP TABLE INDEX_COLUMNS !
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST SQLMODE ORACLE !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST SQLMODE ORACLE ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE BUECHER
   (BUCH_NR NUMBER PRIMARY KEY,
    TITEL   VARCHAR (30) NOT NULL,
    AUTOR   VARCHAR (30) NOT NULL)!
 
Enter command:
INSERT INTO BUECHER VALUES (1, 'ORACLE7'         , 'G. Stuerner')!
 
Enter command:
INSERT INTO BUECHER VALUES (2, 'INFORMIX 6.0/7.1', 'D. Petkovic')!
 
Enter command:
INSERT INTO BUECHER VALUES (3, 'SYBASE'          , 'D. McGoveran')!
 
Enter command:
COMMIT !
 
Enter command:
CREATE TABLE LESER
   (LESER_NR NUMBER PRIMARY KEY,
    NAME     VARCHAR (30) NOT NULL) !
 
Enter command:
INSERT INTO LESER VALUES (1, 'H. Kohl')!
 
Enter command:
INSERT INTO LESER VALUES (2, 'B. Clinton')!
 
Enter command:
INSERT INTO LESER VALUES (3, 'B. Jelzin')!
 
Enter command:
COMMIT !
 
Enter command:
CREATE TABLE AUSLEIHE
   (BUCH_NR  NUMBER REFERENCES BUECHER,
    LESER_NR NUMBER REFERENCES LESER,
    EIN_AUS  CHAR (3) NOT NULL
                 CHECK (EIN_AUS IN ('EIN', 'AUS')),
    DATUM    DATE NOT NULL,
    PRIMARY KEY (BUCH_NR, DATUM))!
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
INSERT INTO AUSLEIHE VALUES (3, 3, 'AUS', '19950609000000')!
 
Enter command:
INSERT INTO AUSLEIHE VALUES (2, 2, 'AUS', '19950611000000')!
 
Enter command:
INSERT INTO AUSLEIHE VALUES (1, 1, 'AUS', '19950612000000')!
 
Enter command:
INSERT INTO AUSLEIHE VALUES (3, 3, 'EIN', '19950613000000')!
 
Enter command:
INSERT INTO AUSLEIHE VALUES (1, 1, 'EIN', '19950615000000')!
 
Enter command:
INSERT INTO AUSLEIHE VALUES (1, 2, 'AUS', '19950617000000')!
 
Enter command:
INSERT INTO AUSLEIHE VALUES (2, 2, 'EIN', '19950618000000')!
 
Enter command:
INSERT INTO AUSLEIHE VALUES (2, 3, 'AUS', '19950619000000')!
 
Enter command:
INSERT INTO AUSLEIHE VALUES (3, 1, 'AUS', '19950619000000')!
 
Enter command:
INSERT INTO AUSLEIHE VALUES (1, 2, 'EIN', '19950622000000')!
 
Enter command:
INSERT INTO AUSLEIHE VALUES (2, 3, 'EIN', '19950627000000')!
 
Enter command:
INSERT INTO AUSLEIHE VALUES (3, 1, 'EIN', '19950630000000')!
 
Enter command:
COMMIT !
 
Enter command:
SELECT TITEL, NAME, AUS.EIN_AUS, EIN.EIN_AUS,
      DATEDIFF(EIN.DATUM, AUS.DATUM) DAUER
  FROM BUECHER, LESER, AUSLEIHE AUS, AUSLEIHE EIN
 WHERE BUECHER.BUCH_NR = AUS.BUCH_NR
   AND LESER.LESER_NR  = AUS.LESER_NR
   AND AUS.BUCH_NR     = EIN.BUCH_NR
   AND AUS.LESER_NR    = EIN.LESER_NR
   AND AUS.EIN_AUS     = 'AUS'
   AND EIN.EIN_AUS     = 'EIN'
   AND EIN.DATUM = (SELECT MIN (DATUM)
                      FROM AUSLEIHE
                     WHERE AUSLEIHE.EIN_AUS  = 'EIN'
                       AND AUSLEIHE.BUCH_NR  = AUS.BUCH_NR
                       AND AUSLEIHE.LESER_NR = AUS.LESER_NR
                       AND AUSLEIHE.DATUM    > AUS.DATUM) !
 
resultcount :                     6
 
Enter command:
FETCH!
 
TITEL             :  ORACLE7
NAME              :  H. Kohl
EIN_AUS           :  AUS
EIN_AUS           :  EIN
DAUER             :         3
---------------------------------------------------
TITEL             :  ORACLE7
NAME              :  B. Clinton
EIN_AUS           :  AUS
EIN_AUS           :  EIN
DAUER             :         5
---------------------------------------------------
TITEL             :  INFORMIX 6.0/7.1
NAME              :  B. Clinton
EIN_AUS           :  AUS
EIN_AUS           :  EIN
DAUER             :         7
---------------------------------------------------
TITEL             :  INFORMIX 6.0/7.1
NAME              :  B. Jelzin
EIN_AUS           :  AUS
EIN_AUS           :  EIN
DAUER             :         8
---------------------------------------------------
TITEL             :  SYBASE
NAME              :  H. Kohl
EIN_AUS           :  AUS
EIN_AUS           :  EIN
DAUER             :        11
---------------------------------------------------
TITEL             :  SYBASE
NAME              :  B. Jelzin
EIN_AUS           :  AUS
EIN_AUS           :  EIN
DAUER             :         4
 
resultcount :                     6
 
Enter command:
DROP TABLE BUECHER !
 
Enter command:
DROP TABLE LESER !
 
Enter command:
DROP TABLE AUSLEIHE !
 
Enter command:
COMMIT RELEASE!
 
Enter command:
FILE CONNECT ( KERN TEST SQLMODE ORACLE !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST SQLMODE ORACLE ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE FLURKARTE (
ID VARCHAR (4) PRIMARY KEY,
XA NUMBER NOT NULL,
XE NUMBER NOT NULL,
YA NUMBER NOT NULL,
YE NUMBER NOT NULL,
CHECK ((XA<XE) AND (YA<YE)))!
 
Enter command:
INSERT INTO FLURKARTE VALUES ('1 ', 0, 3, 3, 5)!
 
Enter command:
INSERT INTO FLURKARTE VALUES ('2 ', 0, 2, 1, 3)!
 
Enter command:
INSERT INTO FLURKARTE VALUES ('3 ', 2, 5, 1, 3)!
 
Enter command:
INSERT INTO FLURKARTE VALUES ('4a', 3, 5, 3, 5)!
 
Enter command:
INSERT INTO FLURKARTE VALUES ('4b', 5, 7, 3, 4)!
 
Enter command:
INSERT INTO FLURKARTE VALUES ('5 ', 5, 9, 4, 5)!
 
Enter command:
INSERT INTO FLURKARTE VALUES ('6 ', 5, 7, 1, 3)!
 
Enter command:
INSERT INTO FLURKARTE VALUES ('7 ', 7, 9, 1, 4)!
 
Enter command:
INSERT INTO FLURKARTE VALUES ('8 ', 0, 9, 0, 1)!
 
Enter command:
INSERT INTO FLURKARTE VALUES ('9 ', 0, 9, 5, 6)!
 
Enter command:
SELECT ID FROM FLURKARTE
WHERE NOT
      ((XE <= 3) OR (XA >= 7) OR (YE <= 1) OR (YA >= 4)) !
 
resultcount :                     0
 
Enter command:
FETCH INTO :A!
 
ID
----
3
4a
4b
6
 
resultcount :                     4
 
Enter command:
DROP TABLE FLURKARTE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST SQLMODE INTERNAL !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST SQLMODE INTERNAL ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE ARTIKEL (
NUMMER      INTEGER PRIMARY KEY,
BEZEICHNUNG VARCHAR(30))!
 
Enter command:
INSERT INTO ARTIKEL VALUES (1, 'Bier')!
 
Enter command:
INSERT INTO ARTIKEL VALUES (2, 'Wein')!
 
Enter command:
CREATE TABLE PREIS (
NUMMER      INTEGER,
START_DATUM DATE,
PREIS       FIXED(10,2) NOT NULL,
PRIMARY KEY (NUMMER, START_DATUM),
FOREIGN KEY (NUMMER) REFERENCES ARTIKEL)!
 
Enter command:
INSERT INTO PREIS VALUES (1, '19950101', 1.20)!
 
Enter command:
INSERT INTO PREIS VALUES (1, '19950201', 1.30)!
 
Enter command:
INSERT INTO PREIS VALUES (1, '19950301', 1.50)!
 
Enter command:
INSERT INTO PREIS VALUES (1, '19950601', 1.90)!
 
Enter command:
INSERT INTO PREIS VALUES (2, '19950101', 1.90)!
 
Enter command:
INSERT INTO PREIS VALUES (2, '19950401', 1.50)!
 
Enter command:
INSERT INTO PREIS VALUES (2, '19951101', 2.10)!
 
Enter command:
CREATE TABLE VERKAUF (
NUMMER      INTEGER,
DATUM       DATE,
ANZAHL      INTEGER NOT NULL,
PRIMARY KEY (NUMMER, DATUM),
FOREIGN KEY (NUMMER) REFERENCES ARTIKEL)!
 
Enter command:
INSERT INTO VERKAUF VALUES (1, '19950120',  20)!
 
Enter command:
INSERT INTO VERKAUF VALUES (1, '19950311',  20)!
 
Enter command:
INSERT INTO VERKAUF VALUES (2, '19950514', 345)!
 
Enter command:
INSERT INTO VERKAUF VALUES (1, '19950811',  55)!
 
Enter command:
INSERT INTO VERKAUF VALUES (2, '19950214',  55)!
 
Enter command:
INSERT INTO VERKAUF VALUES (2, '19951014', 345)!
 
Enter command:
SELECT A.BEZEICHNUNG,
       FIXED(SUM(P.PREIS * V.ANZAHL), 8,2) SUMME
  FROM ARTIKEL A, VERKAUF V, PREIS P
 WHERE A.NUMMER = V.NUMMER
   AND V.NUMMER = P.NUMMER
   AND P.START_DATUM =
                     (SELECT MAX (PR.START_DATUM)
                        FROM PREIS PR
                       WHERE PR.NUMMER = V.NUMMER
                         AND PR.START_DATUM <= V.DATUM)
GROUP BY A.BEZEICHNUNG !
 
resultcount :                     2
 
Enter command:
FETCH INTO :A, :B !
 
BEZEICHNUNG                    | SUMME
-------------------------------+-----------
Bier                           |     158.50
Wein                           |    1139.50
 
resultcount :                     2
 
Enter command:
SELECT A.BEZEICHNUNG,
       FIXED(SUM(P.PREIS * V.ANZAHL), 8,2) SUMME
  FROM ARTIKEL A, VERKAUF V, PREIS P
 WHERE A.NUMMER = V.NUMMER
   AND V.NUMMER = P.NUMMER
   AND P.START_DATUM <= V.DATUM
   AND NOT EXISTS (SELECT 1
                     FROM PREIS PR
                    WHERE PR.NUMMER = V.NUMMER
                      AND PR.START_DATUM > P.START_DATUM
                      AND PR.START_DATUM <= V.DATUM)
GROUP BY A.BEZEICHNUNG !
 
resultcount :                     2
 
Enter command:
FETCH INTO :A, :B !
 
BEZEICHNUNG                    | SUMME
-------------------------------+-----------
Bier                           |     158.50
Wein                           |    1139.50
 
resultcount :                     2
 
Enter command:
DROP TABLE ARTIKEL !
 
Enter command:
DROP TABLE PREIS !
 
Enter command:
DROP TABLE VERKAUF !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST SQLMODE INTERNAL !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST SQLMODE INTERNAL ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE PERSONAL (
ID   INTEGER PRIMARY KEY,
NAME VARCHAR (10))!
 
Enter command:
INSERT INTO PERSONAL VALUES (1, 'Ofer')!
 
Enter command:
INSERT INTO PERSONAL VALUES (2, 'Hansen')!
 
Enter command:
INSERT INTO PERSONAL VALUES (3, 'Meyer')!
 
Enter command:
INSERT INTO PERSONAL VALUES (4, 'Albrecht')!
 
Enter command:
INSERT INTO PERSONAL VALUES (5, 'Linke')!
 
Enter command:
CREATE TABLE RENTE (
ID     INTEGER REFERENCES PERSONAL,
JAHR   INTEGER,
MONATE INTEGER NOT NULL CHECK (MONATE BETWEEN 1 AND 12),
LOHN   INTEGER NOT NULL,
PRIMARY KEY (ID, JAHR))!
 
Enter command:
INSERT INTO RENTE VALUES (1, 1989,  2, 1500)!
 
Enter command:
INSERT INTO RENTE VALUES (2, 1989, 12, 2200)!
 
Enter command:
INSERT INTO RENTE VALUES (4, 1989,  3, 1200)!
 
Enter command:
INSERT INTO RENTE VALUES (3, 1989,  2, 1700)!
 
Enter command:
INSERT INTO RENTE VALUES (2, 1990, 12, 2300)!
 
Enter command:
INSERT INTO RENTE VALUES (3, 1990,  2, 1900)!
 
Enter command:
INSERT INTO RENTE VALUES (4, 1990,  3, 1400)!
 
Enter command:
INSERT INTO RENTE VALUES (2, 1991, 12, 2400)!
 
Enter command:
INSERT INTO RENTE VALUES (1, 1992,  2, 2100)!
 
Enter command:
INSERT INTO RENTE VALUES (4, 1992,  3, 1900)!
 
Enter command:
INSERT INTO RENTE VALUES (3, 1992,  2, 2100)!
 
Enter command:
INSERT INTO RENTE VALUES (2, 1992, 12, 2500)!
 
Enter command:
INSERT INTO RENTE VALUES (1, 1993,  2, 2200)!
 
Enter command:
INSERT INTO RENTE VALUES (4, 1993,  3, 2100)!
 
Enter command:
INSERT INTO RENTE VALUES (5, 1993,  6, 3000)!
 
Enter command:
INSERT INTO RENTE VALUES (2, 1993, 12, 2600)!
 
Enter command:
INSERT INTO RENTE VALUES (1, 1994,  2, 2300)!
 
Enter command:
INSERT INTO RENTE VALUES (2, 1994, 12, 2700)!
 
Enter command:
INSERT INTO RENTE VALUES (3, 1994,  2, 2300)!
 
Enter command:
SELECT P.NAME, FIXED(MIN(R1.JAHR),4,0) BEG,
       FIXED(MAX(R1.JAHR),4,0) ENDE,
       FIXED(SUM(R1.MONATE),4,0) SUM_MONATE,
       FIXED(SUM(R1.LOHN * R1.MONATE) / SUM(R1.MONATE), 6,0) AVG_LOHN
  FROM RENTE R1, PERSONAL P
 WHERE R1.ID = P.ID
   AND R1.JAHR >= (SELECT MIN (R2.JAHR)
                     FROM RENTE R2
                    WHERE R1.ID = R2.ID
                      AND EXISTS
                               (SELECT COUNT(*)
                                  FROM RENTE R3
                                 WHERE R1.ID = R3.ID
                                   AND R2.JAHR <= R3.JAHR
                                GROUP BY R3.ID
                                HAVING COUNT(R3.JAHR) =
                                     MAX(R3.JAHR) - R2.JAHR + 1
                                   AND SUM(R3.MONATE) >= 6)
                 )
GROUP BY P.NAME !
 
resultcount :                     4
 
Enter command:
FETCH INTO :A, :B, :C, :D, :E !
 
NAME       | BEG   | ENDE  | SUM_MONATE | AVG_LOHN
-----------+-------+-------+------------+---------
Albrecht   |  1992 |  1993 |     6      |    2000
Hansen     |  1989 |  1994 |    72      |    2450
Linke      |  1993 |  1993 |     6      |    3000
Ofer       |  1992 |  1994 |     6      |    2200
 
resultcount :                     4
 
Enter command:
SELECT P.NAME, FIXED(MIN(R1.JAHR),4,0) BEG,
       FIXED(MAX(R1.JAHR),4,0) ENDE,
       FIXED(SUM(R1.MONATE),4,0) SUM_MONATE,
       FIXED(SUM(R1.LOHN * R1.MONATE) / SUM(R1.MONATE), 6,0) AVG_LOHN
  FROM RENTE R1, PERSONAL P
 WHERE R1.ID = P.ID
   AND (  R1.JAHR IN (SELECT R2.JAHR + 1
                        FROM RENTE R2
                       WHERE R1.ID = R2.ID)
        OR
          R1.JAHR IN (SELECT R3.JAHR - 1
                        FROM RENTE R3
                       WHERE R1.ID = R3.ID)
        OR
          R1.MONATE >= 6)
GROUP BY P.NAME, R1.ID
HAVING SUM(MONATE) >= 6 !
 
resultcount :                     4
 
Enter command:
FETCH INTO :A, :B, :C, :D, :E !
 
NAME       | BEG   | ENDE  | SUM_MONATE | AVG_LOHN
-----------+-------+-------+------------+---------
Albrecht   |  1989 |  1993 |    12      |    1650
Hansen     |  1989 |  1994 |    72      |    2450
Linke      |  1993 |  1993 |     6      |    3000
Ofer       |  1992 |  1994 |     6      |    2200
 
resultcount :                     4
 
Enter command:
DROP TABLE RENTE !
 
Enter command:
DROP TABLE PERSONAL !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST SQLMODE INTERNAL !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST SQLMODE INTERNAL ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE ARTIKEL (
ARTIKEL_NR  INTEGER PRIMARY KEY,
BEZEICHNUNG VARCHAR(12) NOT NULL)!
 
Enter command:
INSERT INTO ARTIKEL VALUES (1, 'Brot')!
 
Enter command:
INSERT INTO ARTIKEL VALUES (2, 'Fisch')!
 
Enter command:
INSERT INTO ARTIKEL VALUES (3, 'Nudeln')!
 
Enter command:
INSERT INTO ARTIKEL VALUES (4, 'Milch')!
 
Enter command:
INSERT INTO ARTIKEL VALUES (5, 'Tomatensosse')!
 
Enter command:
CREATE TABLE SCANNER_HEADER (
BON_ID  INTEGER PRIMARY KEY,
DATUM   DATE NOT NULL) !
 
Enter command:
INSERT INTO SCANNER_HEADER VALUES (1, '19951220')!
 
Enter command:
INSERT INTO SCANNER_HEADER VALUES (2, '19951220')!
 
Enter command:
INSERT INTO SCANNER_HEADER VALUES (3, '19951220')!
 
Enter command:
INSERT INTO SCANNER_HEADER VALUES (4, '19951220')!
 
Enter command:
INSERT INTO SCANNER_HEADER VALUES (5, '19951220')!
 
Enter command:
INSERT INTO SCANNER_HEADER VALUES (6, '19951220')!
 
Enter command:
INSERT INTO SCANNER_HEADER VALUES (7, '19951220')!
 
Enter command:
INSERT INTO SCANNER_HEADER VALUES (8, '19951220')!
 
Enter command:
CREATE TABLE SCANNER_LINE (
BON_ID     INTEGER
           CONSTRAINT SCANNER_HEADER_LINE_REF REFERENCES SCANNER_HEADER,
ZEILE      INTEGER,
ARTIKEL_NR INTEGER NOT NULL
           CONSTRAINT SCANNER_ARTIKEL_REF REFERENCES ARTIKEL,
MENGE      INTEGER NOT NULL
           CONSTRAINT MENGEN_CHECK CHECK (MENGE > 0),
CONSTRAINT SCANNER_KEY PRIMARY KEY (BON_ID, ZEILE))!
 
Enter command:
INSERT INTO SCANNER_LINE VALUES (1,1,1,1)!
 
Enter command:
INSERT INTO SCANNER_LINE VALUES (1,2,2,1)!
 
Enter command:
INSERT INTO SCANNER_LINE VALUES (1,3,3,1)!
 
Enter command:
INSERT INTO SCANNER_LINE VALUES (1,4,4,1)!
 
Enter command:
INSERT INTO SCANNER_LINE VALUES (1,5,5,1)!
 
Enter command:
INSERT INTO SCANNER_LINE VALUES (2,1,2,1)!
 
Enter command:
INSERT INTO SCANNER_LINE VALUES (2,2,4,2)!
 
Enter command:
INSERT INTO SCANNER_LINE VALUES (3,1,1,4)!
 
Enter command:
INSERT INTO SCANNER_LINE VALUES (3,2,3,3)!
 
Enter command:
INSERT INTO SCANNER_LINE VALUES (3,3,5,1)!
 
Enter command:
INSERT INTO SCANNER_LINE VALUES (4,1,1,1)!
 
Enter command:
INSERT INTO SCANNER_LINE VALUES (4,2,3,2)!
 
Enter command:
INSERT INTO SCANNER_LINE VALUES (4,3,4,2)!
 
Enter command:
INSERT INTO SCANNER_LINE VALUES (5,1,2,1)!
 
Enter command:
INSERT INTO SCANNER_LINE VALUES (5,2,4,2)!
 
Enter command:
INSERT INTO SCANNER_LINE VALUES (5,3,5,2)!
 
Enter command:
INSERT INTO SCANNER_LINE VALUES (6,1,3,2)!
 
Enter command:
INSERT INTO SCANNER_LINE VALUES (6,2,5,1)!
 
Enter command:
INSERT INTO SCANNER_LINE VALUES (7,1,1,1)!
 
Enter command:
INSERT INTO SCANNER_LINE VALUES (8,1,3,2)!
 
Enter command:
INSERT INTO SCANNER_LINE VALUES (8,2,5,3)!
 
Enter command:
SELECT EINS.BEZEICHNUNG, ZWEI.BEZEICHNUNG
  FROM ARTIKEL EINS, ARTIKEL ZWEI,
       SCANNER_LINE SC1,  SCANNER_LINE SC2
 WHERE SC1.BON_ID = SC2.BON_ID
   AND SC1.ARTIKEL_NR  = EINS.ARTIKEL_NR
   AND SC2.ARTIKEL_NR  = ZWEI.ARTIKEL_NR
GROUP BY EINS.BEZEICHNUNG, EINS.ARTIKEL_NR,
         ZWEI.BEZEICHNUNG, ZWEI.ARTIKEL_NR
HAVING COUNT(EINS.ARTIKEL_NR) >=
           (SELECT 0.5 * COUNT(*)
              FROM SCANNER_LINE SC
             WHERE SC.ARTIKEL_NR = EINS.ARTIKEL_NR)
    OR COUNT(ZWEI.ARTIKEL_NR) >=
           (SELECT 0.5 * COUNT(*)
              FROM SCANNER_LINE SC
             WHERE SC.ARTIKEL_NR = ZWEI.ARTIKEL_NR)
!
 
resultcount :                    21
 
Enter command:
FETCH INTO :A, :B !
 
BEZEICHNUNG  | BEZEICHNUNG
-------------+-------------
Brot         | Brot
Brot         | Milch
Brot         | Nudeln
Brot         | Tomatensosse
Fisch        | Fisch
Fisch        | Milch
Fisch        | Tomatensosse
Milch        | Brot
Milch        | Fisch
Milch        | Milch
Milch        | Nudeln
Milch        | Tomatensosse
Nudeln       | Brot
Nudeln       | Milch
Nudeln       | Nudeln
Nudeln       | Tomatensosse
Tomatensosse | Brot
 
BEZEICHNUNG  | BEZEICHNUNG
-------------+-------------
Tomatensosse | Fisch
Tomatensosse | Milch
Tomatensosse | Nudeln
Tomatensosse | Tomatensosse
 
resultcount :                    21
 
Enter command:
SELECT EINS.BEZEICHNUNG, ZWEI.BEZEICHNUNG
  FROM ARTIKEL EINS, ARTIKEL ZWEI,
       SCANNER_LINE SC1,  SCANNER_LINE SC2
 WHERE SC1.BON_ID = SC2.BON_ID
   AND SC1.ARTIKEL_NR  = EINS.ARTIKEL_NR
   AND SC2.ARTIKEL_NR  = ZWEI.ARTIKEL_NR
   AND EINS.ARTIKEL_NR < ZWEI.ARTIKEL_NR
GROUP BY EINS.BEZEICHNUNG, EINS.ARTIKEL_NR,
         ZWEI.BEZEICHNUNG, ZWEI.ARTIKEL_NR
HAVING COUNT(*) >
           (SELECT 0.5 * COUNT(DISTINCT SC.BON_ID)
              FROM SCANNER_LINE SC
             WHERE SC.ARTIKEL_NR IN (EINS.ARTIKEL_NR, ZWEI.ARTIKEL_NR))
!
 
resultcount :                     2
 
Enter command:
FETCH INTO :A, :B !
 
BEZEICHNUNG  | BEZEICHNUNG
-------------+-------------
Fisch        | Milch
Nudeln       | Tomatensosse
 
resultcount :                     2
 
Enter command:
SELECT EINS.BEZEICHNUNG, ZWEI.BEZEICHNUNG
  FROM ARTIKEL EINS, ARTIKEL ZWEI,
       SCANNER_LINE SC1,  SCANNER_LINE SC2
 WHERE SC1.BON_ID = SC2.BON_ID
   AND SC1.ARTIKEL_NR  = EINS.ARTIKEL_NR
   AND SC2.ARTIKEL_NR  = ZWEI.ARTIKEL_NR
   AND EINS.ARTIKEL_NR < ZWEI.ARTIKEL_NR
GROUP BY EINS.BEZEICHNUNG, EINS.ARTIKEL_NR,
         ZWEI.BEZEICHNUNG, ZWEI.ARTIKEL_NR
HAVING COUNT(*) * 3 >
           (SELECT COUNT(SC.BON_ID)
              FROM SCANNER_LINE SC
             WHERE SC.ARTIKEL_NR IN (EINS.ARTIKEL_NR, ZWEI.ARTIKEL_NR))
!
 
resultcount :                     2
 
Enter command:
FETCH INTO :A, :B !
 
BEZEICHNUNG  | BEZEICHNUNG
-------------+-------------
Fisch        | Milch
Nudeln       | Tomatensosse
 
resultcount :                     2
 
Enter command:
DROP TABLE ARTIKEL !
 
Enter command:
DROP TABLE SCANNER_HEADER !
 
Enter command:
DROP TABLE SCANNER_LINE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST SQLMODE INTERNAL !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST SQLMODE INTERNAL ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE ZAEHLUNGEN (
ZAEHLUNGS_ID   INTEGER,
TIER           VARCHAR (30),
ANZAHL         INTEGER NOT NULL,
PRIMARY KEY (ZAEHLUNGS_ID, TIER))!
 
Enter command:
INSERT INTO ZAEHLUNGEN VALUES (1, 'Frosch    ', 12)!
 
Enter command:
INSERT INTO ZAEHLUNGEN VALUES (1, 'Kaulquappe', 16)!
 
Enter command:
INSERT INTO ZAEHLUNGEN VALUES (1, 'Lurch     ', 10)!
 
Enter command:
INSERT INTO ZAEHLUNGEN VALUES (2, 'Frosch    ',  2)!
 
Enter command:
INSERT INTO ZAEHLUNGEN VALUES (2, 'Lurch     ',  1)!
 
Enter command:
INSERT INTO ZAEHLUNGEN VALUES (2, 'Kroete    ',  3)!
 
Enter command:
INSERT INTO ZAEHLUNGEN VALUES (3, 'Frosch    ',  3)!
 
Enter command:
CREATE TABLE ZAEHLUNGSGRUPPEN (
GRUPPEN_ID    INTEGER,
ZAEHLUNGS_ID  INTEGER,
PRIMARY KEY (GRUPPEN_ID, ZAEHLUNGS_ID))!
 
Enter command:
INSERT INTO ZAEHLUNGSGRUPPEN VALUES (1,1)!
 
Enter command:
INSERT INTO ZAEHLUNGSGRUPPEN VALUES (1,2)!
 
Enter command:
INSERT INTO ZAEHLUNGSGRUPPEN VALUES (2,1)!
 
Enter command:
INSERT INTO ZAEHLUNGSGRUPPEN VALUES (2,3)!
 
Enter command:
INSERT INTO ZAEHLUNGSGRUPPEN VALUES (3,3)!
 
Enter command:
SELECT TIER, FIXED(SUM(ANZAHL) / X.NR, 4,1)
  FROM (SELECT COUNT(GRUPPEN_ID) NR
          FROM ZAEHLUNGSGRUPPEN
         WHERE GRUPPEN_ID = 1) X,
       ZAEHLUNGEN Z,
       ZAEHLUNGSGRUPPEN ZG
 WHERE ZG.GRUPPEN_ID = 1
   AND ZG.ZAEHLUNGS_ID = Z.ZAEHLUNGS_ID
GROUP BY TIER, X.NR !
 
resultcount :                     4
 
Enter command:
FETCH INTO :A, :B!
 
TIER                           | EXPRESSION1
-------------------------------+------------
Frosch                         |    7.0
Kaulquappe                     |    8.0
Kroete                         |    1.5
Lurch                          |    5.5
 
resultcount :                     4
 
Enter command:
DROP TABLE ZAEHLUNGEN !
 
Enter command:
DROP TABLE ZAEHLUNGSGRUPPEN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST SQLMODE INTERNAL !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST SQLMODE INTERNAL ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE PATIENTEN (
ID      INTEGER PRIMARY KEY,
NAME    VARCHAR (30))!
 
Enter command:
INSERT INTO PATIENTEN VALUES (1, 'Albrecht')!
 
Enter command:
INSERT INTO PATIENTEN VALUES (2, 'Ladewig')!
 
Enter command:
INSERT INTO PATIENTEN VALUES (3, 'Weiss')!
 
Enter command:
INSERT INTO PATIENTEN VALUES (4, 'Suhr')!
 
Enter command:
INSERT INTO PATIENTEN VALUES (5, 'Medinger')!
 
Enter command:
INSERT INTO PATIENTEN VALUES (6, 'Linke')!
 
Enter command:
CREATE TABLE MESSUNGEN (
ID    INTEGER REFERENCES PATIENTEN,
DATUM DATE,
WERT  FIXED(3,1) NOT NULL,
PRIMARY KEY (ID, DATUM))!
 
Enter command:
INSERT INTO MESSUNGEN VALUES (1, '19960208', 38.4)!
 
Enter command:
INSERT INTO MESSUNGEN VALUES (2, '19960208', 36.7)!
 
Enter command:
INSERT INTO MESSUNGEN VALUES (3, '19960208', 37.5)!
 
Enter command:
INSERT INTO MESSUNGEN VALUES (6, '19960208', 40.7)!
 
Enter command:
INSERT INTO MESSUNGEN VALUES (5, '19960208', 39.5)!
 
Enter command:
INSERT INTO MESSUNGEN VALUES (4, '19960208', 40.8)!
 
Enter command:
INSERT INTO MESSUNGEN VALUES (1, '19960209', 40.6)!
 
Enter command:
INSERT INTO MESSUNGEN VALUES (6, '19960209', 37.3)!
 
Enter command:
INSERT INTO MESSUNGEN VALUES (5, '19960209', 41.8)!
 
Enter command:
INSERT INTO MESSUNGEN VALUES (4, '19960209', 38.7)!
 
Enter command:
INSERT INTO MESSUNGEN VALUES (3, '19960209', 42.2)!
 
Enter command:
INSERT INTO MESSUNGEN VALUES (2, '19960209', 38.1)!
 
Enter command:
INSERT INTO MESSUNGEN VALUES (1, '19960210', 40.5)!
 
Enter command:
INSERT INTO MESSUNGEN VALUES (6, '19960210', 38.1)!
 
Enter command:
INSERT INTO MESSUNGEN VALUES (5, '19960210', 37.5)!
 
Enter command:
INSERT INTO MESSUNGEN VALUES (4, '19960210', 41.7)!
 
Enter command:
INSERT INTO MESSUNGEN VALUES (3, '19960210', 36.5)!
 
Enter command:
INSERT INTO MESSUNGEN VALUES (2, '19960210', 36.1)!
 
Enter command:
INSERT INTO MESSUNGEN VALUES (1, '19960211', 38.1)!
 
Enter command:
INSERT INTO MESSUNGEN VALUES (4, '19960211', 42.3)!
 
Enter command:
INSERT INTO MESSUNGEN VALUES (3, '19960211', 41.7)!
 
Enter command:
INSERT INTO MESSUNGEN VALUES (6, '19960211', 36.0)!
 
Enter command:
INSERT INTO MESSUNGEN VALUES (5, '19960211', 40.8)!
 
Enter command:
INSERT INTO MESSUNGEN VALUES (2, '19960211', 37.8)!
 
Enter command:
SELECT NAME, FIXED(AVG(M.WERT), 5, 3) AVG_WERT, MW.WERT
  FROM (SELECT WERT, ID, DATUM FROM MESSUNGEN ME1
         WHERE DATUM = (SELECT MAX(DATUM)
                          FROM MESSUNGEN ME2
                         WHERE ME2.ID = ME1.ID)
       ) MW,
                     PATIENTEN P, MESSUNGEN M
 WHERE P.ID  = M.ID
   AND MW.ID = M.ID
GROUP BY NAME, MW.WERT
HAVING MW.WERT > AVG(M.WERT) !
 
resultcount :                     4
 
Enter command:
FETCH INTO :A, :B, :C !
 
NAME                           | AVG_WERT | WERT
-------------------------------+----------+------
Ladewig                        |  37.175  |  37.8
Medinger                       |  39.900  |  40.8
Suhr                           |  40.875  |  42.3
Weiss                          |  39.475  |  41.7
 
resultcount :                     4
 
Enter command:
SELECT P.NAME, AVG (M1.WERT) AVG_WERT, M2.WERT
  FROM PATIENTEN P, MESSUNGEN M1, MESSUNGEN M2
 WHERE P.ID = M1.ID
   AND P.ID = M2.ID
   AND M2.DATUM = (SELECT MAX(MI.DATUM)
                     FROM MESSUNGEN MI
                    WHERE MI.ID = M2.ID)
GROUP BY P.NAME, M2.WERT
HAVING M2.WERT > AVG (M1.WERT)!
 
resultcount :                     4
 
Enter command:
FETCH INTO :A, :B, :C !
 
NAME              :  Ladewig
AVG_WERT          :   3.7175000000000000000000000000000000000E+01
WERT              :   37.8
-----------------------------------------------------------------
NAME              :  Medinger
AVG_WERT          :   3.9900000000000000000000000000000000000E+01
WERT              :   40.8
-----------------------------------------------------------------
NAME              :  Suhr
AVG_WERT          :   4.0875000000000000000000000000000000000E+01
WERT              :   42.3
-----------------------------------------------------------------
NAME              :  Weiss
AVG_WERT          :   3.9475000000000000000000000000000000000E+01
WERT              :   41.7
 
resultcount :                     4
 
Enter command:
SELECT P.NAME, MESS.AVG_WERT, M.WERT
  FROM PATIENTEN P, MESSUNGEN M,
       (SELECT MAV.ID, AVG(MAV.WERT) AVG_WERT,
                       MAX(MAV.DATUM) MAX_DATUM
          FROM MESSUNGEN MAV
        GROUP BY MAV.ID) MESS
 WHERE P.ID = M.ID
   AND P.ID = MESS.ID
   AND M.DATUM = MESS.MAX_DATUM
   AND M.WERT > MESS.AVG_WERT !
 
resultcount :                     4
 
Enter command:
FETCH INTO :A, :B, :C !
 
NAME              :  Ladewig
AVG_WERT          :   3.7175000000000000000000000000000000000E+01
WERT              :   37.8
-----------------------------------------------------------------
NAME              :  Weiss
AVG_WERT          :   3.9475000000000000000000000000000000000E+01
WERT              :   41.7
-----------------------------------------------------------------
NAME              :  Suhr
AVG_WERT          :   4.0875000000000000000000000000000000000E+01
WERT              :   42.3
-----------------------------------------------------------------
NAME              :  Medinger
AVG_WERT          :   3.9900000000000000000000000000000000000E+01
WERT              :   40.8
 
resultcount :                     4
 
Enter command:
DROP TABLE PATIENTEN !
 
Enter command:
DROP TABLE MESSUNGEN!
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST SQLMODE ORACLE !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST SQLMODE ORACLE ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE FLUGPLAN
 (FLUG_NR VARCHAR(10) CONSTRAINT FLUGPLAN_PK PRIMARY KEY,
  AB_ORT  VARCHAR(30) NOT NULL,
  AN_ORT  VARCHAR(30) NOT NULL)!
 
Enter command:
INSERT INTO FLUGPLAN VALUES ('IT001', 'Hamburg  ', 'Berlin   ')!
 
Enter command:
INSERT INTO FLUGPLAN VALUES ('IT002', 'Berlin   ', 'Hamburg  ')!
 
Enter command:
INSERT INTO FLUGPLAN VALUES ('IT003', 'Hamburg  ', 'Berlin   ')!
 
Enter command:
INSERT INTO FLUGPLAN VALUES ('IT004', 'Berlin   ', 'Hamburg  ')!
 
Enter command:
INSERT INTO FLUGPLAN VALUES ('IT005', 'Hamburg  ', 'Bremen   ')!
 
Enter command:
INSERT INTO FLUGPLAN VALUES ('IT006', 'Bremen   ', 'Hamburg  ')!
 
Enter command:
INSERT INTO FLUGPLAN VALUES ('IT007', 'Bremen   ', 'Berlin   ')!
 
Enter command:
INSERT INTO FLUGPLAN VALUES ('IT008', 'Berlin   ', 'Bremen   ')!
 
Enter command:
INSERT INTO FLUGPLAN VALUES ('IT009', 'Bremen   ', 'Frankfurt')!
 
Enter command:
INSERT INTO FLUGPLAN VALUES ('IT010', 'Frankfurt', 'Bremen   ')!
 
Enter command:
CREATE TABLE FLUG
 (FLUG_NR  VARCHAR(10) CONSTRAINT FLUGPLAN_FK REFERENCES FLUGPLAN,
  DATUM    DATE,
  PERSONEN NUMBER NOT NULL,
      CONSTRAINT FLUG_PK PRIMARY KEY (FLUG_NR, DATUM)) !
 
Enter command:
INSERT INTO FLUG VALUES ('IT001', '20-APR-96',  60)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT002', '20-APR-96',  72)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT003', '20-APR-96',  37)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT004', '20-APR-96',  61)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT005', '20-APR-96',  38)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT006', '20-APR-96',  21)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT007', '20-APR-96',  63)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT008', '20-APR-96',  58)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT009', '20-APR-96',  59)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT010', '20-APR-96',  66)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT001', '21-APR-96',  55)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT002', '21-APR-96',  26)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT003', '21-APR-96',  68)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT004', '21-APR-96',  67)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT005', '21-APR-96',  23)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT006', '21-APR-96',  50)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT007', '21-APR-96',  34)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT008', '21-APR-96',  32)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT009', '21-APR-96',  44)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT010', '21-APR-96',  70)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT001', '22-APR-96',  47)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT002', '22-APR-96',  91)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT003', '22-APR-96',  34)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT004', '22-APR-96', 122)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT005', '22-APR-96', 109)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT006', '22-APR-96', 118)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT007', '22-APR-96',  26)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT008', '22-APR-96',  79)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT009', '22-APR-96',  31)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT010', '22-APR-96', 128)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT001', '23-APR-96',  82)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT002', '23-APR-96',  63)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT003', '23-APR-96',  70)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT004', '23-APR-96',  32)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT005', '23-APR-96',  91)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT006', '23-APR-96',  34)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT007', '23-APR-96',  74)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT008', '23-APR-96',  69)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT009', '23-APR-96',  90)!
 
Enter command:
INSERT INTO FLUG VALUES ('IT010', '23-APR-96',  66)!
 
Enter command:
SELECT SUBSTR(AB_ORT, 1, 10), DATUM, SUM(PERSONEN) SUMME_S
  FROM FLUGPLAN FP, FLUG F
 WHERE FP.FLUG_NR = F.FLUG_NR
GROUP BY AB_ORT, DATUM
HAVING SUM(PERSONEN) =
   (SELECT MIN(SUM( FI.PERSONEN ))
             FROM FLUGPLAN FPI, FLUG FI
            WHERE FPI.FLUG_NR = FI.FLUG_NR
              AND FP.AB_ORT   = FPI.AB_ORT
           GROUP BY DATUM)
   !
 
***ERROR  -3021 Invalid mixture of functions and columns                   0172
 
Enter command:
FETCH INTO :A, :B, :C !
 
***ERROR  -4000 Unknown result table                                       0001
 
Enter command:
SELECT SUBSTR(AB_ORT, 1, 10), DATUM, SUM(PERSONEN) SUMME_S
  FROM FLUGPLAN FP, FLUG F
 WHERE FP.FLUG_NR = F.FLUG_NR
GROUP BY AB_ORT, DATUM
HAVING (AB_ORT, SUM(PERSONEN)) = ANY
   (SELECT AB_ORT, MIN(SUM_P)
      FROM
          (SELECT AB_ORT, SUM(PERSONEN) SUM_P
             FROM FLUGPLAN FP1, FLUG F1
            WHERE FP1.FLUG_NR = F1.FLUG_NR
           GROUP BY AB_ORT, DATUM) S
      GROUP BY AB_ORT
   )!
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B, :C !
 
EXPRESSION1       :  Berlin
DATUM             :  21-APR-96
SUMME_S           :   1.2500000000000000000000000000000000000E+02
-----------------------------------------------------------------
EXPRESSION1       :  Bremen
DATUM             :  21-APR-96
SUMME_S           :   1.2800000000000000000000000000000000000E+02
-----------------------------------------------------------------
EXPRESSION1       :  Frankfurt
DATUM             :  20-APR-96
SUMME_S           :   6.6000000000000000000000000000000000000E+01
-----------------------------------------------------------------
EXPRESSION1       :  Frankfurt
DATUM             :  23-APR-96
SUMME_S           :   6.6000000000000000000000000000000000000E+01
-----------------------------------------------------------------
EXPRESSION1       :  Hamburg
DATUM             :  20-APR-96
SUMME_S           :   1.3500000000000000000000000000000000000E+02
 
resultcount :                     5
 
Enter command:
SELECT SUBSTR(AB_ORT, 1, 10), DATUM, SUM(PERSONEN) SUMME_S
  FROM FLUGPLAN FP, FLUG F
 WHERE FP.FLUG_NR = F.FLUG_NR
GROUP BY AB_ORT, DATUM
HAVING (AB_ORT, SUM(PERSONEN)) IN
   (SELECT AB_ORT, MIN(SUM_P)
      FROM
          (SELECT AB_ORT, SUM(PERSONEN) SUM_P
             FROM FLUGPLAN FP1, FLUG F1
            WHERE FP1.FLUG_NR = F1.FLUG_NR
           GROUP BY AB_ORT, DATUM) S
      GROUP BY AB_ORT
   )!
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B, :C !
 
EXPRESSION1       :  Berlin
DATUM             :  21-APR-96
SUMME_S           :   1.2500000000000000000000000000000000000E+02
-----------------------------------------------------------------
EXPRESSION1       :  Bremen
DATUM             :  21-APR-96
SUMME_S           :   1.2800000000000000000000000000000000000E+02
-----------------------------------------------------------------
EXPRESSION1       :  Frankfurt
DATUM             :  20-APR-96
SUMME_S           :   6.6000000000000000000000000000000000000E+01
-----------------------------------------------------------------
EXPRESSION1       :  Frankfurt
DATUM             :  23-APR-96
SUMME_S           :   6.6000000000000000000000000000000000000E+01
-----------------------------------------------------------------
EXPRESSION1       :  Hamburg
DATUM             :  20-APR-96
SUMME_S           :   1.3500000000000000000000000000000000000E+02
 
resultcount :                     5
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
SELECT *
      FROM DUAL
     WHERE EXISTS (SELECT DATUM FROM FLUG) !
 
resultcount :                     1
 
Enter command:
SET FORMAT EUR !
 
Enter command:
SELECT *
      FROM DUAL
     WHERE EXISTS (SELECT DATUM FROM FLUG) !
 
resultcount :                     1
 
Enter command:
SET FORMAT INTERNAL !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST SQLMODE ANSI !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST SQLMODE ANSI ISOLATION LEVEL 1 !
 
Enter command:
DECLARE C CURSOR FOR
SELECT AB_ORT, DATUM, SUM(PERSONEN) SUMME_S
  FROM FLUGPLAN FP, FLUG F
 WHERE FP.FLUG_NR = F.FLUG_NR
GROUP BY AB_ORT, DATUM
HAVING SUM(PERSONEN) <= ALL
   (SELECT SUM(FI.PERSONEN)
      FROM FLUGPLAN FPI, FLUG FI
     WHERE FPI.FLUG_NR = FI.FLUG_NR
       AND FPI.AB_ORT = MIN(FP.AB_ORT)
    GROUP BY DATUM )
   !
 
resultcount :                     5
 
Enter command:
FETCH C INTO :A, :B, :C !
 
AB_ORT            :  Berlin
DATUM             :  YYYY-MM-DD hh:mm:ss.zzzzzz
SUMME_S           :   1.2500000000000000000000000000000000000E+02
-----------------------------------------------------------------
AB_ORT            :  Bremen
DATUM             :  YYYY-MM-DD hh:mm:ss.zzzzzz
SUMME_S           :   1.2800000000000000000000000000000000000E+02
-----------------------------------------------------------------
AB_ORT            :  Frankfurt
DATUM             :  YYYY-MM-DD hh:mm:ss.zzzzzz
SUMME_S           :   6.6000000000000000000000000000000000000E+01
-----------------------------------------------------------------
AB_ORT            :  Frankfurt
DATUM             :  YYYY-MM-DD hh:mm:ss.zzzzzz
SUMME_S           :   6.6000000000000000000000000000000000000E+01
-----------------------------------------------------------------
AB_ORT            :  Hamburg
DATUM             :  YYYY-MM-DD hh:mm:ss.zzzzzz
SUMME_S           :   1.3500000000000000000000000000000000000E+02
 
resultcount :                     5
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST SQLMODE ORACLE !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST SQLMODE ORACLE ISOLATION LEVEL 1 !
 
Enter command:
DECLARE C CURSOR FOR
SELECT AB_ORT, DATUM, SUM(PERSONEN) SUMME_S
  FROM FLUGPLAN FP, FLUG F
 WHERE FP.FLUG_NR = F.FLUG_NR
GROUP BY AB_ORT, DATUM
HAVING SUM(PERSONEN) <= ALL
   (SELECT SUM(FI.PERSONEN)
      FROM FLUGPLAN FPI, FLUG FI
     WHERE FPI.FLUG_NR = FI.FLUG_NR
       AND FPI.AB_ORT = FP.AB_ORT
    GROUP BY DATUM )
   !
 
resultcount :                     0
 
Enter command:
FETCH C INTO :A, :B, :C !
 
AB_ORT            :  Berlin
DATUM             :  21-APR-96
SUMME_S           :   1.2500000000000000000000000000000000000E+02
-----------------------------------------------------------------
AB_ORT            :  Bremen
DATUM             :  21-APR-96
SUMME_S           :   1.2800000000000000000000000000000000000E+02
-----------------------------------------------------------------
AB_ORT            :  Frankfurt
DATUM             :  20-APR-96
SUMME_S           :   6.6000000000000000000000000000000000000E+01
-----------------------------------------------------------------
AB_ORT            :  Frankfurt
DATUM             :  23-APR-96
SUMME_S           :   6.6000000000000000000000000000000000000E+01
-----------------------------------------------------------------
AB_ORT            :  Hamburg
DATUM             :  20-APR-96
SUMME_S           :   1.3500000000000000000000000000000000000E+02
 
resultcount :                     5
 
Enter command:
DECLARE C CURSOR FOR
SELECT SUBSTR(AB_ORT, 1, 10), DATUM, SUM(PERSONEN) SUMME_S
  FROM FLUGPLAN FP, FLUG F
 WHERE FP.FLUG_NR = F.FLUG_NR
GROUP BY AB_ORT, DATUM
HAVING SUM(PERSONEN) <= ALL
   (SELECT SUM(FI.PERSONEN)
      FROM FLUGPLAN FPI, FLUG FI
     WHERE FPI.FLUG_NR = FI.FLUG_NR
       AND FPI.AB_ORT = FP.AB_ORT
    GROUP BY DATUM )
   !
 
resultcount :                     0
 
Enter command:
FETCH C INTO :A, :B, :C !
 
EXPRESSION1       :  Berlin
DATUM             :  21-APR-96
SUMME_S           :   1.2500000000000000000000000000000000000E+02
-----------------------------------------------------------------
EXPRESSION1       :  Bremen
DATUM             :  21-APR-96
SUMME_S           :   1.2800000000000000000000000000000000000E+02
-----------------------------------------------------------------
EXPRESSION1       :  Frankfurt
DATUM             :  20-APR-96
SUMME_S           :   6.6000000000000000000000000000000000000E+01
-----------------------------------------------------------------
EXPRESSION1       :  Frankfurt
DATUM             :  23-APR-96
SUMME_S           :   6.6000000000000000000000000000000000000E+01
-----------------------------------------------------------------
EXPRESSION1       :  Hamburg
DATUM             :  20-APR-96
SUMME_S           :   1.3500000000000000000000000000000000000E+02
 
resultcount :                     5
 
Enter command:
DROP TABLE FLUGPLAN!
 
Enter command:
DROP TABLE FLUG !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE PERSONAL (
ID        FIXED (4) PRIMARY KEY,
NAME      VARCHAR (30) NOT NULL,
GEB_DATE1 DATE,
GEB_DATE2 TIMESTAMP)!
 
Enter command:
INSERT PERSONAL VALUES (1,'Wilckes, Eva     ','19660523',
'19660523000000000000')!
 
Enter command:
INSERT PERSONAL VALUES (2,'Ofer, Ute        ','19650101',
'19650101000000000000')!
 
Enter command:
INSERT PERSONAL VALUES (3,'Bartels, Maja    ','19651031',
'19651031000000000000')!
 
Enter command:
INSERT PERSONAL VALUES (4,'Weidert, Albrecht','19620810',
'19620810000000000000')!
 
Enter command:
INSERT PERSONAL VALUES (5,'Klokkers, Jan    ','19610911',
'19610911000000000000')!
 
Enter command:
INSERT PERSONAL VALUES (6,'Klemm, Lisel     ','19681002',
'19681002000000000000')!
 
Enter command:
INSERT PERSONAL VALUES (7,'Krauss, Sepp     ','19550920',
'19550920000000000000')!
 
Enter command:
INSERT PERSONAL VALUES (8,'Lynn, Barbara    ','19611001',
'19611001000000000000')!
 
Enter command:
INSERT PERSONAL VALUES (9,'Zabel, Manfred   ','19590820',
'19590820000000000000')!
 
Enter command:
INSERT PERSONAL VALUES (10,'Dietz, Juergen   ','19550710',
'19550710000000000000')!
 
Enter command:
INSERT PERSONAL VALUES (11,'Passauf, Clever  ','19600229',
'19600229000000000000')!
 
Enter command:
COMMIT !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST SQLMODE DB2 !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST SQLMODE DB2 ISOLATION LEVEL 1 !
 
Enter command:
SET FORMAT EUR !
 
Enter command:
 * FUEHRT ZUM FEHLER WEGEN 29.2.1997, ILLEGAL DATUM !
 
Enter command:
DECLARE C CURSOR FOR
SELECT NAME, GEB_DATE1
FROM PERSONAL
WHERE
      DATE(SUBSTR (CHAR (GEB_DATE1)    , 1, 8) ||
           SUBSTR (CHAR (DATE('01.07.1996') + 1 YEAR), 9, 2)) >=
                                 DATE('01.07.1996') + 1 YEAR
  AND DATE(SUBSTR (CHAR (GEB_DATE1)    , 1, 8) ||
           SUBSTR (CHAR (DATE('01.07.1996') + 1 YEAR), 9, 2)) <=
                                 DATE('01.07.1996') + 1 YEAR + 45 DAYS !
 
resultcount :               unknown
 
Enter command:
FETCH C INTO :A, :B !
 
NAME                           | GEB_DATE1
-------------------------------+-----------
Weidert, Albrecht              | 10.08.1962
Dietz, Juergen                 | 10.07.1955
 
resultcount :                     2
 
***ERROR  -3048 Invalid date format:EUR                                    0001
 
Enter command:
CLOSE C !
 
Enter command:
DECLARE C CURSOR FOR
SELECT NAME, GEB_DATE1
FROM PERSONAL
WHERE DATE(SUBSTR (CHAR (GEB_DATE1)    , 1, 8) ||
           SUBSTR ('01.07.1996'         , 9, 2)) >= DATE('01.07.1996')
  AND DATE(SUBSTR (CHAR (GEB_DATE1)    , 1, 8) ||
           SUBSTR ('01.07.1996'         , 9, 2)) <=
                                 DATE('01.07.1996') + 45 DAYS
OR    DATE(SUBSTR (CHAR (GEB_DATE1)    , 1, 8) ||
           SUBSTR (CHAR (DATE('01.07.1996') + 1 YEAR), 9, 2)) >=
                                 DATE('01.07.1996') + 1 YEAR
  AND DATE(SUBSTR (CHAR (GEB_DATE1)    , 1, 8) ||
           SUBSTR (CHAR (DATE('01.07.1996') + 1 YEAR), 9, 2)) <=
                                 DATE('01.07.1996') + 1 YEAR + 45 DAYS!
 
resultcount :               unknown
 
Enter command:
FETCH C INTO :A, :B !
 
NAME                           | GEB_DATE1
-------------------------------+-----------
Weidert, Albrecht              | 10.08.1962
Dietz, Juergen                 | 10.07.1955
 
resultcount :                     2
 
***ERROR  -3048 Invalid date format:EUR                                    0001
 
Enter command:
CLOSE C !
 
Enter command:
SET FORMAT EUR !
 
Enter command:
DECLARE C CURSOR FOR
SELECT NAME, GEB_DATE1
FROM PERSONAL
WHERE
      DAYS (GEB_DATE1 + 1 YEARS) -
      DAYS (GEB_DATE1 - (MONTH (GEB_DATE1) - 1) MONTHS
                      - (DAY   (GEB_DATE1) - 1) DAYS ) -
      (DAYS (DATE ('01.07.1996') + 1 YEARS) -
       DAYS (DATE ('01.07.1996') -
            (MONTH (DATE ('01.07.1996')) - 1) MONTHS -
            (DAY   (DATE ('01.07.1996')) - 1) DAYS))
     BETWEEN 0 AND 45!
 
resultcount :               unknown
 
Enter command:
FETCH C INTO :A, :B !
 
NAME                           | GEB_DATE1
-------------------------------+-----------
Weidert, Albrecht              | 10.08.1962
Dietz, Juergen                 | 10.07.1955
 
resultcount :                     2
 
Enter command:
CLOSE C !
 
Enter command:
DECLARE C CURSOR FOR
SELECT NAME, GEB_DATE1
FROM PERSONAL
WHERE DAYS (GEB_DATE1) -
      DAYS (GEB_DATE1 - (MONTH (GEB_DATE1) - 1) MONTHS
                      - (DAY   (GEB_DATE1) - 1) DAYS ) -
      (DAYS (DATE ('01.07.1996')) -
       DAYS (DATE ('01.07.1996') -
            (MONTH (DATE ('01.07.1996')) - 1) MONTHS -
            (DAY   (DATE ('01.07.1996')) - 1) DAYS))
     BETWEEN 0 AND 45
OR
      DAYS (GEB_DATE1 + 1 YEARS) -
      DAYS (GEB_DATE1 - (MONTH (GEB_DATE1) - 1) MONTHS
                      - (DAY   (GEB_DATE1) - 1) DAYS ) -
      (DAYS (DATE ('01.07.1997')) -
       DAYS (DATE ('01.07.1996') -
            (MONTH (DATE ('01.07.1996')) - 1) MONTHS -
            (DAY   (DATE ('01.07.1996')) - 1) DAYS))
     BETWEEN 0 AND 45!
 
resultcount :               unknown
 
Enter command:
FETCH C INTO :A, :B !
 
NAME                           | GEB_DATE1
-------------------------------+-----------
Weidert, Albrecht              | 10.08.1962
Dietz, Juergen                 | 10.07.1955
 
resultcount :                     2
 
Enter command:
CLOSE C !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST SQLMODE ORACLE !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST SQLMODE ORACLE ISOLATION LEVEL 1 !
 
Enter command:
SELECT NAME, GEB_DATE2
FROM PERSONAL
WHERE
      ADD_MONTHS
     (GEB_DATE2,
       (TO_NUMBER (TO_CHAR (TO_DATE ('01-JUL-96'), 'yyyy')) -
        TO_NUMBER (TO_CHAR (GEB_DATE2            , 'yyyy'))) * 12 + 12)
    BETWEEN TO_DATE ('01-JUL-97') AND
            TO_DATE ('01-JUL-97') + 45 !
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B !
 
NAME                           | GEB_DATE2
-------------------------------+---------------------------
Weidert, Albrecht              | 10-AUG-62
Dietz, Juergen                 | 10-JUL-55
 
resultcount :                     2
 
Enter command:
SELECT NAME, GEB_DATE2
FROM PERSONAL
WHERE ADD_MONTHS
     (GEB_DATE2,
       (TO_NUMBER (TO_CHAR (TO_DATE ('01-JUL-96'), 'yyyy')) -
        TO_NUMBER (TO_CHAR (GEB_DATE2            , 'yyyy'))) * 12)
    BETWEEN TO_DATE ('01-JUL-96') AND
            TO_DATE ('01-JUL-96') + 45
OR
      ADD_MONTHS
     (GEB_DATE2,
       (TO_NUMBER (TO_CHAR (TO_DATE ('01-JUL-96'), 'yyyy')) -
        TO_NUMBER (TO_CHAR (GEB_DATE2            , 'yyyy'))) * 12 + 12)
    BETWEEN TO_DATE ('01-JUL-96') AND
            TO_DATE ('01-JUL-96') + 45 !
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B !
 
NAME                           | GEB_DATE2
-------------------------------+---------------------------
Weidert, Albrecht              | 10-AUG-62
Dietz, Juergen                 | 10-JUL-55
 
resultcount :                     2
 
Enter command:
DROP TABLE PERSONAL !
 
Enter command:
COMMIT WORK RELEASE!
 
Enter command:
FILE CONNECT ( KERN TEST SQLMODE ORACLE !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST SQLMODE ORACLE ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE ABTEILUNGEN (
ABT_NR      NUMBER  ( 3) CONSTRAINT ABTEILUNGEN_PK PRIMARY KEY,
BEZEICHNUNG VARCHAR (20) NOT NULL) !
 
Enter command:
INSERT INTO ABTEILUNGEN VALUES (10, 'EDV      ')!
 
Enter command:
INSERT INTO ABTEILUNGEN VALUES (20, 'Vertrieb ')!
 
Enter command:
INSERT INTO ABTEILUNGEN VALUES (30, 'Marketing')!
 
Enter command:
INSERT INTO ABTEILUNGEN VALUES (40, 'Personal ')!
 
Enter command:
CREATE TABLE ANGESTELLTE (
MA_NR       NUMBER   (3) CONSTRAINT ANGESTELLTE_PK PRIMARY KEY,
NAME        VARCHAR (30) NOT NULL,
POSITION    VARCHAR (30),
ABT_NR      NUMBER  ( 3) CONSTRAINT ANGESTELLTE_FK_ABT
                               REFERENCES ABTEILUNGEN) !
 
Enter command:
INSERT INTO ANGESTELLTE VALUES ( 1, 'Moeller', 'Systemanalytiker', 10)!
 
Enter command:
INSERT INTO ANGESTELLTE VALUES ( 2, 'Meyer  ', 'EDV-Spezialist  ', 10)!
 
Enter command:
INSERT INTO ANGESTELLTE VALUES ( 5, 'Chall  ', 'Verkaeufer      ', 20)!
 
Enter command:
INSERT INTO ANGESTELLTE VALUES ( 6, 'Kunze  ', NULL              , 20)!
 
Enter command:
INSERT INTO ANGESTELLTE VALUES ( 7, 'Peter  ', 'Verkaeuferin    ', 20)!
 
Enter command:
INSERT INTO ANGESTELLTE VALUES ( 8, 'Hagner ', 'EDV-Spezialist  ',NULL)!
 
Enter command:
INSERT INTO ANGESTELLTE VALUES ( 9, 'Hansen ', 'Berater         ', 30)!
 
Enter command:
INSERT INTO ANGESTELLTE VALUES (10, 'Klasen ', 'EDV-Spezialist  ', 30)!
 
Enter command:
INSERT INTO ANGESTELLTE VALUES (12, 'Bauer  ', 'Sachbearbeiter  ', 40)!
 
Enter command:
CREATE TABLE KURSE (
KURS_NR     NUMBER  ( 3) CONSTRAINT KURS_PK PRIMARY KEY,
BEZEICHNUNG VARCHAR (20) NOT NULL) !
 
Enter command:
INSERT INTO KURSE VALUES (10, 'Rhetorik')!
 
Enter command:
INSERT INTO KURSE VALUES (20, 'SQL     ')!
 
Enter command:
CREATE TABLE KURSTEILNEHMER (
KURS_NR     NUMBER  ( 3) CONSTRAINT KTN_FK_KURS
                                 REFERENCES KURSE,
MA_NR       NUMBER  ( 3) CONSTRAINT KTN_FK_MA
                                 REFERENCES ANGESTELLTE,
DATUM       DATE,
CONSTRAINT KURSTEILNEHMER_PK PRIMARY KEY (KURS_NR, MA_NR, DATUM)) !
 
Enter command:
INSERT INTO KURSTEILNEHMER VALUES (10,  1, '20-NOV-95')!
 
Enter command:
INSERT INTO KURSTEILNEHMER VALUES (10,  5, '20-OCT-95')!
 
Enter command:
INSERT INTO KURSTEILNEHMER VALUES (10,  6, '20-DEC-95')!
 
Enter command:
INSERT INTO KURSTEILNEHMER VALUES (10, 10, '20-SEP-95')!
 
Enter command:
INSERT INTO KURSTEILNEHMER VALUES (10,  9, '20-NOV-95')!
 
Enter command:
INSERT INTO KURSTEILNEHMER VALUES (20,  2, '10-MAY-95')!
 
Enter command:
INSERT INTO KURSTEILNEHMER VALUES (20,  8, '11-JUL-95')!
 
Enter command:
INSERT INTO KURSTEILNEHMER VALUES (20,  6, '02-FEB-96')!
 
Enter command:
INSERT INTO KURSTEILNEHMER VALUES (20,  7, '20-APR-96')!
 
Enter command:
SELECT BEZEICHNUNG
  FROM ABTEILUNGEN
 WHERE ABT_NR NOT IN
          (SELECT ABT_NR
             FROM KURSTEILNEHMER KT,
                  KURSE K,
                  ANGESTELLTE A
            WHERE K.BEZEICHNUNG = 'SQL'
              AND K.KURS_NR     = KT.KURS_NR
              AND KT.MA_NR      = A.MA_NR
              AND A.ABT_NR IS NOT NULL
          ) !
 
resultcount :                     0
 
Enter command:
FETCH INTO :A !
 
BEZEICHNUNG
--------------------
Marketing
Personal
 
resultcount :                     2
 
Enter command:
SELECT BEZEICHNUNG
  FROM ABTEILUNGEN
 WHERE NOT EXISTS
          (SELECT 'a'
             FROM KURSTEILNEHMER KT,
                  KURSE K,
                  ANGESTELLTE A
            WHERE K.BEZEICHNUNG = 'SQL'
              AND K.KURS_NR     = KT.KURS_NR
              AND KT.MA_NR      = A.MA_NR
              AND A.ABT_NR      = ABTEILUNGEN.ABT_NR )!
 
resultcount :                     0
 
Enter command:
FETCH INTO :A !
 
BEZEICHNUNG
--------------------
Marketing
Personal
 
resultcount :                     2
 
Enter command:
SELECT A.BEZEICHNUNG
  FROM ABTEILUNGEN A
 WHERE NOT EXISTS
      (SELECT *
         FROM ANGESTELLTE AG
        WHERE A.ABT_NR = AG.ABT_NR
          AND EXISTS
             (SELECT *
                FROM KURSTEILNEHMER KT
               WHERE AG.MA_NR = KT.MA_NR
                 AND KT.KURS_NR =
                         (SELECT K.KURS_NR
                            FROM KURSE K
                           WHERE K.BEZEICHNUNG = 'SQL'
                         )
             )
     )!
 
resultcount :                     0
 
Enter command:
FETCH INTO :A!
 
BEZEICHNUNG
--------------------
Marketing
Personal
 
resultcount :                     2
 
Enter command:
DROP TABLE ABTEILUNGEN !
 
Enter command:
DROP TABLE ANGESTELLTE !
 
Enter command:
DROP TABLE KURSE !
 
Enter command:
DROP TABLE KURSTEILNEHMER !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE PERSONAL (
PERS_NO FIXED (3) PRIMARY KEY,
NAME VARCHAR (10) NOT NULL)!
 
Enter command:
INSERT INTO PERSONAL VALUES (1, 'Gehner')!
 
Enter command:
INSERT INTO PERSONAL VALUES (2, 'Jonas')!
 
Enter command:
INSERT INTO PERSONAL VALUES (3, 'Hansen')!
 
Enter command:
INSERT INTO PERSONAL VALUES (4, 'Clausen')!
 
Enter command:
CREATE TABLE PRAEMIE (
PR_ID        FIXED (3) PRIMARY KEY,
BESCHREIBUNG VARCHAR (10) NOT NULL,
WERT         FIXED (10) NOT NULL)!
 
Enter command:
INSERT INTO PRAEMIE VALUES (2, 'Restaurant',   200)!
 
Enter command:
INSERT INTO PRAEMIE VALUES (3, '1100 DM   ',  1100)!
 
Enter command:
INSERT INTO PRAEMIE VALUES (4, '3100 DM   ',  3100)!
 
Enter command:
INSERT INTO PRAEMIE VALUES (5, '1000 DM   ',  1000)!
 
Enter command:
INSERT INTO PRAEMIE VALUES (6, '3000 DM   ',  3000)!
 
Enter command:
INSERT INTO PRAEMIE VALUES (1, 'Reise     ', 10000)!
 
Enter command:
CREATE TABLE ZIEL (
ZIEL_ID      FIXED (3) PRIMARY KEY,
BESCHREIBUNG VARCHAR(10) NOT NULL)!
 
Enter command:
INSERT INTO ZIEL VALUES (1, '80% Umsatz')!
 
Enter command:
INSERT INTO ZIEL VALUES (2, '90% Umsatz')!
 
Enter command:
INSERT INTO ZIEL VALUES (3, '100% Ums. ')!
 
Enter command:
INSERT INTO ZIEL VALUES (4, '120% Ums. ')!
 
Enter command:
INSERT INTO ZIEL VALUES (5, '5 neue Kd.')!
 
Enter command:
INSERT INTO ZIEL VALUES (6, '10 neu Kd.')!
 
Enter command:
INSERT INTO ZIEL VALUES (7, 'Kurs 1    ')!
 
Enter command:
INSERT INTO ZIEL VALUES (8, 'Kurs 2    ')!
 
Enter command:
INSERT INTO ZIEL VALUES (9, 'Gr. Auftr.')!
 
Enter command:
COMMIT !
 
Enter command:
CREATE TABLE ERREICHTES_ZIEL (
PERS_NO    FIXED (3) REFERENCES PERSONAL,
ZIEL_ID    FIXED (3) REFERENCES ZIEL,
PRIMARY KEY (PERS_NO, ZIEL_ID))!
 
Enter command:
INSERT INTO ERREICHTES_ZIEL VALUES (4, 1)!
 
Enter command:
INSERT INTO ERREICHTES_ZIEL VALUES (3, 1)!
 
Enter command:
INSERT INTO ERREICHTES_ZIEL VALUES (2, 1)!
 
Enter command:
INSERT INTO ERREICHTES_ZIEL VALUES (1, 1)!
 
Enter command:
INSERT INTO ERREICHTES_ZIEL VALUES (4, 2)!
 
Enter command:
INSERT INTO ERREICHTES_ZIEL VALUES (3, 2)!
 
Enter command:
INSERT INTO ERREICHTES_ZIEL VALUES (2, 2)!
 
Enter command:
INSERT INTO ERREICHTES_ZIEL VALUES (1, 2)!
 
Enter command:
INSERT INTO ERREICHTES_ZIEL VALUES (4, 3)!
 
Enter command:
INSERT INTO ERREICHTES_ZIEL VALUES (3, 3)!
 
Enter command:
INSERT INTO ERREICHTES_ZIEL VALUES (1, 3)!
 
Enter command:
INSERT INTO ERREICHTES_ZIEL VALUES (1, 4)!
 
Enter command:
INSERT INTO ERREICHTES_ZIEL VALUES (4, 5)!
 
Enter command:
INSERT INTO ERREICHTES_ZIEL VALUES (3, 5)!
 
Enter command:
INSERT INTO ERREICHTES_ZIEL VALUES (2, 5)!
 
Enter command:
INSERT INTO ERREICHTES_ZIEL VALUES (1, 5)!
 
Enter command:
INSERT INTO ERREICHTES_ZIEL VALUES (2, 6)!
 
Enter command:
INSERT INTO ERREICHTES_ZIEL VALUES (1, 6)!
 
Enter command:
INSERT INTO ERREICHTES_ZIEL VALUES (4, 7)!
 
Enter command:
INSERT INTO ERREICHTES_ZIEL VALUES (2, 7)!
 
Enter command:
INSERT INTO ERREICHTES_ZIEL VALUES (1, 7)!
 
Enter command:
INSERT INTO ERREICHTES_ZIEL VALUES (3, 8)!
 
Enter command:
INSERT INTO ERREICHTES_ZIEL VALUES (1, 8)!
 
Enter command:
INSERT INTO ERREICHTES_ZIEL VALUES (4, 9)!
 
Enter command:
INSERT INTO ERREICHTES_ZIEL VALUES (1, 9)!
 
Enter command:
CREATE TABLE NOTWENDIGES_ZIEL (
PR_ID     FIXED (3) REFERENCES PRAEMIE,
ZIEL_ID   FIXED (3) REFERENCES ZIEL,
PRIMARY KEY (PR_ID, ZIEL_ID))!
 
Enter command:
INSERT NOTWENDIGES_ZIEL VALUES (2, 1)!
 
Enter command:
INSERT NOTWENDIGES_ZIEL VALUES (2, 5)!
 
Enter command:
INSERT NOTWENDIGES_ZIEL VALUES (2, 7)!
 
Enter command:
INSERT NOTWENDIGES_ZIEL VALUES (3, 2)!
 
Enter command:
INSERT NOTWENDIGES_ZIEL VALUES (3, 5)!
 
Enter command:
INSERT NOTWENDIGES_ZIEL VALUES (3, 7)!
 
Enter command:
INSERT NOTWENDIGES_ZIEL VALUES (5, 1)!
 
Enter command:
INSERT NOTWENDIGES_ZIEL VALUES (5, 6)!
 
Enter command:
INSERT NOTWENDIGES_ZIEL VALUES (5, 8)!
 
Enter command:
INSERT NOTWENDIGES_ZIEL VALUES (4, 3)!
 
Enter command:
INSERT NOTWENDIGES_ZIEL VALUES (4, 5)!
 
Enter command:
INSERT NOTWENDIGES_ZIEL VALUES (4, 7)!
 
Enter command:
INSERT NOTWENDIGES_ZIEL VALUES (6, 2)!
 
Enter command:
INSERT NOTWENDIGES_ZIEL VALUES (6, 6)!
 
Enter command:
INSERT NOTWENDIGES_ZIEL VALUES (6, 8)!
 
Enter command:
INSERT NOTWENDIGES_ZIEL VALUES (6, 9)!
 
Enter command:
INSERT NOTWENDIGES_ZIEL VALUES (1, 4)!
 
Enter command:
INSERT NOTWENDIGES_ZIEL VALUES (1, 6)!
 
Enter command:
INSERT NOTWENDIGES_ZIEL VALUES (1, 8)!
 
Enter command:
INSERT NOTWENDIGES_ZIEL VALUES (1, 9)!
 
Enter command:
COMMIT !
 
Enter command:
SELECT NAME, BESCHREIBUNG, WERT
FROM PERSONAL, PRAEMIE
WHERE WERT =
       (SELECT MAX(WERT)
         FROM PRAEMIE
        WHERE PR_ID IN
                  (SELECT PR_ID
                     FROM NOTWENDIGES_ZIEL
                    GROUP BY PR_ID
                   HAVING (PR_ID, COUNT(*)) IN
                               (SELECT PR_ID, COUNT(*)
                                  FROM NOTWENDIGES_ZIEL NZ,
                                       ERREICHTES_ZIEL EZ
                                 WHERE NZ.ZIEL_ID = EZ.ZIEL_ID
                                   AND EZ.PERS_NO = PERSONAL.PERS_NO
                                 GROUP BY PR_ID
                               )
                  )
       )
ORDER BY WERT !
 
resultcount :                     3
 
Enter command:
FETCH INTO :A, :B, :C !
 
NAME       | BESCHREIBUNG | WERT
-----------+--------------+------------
Jonas      | 1100 DM      |        1100
Clausen    | 3100 DM      |        3100
Gehner     | Reise        |       10000
 
resultcount :                     3
 
Enter command:
SELECT NAME, BESCHREIBUNG, WERT
FROM PERSONAL, PRAEMIE
WHERE WERT =
       (SELECT MAX(WERT)
         FROM PRAEMIE
        WHERE PR_ID IN
                  (SELECT PR_ID
                     FROM NOTWENDIGES_ZIEL
                    GROUP BY PR_ID
                   HAVING (PR_ID, COUNT(*)) IN
                               (SELECT PR_ID, COUNT(*)
                                  FROM NOTWENDIGES_ZIEL NZ,
                                       ERREICHTES_ZIEL EZ
                                 WHERE NZ.ZIEL_ID = EZ.ZIEL_ID
                                   AND EZ.PERS_NO = PERSONAL.PERS_NO
                                 GROUP BY PR_ID
                               )
                  )
       )
ORDER BY 3 !
 
resultcount :                     3
 
Enter command:
FETCH INTO :A, :B, :C !
 
NAME       | BESCHREIBUNG | WERT
-----------+--------------+------------
Jonas      | 1100 DM      |        1100
Clausen    | 3100 DM      |        3100
Gehner     | Reise        |       10000
 
resultcount :                     3
 
Enter command:
SELECT NAME, BESCHREIBUNG, WERT
FROM PERSONAL, PRAEMIE
WHERE WERT =
       (SELECT MAX(WERT)
         FROM PRAEMIE,
               (SELECT COUNT(*) CNT, PR_ID
                 FROM NOTWENDIGES_ZIEL
                GROUP BY PR_ID) NZCNT
        WHERE PRAEMIE.PR_ID = NZCNT.PR_ID
          AND (PRAEMIE.PR_ID, NZCNT.CNT) IN
             (SELECT PR_ID, COUNT(*)
                FROM NOTWENDIGES_ZIEL NZ
               WHERE NZ.ZIEL_ID IN (SELECT ZIEL_ID
                                      FROM ERREICHTES_ZIEL EZ
                                     WHERE EZ.PERS_NO = PERSONAL.PERS_NO
                                   )
               GROUP BY PR_ID
             )
       )
ORDER BY 3 !
 
***ERROR  -7058 Correlated subquery with select in from clause not allowed 0001
 
Enter command:
FETCH INTO :A, :B, :C !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
SELECT NAME, BESCHREIBUNG, WERT
FROM PERSONAL, PRAEMIE
WHERE WERT =
       (SELECT MAX(WERT)
         FROM PRAEMIE
        WHERE PR_ID IN
             (SELECT PR_ID
                FROM NOTWENDIGES_ZIEL NZ
               WHERE NZ.ZIEL_ID IN (SELECT ZIEL_ID
                                      FROM ERREICHTES_ZIEL EZ
                                     WHERE EZ.PERS_NO = PERSONAL.PERS_NO
                                   )
               GROUP BY PR_ID
               HAVING COUNT (*) = (SELECT COUNT(*)
                                     FROM NOTWENDIGES_ZIEL
                                    WHERE PR_ID = NZ.PR_ID
                                  )
             )
       )
ORDER BY 3 !
 
***ERROR  -1102 Too complicated SQL statement (too many subqueries)        0001
 
Enter command:
FETCH INTO :A, :B, :C !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
SELECT NAME, BESCHREIBUNG, WERT
FROM PERSONAL, PRAEMIE
WHERE WERT =
       (SELECT MAX(WERT)
         FROM PRAEMIE
        WHERE PR_ID IN
             (SELECT PR_ID
                FROM NOTWENDIGES_ZIEL NZ
               WHERE NZ.ZIEL_ID IN (SELECT ZIEL_ID
                                      FROM ERREICHTES_ZIEL EZ
                                     WHERE EZ.PERS_NO = PERSONAL.PERS_NO
                                   )
               GROUP BY PR_ID
               HAVING (COUNT (*), PR_ID) = (SELECT COUNT(*), PR_ID
                                     FROM NOTWENDIGES_ZIEL
                                     GROUP BY PR_ID)
             )
       )
ORDER BY 3 !
 
***ERROR  -1102 Too complicated SQL statement (too many subqueries)        0001
 
Enter command:
SELECT NAME, BESCHREIBUNG, WERT
FROM PERSONAL, PRAEMIE
WHERE WERT =
       (SELECT MAX(WERT)
         FROM PRAEMIE
        WHERE PR_ID IN
                 (SELECT PR_ID
                    FROM NOTWENDIGES_ZIEL
                   GROUP BY PR_ID
                  HAVING (PR_ID, COUNT(*)) IN
                          (SELECT PR_ID, COUNT(*)
                             FROM NOTWENDIGES_ZIEL NZ
                            WHERE NZ.ZIEL_ID IN
                                    (SELECT ZIEL_ID
                                      FROM ERREICHTES_ZIEL EZ
                                     WHERE EZ.PERS_NO = PERSONAL.PERS_NO
                                    )
                            GROUP BY PR_ID
                          )
                 )
       )
ORDER BY 3 !
 
***ERROR  -1102 Too complicated SQL statement (too many subqueries)        0264
 
Enter command:
FETCH INTO :A, :B, :C !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
SELECT PE1.NAME,
       PR1.BESCHREIBUNG,
       PR1.WERT
  FROM PERSONAL PE1,
       PRAEMIE PR1
 WHERE PR1.WERT IN
             (SELECT MAX (PR2.WERT)
                FROM PRAEMIE PR2
               WHERE PR2.PR_ID NOT IN
                      (SELECT NZ1.PR_ID
                         FROM NOTWENDIGES_ZIEL NZ1
                        WHERE NZ1.ZIEL_ID NOT IN
                              (SELECT EZ1.ZIEL_ID
                                 FROM ERREICHTES_ZIEL EZ1
                                WHERE EZ1.PERS_NO = PE1.PERS_NO
                              )
                       )
             )!
 
resultcount :                     3
 
Enter command:
FETCH INTO :A, :B, :C !
 
NAME       | BESCHREIBUNG | WERT
-----------+--------------+------------
Gehner     | Reise        |       10000
Jonas      | 1100 DM      |        1100
Clausen    | 3100 DM      |        3100
 
resultcount :                     3
 
Enter command:
SELECT PE1.NAME,
       PR1.BESCHREIBUNG,
       PR1.WERT
  FROM PERSONAL PE1,
       PRAEMIE PR1
 WHERE (PE1.NAME, PR1.WERT) IN
          (SELECT PE2.NAME, MAX(PR2.WERT)
             FROM PERSONAL PE2, PRAEMIE PR2
            WHERE NOT EXISTS
                   (SELECT NZ1.ZIEL_ID
                      FROM NOTWENDIGES_ZIEL NZ1
                     WHERE NZ1.PR_ID = PR2.PR_ID
                  EXCEPT
                    SELECT EZ1.ZIEL_ID
                      FROM ERREICHTES_ZIEL EZ1
                     WHERE EZ1.PERS_NO = PE2.PERS_NO
                   )
           GROUP BY PE2.NAME
          ) !
 
***ERROR  -7011 Correlated subquery not allowed                            0250
 
Enter command:
FETCH INTO :A, :B, :C !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
DROP TABLE PERSONAL !
 
Enter command:
DROP TABLE PRAEMIE !
 
Enter command:
DROP TABLE ZIEL !
 
Enter command:
DROP TABLE ERREICHTES_ZIEL !
 
Enter command:
DROP TABLE NOTWENDIGES_ZIEL !
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST SQLMODE ORACLE!
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST SQLMODE ORACLE ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE KUNDEN (
KDNR NUMBER (6,0) CONSTRAINT KUNDEN_PK PRIMARY KEY,
NAME VARCHAR (30))!
 
Enter command:
INSERT INTO KUNDEN VALUES (1, 'Meyer    ')!
 
Enter command:
INSERT INTO KUNDEN VALUES (2, 'Schmidt  ')!
 
Enter command:
INSERT INTO KUNDEN VALUES (3, 'Clausen  ')!
 
Enter command:
INSERT INTO KUNDEN VALUES (4, 'Fischer  ')!
 
Enter command:
INSERT INTO KUNDEN VALUES (5, 'Feddersen')!
 
Enter command:
CREATE TABLE AUSGABEN (
TITEL VARCHAR (30) CONSTRAINT AUSGABEN_PK PRIMARY KEY,
DATUM DATE NOT NULL)!
 
Enter command:
INSERT INTO AUSGABEN VALUES ('7/96', '05-JUL-96')!
 
Enter command:
INSERT INTO AUSGABEN VALUES ('8/96', '05-AUG-96')!
 
Enter command:
INSERT INTO AUSGABEN VALUES ('9/96', '05-SEP-96')!
 
Enter command:
CREATE TABLE ANZEIGEN (
KDNR    NUMBER (6,0) CONSTRAINT ANZ_KD_FK REFERENCES KUNDEN,
TITEL   VARCHAR (30) CONSTRAINT ANZ_AUSG_FK REFERENCES AUSGABEN,
SEITE   NUMBER (3,0),
GROESSE NUMBER (3,2) CONSTRAINT GROESSE_CHECK
        CHECK (GROESSE > 0 AND GROESSE <= 1),
COLOR   CHAR (1) CONSTRAINT COLOR_CHECK CHECK (COLOR IN ('J','N')),
CONSTRAINT ANZEIGEN_PK PRIMARY KEY (KDNR, TITEL, SEITE))!
 
Enter command:
INSERT INTO ANZEIGEN VALUES (1, '7/96', 15, 0.50, 'J')!
 
Enter command:
INSERT INTO ANZEIGEN VALUES (2, '7/96', 22, 0.50, 'J')!
 
Enter command:
INSERT INTO ANZEIGEN VALUES (5, '7/96', 33, 1.00, 'N')!
 
Enter command:
INSERT INTO ANZEIGEN VALUES (3, '7/96', 41, 1.00, 'N')!
 
Enter command:
INSERT INTO ANZEIGEN VALUES (4, '7/96', 45, 1.00, 'N')!
 
Enter command:
INSERT INTO ANZEIGEN VALUES (4, '7/96', 46, 1.00, 'N')!
 
Enter command:
INSERT INTO ANZEIGEN VALUES (1, '8/96', 15, 0.50, 'J')!
 
Enter command:
INSERT INTO ANZEIGEN VALUES (2, '8/96', 22, 0.50, 'J')!
 
Enter command:
INSERT INTO ANZEIGEN VALUES (5, '8/96', 33, 1.00, 'N')!
 
Enter command:
INSERT INTO ANZEIGEN VALUES (1, '9/96', 15, 0.50, 'J')!
 
Enter command:
INSERT INTO ANZEIGEN VALUES (2, '9/96', 22, 1.00, 'N')!
 
Enter command:
INSERT INTO ANZEIGEN VALUES (5, '9/96', 33, 1.00, 'N')!
 
Enter command:
INSERT INTO ANZEIGEN VALUES (3, '9/96', 41, 1.00, 'J')!
 
Enter command:
SELECT NAME
  FROM KUNDEN
 WHERE 3 <= (SELECT SUM (DECODE (COLOR,
                                   'J', GROESSE*2,
                                        GROESSE))
               FROM ANZEIGEN
              WHERE KUNDEN.KDNR = ANZEIGEN.KDNR)
ORDER BY KDNR !
 
resultcount :                     0
 
Enter command:
FETCH INTO :A !
 
NAME
------------------------------
Meyer
Schmidt
Clausen
Feddersen
 
resultcount :                     4
 
Enter command:
SELECT KD.NAME
  FROM KUNDEN KD, ANZEIGEN AZ
 WHERE AZ.KDNR = KD.KDNR
GROUP BY KD.NAME
HAVING SUM (AZ.GROESSE * DECODE (AZ.COLOR, 'J', 2, 1)) >= 3 !
 
resultcount :                     0
 
Enter command:
FETCH INTO :A !
 
NAME
------------------------------
Clausen
Feddersen
Meyer
Schmidt
 
resultcount :                     4
 
Enter command:
SELECT KD.NAME
  FROM KUNDEN KD
 WHERE EXISTS
      (SELECT SUM (AZ_ALL.GROESSE),
              SUM (AZ_COL.GROESSE)
         FROM ANZEIGEN AZ_ALL, ANZEIGEN AZ_COL
        WHERE KD.KDNR        = AZ_ALL.KDNR
          AND AZ_ALL.KDNR    = AZ_COL.KDNR(+)
          AND AZ_ALL.TITEL   = AZ_COL.TITEL(+)
          AND AZ_ALL.SEITE   = AZ_COL.SEITE(+)
          AND AZ_COL.COLOR   = 'J'
        HAVING SUM (AZ_ALL.GROESSE) +
               SUM (AZ_COL.GROESSE) >= 3.0
            OR SUM (AZ_ALL.GROESSE) >= 3.0) !
 
resultcount :                     0
 
Enter command:
FETCH INTO :A !
 
NAME
------------------------------
Meyer
 
resultcount :                     1
 
Enter command:
DROP TABLE KUNDEN !
 
Enter command:
DROP TABLE AUSGABEN !
 
Enter command:
DROP TABLE ANZEIGEN!
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE BAHNHOF (
NAME              VARCHAR (10) PRIMARY KEY,
MIN_UMSTEIGE_ZEIT FIXED (5) NOT NULL)!
 
Enter command:
INSERT INTO BAHNHOF VALUES ('Muenchen' , 10)!
 
Enter command:
INSERT INTO BAHNHOF VALUES ('Hamburg ' , 10)!
 
Enter command:
INSERT INTO BAHNHOF VALUES ('Frankfurt', 15)!
 
Enter command:
CREATE TABLE ZUG (
NUMMER       VARCHAR (6) PRIMARY KEY,
VON_BAHNHOF  VARCHAR (10) REFERENCES BAHNHOF,
BIS_BAHNHOF  VARCHAR (10) REFERENCES BAHNHOF,
START_ZEIT   TIME NOT NULL,
ANKUNFT_ZEIT TIME NOT NULL,
PREIS        FIXED (6,2) NOT NULL)!
 
Enter command:
INSERT ZUG VALUES('ICE111','Muenchen ','Frankfurt','00090000','00130000',120)!
 
Enter command:
INSERT ZUG VALUES('IC121 ','Muenchen ','Frankfurt','00091000','00134000', 90)!
 
Enter command:
INSERT ZUG VALUES('ICE112','Muenchen ','Frankfurt','00102000','00141500',120)!
 
Enter command:
INSERT ZUG VALUES('IC122 ','Muenchen ','Frankfurt','00111100','00154000', 90)!
 
Enter command:
INSERT ZUG VALUES('ICE211','Frankfurt','Hamburg  ','00131000','00160000',100)!
 
Enter command:
INSERT ZUG VALUES('ICE113','Muenchen ','Frankfurt','00131200','00172000',120)!
 
Enter command:
INSERT ZUG VALUES('IC123 ','Muenchen ','Frankfurt','00132300','00180000', 90)!
 
Enter command:
INSERT ZUG VALUES('ICE124','Muenchen ','Frankfurt','00135000','00175000',120)!
 
Enter command:
INSERT ZUG VALUES('IC221 ','Frankfurt','Hamburg  ','00135000','00172000', 80)!
 
Enter command:
INSERT ZUG VALUES('ICE212','Frankfurt','Hamburg  ','00141000','00170000',100)!
 
Enter command:
INSERT ZUG VALUES('IC222 ','Frankfurt','Hamburg  ','00145000','00183000', 80)!
 
Enter command:
INSERT ZUG VALUES('IC223 ','Frankfurt','Hamburg  ','00171000','00204000', 80)!
 
Enter command:
INSERT ZUG VALUES('ICE213','Frankfurt','Hamburg  ','00173000','00204000',100)!
 
Enter command:
INSERT ZUG VALUES('IC224 ','Frankfurt','Hamburg  ','00182300','00220000', 80)!
 
Enter command:
INSERT ZUG VALUES('ICE214','Frankfurt','Hamburg  ','00190000','00220000',100)!
 
Enter command:
SELECT * FROM
(SELECT ZUG1.NUMMER NUM1,
       ZUG1.START_ZEIT START_M,
       ZUG1.ANKUNFT_ZEIT END_F,
       ZUG2.NUMMER NUM2,
       ZUG2.START_ZEIT START_F,
       ZUG2.ANKUNFT_ZEIT END_H,
       FIXED(HOUR  (ZUG2.ANKUNFT_ZEIT) * 60 +
       MINUTE(ZUG2.ANKUNFT_ZEIT)          -
       (HOUR (ZUG1.START_ZEIT) * 60 +
       MINUTE(ZUG1.START_ZEIT)), 3) DAUER,
       FIXED(ZUG1.PREIS + ZUG2.PREIS, 3) PREIS
  FROM ZUG ZUG1, ZUG ZUG2, BAHNHOF
 WHERE ZUG1.VON_BAHNHOF = 'Muenchen'
   AND (HOUR (ZUG1.ANKUNFT_ZEIT) * 60 +
       MINUTE(ZUG1.ANKUNFT_ZEIT)) + BAHNHOF.MIN_UMSTEIGE_ZEIT
         <= (HOUR(ZUG2.START_ZEIT) * 60 + MINUTE(ZUG2.START_ZEIT))
   AND ZUG2.VON_BAHNHOF = 'Frankfurt'
   AND ZUG1.BIS_BAHNHOF = BAHNHOF.NAME) XX
ORDER BY (DAUER+PREIS)
!
 
resultcount :                    28
 
Enter command:
FETCH INTO :A, :B, :C, :D, :E, :F, :G, :H!
 
NUM1   | START_M  | END_F    | NUM2   | START_F  | END_H    | DAUER | PREIS
-------+----------+----------+--------+----------+----------+-------+------
IC121  | TIMEYYYY | TIMEYYYY | ICE212 | TIMEYYYY | TIMEYYYY |  470  |  190
IC123  | TIMEYYYY | TIMEYYYY | IC224  | TIMEYYYY | TIMEYYYY |  517  |  170
ICE112 | TIMEYYYY | TIMEYYYY | IC222  | TIMEYYYY | TIMEYYYY |  490  |  200
ICE124 | TIMEYYYY | TIMEYYYY | IC224  | TIMEYYYY | TIMEYYYY |  490  |  200
ICE111 | TIMEYYYY | TIMEYYYY | IC221  | TIMEYYYY | TIMEYYYY |  500  |  200
ICE111 | TIMEYYYY | TIMEYYYY | ICE212 | TIMEYYYY | TIMEYYYY |  480  |  220
IC123  | TIMEYYYY | TIMEYYYY | ICE214 | TIMEYYYY | TIMEYYYY |  517  |  190
ICE124 | TIMEYYYY | TIMEYYYY | ICE214 | TIMEYYYY | TIMEYYYY |  490  |  220
ICE113 | TIMEYYYY | TIMEYYYY | IC224  | TIMEYYYY | TIMEYYYY |  528  |  200
IC121  | TIMEYYYY | TIMEYYYY | IC222  | TIMEYYYY | TIMEYYYY |  560  |  170
IC122  | TIMEYYYY | TIMEYYYY | IC223  | TIMEYYYY | TIMEYYYY |  569  |  170
ICE113 | TIMEYYYY | TIMEYYYY | ICE214 | TIMEYYYY | TIMEYYYY |  528  |  220
IC122  | TIMEYYYY | TIMEYYYY | ICE213 | TIMEYYYY | TIMEYYYY |  569  |  190
ICE111 | TIMEYYYY | TIMEYYYY | IC222  | TIMEYYYY | TIMEYYYY |  570  |  200
IC122  | TIMEYYYY | TIMEYYYY | IC224  | TIMEYYYY | TIMEYYYY |  649  |  170
ICE112 | TIMEYYYY | TIMEYYYY | IC223  | TIMEYYYY | TIMEYYYY |  620  |  200
IC122  | TIMEYYYY | TIMEYYYY | ICE214 | TIMEYYYY | TIMEYYYY |  649  |  190
 
NUM1   | START_M  | END_F    | NUM2   | START_F  | END_H    | DAUER | PREIS
-------+----------+----------+--------+----------+----------+-------+------
ICE112 | TIMEYYYY | TIMEYYYY | ICE213 | TIMEYYYY | TIMEYYYY |  620  |  220
IC121  | TIMEYYYY | TIMEYYYY | IC223  | TIMEYYYY | TIMEYYYY |  690  |  170
IC121  | TIMEYYYY | TIMEYYYY | ICE213 | TIMEYYYY | TIMEYYYY |  690  |  190
ICE111 | TIMEYYYY | TIMEYYYY | IC223  | TIMEYYYY | TIMEYYYY |  700  |  200
ICE112 | TIMEYYYY | TIMEYYYY | IC224  | TIMEYYYY | TIMEYYYY |  700  |  200
ICE111 | TIMEYYYY | TIMEYYYY | ICE213 | TIMEYYYY | TIMEYYYY |  700  |  220
ICE112 | TIMEYYYY | TIMEYYYY | ICE214 | TIMEYYYY | TIMEYYYY |  700  |  220
IC121  | TIMEYYYY | TIMEYYYY | IC224  | TIMEYYYY | TIMEYYYY |  770  |  170
IC121  | TIMEYYYY | TIMEYYYY | ICE214 | TIMEYYYY | TIMEYYYY |  770  |  190
ICE111 | TIMEYYYY | TIMEYYYY | IC224  | TIMEYYYY | TIMEYYYY |  780  |  200
ICE111 | TIMEYYYY | TIMEYYYY | ICE214 | TIMEYYYY | TIMEYYYY |  780  |  220
 
resultcount :                    28
 
Enter command:
COMMIT WORK RELEASE!
 
Enter command:
FILE CONNECT ( KERN TEST SQLMODE ORACLE !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST SQLMODE ORACLE ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE TABELLEN (
TABELLE      VARCHAR (30),
BESCHREIBUNG VARCHAR(100),
CONSTRAINT TABELLEN_PK PRIMARY KEY ( TABELLE))!
 
Enter command:
INSERT INTO TABELLEN VALUES ('Tabellen', 'Beschreibung aller Tabellen')!
 
Enter command:
INSERT INTO TABELLEN VALUES ('Spalten',
            'Beschreibung aller Tabellenspalten')!
 
Enter command:
INSERT INTO TABELLEN VALUES ('Indices', 'Beschreibung aller Indices')!
 
Enter command:
INSERT INTO TABELLEN VALUES ('Index_Spalten',
            'Beschreibung der Index Spalten')!
 
Enter command:
CREATE TABLE SPALTEN (
TABELLE    VARCHAR (30) CONSTRAINT SPTABFK
                              REFERENCES TABELLEN,
SPALTE     VARCHAR (30),
IS_KEY     VARCHAR(1) NOT NULL CONSTRAINT IS_KEY_CHECK
                              CHECK (IS_KEY IN ('Y', 'N')),
FREMDSCHL  VARCHAR (30) CONSTRAINT SPTABFK2
                              REFERENCES TABELLEN,
CONSTRAINT SPALTEN_PK PRIMARY KEY (TABELLE, SPALTE)) !
 
Enter command:
INSERT INTO SPALTEN VALUES ('Tabellen     ', 'Beschreibung', 'N', NULL)!
 
Enter command:
INSERT INTO SPALTEN VALUES ('Spalten      ', 'Fremdschl   ', 'N', 'Tabellen')!
 
Enter command:
INSERT INTO SPALTEN VALUES ('Indices      ', 'Index_Name  ', 'Y', NULL)!
 
Enter command:
INSERT INTO SPALTEN VALUES ('Index_Spalten', 'Index_Name  ', 'Y', 'Indices')!
 
Enter command:
INSERT INTO SPALTEN VALUES ('Spalten      ', 'Is_Key      ', 'N', NULL)!
 
Enter command:
INSERT INTO SPALTEN VALUES ('Index_Spalten', 'Sortierung  ', 'N', NULL)!
 
Enter command:
INSERT INTO SPALTEN VALUES ('Spalten      ', 'Spalte      ', 'Y', NULL)!
 
Enter command:
INSERT INTO SPALTEN VALUES ('Index_Spalten', 'Spalte      ', 'Y', NULL)!
 
Enter command:
INSERT INTO SPALTEN VALUES ('Index_Spalten', 'Tabelle     ', 'Y', 'Indices')!
 
Enter command:
INSERT INTO SPALTEN VALUES ('Tabellen     ', 'Tabelle     ', 'Y', NULL)!
 
Enter command:
INSERT INTO SPALTEN VALUES ('Spalten      ', 'Tabelle     ', 'Y', 'Tabellen')!
 
Enter command:
INSERT INTO SPALTEN VALUES ('Indices      ', 'Tabelle     ', 'Y', 'Tabellen')!
 
Enter command:
INSERT INTO SPALTEN VALUES ('Indices      ', 'Unique      ', 'N', NULL)!
 
Enter command:
PARS_THEN_EX !
 
Enter command:
DATA !
 
Enter command:
SELECT S1.TABELLE || '.' || S1.SPALTE || ' = ' ||
       S2.TABELLE || '.' || S1.SPALTE BEDINGUNG
FROM SPALTEN S1, SPALTEN S2
WHERE S1.TABELLE = :A
  AND S2.TABELLE = :B
  AND S1.FREMDSCHL = S2.TABELLE
  AND S1.SPALTE = S2.SPALTE
  AND NOT EXISTS
    (SELECT *
       FROM SPALTEN S3
      WHERE S1.TABELLE = S3.TABELLE
        AND S1.FREMDSCHL = S3.FREMDSCHL
        AND S3.SPALTE NOT IN
                (SELECT S4.SPALTE
                   FROM SPALTEN S4
                  WHERE S2.TABELLE = S4.TABELLE
                )
    )
UNION
SELECT S1.TABELLE || '.' || S1.SPALTE || ' = ' ||
       S2.TABELLE || '.' || S1.SPALTE BEDINGUNG
FROM SPALTEN S1, SPALTEN S2
WHERE S2.TABELLE = :A
  AND S1.TABELLE = :B
  AND S1.FREMDSCHL = S2.TABELLE
  AND S1.SPALTE = S2.SPALTE
  AND NOT EXISTS
    (SELECT *
       FROM SPALTEN S3
      WHERE S1.TABELLE = S3.TABELLE
        AND S1.FREMDSCHL = S3.FREMDSCHL
        AND S3.SPALTE NOT IN
                (SELECT S4.SPALTE
                   FROM SPALTEN S4
                  WHERE S2.TABELLE = S4.TABELLE
                )
    )!
 
c 30 'Tabellen' c 30 'Spalten'
c 30 'Tabellen' c 30 'Spalten'
 
***ERROR    100 Row not found                                              0001
 
Enter command:
NODATA !
 
Enter command:
FETCH INTO :A !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
DATA !
 
Enter command:
SELECT S1.TABELLE || '.' || S1.SPALTE || ' = ' ||
       S2.TABELLE || '.' || S1.SPALTE BEDINGUNG
FROM SPALTEN S1, SPALTEN S2
WHERE S1.TABELLE = :A
  AND S2.TABELLE = :B
  AND S1.FREMDSCHL = S2.TABELLE
  AND S1.SPALTE = S2.SPALTE
  AND NOT EXISTS
    (SELECT *
       FROM SPALTEN S3
      WHERE S1.TABELLE = S3.TABELLE
        AND S1.FREMDSCHL = S3.FREMDSCHL
        AND S3.SPALTE NOT IN
                (SELECT S4.SPALTE
                   FROM SPALTEN S4
                  WHERE S2.TABELLE = S4.TABELLE
                )
    )
UNION
SELECT S1.TABELLE || '.' || S1.SPALTE || ' = ' ||
       S2.TABELLE || '.' || S1.SPALTE BEDINGUNG
FROM SPALTEN S1, SPALTEN S2
WHERE S2.TABELLE = :A
  AND S1.TABELLE = :B
  AND S1.FREMDSCHL = S2.TABELLE
  AND S1.SPALTE = S2.SPALTE
  AND NOT EXISTS
    (SELECT *
       FROM SPALTEN S3
      WHERE S1.TABELLE = S3.TABELLE
        AND S1.FREMDSCHL = S3.FREMDSCHL
        AND S3.SPALTE NOT IN
                (SELECT S4.SPALTE
                   FROM SPALTEN S4
                  WHERE S2.TABELLE = S4.TABELLE
                )
    )!
 
c 30 'Tabellen' c 30 'Indices'
c 30 'Tabellen' c 30 'Indices'
 
resultcount :                     0
 
Enter command:
NODATA !
 
Enter command:
FETCH INTO :A !
 
BEDINGUNG         :  Indices.Tabelle = Tabellen.Tabelle
 
resultcount :                     1
 
Enter command:
DATA !
 
Enter command:
SELECT S1.TABELLE || '.' || S1.SPALTE || ' = ' ||
       S2.TABELLE || '.' || S1.SPALTE BEDINGUNG
FROM SPALTEN S1, SPALTEN S2
WHERE S1.TABELLE = :A
  AND S2.TABELLE = :B
  AND S1.FREMDSCHL = S2.TABELLE
  AND S1.SPALTE = S2.SPALTE
  AND NOT EXISTS
    (SELECT *
       FROM SPALTEN S3
      WHERE S1.TABELLE = S3.TABELLE
        AND S1.FREMDSCHL = S3.FREMDSCHL
        AND S3.SPALTE NOT IN
                (SELECT S4.SPALTE
                   FROM SPALTEN S4
                  WHERE S2.TABELLE = S4.TABELLE
                )
    )
UNION
SELECT S1.TABELLE || '.' || S1.SPALTE || ' = ' ||
       S2.TABELLE || '.' || S1.SPALTE BEDINGUNG
FROM SPALTEN S1, SPALTEN S2
WHERE S2.TABELLE = :A
  AND S1.TABELLE = :B
  AND S1.FREMDSCHL = S2.TABELLE
  AND S1.SPALTE = S2.SPALTE
  AND NOT EXISTS
    (SELECT *
       FROM SPALTEN S3
      WHERE S1.TABELLE = S3.TABELLE
        AND S1.FREMDSCHL = S3.FREMDSCHL
        AND S3.SPALTE NOT IN
                (SELECT S4.SPALTE
                   FROM SPALTEN S4
                  WHERE S2.TABELLE = S4.TABELLE
                )
    )!
 
c 30 'Index_Spalten' c 30 'Indices'
c 30 'Index_Spalten' c 30 'Indices'
 
resultcount :                     0
 
Enter command:
NODATA !
 
Enter command:
FETCH INTO :A !
 
BEDINGUNG         :  Index_Spalten.Tabelle = Indices.Tabelle
--------------------------------------------------------------------------------
BEDINGUNG         :  Index_Spalten.Index_Name = Indices.Index_Name
 
resultcount :                     2
 
Enter command:
DATA !
 
Enter command:
SELECT S1.TABELLE || '.' || S1.SPALTE || ' = ' ||
       S2.TABELLE || '.' || S1.SPALTE BEDINGUNG
FROM SPALTEN S1, SPALTEN S2
WHERE S1.TABELLE = :A
  AND S2.TABELLE = :B
  AND S1.SPALTE = S2.SPALTE
  AND (S1.FREMDSCHL = S2.TABELLE
  AND NOT EXISTS
    (SELECT *
       FROM SPALTEN S3
      WHERE S1.TABELLE = S3.TABELLE
        AND S1.FREMDSCHL = S3.FREMDSCHL
        AND S3.SPALTE NOT IN
                (SELECT S4.SPALTE
                   FROM SPALTEN S4
                  WHERE S2.TABELLE = S4.TABELLE
                )
    )
OR
    S2.FREMDSCHL = S1.TABELLE
AND NOT EXISTS
   (SELECT *
      FROM SPALTEN S3
     WHERE S2.TABELLE = S3.TABELLE
       AND S2.FREMDSCHL = S3.FREMDSCHL
       AND S3.SPALTE NOT IN
           (SELECT S4.SPALTE
              FROM SPALTEN S4
             WHERE S1.TABELLE = S4.TABELLE
           )
   )
)!
 
c 30 'Tabellen' c 30 'Spalten'
 
***ERROR    100 Row not found                                              0001
 
Enter command:
NODATA !
 
Enter command:
FETCH INTO :A !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
DATA !
 
Enter command:
SELECT S1.TABELLE || '.' || S1.SPALTE || ' = ' ||
       S2.TABELLE || '.' || S1.SPALTE BEDINGUNG
FROM SPALTEN S1, SPALTEN S2
WHERE S1.TABELLE = :A
  AND S2.TABELLE = :B
  AND S1.SPALTE = S2.SPALTE
  AND (S1.FREMDSCHL = S2.TABELLE
  AND NOT EXISTS
    (SELECT *
       FROM SPALTEN S3
      WHERE S1.TABELLE = S3.TABELLE
        AND S1.FREMDSCHL = S3.FREMDSCHL
        AND S3.SPALTE NOT IN
                (SELECT S4.SPALTE
                   FROM SPALTEN S4
                  WHERE S2.TABELLE = S4.TABELLE
                )
    )
OR
    S2.FREMDSCHL = S1.TABELLE
AND NOT EXISTS
   (SELECT *
      FROM SPALTEN S3
     WHERE S2.TABELLE = S3.TABELLE
       AND S2.FREMDSCHL = S3.FREMDSCHL
       AND S3.SPALTE NOT IN
           (SELECT S4.SPALTE
              FROM SPALTEN S4
             WHERE S1.TABELLE = S4.TABELLE
           )
   )
)!
 
c 30 'Tabellen' c 30 'Indices'
 
resultcount :                     0
 
Enter command:
NODATA !
 
Enter command:
FETCH INTO :A !
 
BEDINGUNG         :  Tabellen.Tabelle = Indices.Tabelle
 
resultcount :                     1
 
Enter command:
DATA !
 
Enter command:
SELECT S1.TABELLE || '.' || S1.SPALTE || ' = ' ||
       S2.TABELLE || '.' || S1.SPALTE BEDINGUNG
FROM SPALTEN S1, SPALTEN S2
WHERE S1.TABELLE = :A
  AND S2.TABELLE = :B
  AND S1.SPALTE = S2.SPALTE
  AND (S1.FREMDSCHL = S2.TABELLE
  AND NOT EXISTS
    (SELECT *
       FROM SPALTEN S3
      WHERE S1.TABELLE = S3.TABELLE
        AND S1.FREMDSCHL = S3.FREMDSCHL
        AND S3.SPALTE NOT IN
                (SELECT S4.SPALTE
                   FROM SPALTEN S4
                  WHERE S2.TABELLE = S4.TABELLE
                )
    )
OR
    S2.FREMDSCHL = S1.TABELLE
AND NOT EXISTS
   (SELECT *
      FROM SPALTEN S3
     WHERE S2.TABELLE = S3.TABELLE
       AND S2.FREMDSCHL = S3.FREMDSCHL
       AND S3.SPALTE NOT IN
           (SELECT S4.SPALTE
              FROM SPALTEN S4
             WHERE S1.TABELLE = S4.TABELLE
           )
   )
)!
 
c 30 'Index_Spalten' c 30 'Indices'
 
resultcount :                     0
 
Enter command:
NODATA !
 
Enter command:
FETCH INTO :A !
 
BEDINGUNG         :  Index_Spalten.Tabelle = Indices.Tabelle
--------------------------------------------------------------------------------
BEDINGUNG         :  Index_Spalten.Index_Name = Indices.Index_Name
 
resultcount :                     2
 
Enter command:
PARS_EXECUTE!
 
Enter command:
DROP TABLE TABELLEN !
 
Enter command:
DROP TABLE SPALTEN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE SHUTDWNK!
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE SHUTDOWN !
 
Enter command:
DBMCLI SUPERDBA,COLDUSER!
UTIL_CONNECT SUT,SUT!
OK
 
DB_OFFLINE!
OK
 
BYE!
 
Enter command:
VDNEXIT!
SESSION END
 
