SELFET1.vdnts
 
Enter command:
FILE XINITDBK!
 
Enter command:
FILE XRESTORE !
 
Enter command:
DBMCLI SUPERDBA,COLDUSER!
UTIL_CONNECT SUPERDBA,COLDUSER!
OK
 
BACKUP_RESTORE XINITDB DATA!
OK
Returncode           0
Date                 DATEXXXX
Time                 TIMEYYYY
Server               <servernode>
Database             <serverdb>
Kernel Version       KERNEL    vv.vv.vv Build bbb-bbb-bbb-bbb
Pages Transferred    000
Pages Left           0
Volumes              1
Medianame            xinitdb
Location             xinitdb.sav
Errortext
Label                <label>
Is Consistent        true
First LOG Page       000
Last LOG Page
DB Stamp 1 Date      DATEXXXX
DB Stamp 1 Time      TIMEYYYY
DB Stamp 2 Date
DB Stamp 2 Time
Page Count           000
Devices Used         1
Database ID          <servernode>:<serverdb>_DATEXXXX_<timestamp>
Max Used Data Page  000
Converter Page Count 8
 
UTIL_EXECUTE CLEAR LOG!
OK
 
DB_ONLINE!
OK
 
UTIL_RELEASE!
OK
 
UTIL_CONNECT SUT,SUT!
OK
 
UTIL_RELEASE!
OK
 
BYE!
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT!
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
DBMCLI SUPERDBA,COLDUSER!
UTIL_CONNECT SUT,SUT!
OK
 
UTIL_EXECUTE DIAGNOSE MONITOR SELECTIVITY 500!
OK
 
UTIL_RELEASE!
OK
 
BYE!
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE T1 ( A CHAR (4) KEY, B CHAR (11) KEY,
   C CHAR (1978), D CHAR (5) NOT NULL, E CHAR (7),
                  F FIXED (6))!
 
Enter command:
CREATE TABLE T_ORA (A CHAR (80) PRIMARY KEY, D TIMESTAMP, B CHAR (40))!
 
Enter command:
CREATE INDEX ID ON T_ORA (D) !
 
Enter command:
INSERT T_ORA VALUES ('char_ora  1', '19941218101345000000', 'bbb')!
 
Enter command:
INSERT T_ORA VALUES ('char_ora  2', '19980219231134123456', 'bbb')!
 
Enter command:
INSERT T_ORA VALUES ('char_ora  3', '19651023090807654321', 'bbb')!
 
Enter command:
COMMIT RELEASE !
 
Enter command:
SCROLLFEAT OFF !
FILE CONNECT ( KERN TEST SQLMODE ORACLE !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST SQLMODE ORACLE ISOLATION LEVEL 1 !
 
Enter command:
PARS_THEN_EX !
 
Enter command:
CREATE TABLE CTEST(C CHAR (16) ASCII PRIMARY KEY)!
 
Enter command:
INSERT INTO CTEST VALUES('1')!
 
Enter command:
INSERT INTO CTEST VALUES('2')!
 
Enter command:
CREATE TABLE C3(C CHAR (30) ASCII PRIMARY KEY)!
 
Enter command:
INSERT INTO C3 VALUES('1')!
 
Enter command:
INSERT INTO C3 VALUES('2')!
 
Enter command:
PARSE SELECT COUNT(DISTINCT I3.C) RECORDCOUNT
FROM CTEST I3
GROUP BY I3.C
!
 
resultcount :                     0
 
RECORDCOUNT
-----------
          1
          1
 
resultcount :                     0
 
Enter command:
PARSE SELECT I3.C, AVG(TO_NUMBER(I3.C)) RECORDCOUNT
FROM CTEST I3
GROUP BY I3.C
UNION ALL
SELECT I3.C, TO_NUMBER(I3.C) RECORDCOUNT
FROM C3 I3
GROUP BY I3.C
!
 
resultcount :                     0
 
C                              | RECORDCOUNT
-------------------------------+---------------------------------------------
1                              |  1.0000000000000000000000000000000000000E+00
1                              |  1.0000000000000000000000000000000000000E+00
2                              |  2.0000000000000000000000000000000000000E+00
2                              |  2.0000000000000000000000000000000000000E+00
 
resultcount :                     0
 
Enter command:
PARSE SELECT I3.C, TO_NUMBER(I3.C) RECORDCOUNT
FROM C3 I3
GROUP BY I3.C
UNION ALL
SELECT I3.C, AVG(TO_NUMBER(I3.C)) RECORDCOUNT
FROM CTEST I3
GROUP BY I3.C
!
 
resultcount :                     0
 
C                              | RECORDCOUNT
-------------------------------+---------------------------------------------
1                              |  1.0000000000000000000000000000000000000E+00
1                              |  1.0000000000000000000000000000000000000E+00
2                              |  2.0000000000000000000000000000000000000E+00
2                              |  2.0000000000000000000000000000000000000E+00
 
resultcount :                     0
 
Enter command:
PARSE SELECT I3.C, COUNT(DISTINCT I3.C) RECORDCOUNT
FROM CTEST I3
GROUP BY I3.C
UNION ALL
SELECT I3.C, COUNT(DISTINCT I3.C) RECORDCOUNT
FROM C3 I3
GROUP BY I3.C
!
 
resultcount :                     0
 
C                              | RECORDCOUNT
-------------------------------+------------
1                              |           1
1                              |           1
2                              |           1
2                              |           1
 
resultcount :                     0
 
Enter command:
PARSE SELECT I3.C, COUNT(DISTINCT I3.C || 'abc') RECORDCOUNT
FROM CTEST I3
GROUP BY I3.C
UNION ALL
SELECT I3.C, COUNT(DISTINCT I3.C) RECORDCOUNT
FROM C3 I3
GROUP BY I3.C
!
 
resultcount :                     0
 
C                              | RECORDCOUNT
-------------------------------+------------
1                              |           1
1                              |           1
2                              |           1
2                              |           1
 
resultcount :                     0
 
Enter command:
PARSE SELECT I3.C, COUNT(DISTINCT I3.C) RECORDCOUNT
FROM CTEST I3
GROUP BY I3.C
UNION ALL
SELECT I3.C, COUNT(DISTINCT I3.C || 'abc') RECORDCOUNT
FROM C3 I3
GROUP BY I3.C
!
 
resultcount :                     0
 
C                              | RECORDCOUNT
-------------------------------+------------
1                              |           1
1                              |           1
2                              |           1
2                              |           1
 
resultcount :                     0
 
Enter command:
PARSE SELECT I3.C, COUNT(DISTINCT TO_NUMBER(I3.C)) RECORDCOUNT
FROM CTEST I3
GROUP BY I3.C
UNION ALL
SELECT I3.C, TO_NUMBER(I3.C)+110 RECORDCOUNT
FROM C3 I3
GROUP BY I3.C
!
 
resultcount :                     0
 
C                              | RECORDCOUNT
-------------------------------+---------------------------------------------
1                              |  1.0000000000000000000000000000000000000E+00
2                              |  1.0000000000000000000000000000000000000E+00
1                              |  1.1100000000000000000000000000000000000E+02
2                              |  1.1200000000000000000000000000000000000E+02
 
resultcount :                     0
 
Enter command:
PARSE SELECT I3.C, TO_NUMBER(I3.C)+110 RECORDCOUNT
FROM C3 I3
GROUP BY I3.C
UNION ALL
SELECT I3.C, COUNT(DISTINCT TO_NUMBER(I3.C)) RECORDCOUNT
FROM CTEST I3
GROUP BY I3.C
!
 
resultcount :                     0
 
C                              | RECORDCOUNT
-------------------------------+---------------------------------------------
1                              |  1.0000000000000000000000000000000000000E+00
2                              |  1.0000000000000000000000000000000000000E+00
1                              |  1.1100000000000000000000000000000000000E+02
2                              |  1.1200000000000000000000000000000000000E+02
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B!
 
***ERROR  -4000 Unknown result table                                       0001
 
Enter command:
PARS_EXECUTE !
 
Enter command:
DROP TABLE CTEST !
 
Enter command:
DROP TABLE C3 !
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST SQLMODE ORACLE !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST SQLMODE ORACLE ISOLATION LEVEL 1 !
 
Enter command:
PARS_THEN_EX !
 
Enter command:
PARSE DECLARE ERG CURSOR FOR
      SELECT * FROM T_ORA ORDER BY D DESC !
 
resultcount :                     0
 
A                 :  char_ora  2
D                 :  19-FEB-98
B                 :  bbb
--------------------------------------------------------------------------------
A                 :  char_ora  1
D                 :  18-DEC-94
B                 :  bbb
--------------------------------------------------------------------------------
A                 :  char_ora  3
D                 :  23-OCT-65
B                 :  bbb
 
resultcount :                     0
 
Enter command:
 
DATA !
 
Enter command:
PARSE DECLARE ERG CURSOR FOR
      SELECT * FROM T_ORA WHERE B = :B !
 
c 40 'bbb'
 
resultcount :                     0
 
A                 :  char_ora  1
D                 :  18-DEC-94
B                 :  bbb
--------------------------------------------------------------------------------
A                 :  char_ora  2
D                 :  19-FEB-98
B                 :  bbb
--------------------------------------------------------------------------------
A                 :  char_ora  3
D                 :  23-OCT-65
B                 :  bbb
 
resultcount :                     0
 
Enter command:
NODATA !
 
Enter command:
FETCH ERG INTO :C, :A, :B !
 
***ERROR  -4000 Unknown result table                                       0001
 
Enter command:
CLOSE ERG !
 
Enter command:
PARSING !
 
Enter command:
PARSE MSELECT A, B FROM T1 WHERE C = :A !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MSELECT     !
32767
-4
Parsing idnr :      1
 
c 1978 'a'
c 1978 'a'
c 1978 'a'
c 1978 'a'
 
resultcount :                     0
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
MSELECT     !
0
4
Parsing idnr :      1
 
c 1978 'b'
c 1978 'b'
c 1978 'b'
c 1978 'b'
 
***ERROR    100 Row not found                                              0004
 
Enter command:
PARS_EXECUTE !
 
Enter command:
SELECT * FROM T1 !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
PARSING !
 
Enter command:
PARSE
    SELECT C,A,B FROM T1, DUAL WHERE E = :E AND  B = :B !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
PARSE DECLARE ERG CURSOR FOR
    SELECT C,A,B FROM T1, DUAL WHERE E = :E AND  B = :B !
Parsing idnr :      1
 
c 7 'MANNN' c 11 'ABCDEFG'
 
***ERROR    100 Row not found                                              0001
 
Enter command:
PARS_THEN_EX !
 
Enter command:
NODATA !
 
Enter command:
FETCH ERG INTO :A, :B, :C !
 
***ERROR  -4000 Unknown result table                                       0001
 
Enter command:
PARSING !
 
Enter command:
PARSE
    SELECT C,A,B FROM T1 WHERE E = :E AND  B = :B !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
PARSE DECLARE ERG CURSOR FOR
    SELECT C,A,B FROM T1 WHERE E = :E AND  B = :B !
Parsing idnr :      1
 
c 7 'MANNN' c 11 'ABCDEFG'
 
***ERROR    100 Row not found                                              0001
 
Enter command:
PARS_THEN_EX !
 
Enter command:
NODATA !
 
Enter command:
FETCH ERG INTO :A, :B, :C !
 
***ERROR  -4000 Unknown result table                                       0001
 
Enter command:
NODATA !
 
Enter command:
PARS_EXECUTE !
 
Enter command:
INSERT INTO T1 VALUES ('eins', 'das ist b', 'c ist in ascii ',
'd c_5', 'e char7', 4)!
 
Enter command:
INSERT INTO T1 VALUES ('drei', 'das ist b', 'c ist in ascii ',
'd c_5', 'e char7', 4)!
 
Enter command:
INSERT INTO T1 VALUES ('zwei', 'das ist b', 'c ist in ascii ',
'd c_5', 'e char7', 4)!
 
Enter command:
PARS_THEN_EX !
 
Enter command:
PARSE DECLARE ERG CURSOR FOR
      SELECT A, COUNT(DISTINCT A || A || A) FROM T1 GROUP BY A!
 
resultcount :                     0
 
A    | EXPRESSION1
-----+------------
drei |           1
eins |           1
zwei |           1
 
resultcount :                     0
 
Enter command:
DATA !
 
Enter command:
PARSE DECLARE ERG CURSOR FOR
      SELECT C,A,B FROM T1, DUAL WHERE E = :E AND  B = :B !
 
c 7 'e char7' c 11 'das ist b'
 
resultcount :                     0
 
C                 :  c ist in ascii
A                 :  drei
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  eins
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  zwei
B                 :  das ist b
 
resultcount :                     0
 
Enter command:
NODATA !
 
Enter command:
FETCH ERG INTO :C, :A, :B !
 
***ERROR  -4000 Unknown result table                                       0001
 
Enter command:
CLOSE ERG !
 
Enter command:
PARS_THEN_EX !
 
Enter command:
DATA !
 
Enter command:
PARSE DECLARE ERG CURSOR FOR
      SELECT C,A,B FROM T1 WHERE E = :E AND  B = :B !
 
c 7 'e char7' c 11 'das ist b'
 
resultcount :                     0
 
C                 :  c ist in ascii
A                 :  drei
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  eins
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  zwei
B                 :  das ist b
 
resultcount :                     0
 
Enter command:
NODATA !
 
Enter command:
FETCH ERG INTO :C, :A, :B !
 
***ERROR  -4000 Unknown result table                                       0001
 
Enter command:
CLOSE ERG !
 
Enter command:
DATA !
 
Enter command:
PARSE DECLARE ERG CURSOR FOR
      SELECT C,A,B FROM T1 WHERE E = :E AND  B = :B !
 
c 7 'noe-noe' c 11 'das ist b'
 
***ERROR    100 Row not found                                              0001
 
Enter command:
NODATA !
 
Enter command:
FETCH ERG INTO :C, :A, :B !
 
***ERROR  -4000 Unknown result table                                       0001
 
Enter command:
CLOSE ERG !
 
Enter command:
PARS_EXECUTE !
 
Enter command:
DECLARE ERG CURSOR FOR SELECT * FROM T1 !
 
resultcount :                     0
 
Enter command:
FETCH ERG  INTO :A, :B, :C, :D, :E, :F !
 
A                 :  drei
B                 :  das ist b
C                 :  c ist in ascii
D                 :  d c_5
E                 :  e char7
F                 :        4
--------------------------------------------------------------------------------
A                 :  eins
B                 :  das ist b
C                 :  c ist in ascii
D                 :  d c_5
E                 :  e char7
F                 :        4
--------------------------------------------------------------------------------
A                 :  zwei
B                 :  das ist b
C                 :  c ist in ascii
D                 :  d c_5
E                 :  e char7
F                 :        4
 
resultcount :                     3
 
Enter command:
CLOSE ERG !
 
Enter command:
INSERT INTO T1 VALUES ('fil1', 'das ist b', 'c ist in ascii ',
'd c_5', 'e char7', 4)!
 
Enter command:
INSERT INTO T1 VALUES ('fil2', 'das ist b', 'c ist in ascii ',
'd c_5', 'e char7', 4)!
 
Enter command:
INSERT INTO T1 VALUES ('fil3', 'das ist b', 'c ist in ascii ',
'd c_5', 'e char7', 4)!
 
Enter command:
INSERT INTO T1 VALUES ('fil4', 'das ist b', 'c ist in ascii ',
'd c_5', 'e char7', 4)!
 
Enter command:
INSERT INTO T1 VALUES ('fil5', 'das ist b', 'c ist in ascii ',
'd c_5', 'e char7', 4)!
 
Enter command:
INSERT INTO T1 VALUES ('fil6', 'das ist b', 'c ist in ascii ',
'd c_5', 'e char7', 4)!
 
Enter command:
INSERT INTO T1 VALUES ('fil7', 'das ist b', 'c ist in ascii ',
'd c_5', 'e char7', 4)!
 
Enter command:
INSERT INTO T1 VALUES ('fil8', 'das ist b', 'c ist in ascii ',
'd c_5', 'e char7', 4)!
 
Enter command:
INSERT INTO T1 VALUES ('fil9', 'das ist b', 'c ist in ascii ',
'd c_5', 'e char7', 4)!
 
Enter command:
INSERT INTO T1 VALUES ('filA', 'das ist b', 'c ist in ascii ',
'd c_5', 'e char7', 4)!
 
Enter command:
INSERT INTO T1 VALUES ('filB', 'das ist b', 'c ist in ascii ',
'd c_5', 'e char7', 4)!
 
Enter command:
INSERT INTO T1 VALUES ('filC', 'das ist b', 'c ist in ascii ',
'd c_5', 'e char7', 4)!
 
Enter command:
INSERT INTO T1 VALUES ('filD', 'das ist b', 'c ist in ascii ',
'd c_5', 'e char7', 4)!
 
Enter command:
INSERT INTO T1 VALUES ('filE', 'das ist b', 'c ist in ascii ',
'd c_5', 'e char7', 4)!
 
Enter command:
INSERT INTO T1 VALUES ('filF', 'das ist b', 'c ist in ascii ',
'd c_5', 'e char7', 4)!
 
Enter command:
PARS_THEN_EX !
 
Enter command:
DATA !
 
Enter command:
PARSE DECLARE ERG CURSOR FOR
      SELECT C,A,B FROM T1, DUAL WHERE E = :E AND  B = :B !
 
c 7 'e char7' c 11 'das ist b'
 
resultcount :                     0
 
C                 :  c ist in ascii
A                 :  drei
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  eins
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  fil1
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  fil2
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  fil3
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  fil4
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  fil5
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  fil6
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  fil7
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  fil8
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  fil9
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  filA
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  filB
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  filC
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  filD
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  filE
B                 :  das ist b
 
resultcount :                     0
 
Enter command:
NODATA !
 
Enter command:
FETCH ERG INTO :C, :A, :B !
 
C                 :  c ist in ascii
A                 :  filF
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  zwei
B                 :  das ist b
 
resultcount :                    18
 
Enter command:
CLOSE ERG !
 
Enter command:
DATA !
 
Enter command:
PARSE DECLARE ERG CURSOR FOR
      SELECT C,A,B FROM T1 WHERE E = :E AND  B = :B !
 
c 7 'e char7' c 11 'das ist b'
 
resultcount :                     0
 
C                 :  c ist in ascii
A                 :  drei
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  eins
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  fil1
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  fil2
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  fil3
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  fil4
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  fil5
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  fil6
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  fil7
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  fil8
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  fil9
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  filA
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  filB
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  filC
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  filD
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  filE
B                 :  das ist b
 
resultcount :                     0
 
Enter command:
NODATA !
 
Enter command:
FETCH ERG INTO :C, :A, :B !
 
C                 :  c ist in ascii
A                 :  filF
B                 :  das ist b
--------------------------------------------------------------------------------
C                 :  c ist in ascii
A                 :  zwei
B                 :  das ist b
 
resultcount :                    18
 
Enter command:
PARSING !
 
Enter command:
PARSE DECLARE ERG CURSOR FOR
      SELECT C,A,B FROM T1 WHERE A < :A AND  B = :B !
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
DECLARE ERG !
Parsing idnr :      1
 
c 4 'f' c 11 'das ist b'
 
resultcount :                     0
 
1                 :  c ist in ascii
2                 :  drei
3                 :  das ist b
--------------------------------------------------------------------------------
1                 :  c ist in ascii
2                 :  eins
3                 :  das ist b
 
resultcount :                     0
 
Enter command:
NODATA !
 
Enter command:
PARSING NOINIT !
 
Enter command:
PARSE FETCH ERG INTO :C, :A, :B !
 
***ERROR  -4000 Unknown result table                                       0001
 
Enter command:
EXECUTING !
 
Enter command:
FETCH ERG INTO !
Parsing idnr :      2
 
***ERROR  -3005 Invalid SQL statement                                      0001
 
Enter command:
EXECUTING !
 
Enter command:
DATA !
 
Enter command:
DECLARE ERG !
Parsing idnr :      1
 
c 4 'zz' c 11 'das ist b'
 
resultcount :                     0
 
1                 :  c ist in ascii
2                 :  drei
3                 :  das ist b
--------------------------------------------------------------------------------
1                 :  c ist in ascii
2                 :  eins
3                 :  das ist b
--------------------------------------------------------------------------------
1                 :  c ist in ascii
2                 :  fil1
3                 :  das ist b
--------------------------------------------------------------------------------
1                 :  c ist in ascii
2                 :  fil2
3                 :  das ist b
--------------------------------------------------------------------------------
1                 :  c ist in ascii
2                 :  fil3
3                 :  das ist b
--------------------------------------------------------------------------------
1                 :  c ist in ascii
2                 :  fil4
3                 :  das ist b
--------------------------------------------------------------------------------
1                 :  c ist in ascii
2                 :  fil5
3                 :  das ist b
--------------------------------------------------------------------------------
1                 :  c ist in ascii
2                 :  fil6
3                 :  das ist b
--------------------------------------------------------------------------------
1                 :  c ist in ascii
2                 :  fil7
3                 :  das ist b
--------------------------------------------------------------------------------
1                 :  c ist in ascii
2                 :  fil8
3                 :  das ist b
--------------------------------------------------------------------------------
1                 :  c ist in ascii
2                 :  fil9
3                 :  das ist b
--------------------------------------------------------------------------------
1                 :  c ist in ascii
2                 :  filA
3                 :  das ist b
--------------------------------------------------------------------------------
1                 :  c ist in ascii
2                 :  filB
3                 :  das ist b
--------------------------------------------------------------------------------
1                 :  c ist in ascii
2                 :  filC
3                 :  das ist b
--------------------------------------------------------------------------------
1                 :  c ist in ascii
2                 :  filD
3                 :  das ist b
--------------------------------------------------------------------------------
1                 :  c ist in ascii
2                 :  filE
3                 :  das ist b
 
resultcount :                     0
 
Enter command:
NODATA !
 
Enter command:
EXECUTING !
 
Enter command:
FETCH ERG INTO !
Parsing idnr :      2
 
***ERROR  -3005 Invalid SQL statement                                      0001
 
Enter command:
PARS_EXECUTE !
 
Enter command:
DROP TABLE T1 !
 
Enter command:
CREATE TABLE T ( A CHAR (8), B NUMBER (2))!
 
Enter command:
INSERT INTO T VALUES ('aaa', 1)!
 
Enter command:
INSERT INTO T VALUES ('aaa', 1)!
 
Enter command:
INSERT INTO T VALUES ('aaa', 1)!
 
Enter command:
INSERT INTO T VALUES ('aaa', 1)!
 
Enter command:
INSERT INTO T VALUES ('aaa', 1)!
 
Enter command:
INSERT INTO T VALUES ('aaa', 1)!
 
Enter command:
INSERT INTO T VALUES ('aaa', 1)!
 
Enter command:
INSERT INTO T VALUES ('aaa', 1)!
 
Enter command:
INSERT INTO T VALUES ('bbb', 2)!
 
Enter command:
PARSING !
 
Enter command:
PARSE SELECT * FROM T WHERE B = 2!
parsing idnr :       1
 
Enter command:
EXECUTING !
 
Enter command:
SELECT !
Parsing idnr :      1
 
resultcount :                     0
 
1        | 2
---------+----
bbb      |   2
 
resultcount :                     0
 
Enter command:
PARS_THEN_EX !
 
Enter command:
FETCH INTO :A !
 
***ERROR  -4000 Unknown result table                                       0001
 
Enter command:
PARS_EXECUTE!
 
Enter command:
SELECT * FROM SYSMONITOR!
 
resultcount :                     0
 
Enter command:
FETCH INTO :A,:B,:C,:D,:E,:F,:G,:H,:I,:J,:K,:L,:M,
           :N,:O,:P,:Q,:R,:S,:T,:U,:V,:W,:X,:Y,:Z !
 
SYSK              :  0000000000000001
LINKAGE           :  01
PARSEID           :  00000XYZ00001C013C
ROWS_READ         :                      3
ROWS_QUAL         :                      0
VIRTUAL_READS     :                      1
SUBREQUESTS       :                      2
STRATEGY          :  SCAN
RUNTIME           :                0.000000
VWAITS            :                      0
VSUSPENDS         :                      0
PHYSICAL_IO       :                      0
ROWS_FETCHED      :                      0
FETCH_CALLS       :                      0
ROOT1             :        <root>
ROOT2             :  ???????????
ROOT3             :  ???????????
ROOT4             :  ???????????
ROOT5             :  ???????????
ROOT6             :  ???????????
RESULT_COPIED     :  NO
DATETIME          :  DD-MON-YY
TERMID            :  <termid>
USERNAME          :  KERN
APPL_PROCESS      :  <appl_process>
APPL_NODE         :  <appl_node>
--------------------------------------------------------------------------------
SYSK              :  0000000000000002
LINKAGE           :  01
PARSEID           :  00000XYZ000062013C
ROWS_READ         :                      9
ROWS_QUAL         :                      1
VIRTUAL_READS     :                      1
SUBREQUESTS       :                      2
STRATEGY          :  SCAN
RUNTIME           :                0.000000
VWAITS            :                      0
VSUSPENDS         :                      0
PHYSICAL_IO       :                      0
ROWS_FETCHED      :                      1
FETCH_CALLS       :                      0
ROOT1             :  ???????????
ROOT2             :  ???????????
ROOT3             :  ???????????
ROOT4             :  ???????????
ROOT5             :  ???????????
ROOT6             :  ???????????
RESULT_COPIED     :  NO
DATETIME          :  DD-MON-YY
TERMID            :  <termid>
USERNAME          :  KERN
APPL_PROCESS      :  <appl_process>
APPL_NODE         :  <appl_node>
 
resultcount :                     2
 
Enter command:
COMMIT WORK !
 
Enter command:
 
CREATE TABLE "/DZBW/D_EA_KTO_T" (
"MANDT"               VARCHAR (3) ASCII    NOT NULL    DEFAULT '000',
"BUKRS"               VARCHAR (4) ASCII    NOT NULL    DEFAULT ' ',
"GJAHR"               VARCHAR (4) ASCII    NOT NULL    DEFAULT '0000',
"EART_VON"               VARCHAR (8) ASCII    NOT NULL    DEFAULT ' ',
"EART_BIS"               VARCHAR (8) ASCII    NOT NULL    DEFAULT ' ',
"KTOKD"               VARCHAR (4) ASCII    NOT NULL    DEFAULT ' ',
"AKONT"               VARCHAR (10) ASCII    NOT NULL    DEFAULT ' ',
"ZUAWA"               VARCHAR (3) ASCII    NOT NULL    DEFAULT ' ',
"ZTERM"               VARCHAR (4) ASCII    NOT NULL    DEFAULT ' ',
PRIMARY KEY ("MANDT", "BUKRS", "GJAHR", "EART_VON")
)!
 
Enter command:
 
INSERT INTO "/DZBW/D_EA_KTO_T" (MANDT, BUKRS, GJAHR, EART_VON, EART_BIS )
VALUES('635', '1000', '2004', '3110', '3110')!
 
Enter command:
 
EXPLAIN
SELECT *
FROM "/DZBW/D_EA_KTO_T"
WHERE
  "MANDT" = '635' AND "BUKRS" = '1000' AND "GJAHR" <= '2004' AND
  "EART_VON" <= '3110' AND "EART_BIS" >= '3110'
ORDER BY
  "GJAHR" DESC !
 
OWNER              | TABLENAME          | COLUMN_OR_INDEX    | STRATEGY                                 | PAGECOUNT
-------------------+--------------------+--------------------+------------------------------------------+-----------
KERN               | /DZBW/D_EA_KTO_T   |                    | RANGE CONDITION FOR KEY                  |          1
                   |                    | MANDT              |      (USED KEY COLUMN)                   |
                   |                    | BUKRS              |      (USED KEY COLUMN)                   |
                   |                    | GJAHR              |      (USED KEY COLUMN)                   |
                   |                    | EART_VON           |      (USED KEY COLUMN)                   |
                   |                    |                    |    RESULT IS NOT COPIED , COSTVALUE IS   |          1
 
resultcount :                     6
 
Enter command:
 
SELECT *
FROM "/DZBW/D_EA_KTO_T"
WHERE
  "MANDT" = '635' AND "BUKRS" = '1000' AND "GJAHR" <= '2004' AND
  "EART_VON" <= '3110' AND "EART_BIS" >= '3110'
ORDER BY
  "GJAHR" DESC !
 
resultcount :                     0
 
Enter command:
FETCH INTO :A, :B, :C, :D, :E, :F, :G, :H, :I!
 
MANDT | BUKRS | GJAHR | EART_VON | EART_BIS | KTOKD | AKONT      | ZUAWA | ZTERM
------+-------+-------+----------+----------+-------+------------+-------+------
635   | 1000  | 2004  | 3110     | 3110     |       |            |       |
 
resultcount :                     1
 
Enter command:
 
PARSING!
 
Enter command:
PARSE
SELECT * FROM "/DZBW/D_EA_KTO_T"
WHERE
  "MANDT" = :A AND "BUKRS" = :A AND "GJAHR" <= :A AND
  "EART_VON" <= :A AND "EART_BIS" >= :A
ORDER BY
  "GJAHR" DESC !
parsing idnr :       1
 
Enter command:
EXECUTING!
 
Enter command:
DATA!
 
Enter command:
PARSE DECLARE ERG CURSOR FOR
    SELECT!
Parsing idnr :      1
 
c 3 '635'
c 4 '1000'
c 4 '2004'
c 4 '3110'
c 4 '3110'
 
resultcount :                     0
 
1   | 2    | 3    | 4        | 5        | 6    | 7          | 8   | 9
----+------+------+----------+----------+------+------------+-----+-----
635 | 1000 | 2004 | 3110     | 3110     |      |            |     |
 
resultcount :                     0
 
Enter command:
PARS_EXECUTE!
 
Enter command:
COMMIT WORK RELEASE!
 
Enter command:
FILE SHUTDWNK !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE SHUTDOWN !
 
Enter command:
DBMCLI SUPERDBA,COLDUSER!
UTIL_CONNECT SUT,SUT!
OK
 
DB_OFFLINE!
OK
 
BYE!
 
Enter command:
VDNEXIT!
SESSION END
 
