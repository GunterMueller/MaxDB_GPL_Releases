file xinitdbk!
file connect ( kern test !
create table t ( w char (3),
x char (8) ,
y fixed (12))!
insert t values ('aaa', 'bbb', 12)!
insert t values ('aaa', 'ccc', 13)!
insert t values ('b  ', 'ccc', 83)!
insert t values ('bbb', 'ddd', 124)!
insert t values ('bbb', 'eee', 125)!
insert t values ('ccc', 'eee', 135)!
insert t values ('eee', 'fff', 12561356)!
create table tt ( a char (1))!
insert tt set a = 'b'!
* PTS 1106123 !
declare c cursor for 
  with recursive px (minor) as
  (select x from t where w = 'aaa'
   union all
   select x from t, px
       where minor = t.w
  )
select minor
from px !
fetch c!
pars_then_ex !
declare c cursor for 
  with recursive px (minor) as
  (select x from t where w = 'aaa'
   union all
   select x from t, px
       where minor = t.w
  )
select minor
from px !
fetch c into :a!
parsing !
declare c cursor for 
  with recursive px (minor) as
  (select x from t where w = :a
   union all
   select x from t, px
       where minor = t.w
  )
select minor
from px !
pars_execute!
pdescribe!
1
executing !
data !
declare c cursor for !
1
c 3 'aaa'

nodata !
pars_then_ex !
fetch c into :a!
pars_execute !
declare c cursor for 
  with recursive px (major, minor, zahl, mainmajor, mylevel) as
  (select w,x,y,w , 1 from t where w = 'aaa'
   union all
   select w, x, y, mainmajor, mylevel + 1 from t, px
       where minor = t.w
  )
select mainmajor,minor,zahl, fixed (mylevel,5)
from px
order by zahl !
fetch c!
declare c cursor for 
  with recursive px (major,minor,zahl, mainmajor,mainminor,mainzahl) as
  (select w,x,y, t.* from t where w = 'aaa'
   union all
   select w, x, y, mainmajor,mainminor,mainzahl from t, px
       where minor = t.w
  )
select *
from px, tt
with lock isolation level 2 !
fetch c!
*-------------------------------------------------------------!
pars_then_ex !
declare c cursor for 
  with recursive px (major, minor, zahl, mainmajor) as
  (select w,x,y,w from t where w = 'aaa'
   union all
   select w, x, y, mainmajor from t, px
       where minor = t.w
  )
select mainmajor,minor,zahl
from px
order by zahl !
fetch c!
close c !
create view vrecurs as
  with recursive px (major, minor, zahl, mainmajor) as
  (select w,x,y,w from t where w = 'aaa'
   union all
   select w, x, y, mainmajor from t, px
       where minor = t.w
  )
select mainmajor,minor,zahl
from px !
select * from vrecurs
order by zahl !
fetch !
*-------------------------------------------------------------!
pars_then_ex !
data !
declare c cursor for 
  with recursive px (major, minor, zahl, mainmajor) as
  (select w,x,y,w from t where w = :a
   union all
   select w, x, y, mainmajor from t, px
       where minor = t.w
  )
select mainmajor,minor,zahl
from px
order by zahl !
c 3 'aaa'

fetch c!
close c !
*----------------------------------------------------------- !
declare c cursor for 
  with recursive px (major, minor, folge, mainmajor, zu_viele_namen) as
  (select w,x,chr(y),w from t where w = 'aaa'
  )
select mainmajor,minor,folge
from px
order by folge !
declare c cursor for 
  with recursive px (major, minor, folge, mainmajor, zu_viele_namen) as
  (select w,x,chr(y),w from t where w = 'aaa'
   except
   select w, x, folge || substr(y, length(y),1), mainmajor from t, px
       where minor = t.w
  )
select mainmajor,minor,folge
from px
order by folge !
declare c cursor for 
  with recursive px (major, minor, folge, mainmajor, zu_viele_namen) as
  (select w,x,chr(y),w from t where w = 'aaa'
   union all
   select w,x,chr(y),w from t where w = 'aaa'
   union all
   select w, x, folge || substr(y, length(y),1), mainmajor from t, px
       where minor = t.w
  )
select mainmajor,minor,folge
from px
order by folge !
declare c cursor for 
  with recursive px (major, minor, folge, mainmajor, zu_viele_namen) as
  (select w,x,chr(y),w from t where w = 'aaa'
   union all
   select w, x, folge || substr(y, length(y),1), mainmajor from t, px
       where minor = t.w
  )
select mainmajor,minor,folge
from px
union
select * from t
order by folge !
declare c cursor for 
  with recursive px (major, minor, folge, mainmajor, zu_viele_namen) as
  (select w,x,chr(y),w from t where w = 'aaa'
   union
   select w, x, folge || substr(y, length(y),1), mainmajor from t, px
       where minor = t.w
  )
select mainmajor,minor,folge
from px
order by folge !
declare c cursor for 
  with recursive px (major, minor, folge, mainmajor, zu_viele_namen) as
  (select w,x,chr(y),w from t where w = 'aaa'
   union all
   select w, x, folge || substr(y, length(y),1), mainmajor from t, px
       where minor = t.w
  )
select mainmajor,minor,folge
from px
order by folge !
declare c cursor for 
  with recursive px (major, minor, folge, mainmajor) as
  (select w,x,chr(y),w from t where w = 'aaa'
   union all
   select w, x, folge || substr(y, length(y),1), mainmajor from t, px
       where minor = t.w
  )
select mainmajor,minor,folge
from px
order by folge !
*----------------------------------------------------------- !
declare c cursor for 
  with recursive px (major, minor, folge, mainmajor) as
  (select w,x,chr(y),w from t where w = 'aaa'
   union all
   select w, x, folge || substr(chr(y), length(chr(y)),1), 
                              mainmajor from t, px
       where minor = t.w
  )
select mainmajor,minor,folge
from px
order by folge !
fetch c!
*----------------------------------------------------------- !
declare c cursor for 
  with recursive px (major, minor, zahl) as
  (select w,x,y from t where w in (select * from tt)
   union all
   select w,x,y from t, px
       where minor = t.w and x < (select 'f' from tt)
  )
select *
from px
where zahl in (select y from t) !
fetch c !
* declare c cursor for 
*  with recursive px (major, minor, zahl) as
*  (select w,x,y from t where w in (select * from tt)
*   union all
*   select w,x,y from t where w in (select minor from px)
*  )
*select *
*from px
*where zahl in (select y from t) !
*fetch c !
pars_execute !
commit release !
* PTS 1118098 - 100 !
file connect ( kern test !
create table KMS_MESSAGE_REFERENCE
( MESSAGE_ID  smallint,
  PARENT_TYPE smallint,
  PARENT      smallint)!
create index i_p_t on KMS_MESSAGE_REFERENCE (PARENT_TYPE)!
insert into KMS_MESSAGE_REFERENCE values (1,1,1)!
insert into KMS_MESSAGE_REFERENCE values (1,1,2)!

create table KMS_MESSAGE
(ID     smallint,
 PARENT smallint)!
insert into KMS_MESSAGE values (11, 1)!
insert into KMS_MESSAGE values (12, 1)!
insert into KMS_MESSAGE values (111, 11)!
insert into KMS_MESSAGE values (1111, 111)!
insert into KMS_MESSAGE values (21, 2)!
select * from KMS_MESSAGE !
fetch !

create table KMS_USER_MESSAGE
(MESSAGE_ID smallint,
 USER_ID    smallint,
 READ_TIME  time)!
create index i on KMS_USER_MESSAGE (user_id)!
insert into KMS_USER_MESSAGE values (11, 4711, time)!
insert into KMS_USER_MESSAGE values (12, 9, time)!
insert into KMS_USER_MESSAGE values (111, 4711, time)!
insert into KMS_USER_MESSAGE values (1111, 9, time)!
insert into KMS_USER_MESSAGE values (21, 4711, time)!
select * from KMS_USER_MESSAGE !
fetch !

* parameter in first select !
parsing !
declare c cursor for with recursive result(ID, PARENT) as (
  select MESSAGE_ID, null 
    from KMS_MESSAGE_REFERENCE 
   where PARENT_TYPE=:pt and PARENT=:p
  union all 
  select KMS_MESSAGE.ID, KMS_MESSAGE.PARENT 
    from KMS_MESSAGE, result 
   where KMS_MESSAGE.PARENT=result.ID
) 
select KMS_MESSAGE.*, READ_TIME 
  from KMS_MESSAGE, KMS_USER_MESSAGE, result 
 where KMS_MESSAGE.ID=MESSAGE_ID(+) 
   and USER_ID(+)= 4711
   and KMS_MESSAGE.ID=result.ID !
data !

executing !
declare !
1, C
n 5 1
n 5 1

pars_then_ex!
nodata !
fetch c into :a, :b, :c, :d !

* parameter in recursive (middle) select !
parsing !
declare c cursor for with recursive result(ID, PARENT) as (
  select MESSAGE_ID, null 
    from KMS_MESSAGE_REFERENCE 
   where PARENT_TYPE=:pt and PARENT=:p
  union all 
  select KMS_MESSAGE.ID, KMS_MESSAGE.PARENT 
    from KMS_MESSAGE, result 
   where KMS_MESSAGE.PARENT=result.ID
     AND KMS_MESSAGE.ID   between :ID AND 1000
) 
select KMS_MESSAGE.*, READ_TIME 
  from KMS_MESSAGE, KMS_USER_MESSAGE, result 
 where KMS_MESSAGE.ID=MESSAGE_ID(+) 
   and USER_ID(+)= 4711 
   and KMS_MESSAGE.ID=result.ID !
data !

executing !
declare !
1, C
n 5 1
n 5 1
n 5 7

pars_then_ex!
nodata !
fetch c into :a, :b, :c, :d !

* parameter in last select !

* here is another problem included (H.B.) for some releases, 
* so that outer join-result is not correct (the last select).
* info that outer join is at hand is lost during handling 
parsing !
declare c cursor for with recursive result(ID, PARENT) as (
  select MESSAGE_ID, null 
    from KMS_MESSAGE_REFERENCE 
   where PARENT_TYPE=:pt and PARENT=:p
  union all 
  select KMS_MESSAGE.ID, KMS_MESSAGE.PARENT 
    from KMS_MESSAGE, result 
   where KMS_MESSAGE.PARENT=result.ID
) 
select KMS_MESSAGE.*, READ_TIME 
  from KMS_MESSAGE, KMS_USER_MESSAGE, result 
 where KMS_MESSAGE.ID=MESSAGE_ID(+) 
   and USER_ID(+)= :uid 
   and KMS_MESSAGE.ID=result.ID !
data !

executing !
declare !
1, C
n 5 1
n 5 1
n 5 4711

pars_then_ex!
nodata !
fetch c into :a, :b, :c, :d !

* no parameter in last select and parameter there, but
* different select_list to last to checks above.
parsing !
declare c cursor for with recursive result(ID, PARENT) as (
  select MESSAGE_ID, null 
    from KMS_MESSAGE_REFERENCE 
   where PARENT_TYPE=:pt and PARENT=:p
  union all 
  select KMS_MESSAGE.ID, KMS_MESSAGE.PARENT 
    from KMS_MESSAGE, result 
   where KMS_MESSAGE.PARENT=result.ID
) 
select KMS_MESSAGE.*, 
       KMS_USER_MESSAGE.message_id mid, KMS_USER_MESSAGE.user_id usid,
       result.id resid, result.parent resparent
  from KMS_MESSAGE, KMS_USER_MESSAGE, result 
 where KMS_MESSAGE.ID=MESSAGE_ID(+) 
   and USER_ID(+)= 4711 
   and KMS_MESSAGE.ID=result.ID !
data !

executing !
declare !
1, C
n 5 1
n 5 1

pars_then_ex!
nodata !
fetch c into :a, :b, :c, :d, :e, :f!
parsing !
declare c cursor for with recursive result(ID, PARENT) as (
  select MESSAGE_ID, null 
    from KMS_MESSAGE_REFERENCE 
   where PARENT_TYPE=:pt and PARENT=:p
  union all 
  select KMS_MESSAGE.ID, KMS_MESSAGE.PARENT 
    from KMS_MESSAGE, result 
   where KMS_MESSAGE.PARENT=result.ID
) 
select KMS_MESSAGE.*, 
       KMS_USER_MESSAGE.message_id mid, KMS_USER_MESSAGE.user_id usid,
       result.id resid, result.parent resparent
  from KMS_MESSAGE, KMS_USER_MESSAGE, result 
 where KMS_MESSAGE.ID=MESSAGE_ID(+) 
   and USER_ID(+)= :uid 
   and KMS_MESSAGE.ID=result.ID !
data !

executing !
declare !
1, C
n 5 1
n 5 1
n 5 4711

pars_then_ex!
nodata !
fetch c into :a, :b, :c, :d, :e, :f, :g !
pars_execute!
rollback release !
* PTS 1125471-4/1126814 !
file connect ( sut sut!
create user "DBA" password "DBA" dba !
commit release !
file connect ( "DBA" "DBA" !
CREATE TABLE "DBA"."ELEMENT_ATTRIBUTES"
(
	"ELEMENT_UID"        Char (10) ASCII  NOT NULL  DEFAULT 
'UNDEFINED',
	"ELEMENT_VERSION"        Integer  NOT NULL  DEFAULT      1,
	"TYPE"        Char (10) ASCII  NOT NULL  DEFAULT 'UNDEFINED',
	"VALUE"        Char (200) ASCII  NOT NULL,
	"DELETED"        Integer  NOT NULL  DEFAULT      0,
	PRIMARY KEY ("ELEMENT_UID", "ELEMENT_VERSION", "TYPE")
)
!
CREATE TABLE "DBA"."ELEMENT_TREE"
(
	"ELEMENT_UID"        Char (10) ASCII  NOT NULL,
	"ELEMENT_VERSION"        Integer  NOT NULL  DEFAULT      1,
	"NAME"        Char (50) ASCII  NOT NULL  DEFAULT 'UNDEFINED',
	"TYPE"        Char (10) ASCII  NOT NULL  DEFAULT 'UNDEFINED',
	"PARENT_UID"        Char (10) ASCII  NOT NULL  DEFAULT '1',
	"PARENT_VERSION"        Integer  NOT NULL  DEFAULT      1,
	"SOFTLINK"        Boolean  NOT NULL  DEFAULT FALSE,
	"DELETED"        Integer  NOT NULL  DEFAULT      0,
	"ACTIVATED"        Boolean  NOT NULL  DEFAULT TRUE,
	PRIMARY KEY ("ELEMENT_UID", "ELEMENT_VERSION")
)
!
noscript !

CREATE DBPROC DBA.GET_TREE_ATTR (
    IN REVISION INTEGER,
    IN DEPTH INTEGER,
    IN ROOT CHAR(50))
 
 RETURNS CURSOR AS
DECLARE :$CURSOR CURSOR FOR
WITH RECURSIVE TREE
 (NELEMENT_UID, NELEMENT_VERSION, NPARENT_UID, NPARENT_VERSION, NLEVEL, 
NSOFTLINK, NDELETED)
AS
(
 SELECT
  ELEMENT_UID, ELEMENT_VERSION, PARENT_UID, PARENT_VERSION, 0, SOFTLINK, 
DELETED
 FROM
  DBA.ELEMENT_TREE
 WHERE
ELEMENT_VERSION <= :REVISION AND
  PARENT_UID = :ROOT
 UNION ALL
 SELECT
  ELEMENT_UID, ELEMENT_VERSION, PARENT_UID, PARENT_VERSION, NLEVEL+1, 
SOFTLINK, DELETED
 FROM
  DBA.ELEMENT_TREE, DBA.TREE
 WHERE
  TREE.NELEMENT_UID = ELEMENT_TREE.PARENT_UID AND
  TREE.NELEMENT_VERSION = ELEMENT_TREE.PARENT_VERSION
  AND ( NLEVEL + 1 ) <= :DEPTH
)
SELECT
 NELEMENT_UID AS ELEMENT_UID,
 MAX(NELEMENT_VERSION) AS ELEMENT_VERSION,
 NPARENT_UID AS PARENT_UID,
 NLEVEL AS LEVEL,
 NSOFTLINK AS SOFTLINK,
 (MAX(NDELETED) MOD 2) AS DELETED,
 ELEMENT_ATTRIBUTES.VALUE,
 ELEMENT_ATTRIBUTES.TYPE
FROM
 DBA.TREE
LEFT JOIN
 DBA.ELEMENT_ATTRIBUTES ON NELEMENT_UID = ELEMENT_ATTRIBUTES.ELEMENT_UID
WHERE
 ( ELEMENT_ATTRIBUTES.ELEMENT_UID,ELEMENT_ATTRIBUTES.ELEMENT_VERSION) IN (
    SELECT
      ELEMENT_UID, MAX(ELEMENT_VERSION)
    FROM
      DBA.ELEMENT_ATTRIBUTES
    WHERE
      ELEMENT_VERSION <= :REVISION
    GROUP BY
      ELEMENT_UID, TYPE
 )
GROUP BY
 NELEMENT_UID, NPARENT_UID, NLEVEL,NSOFTLINK, VALUE, TYPE
ORDER BY
 NLEVEL,NELEMENT_UID;
!

script !
parsing !
call DBA.GET_TREE_ATTR (:a, :b, :c)!

pars_execute !
commit release !
file connect ( sut sut !
drop user "DBA" !
commit release !
file connect ( kern test !
  create table requires (
    objectid integer,
    linkname varchar (100),
    linkkind varchar (10),
    targetid integer)!
insert requires values (37084, 'linkname', 'kind', 4711)!
declare d cursor for with recursive PX (oid, lname, lkind, tid) as (
select * from requires where objectid = 37084
union all
select requires.* from PX, requires where PX.oid = requires.targetid)
select * from PX
!
fetch d!
declare e cursor for with recursive PX (oid, lname, lkind, tid) as (
select * from requires where objectid = 37084
union all
select px.* from PX, requires where PX.oid = requires.targetid)
select * from PX
!
fetch e!
declare C cursor for with recursive PX (oid, lname, lkind, tid) as (
select * from requires where objectid = 37084
union all
select * from PX, requires where PX.oid = requires.targetid)
select * from PX
!
fetch c!
rollback release !
* PTS 1130616/7 !
file connect ( sut sut !
create user suman password suman dba not exclusive !
commit release !
file connect ( suman suman !
create table mfg_bom_m(
    bom_version  numeric(2, 0),
    main_item_code  varchar(25),
    sub_item_code  varchar(25),
    sub_item_qty  numeric(12, 6),
    bom_item_remarks varchar(60),
    constraint mfg_bom_m_pk primary key(main_item_code, sub_item_code,
bom_version))
!

insert mfg_bom_m (bom_version,main_item_code,sub_item_code,sub_item_qty)
  values (1, 'abc', 'bcd', 3)!
insert mfg_bom_m (bom_version,main_item_code,sub_item_code,sub_item_qty)
  values (2, 'abc', 'bcd', 5)!
insert mfg_bom_m (bom_version,main_item_code,sub_item_code,sub_item_qty)
  values (3, 'abc', 'bcd', 7)!
insert mfg_bom_m (bom_version,main_item_code,sub_item_code,sub_item_qty)
  values (1, 'abc', 'cde', 1)!
insert mfg_bom_m (bom_version,main_item_code,sub_item_code,sub_item_qty)
  values (1, 'abc', 'def', 2)!
insert mfg_bom_m (bom_version,main_item_code,sub_item_code,sub_item_qty)
  values (2, 'abc', 'def', 12)!
insert mfg_bom_m (bom_version,main_item_code,sub_item_code,sub_item_qty)
  values (1, 'bcd', 'bcdef', 2)!
insert mfg_bom_m (bom_version,main_item_code,sub_item_code,sub_item_qty)
  values (1, 'bcd', 'bcdfg', 2)!
insert mfg_bom_m (bom_version,main_item_code,sub_item_code,sub_item_qty)
  values (2, 'bcd', 'bcdfg', 9)!
insert mfg_bom_m (bom_version,main_item_code,sub_item_code,sub_item_qty)
  values (1, 'bcdef', 'bcdefgh', 17)!

CREATE OR REPLACE VIEW mfg_latest_bom_v
 (bom_version, main_item_code, sub_item_code, sub_item_qty,
        bom_item_remarks) AS
   SELECT bom_version, main_item_code, sub_item_code, sub_item_qty,
        bom_item_remarks
   FROM mfg_bom_m
   WHERE bom_version = (SELECT MAX(bom_version) FROM mfg_bom_m M
                    WHERE M.main_item_code = mfg_bom_m.main_item_code)
!
select bom_version,main_item_code,sub_item_code,sub_item_qty from mfg_bom_m!
fetch!
close!
select bom_version,main_item_code,sub_item_code,sub_item_qty 
 from mfg_latest_bom_v!
fetch!
close!
SELECT main_item_code, sub_item_code, sub_item_qty,main_item_code
 FROM suman.mfg_bom_m WHERE main_item_code = 'abc'!
fetch!
close !         
SELECT main_item_code, sub_item_code, sub_item_qty,main_item_code
 FROM suman.mfg_latest_bom_v WHERE main_item_code = 'abc'!
fetch!  
close!

DECLARE bom CURSOR FOR
    WITH RECURSIVE PX (main, sub, qty, super_main) AS
       (SELECT main_item_code, sub_item_code, sub_item_qty,
main_item_code
         FROM suman.mfg_bom_m WHERE main_item_code = 'abc'
UNION ALL
        SELECT main_item_code, sub_item_code, sub_item_qty, super_main
         FROM suman.mfg_bom_m B, suman.PX
         WHERE sub = B.main_item_code)
       SELECT super_main, sub, qty FROM suman.PX ORDER BY 1, 2!
fetch bom !
close bom !
select * from sysdd.parsinfos !
fetch!
close!

pars_then_ex !
data !
    DECLARE bom CURSOR FOR
    WITH RECURSIVE PX (main, sub, qty, super_main) AS
       (SELECT main_item_code, sub_item_code, sub_item_qty,
main_item_code
         FROM suman.mfg_bom_m WHERE main_item_code = :main_item
UNION ALL
        SELECT main_item_code, sub_item_code, sub_item_qty, super_main
         FROM suman.mfg_bom_m B, suman.PX
         WHERE sub = B.main_item_code)
       SELECT super_main, sub, qty FROM suman.PX ORDER BY 1, 2!
c 25 'abc'

nodata !
fetch bom into :a, :b, :c, :d !
pars_execute !
close bom !
select * from sysdd.parsinfos !
fetch!
close!

pars_then_ex !
data !
    DECLARE bom CURSOR FOR
    WITH RECURSIVE PX (main, sub, qty, super_main) AS
       (SELECT main_item_code, sub_item_code, sub_item_qty,
main_item_code
         FROM suman.mfg_latest_bom_v WHERE main_item_code = :main_item
UNION ALL
        SELECT main_item_code, sub_item_code, sub_item_qty, super_main
         FROM suman.mfg_bom_m B, suman.PX
         WHERE sub = B.main_item_code)
       SELECT super_main, sub, qty FROM suman.PX ORDER BY 1, 2!
c 25 'abc'

nodata !
fetch bom into :a, :b, :c, :d !
pars_execute !

select * from sysdd.parsinfos !
fetch!
close!

close bom !
select * from sysdd.parsinfos !
fetch!
close!

pars_then_ex !
data !
    DECLARE bom CURSOR FOR
    WITH RECURSIVE PX (main, sub, qty, super_main) AS
       (SELECT main_item_code, sub_item_code, sub_item_qty,
main_item_code
         FROM suman.mfg_latest_bom_v WHERE main_item_code = :main_item
UNION ALL
        SELECT main_item_code, sub_item_code, sub_item_qty, super_main
         FROM suman.mfg_latest_bom_v B, suman.PX
         WHERE sub = B.main_item_code)
       SELECT super_main, sub, qty FROM suman.PX ORDER BY 1, 2!
c 25 'abc'


nodata !
fetch bom into :a, :b, :c, :d !
pars_execute !

select * from sysdd.parsinfos !
fetch!
close!
close bom !
select * from sysdd.parsinfos !
fetch!
close!

noscript !
CREATE DBPROC bom_with_temp_tab (IN main_item VARCHAR(25)) RETURNS CURSOR AS
    $CURSOR = 'bom';
    BEGIN
    CREATE TABLE TEMP.bom_view 
       (constraint mfg_bom_m_pk primary key(main_item_code, sub_item_code,
        bom_version))
       AS 
       SELECT main_item_code, sub_item_code, sub_item_qty, bom_version
       FROM suman.mfg_latest_bom_v;
    DECLARE :$CURSOR CURSOR FOR
    WITH RECURSIVE PX (main, sub, qty, super_main) AS
       (SELECT main_item_code, sub_item_code, sub_item_qty,
main_item_code
         FROM TEMP.bom_view WHERE main_item_code = :main_item
UNION ALL
        SELECT main_item_code, sub_item_code, sub_item_qty, super_main
         FROM TEMP.bom_view B, suman.PX
         WHERE sub = B.main_item_code)
       SELECT super_main, sub, qty FROM suman.PX ORDER BY 1, 2;
    DROP TABLE TEMP.bom_view;       
END;
!

call bom_with_temp_tab ('abc')!
select * from "bom" !
fetch into :a, :b, :c, :d !
close "bom"!
close !

CREATE DBPROC bom (IN main_item VARCHAR(25)) RETURNS CURSOR AS
    $CURSOR = 'bom';
    BEGIN
    DECLARE :$CURSOR CURSOR FOR
    WITH RECURSIVE PX (main, sub, qty, super_main) AS
       (SELECT main_item_code, sub_item_code, sub_item_qty,
main_item_code
         FROM suman.mfg_latest_bom_v WHERE main_item_code = :main_item
UNION ALL
        SELECT main_item_code, sub_item_code, sub_item_qty, super_main
         FROM suman.mfg_latest_bom_v B, suman.PX
         WHERE sub = B.main_item_code)
       SELECT super_main, sub, qty FROM suman.PX ORDER BY 1, 2;
END;
!

call bom ('abc')!
select * from "bom" !
fetch into :a, :b, :c, :d !
close "bom"!
close !

script !
commit release !
file connect ( kern test !

create table WEBDAV_NODE 
(PID char(24) byte, CID char(24) byte, 
NAME char(500) ASCII, COMPRESSEDLENGTH fixed(10) default 0, 
XDB_DOC_ID fixed(20) default null,
primary key (PID, NAME),
constraint WEBDAV_NODE_X1 unique(CID))!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000000' , 
 x'000000000000000000000000000000000000000000000000' , '')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000000' , 
 x'000000000000000000000000000000000000000000000001' , 'dir1')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000001' , 
 x'000000000000000000000000000000000000000000000002' , 'dir2')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000002' , 
 x'000000000000000000000000000000000000000000000003' , 'dir3')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000003' , 
 x'000000000000000000000000000000000000000000000004' , 'dir4')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000004' , 
 x'000000000000000000000000000000000000000000000005' , 'dir5')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000005' , 
 x'000000000000000000000000000000000000000000000006' , 'dir6')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000006' , 
 x'000000000000000000000000000000000000000000000007' , 'dir7')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000007' , 
 x'000000000000000000000000000000000000000000000008' , 'dir8')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000008' , 
 x'000000000000000000000000000000000000000000000009' , 'dir9')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000009' , 
 x'000000000000000000000000000000000000000000000010' , 'dir10')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000010' , 
 x'000000000000000000000000000000000000000000000011' , 'dir11')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000011' , 
 x'000000000000000000000000000000000000000000000012' , 'dir12')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000012' , 
 x'000000000000000000000000000000000000000000000013' , 'dir13')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000013' , 
 x'000000000000000000000000000000000000000000000014' , 'dir14')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000014' , 
 x'000000000000000000000000000000000000000000000015' , 'dir15')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000015' , 
 x'000000000000000000000000000000000000000000000016' , 'dir16')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000016' , 
 x'000000000000000000000000000000000000000000000017' , 'dir17')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000017' , 
 x'000000000000000000000000000000000000000000000018' , 'dir18')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000018' , 
 x'000000000000000000000000000000000000000000000019' , 'dir19')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000019' , 
 x'000000000000000000000000000000000000000000000020' , 'dir20')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000020' , 
 x'000000000000000000000000000000000000000000000021' , 'dir21')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000021' , 
 x'000000000000000000000000000000000000000000000022' , 'dir22')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000022' , 
 x'000000000000000000000000000000000000000000000023' , 'dir23')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000023' , 
 x'000000000000000000000000000000000000000000000024' , 'dir24')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000024' , 
 x'000000000000000000000000000000000000000000000025' , 'dir25')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000025' , 
 x'000000000000000000000000000000000000000000000026' , 'dir26')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000026' , 
 x'000000000000000000000000000000000000000000000027' , 'dir27')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000027' , 
 x'000000000000000000000000000000000000000000000028' , 'dir28')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000028' , 
 x'000000000000000000000000000000000000000000000029' , 'dir29')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000029' , 
 x'000000000000000000000000000000000000000000000030' , 'dir30')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000030' , 
 x'000000000000000000000000000000000000000000000031' , 'dir31')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000031' , 
 x'000000000000000000000000000000000000000000000032' , 'dir32')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000032' , 
 x'000000000000000000000000000000000000000000000033' , 'dir33')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000033' , 
 x'000000000000000000000000000000000000000000000034' , 'dir34')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000034' , 
 x'000000000000000000000000000000000000000000000035' , 'dir35')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000035' , 
 x'000000000000000000000000000000000000000000000036' , 'dir36')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000036' , 
 x'000000000000000000000000000000000000000000000037' , 'dir37')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000037' , 
 x'000000000000000000000000000000000000000000000038' , 'dir38')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000038' , 
 x'000000000000000000000000000000000000000000000039' , 'dir39')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000039' , 
 x'000000000000000000000000000000000000000000000040' , 'dir40')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000040' , 
 x'000000000000000000000000000000000000000000000041' , 'dir41')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000041' , 
 x'000000000000000000000000000000000000000000000042' , 'dir42')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000042' , 
 x'000000000000000000000000000000000000000000000043' , 'dir43')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000043' , 
 x'000000000000000000000000000000000000000000000044' , 'dir44')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000044' , 
 x'000000000000000000000000000000000000000000000045' , 'dir45')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000045' , 
 x'000000000000000000000000000000000000000000000046' , 'dir46')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000046' , 
 x'000000000000000000000000000000000000000000000047' , 'dir47')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000047' , 
 x'000000000000000000000000000000000000000000000048' , 'dir48')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000048' , 
 x'000000000000000000000000000000000000000000000049' , 'dir49')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000049' , 
 x'000000000000000000000000000000000000000000000050' , 'dir50')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000050' , 
 x'000000000000000000000000000000000000000000000051' , 'dir51')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000051' , 
 x'000000000000000000000000000000000000000000000052' , 'dir52')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000001' , 
 x'000000000000000000000000000000000000000000000053' , 'file1')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000002' , 
 x'000000000000000000000000000000000000000000000054' , 'file2')!

insert into WEBDAV_NODE (PID,CID,NAME) 
 values(x'000000000000000000000000000000000000000000000052' , 
 x'000000000000000000000000000000000000000000000055' , 'file3')!
 
DECLARE C CURSOR FOR 
WITH RECURSIVE LIST (PARENTID, RESID, RESNAME) AS 
(SELECT PID, CID, NAME FROM WEBDAV_NODE 
 WHERE PID = x'000000000000000000000000000000000000000000000000'   and 
 CID<>PID
UNION ALL  
SELECT PID, CID,  NAME FROM WEBDAV_NODE, LIST   
 WHERE PID=LIST.RESID) 
SELECT * FROM LIST!
fetch c!

DECLARE C CURSOR FOR 
WITH RECURSIVE LIST (PARENTID, RESID, RESNAME) AS 
(SELECT PID, CID, NAME FROM WEBDAV_NODE 
 WHERE PID = x'000000000000000000000000000000000000000000000000'  and 
  CID<>PID 
UNION ALL  
SELECT PID, CID,  RESNAME & '/' & substr(NAME,1,120) 
 FROM WEBDAV_NODE, LIST   WHERE PID=LIST.RESID) 
SELECT * FROM LIST!
fetch c!

DECLARE C CURSOR FOR 
WITH RECURSIVE LIST (PARENTID, RESID, RESNAME) AS 
(SELECT PID, CID, NAME FROM WEBDAV_NODE 
 WHERE PID = x'000000000000000000000000000000000000000000000000'  and 
 CID<>PID 
UNION ALL  
SELECT PID, CID,  RESNAME & '/' & NAME FROM WEBDAV_NODE, LIST   
WHERE PID=LIST.RESID) 
SELECT * FROM LIST!
fetch c!

commit work release !

file connect ( sut sut !
drop user suman !
commit release !

* PTS 1140397-9 !
file connect ( kern test !
create table annotation (
annotationid char (8),
start date, "end" date)!
create table feauture (
annotationid char (8),
"value" char (3),
type char (3))!
Declare c cursor for
With recursive px (A_ANNOTATIONID, S_ANCHOR, E_ANCHOR, found) as
(
select A.annotationid, A.start, A."end", 
decode (A."value", 'ih', 'YES', 'NO')
 From    (select annotation.annotationid, start, "end", "value"
            from annotation inner join feauture on
annotation.annotationid=feauture.annotationid
            where feauture."value"='hv' and type='phn')  AS A,
            
            (select annotation.annotationid, start, "end"
            from annotation inner join feauture on
annotation.annotationid=feauture.annotationid
            where feauture."value"='dcl' and type='phn')  AS B
 where A."end"=B.start
union all
select annotation.annotationid,  s_anchor,  "end", decode ("value",
'ih', 'YES', 'NO')
from px, annotation inner join feauture on
annotation.annotationid=feauture.annotationid 
where e_anchor = annotation.start
and type='phn' and annotation.start <= 
(select start from annotation inner
join feauture on annotation.annotationid=feauture.annotationid where
"value"='dcl')
)
select annotation.annotationid, found 
from annotation inner join  
     px on annotation.annotationid=a_annotationid
        inner join 
        feauture on annotation.annotationid=feauture.annotationid!
rollback release !
file shutdwnk!
vdnexit!
