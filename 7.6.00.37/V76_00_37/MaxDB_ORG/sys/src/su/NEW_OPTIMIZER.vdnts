* special failure tests for the new optimizer 
file xinitdbk!
file connect ( sut sut !

!* ====== test DISTINCT OPTIMIZATION with fetch strat =======

create table test ( 
k0 int, k1 int, k2 int,
f0 int, f1 int not null, f2 int,
primary key ( k0, k1, k2 )) !

create index ind1 on test(f1)!

insert into test values ( 3, 3, 1, 1, 1, 1 ) !
insert into test values ( 3, 3, 2, 1, 2, 2 ) !
insert into test values ( 3, 3, 3, 1, 2, 3 ) !
insert into test values ( 3, 3, 4, 2, 2, 4 ) !
insert into test values ( 3, 3, 5, 2, 2, 5 ) !
insert into test values ( 3, 3, 6, 2, 2, 6 ) !
insert into test values ( 3, 3, 7, 2, 2, 7 ) !

explain 
select /*+disable_invonly,indexaccess*/ distinct f1, k0 from test !

select /*+disable_invonly,indexaccess*/ distinct f1, k0 from test !
fetch!

explain 
select /*+indexaccess*/ distinct f1, k0 from test !

select /*+indexaccess*/ distinct f1, k0 from test !
fetch!

!* ====== test, that MERGE forbid INDEX ONLY =======
* we decide ONLY INDEX BUILD vs. INDEX MERGE FETCH
* INDEX MERGE FETCH if ( output / primkey ) > 2.0
explain 
select /*+indexaccess*/ k0, '0123456789', '0123456789' from test 
order by k0 !

explain 
select /*+indexaccess*/ k0 from test order by k0 !

!* ====== test, that DISTINCT forbid MERGE =========
explain 
select /*+indexaccess*/ distinct f1, k0 from test 
where f0 = 1 order by k0 !

select /*+indexaccess*/ distinct f1, k0 from test 
where f0 = 1 order by k0 !
fetch!

!* ====== test NO RESULT SET =======================
explain
select * from test where k1 = 34 and k1 = 34 and k1 = 34 and k1 = 2  !

explain
select * from test where f1 = 2  and f1 = 34 and f1 = 34 and f1 = 34 !


!* ====== test IN-RANGE with descending ============

create index ind2 on test(f2 desc)!

explain
select /*+indexaccess(ind2)*/ f2 from test
 where f2 in ( 3, 4, 5, 6 ) !

select /*+indexaccess(ind2)*/ f2 from test
 where f2 in ( 3, 4, 5, 6 ) !
fetch!


rollback work !
* ==========================================================

create table Tab1 ( k00  int, k01 int, k02 int, k03 int, primary key(k00)) !
insert into Tab1 values ( 1, 10, 1, 2 )!
insert into Tab1 values ( 2, 20, 1, 2 )!
insert into Tab1 values ( 3, 30, 1, 2 )!
insert into Tab1 values ( 4, 40, 1, 2 )!
create index ind1 on Tab1(k00, k01, k03) !

!* ====== test KEY-IN with duplicates ============
explain 
select /*+keyaccess,IN_STRATEGY*/ * from tab1 
where k00 in (1, 4, 3, 3, 2, 2, 5, 5 )!

select /*+keyaccess,IN_STRATEGY*/ * from tab1 
where k00 in (1, 4, 3, 3, 2, 2, 5, 5 )!
fetch!

!* ====== test INDEX-IN with duplicates ============
explain 
select /*+indexaccess,IN_STRATEGY*/ * from tab1 
where k00 in (1, 4, 3, 3, 2, 2, 5, 5 )!

select /*+indexaccess,IN_STRATEGY*/ * from tab1 
where k00 in (1, 4, 3, 3, 2, 2, 5, 5 )!
fetch!

rollback work !
* ==========================================================

create table t3(t3c1 int, t3c2 int, t3c3 varchar(900) ascii, 
t3c4 varchar(2000) ascii default '0123456789012345678901234567890123456789',
t3c5 varchar(2000) ascii default '0123456789012345678901234567890123456789',
t3c7 varchar( 900) ascii default '0123456789012345678901234567890123456789',
primary key (t3c1, t3c2))!
create index ind1 on t3(t3c3, t3c2)!
insert into t3(t3c1,t3c2,t3c3) values (1, 0, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 1, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 2, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 3, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 4, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 5, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 6, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 7, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 8, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 9, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 10, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 11, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 12, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 13, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 14, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 15, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 16, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 17, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 18, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 19, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 20, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 21, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 22, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 23, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 24, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 25, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 26, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 27, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 28, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 29, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 30, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 31, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 32, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 33, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 34, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 35, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 36, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 37, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 38, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (1, 39, '0123456789')!
insert into t3(t3c1,t3c2,t3c3) values (2, 0, '0123456789')!
update statistics t3!

explain select t3c1 from t3 where t3c1=2 order by t3c3, t3c2!
explain select /*+fetchresult*/ t3c1 from t3 where t3c1=2 order by t3c3, t3c2!


rollback work !
* ==========================================================

!* ====== test JOIN HINTS =======
create table a(a1 int, a2 int, a3 int , primary key(a1, a2))!
create table b(b1 int, b2 int, b3 int , primary key(b1, b2))!
create table c(c1 int, c2 int, c3 int , primary key(c1, c2))!
create table d(d1 int, d2 int, d3 int , primary key(d1, d2))!
create table e(e1 int, e2 int, e3 int , primary key(e1, e2))!
create index ai1 on a(a1)!
create index ai2 on a(a1,a3)!
create index bi1 on b(b1)!
create index bi2 on b(b1,b3)!
create index ci1 on c(c1)!
create index ci2 on c(c1,c3)!
create index di1 on d(d1)!
create index di2 on d(d1,d3)!
create index ei1 on e(e1)!
create index ei2 on e(e1,e3)!

explain select * 
from a, b, c, d where
a.a1=b.b1 and b.b1=c.c1 and c.c1=d.d1 !
!* keyaccess for a, b, c; d automatic
explain select /*+join(keyaccess;keyaccess;keyaccess)*/ * 
from a, b, c, d where
a.a1=b.b1 and b.b1=c.c1 and c.c1=d.d1 !
!* keyaccess for a, b, c; d automatic
explain select /*+join(keyaccess;keyaccess;;keyaccess)*/ * 
from a, b, d, c where
a.a1=b.b1 and b.b1=c.c1 and c.c1=d.d1 !
!* keyaccess for a, c; indexaccess for b; d automatic
explain select /*+join(keyaccess;indexaccess;;keyaccess)*/ * 
from a, b, d, c where
a.a1=b.b1 and b.b1=c.c1 and c.c1=d.d1 !
!* keyaccess for a, c; indexaccess for b; dedicated indexaccess for d
explain 
select /*+ordered,join(keyaccess;indexaccess;indexaccess(di2);keyaccess)*/ * 
from a, b, d, c where
a.a1=b.b1 and b.b1=c.c1 and c.c1=d.d1 !
!* no access path for b; a,b,d automatic
explain 
select /*+ordered,join(;noaccesspath)*/ * 
from a, b, d, c where
a.a1=b.b1 and b.b1=c.c1 and c.c1=d.d1 !
!* no access path for b; a,b,d automatic; special access for a
explain 
select /*+ordered,join(access=indexaccess,indexscan;noaccesspath)*/ * 
from a, b, d, c where
a.a1=b.b1 and b.b1=c.c1 and c.c1=d.d1 !



rollback work !
* ==========================================================
!* test select with subquery on same column
create table i ( i int ) !
insert into i values(1)!
create index i on i ( i ) !
explain select /*+indexaccess */ * from i 
where i <= 900 and i in ( select 1 from dual ) !
select /*+indexaccess */ * from i 
where i <= 900 and i in ( select 1 from dual ) !
fetch!

drop table i! 
create table i ( i int, primary key(i) ) !
insert into i values(1)!
explain select * from i 
where i <= 900 and i in ( select 1 from dual ) !
select * from i 
where i <= 900 and i in ( select 1 from dual ) !
fetch!
rollback work !
* ==========================================================
!* ====== test MIN/MAX optimization =========

create table t1( c4 varchar(500) default 
'0123456789012345678901234567890123456789012345678901234567890123456789'
'0123456789012345678901234567890123456789012345678901234567890123456789'
'0123456789012345678901234567890123456789012345678901234567890123456789'
'0123456789012345678901234567890123456789012345678901234567890123456789'
'0123456789012345678901234567890123456789012345678901234567890123456789',
k1 int, k2 int, k3 int, primary key(k1,k2,k3))!
insert into t1(k1,k2,k3) values (0, 0, 0)!
insert into t1(k1,k2,k3) values (1, 1, 1)!
insert into t1(k1,k2,k3) values (1, 1, 2)!
insert into t1(k1,k2,k3) values (1, 2, 3)!
insert into t1(k1,k2,k3) values (1, 2, 4)!
insert into t1(k1,k2,k3) values (1, 3, 5)!
insert into t1(k1,k2,k3) values (1, 3, 6)!
insert into t1(k1,k2,k3) values (1, 4, 7)!
insert into t1(k1,k2,k3) values (1, 4, 8)!
insert into t1(k1,k2,k3) values (2, 1, 1)!
insert into t1(k1,k2,k3) values (2, 1, 2)!
insert into t1(k1,k2,k3) values (2, 2, 3)!
insert into t1(k1,k2,k3) values (2, 2, 4)!
insert into t1(k1,k2,k3) values (2, 3, 5)!
insert into t1(k1,k2,k3) values (2, 3, 6)!
insert into t1(k1,k2,k3) values (2, 4, 7)!
insert into t1(k1,k2,k3) values (2, 4, 8)!
insert into t1(k1,k2,k3) values (3, 1, 1)!
insert into t1(k1,k2,k3) values (3, 1, 2)!
insert into t1(k1,k2,k3) values (3, 2, 3)!
insert into t1(k1,k2,k3) values (3, 2, 4)!
insert into t1(k1,k2,k3) values (3, 3, 5)!
insert into t1(k1,k2,k3) values (3, 3, 6)!
insert into t1(k1,k2,k3) values (3, 4, 7)!
insert into t1(k1,k2,k3) values (3, 4, 8)!

!* == some negative tests ==
explain select min(k3) from t1 where k1 = 2 and k2 > 2 and k3 > 6!
explain select min(k1) from t1 group by k1!
* possible with MIN/MAX optimization, but not implemented
explain select min(k3) from t1 where k1 = 2 and k2 > 2 and k3 = 6!
!* =========================

file MINMAX_OPTIM !
* close unnamed result set
close !
commit release !
senderid DBM !
file connect ( sut sut !
SET PARAMETER OPTIMIZE_MIN_MAX = 'NO'!
commit release !
senderid XCI !
file connect ( sut sut !
file MINMAX_OPTIM !
* close unnamed result set
close !
commit release !
senderid DBM !
file connect ( sut sut !
SET PARAMETER OPTIMIZE_MIN_MAX = 'YES'!
commit release !
senderid XCI !
file connect ( sut sut !
alter table t1 drop primary key!
alter table t1 modify(k1 null, k2 null, k3 null)!
create index i1 on t1(k1 asc, k2 desc, k3 asc)!
insert into t1(k1,k2,k3) values (NULL, NULL, 9)!
insert into t1(k1,k2,k3) values (NULL, 11, 9)!

file MINMAX_OPTIM !
* close unnamed result set
close !
commit release !
senderid DBM !
file connect ( sut sut !
SET PARAMETER OPTIMIZE_MIN_MAX = 'NO'!
commit release !
senderid XCI !
file connect ( sut sut !
file MINMAX_OPTIM !
* close unnamed result set
close !

create table t2( k4 varchar(500) ASCII default 
'0123456789012345678901234567890123456789012345678901234567890123456789'
'0123456789012345678901234567890123456789012345678901234567890123456789'
'0123456789012345678901234567890123456789012345678901234567890123456789'
'0123456789012345678901234567890123456789012345678901234567890123456789'
'0123456789012345678901234567890123456789012345678901234567890123456789',
c5 fixed(38), c6 fixed(38),
k1 fixed(38), k2 fixed(38), k3 fixed(38), primary key(k1,k2,k3,k4))!
insert into t2(k1,k2,k3,c5,c6) values (0, 0, 0, 3, 5)!
insert into t2(k1,k2,k3,c5,c6) values (1, 1, 1, 3, 5)!
insert into t2(k1,k2,k3,c5,c6) values (1, 1, 2, 3, 5)!
insert into t2(k1,k2,k3,c5,c6) values (1, 2, 3, 3, 5)!
insert into t2(k1,k2,k3,c5,c6) values (1, 2, 4, 3, 5)!
insert into t2(k1,k2,k3,c5,c6) values (1, 2, 5, 3, 5)!
insert into t2(k1,k2,k3,c5,c6) values (1, 3, 6, 3, 5)!
insert into t2(k1,k2,k3,c5,c6) values (1, 4, 7, 3, 5)!
insert into t2(k1,k2,k3,c5,c6) values (1, 4, 8, 3, 5)!
insert into t2(k1,k2,k3,c5,c6) values (2, 1, 1, 3, 5)!
insert into t2(k1,k2,k3,c5,c6) values (2, 1, 2, 3, 5)!
insert into t2(k1,k2,k3,c5,c6) values (2, 2, 3, 3, 5)!
insert into t2(k1,k2,k3,c5,c6) values (2, 2, 4, 3, 5)!
insert into t2(k1,k2,k3,c5,c6) values (2, 3, 5, 3, 5)!
insert into t2(k1,k2,k3,c5,c6) values (2, 3, 6, 3, 5)!
insert into t2(k1,k2,k3,c5,c6) values (2, 4, 7, 3, 5)!
insert into t2(k1,k2,k3,c5,c6) values (2, 4, 8, 3, 5)!
insert into t2(k1,k2,k3,c5,c6) values (3, 1, 1, 3, 5)!
insert into t2(k1,k2,k3,c5,c6) values (3, 1, 2, 3, 5)!
insert into t2(k1,k2,k3,c5,c6) values (3, 2, 3, 3, 5)!
insert into t2(k1,k2,k3,c5,c6) values (3, 2, 4, 3, 5)!
insert into t2(k1,k2,k3,c5,c6) values (3, 4, 5, 3, 5)!
insert into t2(k1,k2,k3,c5,c6) values (3, 4, 6, 3, 5)!
insert into t2(k1,k2,k3,c5,c6) values (3, 4, 7, 3, 5)!
insert into t2(k1,k2,k3,c5,c6) values (3, 4, 8, 3, 5)!
create index i2 on t2(c5,c6)!

file KEYINV_MINMAX_OPTIM!
commit release !
senderid DBM !
file connect ( sut sut !
SET PARAMETER OPTIMIZE_MIN_MAX = 'YES'!
commit release !
senderid XCI !
file connect ( sut sut !
file KEYINV_MINMAX_OPTIM!
drop table t1 !
drop table t2 !
commit release !
senderid DBM !
file connect ( sut sut !
SET PARAMETER OPTIMIZE_MIN_MAX = 'NO'!
commit release !
file connect ( sut sut !
* ==========================================================
!* ====== test usage of IS NULL operator =========
create table test(c1 int, k1 int, k2 int, primary key(k1,k2))!

explain select * from test where k1 is null!
explain select * from test where k2 is null!

alter table test drop primary key!
alter table test modify (k1 null, k2 null)!

insert into test values(1, null, 3)!
insert into test values(1, null, 11)!
insert into test values(1, 3, null)!
create index inv1 on test(k1,k2)!
explain 
select /*+indexaccess*/ * from test where k1 = 3 and k2 is null!
select /*+indexaccess*/ * from test where k1 = 3 and k2 is null!
fetch!
explain 
select /*+indexaccess*/ * from test where k1 is null and k2 = 3!
select /*+indexaccess*/ * from test where k1 is null and k2 = 3!
fetch!
explain 
select /*+indexaccess*/ * from test where k1 is null!
select /*+indexaccess*/ * from test where k1 is null!
fetch!

rollback work!
* ==========================================================
!* ====== test 'ORDER BY' and const sequences =========
create table test( c1 int, k1 int, c2 int, c3 int, k2 int, k3 int
  , primary key( k1,k2,k3))!

!* === some negative tests ===
explain 
select * from test where k1 = 1 
order by k3 !
explain 
select * from test where k1 = 1 and k2 = 3
order by c1 !
explain 
select * from test where k1 = 1 and k2 = 3 and k3 = 3
order by c1 !
explain
select * from test where k1 = 1 and k2 = 3
order by k3, k2, c1 !
explain 
select * from test where k1 = 1 and k3 = 3
order by k3 desc !
!* ===========================

* key equal always written !!
explain 
select * from test where k1 = 1 and k2 = 3 and k3 = 3
order by k3, k2, k1 !
explain 
select * from test where k1 = 1 and k2 = 3
order by k3 !
explain 
select * from test where k1 = 1 and k2 = 3
order by k1, k3 !
explain
select * from test where k1 = 1 and k3 = 3
order by k2 !
explain 
select * from test where k1 = 1 and k2 = 3
order by k3, k2, k1 !
explain 
select * from test where k1 = 1 and k2 = 3
order by k2, k3, k1 !
explain 
select * from test where k1 = 1 and k2 = 3
order by k2 desc, k3, k1 !

alter table test drop primary key!
create index i1 on test(k1, k2, k3)!
create index i2 on test(k1, k2 desc, k3)!

!* === some negative tests ===
explain 
select /*+indexaccess(i1)*/ * from test where k1 = 1 
order by k3 !
explain 
select /*+indexaccess(i1)*/ * from test where k1 = 1 and k2 = 3
order by c1 !
explain 
select /*+indexaccess(i1)*/ * from test where k1 = 1 and k2 = 3 and k3 = 3
order by c1 !
explain
select /*+indexaccess(i1)*/ * from test where k1 = 1 and k2 = 3
order by k3, k2, c1 !
!* ===========================

explain 
select /*+indexaccess(i1)*/ * from test where k1 = 1 and k2 = 3 and k3 = 3
order by k3, k2, k1 !
explain 
select /*+indexaccess(i1)*/ * from test where k1 = 1 and k2 = 3
order by k3 !
explain 
select /*+indexaccess(i1)*/ * from test where k1 = 1 and k2 = 3
order by k1, k3 !
explain 
select /*+indexaccess(i2)*/ * from test where k1 = 1 and k2 = 3
order by k1, k3 !
explain
select /*+indexaccess(i1)*/ * from test where k1 = 1 and k3 = 3
order by k2 !
explain 
select /*+indexaccess(i1)*/ * from test where k1 = 1 and k2 = 3
order by k3, k2, k1 !
explain 
select /*+indexaccess(i1)*/ * from test where k1 = 1 and k2 = 3
order by k2, k3, k1 !
explain 
select /*+indexaccess(i2)*/ * from test where k1 = 1 and k2 = 3
order by k2, k3, k1 !

rollback work !
* ==========================================================
!* == test fetch of 'ORDER BY' by means of reverse key ===

create table test( k1 int, k2 int, k3 int, c4 int,
primary key( k1,k2,k3))!

 * top of result set !
insert into test values(1, 2, 5, 1 )!
insert into test values(1, 2, 4, 1 )!
insert into test values(1, 2, 3, 1 )!
insert into test values(1, 2, 2, 1 )!
insert into test values(1, 2, 1, 1 )!
insert into test values(1, 1, 5, 1 )!
insert into test values(1, 1, 4, 1 )!
insert into test values(1, 1, 3, 1 )!
insert into test values(1, 1, 2, 1 )!
insert into test values(1, 1, 1, 1 )!
 * bottom of result set !

 * set reference for fetches !
select /*+buildresult*/ * from test 
order by k1 desc, k2 desc, k3 desc !
fetch1 pos(2)!
fetch1 !
fetch1 absolute -2!
fetch1 first!
fetch1 absolute  2!
fetch1 last!
fetch1 first!
fetch1!
fetch1!
fetch1 prev!
fetch1 next!
fetch1 same!
fetch1 relative  2!
fetch1 relative -2!

SET PARAMETER OPTIMIZE_FETCH_REVERSE = 'YES'!
** negative test
explain 
select * from test
order by k1 desc, k2 desc, k3 asc !
explain 
select * from test
order by k1 asc, k2 desc, k3 desc !
SET PARAMETER OPTIMIZE_FETCH_REVERSE = 'NO'!
explain 
select * from test
order by k1 desc, k2 desc, k3 desc !
**

SET PARAMETER OPTIMIZE_FETCH_REVERSE = 'YES'!
explain 
select * from test
order by k1 desc, k2 desc, k3 desc !

select * from test 
order by k1 desc, k2 desc, k3 desc !
fetch1 pos(2)!
fetch1 !
fetch1 absolute -2!
fetch1 first!
fetch1 absolute  2!
fetch1 last!
fetch1 first!
fetch1!
fetch1!
fetch1 prev!
fetch1 next!
fetch1 same!
fetch1 relative  2!
fetch1 relative -2!

* rowno < result set amount
select * from test where rowno <= 5
order by k1 desc, k2 desc, k3 desc !
fetch!
select * from test where rowno <= 5
order by k1 desc, k2 desc, k3 desc !
fetch last!
select * from test where rowno <= 5
order by k1 desc, k2 desc, k3 desc !
fetch first!
* rowno = result set amount
select * from test where rowno <= 10
order by k1 desc, k2 desc, k3 desc !
fetch!
select * from test where rowno <= 10
order by k1 desc, k2 desc, k3 desc !
fetch last!
select * from test where rowno <= 10
order by k1 desc, k2 desc, k3 desc !
fetch first!
* rowno > result set amount
select * from test where rowno <= 20
order by k1 desc, k2 desc, k3 desc !
fetch!
select * from test where rowno <= 20
order by k1 desc, k2 desc, k3 desc !
fetch last!
select * from test where rowno <= 20
order by k1 desc, k2 desc, k3 desc !
fetch first!

 * test mass fetches !
 * set reference for fetches !
select /*+buildresult*/ * from test 
order by k1 desc, k2 desc, k3 desc !
mfetch pos(3)!
3
mfetch next!
3
mfetch prev!
3
mfetch same!
3
mfetch last!
3
mfetch absolute 3!
3
mfetch relative 2!
3
mfetch relative -2!
3

select * from test 
order by k1 desc, k2 desc, k3 desc !
mfetch pos(3)!
3
mfetch next!
3
mfetch prev!
3
mfetch same!
3
mfetch last!
3
mfetch absolute 3!
3
mfetch relative 2!
3
mfetch relative -2!
3


* test rowno with mass fetches
* rowno < result set amount
select * from test where rowno <= 5
order by k1 desc, k2 desc, k3 desc !
mfetch first!
200
select * from test where rowno <= 5
order by k1 desc, k2 desc, k3 desc !
mfetch pos(2)!
200
select * from test where rowno <= 5
order by k1 desc, k2 desc, k3 desc !
mfetch last!
3

* rowno = result set amount
select * from test where rowno <= 10
order by k1 desc, k2 desc, k3 desc !
mfetch first!
200
select * from test where rowno <= 10
order by k1 desc, k2 desc, k3 desc !
mfetch pos(2)!
200
select * from test where rowno <= 10
order by k1 desc, k2 desc, k3 desc !
mfetch last!
3

* rowno > result set amount
select * from test where rowno <= 20
order by k1 desc, k2 desc, k3 desc !
mfetch first!
200
select * from test where rowno <= 20
order by k1 desc, k2 desc, k3 desc !
mfetch pos(2)!
200
select * from test where rowno <= 20
order by k1 desc, k2 desc, k3 desc !
mfetch last!
3


!* == test fetch of 'ORDER BY' by means of reverse index ===
create index i1 on test(k1 desc, k2 desc, k3 desc)!
** negative test
explain
select /*+indexaccess(i1)*/ * from test 
order by k1 asc, k2 asc, k3 desc !

explain
select /*+indexaccess(i1)*/ * from test 
order by k1 asc, k2 desc, k3 asc !

SET PARAMETER OPTIMIZE_FETCH_REVERSE = 'NO'!
explain
select /*+indexaccess(i1)*/ * from test 
order by k1 asc, k2 asc, k3 asc !
**

 * set reference for fetches !
select /*+buildresult,indexaccess(i1)*/ * from test 
order by k1 asc, k2 asc, k3 asc !
fetch1 pos(2)!
fetch1 !
fetch1 absolute -2!
fetch1 first!
fetch1 absolute  2!
fetch1 last!
fetch1 first!
fetch1!
fetch1!
fetch1 prev!
fetch1 next!
fetch1 same!
fetch1 relative  2!
fetch1 relative -2!

SET PARAMETER OPTIMIZE_FETCH_REVERSE = 'YES'!
explain
select /*+indexaccess(i1)*/ * from test 
order by k1 asc, k2 asc, k3 asc !

select /*+indexaccess(i1)*/ * from test 
order by k1 asc, k2 asc, k3 asc !
fetch1 pos(2)!
fetch1 !
fetch1 absolute -2!
fetch1 first!
fetch1 absolute  2!
fetch1 last!
fetch1 first!
fetch1!
fetch1!
fetch1 prev!
fetch1 next!
fetch1 same!
fetch1 relative  2!
fetch1 relative -2!

* rowno < result set amount
select /*+indexaccess(i1)*/ * from test where rowno <= 5
order by k1 desc, k2 desc, k3 desc !
fetch!
select /*+indexaccess(i1)*/ * from test where rowno <= 5
order by k1 desc, k2 desc, k3 desc !
fetch last!
select /*+indexaccess(i1)*/ * from test where rowno <= 5
order by k1 desc, k2 desc, k3 desc !
fetch first!
* rowno <= result set amount
select /*+indexaccess(i1)*/ * from test where rowno <= 10
order by k1 desc, k2 desc, k3 desc !
fetch!
select /*+indexaccess(i1)*/ * from test where rowno <= 10
order by k1 desc, k2 desc, k3 desc !
fetch last!
select /*+indexaccess(i1)*/ * from test where rowno <= 10
order by k1 desc, k2 desc, k3 desc !
fetch first!
* rowno > result set amount
select /*+indexaccess(i1)*/ * from test where rowno <= 20
order by k1 desc, k2 desc, k3 desc !
fetch!
select /*+indexaccess(i1)*/ * from test where rowno <= 20
order by k1 desc, k2 desc, k3 desc !
fetch last!
select /*+indexaccess(i1)*/ * from test where rowno <= 20
order by k1 desc, k2 desc, k3 desc !
fetch first!

!* test only index access
explain
select /*+indexaccess*/ k1, k2, k3 from test 
order by k1 asc, k2 asc, k3 asc !

select /*+indexaccess*/ k1, k2, k3 from test 
order by k1 asc, k2 asc, k3 asc !
fetch1 pos(2)!
fetch1 !
fetch1 absolute -2!
fetch1 first!
fetch1 absolute  2!
fetch1 last!
fetch1 first!
fetch1!
fetch1!
fetch1 prev!
fetch1 next!
fetch1 same!
fetch1 relative  2!
fetch1 relative -2!

* test distinct optimization
insert into test values(1, 3, 5, 1)!
insert into test values(1, 3, 4, 1)!
insert into test values(1, 4, 5, 1)!
insert into test values(1, 4, 4, 1)!
insert into test values(1, 5, 5, 1)!
insert into test values(1, 5, 4, 1)!

drop index i1 on test!
 * test normal distinct fetch !
 * set reference for fetches !
create index i1 on test(k1 asc, k2 asc)!
select /*+indexaccess,buildresult*/ distinct k1, k2 from test 
order by k1 asc, k2 asc !
fetch!
select /*+indexaccess(i1),buildresult*/ distinct k1, k2 from test 
order by k1 asc, k2 asc !
fetch1 pos(2)!
fetch1 !
fetch1 absolute -2!
fetch1 first!
fetch1 absolute  2!
fetch1 last!
fetch1 first!
fetch1!
fetch1!
fetch1 prev!
fetch1 next!
fetch1 same!
fetch1 relative  2!
fetch1 relative -2!

select /*+indexaccess(i1)*/ distinct k1, k2 from test 
order by k1 asc, k2 asc !
fetch1 pos(2)!
fetch1 !
fetch1 absolute -2!
fetch1 first!
fetch1 absolute  2!
fetch1 last!
fetch1 first!
fetch1!
fetch1!
fetch1 prev!
fetch1 next!
fetch1 same!
fetch1 relative  2!
fetch1 relative -2!

* test reverse distinct fetch
drop index i1 on test!
create index i1 on test(k1 desc, k2 desc)!

explain
select /*+indexaccess(i1)*/ distinct k1, k2 from test 
order by k1 asc, k2 asc !

select /*+indexaccess(i1)*/ distinct k1, k2 from test 
order by k1 asc, k2 asc !
fetch!

select /*+indexaccess(i1)*/ distinct k1, k2 from test 
order by k1 asc, k2 asc !
fetch1 pos(2)!
fetch1 !
fetch1 absolute -2!
fetch1 first!
fetch1 absolute  2!
fetch1 last!
fetch1 first!
fetch1!
fetch1!
fetch1 prev!
fetch1 next!
fetch1 same!
fetch1 relative  2!
fetch1 relative -2!

rollback work!
* ==========================================================

!* test one phase handling and outer join
create table A (c1 char(3))!
insert into A values ('aaa')!
insert into A values ('bbb')!

create table B (c1 char(3))!
insert into B values ('bbb')!

create table C (c1 char(3) key)!
insert into C values ('aaa')!
insert into C values ('bbb')!

create table D (c1 char(3) key)!
insert into D values ('bbb')!
SET PARAMETER OPTIMIZE_JOIN_ONEPHASE = 'NO'!
commit release !
senderid XCI !
file connect ( sut sut !
explain 
select upper(A.c1), upper(B.c1) from <A, B> where A.c1 = B.c1(+)!
select upper(A.c1), upper(B.c1) from <A, B> where A.c1 = B.c1(+)!
fetch!
explain 
select upper(C.c1), upper(D.c1) from <C, D> where C.c1 = D.c1(+)!
select upper(C.c1), upper(D.c1) from <C, D> where C.c1 = D.c1(+)!
fetch!

explain 
select sum(1) from <A, B> where A.c1 = B.c1(+)!
select sum(1) from <A, B> where A.c1 = B.c1(+)!
fetch!
explain 
select sum(1) from <C, D> where C.c1 = D.c1(+)!
select sum(1) from <C, D> where C.c1 = D.c1(+)!
fetch!

* test if SET-function leads to NULL value for empty result sets 
explain
select min(A.c1) from <A, B> where A.c1 = B.c1 and A.c1 = 'ddd'!
select min(A.c1) from <A, B> where A.c1 = B.c1 and A.c1 = 'ddd'!
fetch!

explain
select min(C.c1) from <C, D> where C.c1 = D.c1 and C.c1 = 'ddd'!
select min(C.c1) from <C, D> where C.c1 = D.c1 and C.c1 = 'ddd'!
fetch!

commit release !
senderid DBM !
file connect ( sut sut !
SET PARAMETER OPTIMIZE_JOIN_ONEPHASE = 'YES'!
commit release !
senderid XCI !
file connect ( sut sut !
explain 
select upper(A.c1), upper(B.c1) from <A, B> where A.c1 = B.c1(+)!
select upper(A.c1), upper(B.c1) from <A, B> where A.c1 = B.c1(+)!
fetch!
explain 
select upper(C.c1), upper(D.c1) from <C, D> where C.c1 = D.c1(+)!
select upper(C.c1), upper(D.c1) from <C, D> where C.c1 = D.c1(+)!
fetch!

explain 
select sum(1) from <A, B> where A.c1 = B.c1(+)!
select sum(1) from <A, B> where A.c1 = B.c1(+)!
fetch!
explain 
select sum(1) from <C, D> where C.c1 = D.c1(+)!
select sum(1) from <C, D> where C.c1 = D.c1(+)!
fetch!

* test if SET-function leads to NULL value for empty result sets 
explain
select min(A.c1) from <A, B> where A.c1 = B.c1 and A.c1 = 'ddd'!
select min(A.c1) from <A, B> where A.c1 = B.c1 and A.c1 = 'ddd'!
fetch!

explain
select min(C.c1) from <C, D> where C.c1 = D.c1 and C.c1 = 'ddd'!
select min(C.c1) from <C, D> where C.c1 = D.c1 and C.c1 = 'ddd'!
fetch!


drop table a !
drop table b !
drop table c !
drop table d !
commit work!
* ==========================================================
!* test if 'DataAccess' optimization of aggregation funtions 
!* only applied for indexed columns (PTS 1127888)

CREATE TABLE "TRFCQIN"
(
"MANDT"        Varchar (3)  NOT NULL   DEFAULT '000',
"QNAME"        Varchar (24) NOT NULL   DEFAULT ' ',
"QCOUNT"       Varchar (24) NOT NULL   DEFAULT '000000000000000000000000',
"ORGTID"       Varchar (24) NOT NULL   DEFAULT ' ',
PRIMARY KEY ("MANDT", "QNAME", "QCOUNT")
)!
CREATE  INDEX "TRFCQIN~2" ON "TRFCQIN" ("MANDT" ASC, "ORGTID" ASC )!
CREATE  INDEX "TRFCQIN~3" ON "TRFCQIN" ("MANDT" ASC, "QCOUNT" ASC )!

* explain don't show this kind of optimization
explain 
SELECT /*+indexaccess("TRFCQIN~2") */ MIN("QCOUNT")   ,   MAX("QCOUNT")   
FROM   "TRFCQIN" 
where mandt = '700' and qname = 'XBTO80__0000'!

SELECT /*+indexaccess("TRFCQIN~2") */ MIN("QCOUNT")   ,   MAX("QCOUNT")   
FROM   "TRFCQIN" 
where mandt = '700' and qname = 'XBTO80__0000'!

rollback work!
* ==========================================================
!* test usage of subquery on range
create table kitest ( k1 int, k2 int, k3 int)!
insert into kitest values( 1, 2, 1 )!
insert into kitest values( 1, 2, 2 )!
insert into kitest values( 1, 2, 3 )!
insert into kitest values( 1, 2, 4 )!
insert into kitest values( 1, 2, 5 )!

create index i1 on kitest(k1,k2,k3)!
select /*+indexrange*/ * from kitest where 
k1 = 1 and k2 = 2 and k3 in (select k3 from kitest) !
fetch!
drop index i1 on kitest!

create index i1 on kitest(k1,k2,k3 desc)!
select /*+indexrange*/ * from kitest where 
k1 = 1 and k2 = 2 and k3 in (select k3 from kitest) !
fetch!
drop index i1 on kitest!

alter table kitest add primary key (k1,k2,k3)!
select /*+keyrange*/ * from kitest where 
k1 = 1 and k2 = 2 and k3 in (select k3 from kitest) !
fetch!

rollback work !

* ==========================================================
!* test handling of key ordering in indices
CREATE table test ( c1 int, c2 int default 99, primary key (c1))!
create index i1 on test(c2 asc)!
create index i2 on test(c2 desc)!

insert into test(c1) values(1)!
insert into test(c1) values(2)!
insert into test(c1) values(3)!
insert into test(c1) values(4)!
insert into test(c1) values(5)!

explain
select /*+indexaccess(i1)*/ c1 
from test 
where c2=99 order by c1 desc!
select /*+indexaccess(i1)*/ c1 
from test 
where c2=99 order by c1 desc!
fetch!

explain
select /*+indexaccess(i1)*/ c1 
from test 
where c2=99 order by c1 asc!
select /*+indexaccess(i1)*/ c1 
from test 
where c2=99 order by c1 asc!
fetch!

explain
select /*+indexaccess(i2)*/ c1 
from test 
where c2=99 order by c1 desc!
select /*+indexaccess(i2)*/ c1 
from test 
where c2=99 order by c1 desc!
fetch!

explain
select /*+indexaccess(i2)*/ c1 
from test 
where c2=99 order by c1 asc!
select /*+indexaccess(i2)*/ c1 
from test 
where c2=99 order by c1 asc!
fetch!

rollback work !
* ==========================================================
!* test handling of constant expressions
create table t (a int, b int, c int, primary key(a,b))!
explain select * from t WHERE FALSE !
explain select * from t WHERE TRUE !
explain select * from t WHERE NOT TRUE !
explain select * from t WHERE NOT FALSE !
explain select * from t WHERE a > 8 or FALSE !
explain select * from t WHERE a > 8 or TRUE !
explain select * from t WHERE 3>4 !
explain select * from t WHERE 4>3 !
explain select * from t WHERE 4>4 !
explain select * from t WHERE a = 3 and FALSE !
explain select * from t WHERE NOT sin(0)=0 !
explain select * from t where     ( c is null and a is null )!
explain select * from t where not ( c is null and a is null )!
explain select * from t where not ( a is null and c is null )!
explain select * from t where     ( false and false )!
explain select * from t where not ( false and false )!
explain select * from t where     ( a is null )!
explain select * from t where not ( a is null )!

rollback work !
* ==========================================================
!* different strategies with OR-terms used as only index strategie

create table test(c1 int, c2 int, c3 int, c4 char(10), c5 int,
primary key(c1,c2))!
create index i1 on test(c1 desc)!
insert into test values(1,1,1,'saf',1)!
insert into test values(2,2,2,'saf',1)!
insert into test values(1,2,3,'saf',1)!

explain
select /*+indexaccess,l2_more_strategies,l2_strat_no_optim*/ c1 
from test
where 1=c1 or c1 = 1 or c1 = 1 !
select /*+indexaccess,l2_more_strategies,l2_strat_no_optim*/ c1 
from test
where 1=c1 or c1 = 1 or c1 = 1 !
fetch!
drop index i1 on test!
create index i1 on test(c1)!
explain
select /*+indexaccess,l2_more_strategies,l2_strat_no_optim*/ c1 
from test
where 1=c1 or c1 = 1 or c1 = 1 !
select /*+indexaccess,l2_more_strategies,l2_strat_no_optim*/ c1 
from test
where 1=c1 or c1 = 1 or c1 = 1 !
fetch!

rollback work !
* ==========================================================


commit work release!
file shutdwnk!
vdnexit!
