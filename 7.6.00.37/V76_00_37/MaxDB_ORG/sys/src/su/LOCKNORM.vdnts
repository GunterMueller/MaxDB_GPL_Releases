*   *ID* LOCKNORM VDNTEST  changed on 1992-11-11-17.02.04 by KERN      *
file xinitdbk !
file connect ( kern test !
create table t (a char (18) ascii key, b char (5) )!
insert t set a = 'first   ', b = 'b1'!
insert t set a = 'second  ', b = 'b2'!
insert t set a = 'third   ', b = 'b3'!
insert t set a = 'thousand', b = 'b4'!
create table t1 ( b1 char (8) ascii key, a1 char (18)) !
commit release !
 **********************************************************
 es wird ueberprueft, welche Sperren staerker sind als andere
 ********************************************************** !
connect kern identified by test !
exists table t !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL'!
fetch !
select * from sysdd.transactions order by username !
fetch!
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
exists table t !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
lock row t key a = 'second' in share mode !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
lock row t key a = 'second' in exclusive mode !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
lock row t key a = 'second' in exclusive mode !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
update t set b = 'neu' !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
create index "t.b"
	on t( b ) !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
lock row t key a = 'second' in share mode !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
lock row t key a = 'second' in share mode !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
lock row t key a = 'second' in share mode !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
lock row t key a = 'second' in exclusive mode !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
update t set b = 'neu' !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
update t set b = 'neu' !
lock row t key a = 'second' in share mode !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
update t set b = 'neu' !
lock row t key a = 'second' in exclusive mode !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback release !
 **********************************************************
 es wird ueberprueft, wie die Kombination von
 impliziten und expliziten Sperren reagiert
 ********************************************************** !
connect kern identified by test !
 **********************************************************
 single und Mengenselect mit gleichem Modus
 ********************************************************** !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
declare erg cursor for 
select * from t where a > 'g' and a < 'tho' !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
declare erg cursor for 
select * from t where a > 'g' and a < 'tho' with lock isolation level 15!
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL'!
fetch !
fetch!
select session, lock_mode
   from sysdd.transactions!
fetch!
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
declare erg cursor for 
select * from t where a > 'g' and a < 'tho' with lock isolation level 10!
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
declare erg cursor for 
select * from t where a > 'g' and a < 'tho' with lock exclusive !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
 **********************************************************
 durch lock explizit gesetzte Sperren muessen bleiben
 ********************************************************** !
lock row t key a = 'first' in share mode !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
lock row t key a = 'first' in share mode !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
lock row t key a = 'first' in share mode !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
lock row t key a = 'first' in share mode !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
lock row t key a = 'first' in share mode !
declare erg cursor for 
select * from t where a > 'g' and a < 'tho' !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
lock row t key a = 'first' in share mode !
declare erg cursor for 
select * from t where a > 'g' and a < 'tho' with lock isolation level 10!
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
lock row t key a = 'first' in share mode !
declare erg cursor for 
select * from t where a > 'g' and a < 'tho' with lock isolation level 15!
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
lock row t key a = 'first' in share mode !
declare erg cursor for 
select * from t where a > 'g' and a < 'tho' with lock exclusive !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
 **********************************************************
 durch lock explizit gesetzte Sperren muessen bleiben
 die erst consistent geholten Sperren muessen in dauerhafte
 umgeformt werden und bleiben
 ********************************************************** !
lock row t key a = 'first' in share mode !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
declare erg cursor for 
select * from t where a > 'g' and a < 'tho' !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
lock row t key a = 'second' row t key a = 'third' in share mode !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
lock row t key a = 'first' in share mode !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
lock row t key a = 'thousand' in share mode !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
declare erg cursor for 
select * from t where a > 'g' and a < 'tho' !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
 **********************************************************
 die zuerst geholten Sperren muessen bestehen bleiben
 ********************************************************** !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
declare erg cursor for 
select * from t where a > 'g' and a < 'tho' !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
declare erg cursor for 
select * from t where a > 'g' and a < 'tho' !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
declare erg cursor for 
select * from t where a > 'g' and a < 'tho' !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
declare erg cursor for 
select * from t where a > 'g' and a < 'tho' with lock isolation level 20!
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
 **********************************************************
 die zuerst geholten Sperren bleiben nicht erhalten
 ********************************************************** !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
declare erg cursor for 
select * from t where a > 'g' and a < 'tho' with lock isolation level 20!
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
declare erg cursor for 
select * from t where a > 'g' and a < 'tho' !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
lock row t key a = 'thousand' in share mode !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
lock row t key a = 'second' in share mode !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
 **********************************************************
 die Sperre musz bei nicht-consistent bleiben und ueberleben
 ********************************************************** !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
 **********************************************************
 die Sperre musz weiterwandern
 ********************************************************** !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
 **********************************************************
 die Sperre musz nicht-consistent werden und eine
 Schreibsperre bleiben
 ********************************************************** !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL'!
fetch !
fetch!
select session, lock_mode
   from sysdd.transactions!
fetch!
update t set b = 'neu' key a = 'first'!
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
declare erg cursor for 
select * from t where a > 'g' and a < 'tho' !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL'!
fetch !
fetch!
select session, lock_mode
   from sysdd.transactions!
fetch!
rollback release !
 **********************************************************
 Test der optimistischen Sperre
 ********************************************************** !
connect kern identified by test !
declare erg cursor for 
select * from t with lock optimistic exclusive !
declare erg cursor for 
select * from t with lock optimistic !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL'!
fetch !
fetch!
select session, lock_mode
   from sysdd.transactions!
fetch!
rollback !
declare erg cursor for 
select * from t with lock optimistic isolation level 0!
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
declare erg cursor for 
select * from t with lock optimistic isolation level 1!
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
declare erg cursor for 
select * from t with lock optimistic isolation level 15!
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
select * from sysdd.locks where tablename <> 'DUAL'!
fetch !
fetch!
select session, lock_mode
   from sysdd.transactions!
fetch!
rollback !
declare erg cursor for 
select * from t with lock optimistic isolation level 2!
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
declare erg cursor for 
select * from t with lock optimistic isolation level 3!
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
declare erg cursor for 
select * from t with lock optimistic !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
declare erg cursor for 
select * from t with lock optimistic !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
declare erg cursor for 
select * from t with lock optimistic !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
declare erg cursor for 
select * from t with lock optimistic !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
lock table t optimistic !
lock (nowait) row t key a = 'first' optimistic !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
lock row t key a = 'first' optimistic !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
unlock row t key a = 'first' in share mode !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
unlock row t key a = 'first' in exclusive mode !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
unlock row t key a = 'first' optimistic !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
lock row t key a = 'first' optimistic !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
lock row t key a = 'first' optimistic !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
unlock row t key a = 'first' optimistic !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback release !
file connect ( kern test !
 * Das implizite Closen laesst die frisch erzeugte/erneuerte Sperre
 * stehen !
declare erg cursor for 
select * from t with lock isolation level 20 !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
close erg !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
declare erg cursor for 
select * from t with lock isolation level 20 !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
declare erg cursor for 
select * from t with lock isolation level 20 !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
 * Die staerkere Sperre ueberlebt !
declare erg cursor for 
select * from t with lock isolation level 0 !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
declare erg cursor for 
select * from t with lock isolation level 20 !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
declare erg cursor for 
select * from t with lock isolation level 20 !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
declare erg cursor for 
select * from t with lock isolation level 0 !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
 * Was ist bei unterschiedlichen Ergebnismengen auf eine Basistabelle? !
declare erg cursor for 
select * from t with lock isolation level 0 !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
declare erg1 cursor for 
select * from t with lock isolation level 20 !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
close erg !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
declare erg cursor for 
select * from t with lock isolation level 0 !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
declare erg1 cursor for 
select * from t with lock isolation level 20 !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
close erg1 !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
declare erg cursor for 
select * from t with lock isolation level 20 !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
declare erg1 cursor for 
select * from t with lock isolation level 0 !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
close erg1 !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
declare erg cursor for 
select * from t with lock isolation level 20 !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
declare erg1 cursor for 
select * from t with lock isolation level 0 !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
close erg !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
 * Jetzt der Kampf permanente Sperre gegen temporaere !
declare erg cursor for 
select * from t with lock isolation level 30 !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
declare erg cursor for 
select * from t with lock isolation level 20 !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
declare erg cursor for 
select * from t with lock isolation level 20 !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
declare erg cursor for 
select * from t with lock isolation level 30 !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
declare erg cursor for 
select * from t with lock isolation level 30 !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
declare erg1 cursor for 
select * from t with lock isolation level 20 !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
close erg1 !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
declare erg cursor for 
select * from t with lock isolation level 20 !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
declare erg1 cursor for 
select * from t with lock isolation level 30 !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
close erg !
select * from sysdd.locks where tablename <> 'DUAL' !
fetch !
rollback !
commit release !
connect kern identified by test !
drop table t !
drop table t1 !
commit release !
file isolevel !
file shutdwnk !
vdnexit !
