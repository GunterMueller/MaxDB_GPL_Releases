*   *ID* AK01TEST VDNTEST  changed on 1992-09-28-13.22.02 by ADMIN     *
* Test of ALTER TABLE <table name> COLUMN <column name> in
* combination with indexes, defaults and constraints
file xinitdbk !
file connect ( kern test !
create table t1 (s1 char(5 ),
                 s2 char(10),
                 s3 char(10)) !
insert t1 values ('aaaa', 'aaaaa', 'aaaaaaaaaa') !
create index i0 on t1 (s1) !
create index i1 on t1 (s2, s1) !
create index i2 on t1 (s1, s2) !
create index i3 on t1 (s1, s2, s3) !
create index i4 on t1 (s2, s3) !
commit !
alter table t1 column s1 char(5) ascii not null !
file sel_cols_tab ( T1 !
explain 
select /*+indexaccess(i0)*/ * from t1 !
select /*+indexaccess(i0)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i1)*/ * from t1 !
select /*+indexaccess(i1)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i2)*/ * from t1 !
select /*+indexaccess(i2)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i3)*/ * from t1 !
select /*+indexaccess(i3)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i4)*/ * from t1 !
select /*+indexaccess(i4)*/ * from t1 !
fetch!

insert t1 values ('bbbb', 'bbbbb', 'bbbbbb') !

explain 
select /*+indexaccess(i0)*/ * from t1 !
select /*+indexaccess(i0)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i1)*/ * from t1 !
select /*+indexaccess(i1)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i2)*/ * from t1 !
select /*+indexaccess(i2)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i3)*/ * from t1 !
select /*+indexaccess(i3)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i4)*/ * from t1 !
select /*+indexaccess(i4)*/ * from t1 !
fetch!
rollback !
alter table t1 column s1 char(8) not null !
file sel_cols_tab ( T1 !
explain 
select /*+indexaccess(i0)*/ * from t1 !
select /*+indexaccess(i0)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i1)*/ * from t1 !
select /*+indexaccess(i1)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i2)*/ * from t1 !
select /*+indexaccess(i2)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i3)*/ * from t1 !
select /*+indexaccess(i3)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i4)*/ * from t1 !
select /*+indexaccess(i4)*/ * from t1 !
fetch!

insert t1 values ('bbbb', 'bbbbb', 'bbbbbb') !

explain 
select /*+indexaccess(i0)*/ * from t1 !
select /*+indexaccess(i0)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i1)*/ * from t1 !
select /*+indexaccess(i1)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i2)*/ * from t1 !
select /*+indexaccess(i2)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i3)*/ * from t1 !
select /*+indexaccess(i3)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i4)*/ * from t1 !
select /*+indexaccess(i4)*/ * from t1 !
fetch!
rollback !
alter table t1 column s1 char(8) ascii not null !
file sel_cols_tab ( T1 !
explain 
select /*+indexaccess(i0)*/ * from t1 !
select /*+indexaccess(i0)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i1)*/ * from t1 !
select /*+indexaccess(i1)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i2)*/ * from t1 !
select /*+indexaccess(i2)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i3)*/ * from t1 !
select /*+indexaccess(i3)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i4)*/ * from t1 !
select /*+indexaccess(i4)*/ * from t1 !
fetch!

insert t1 values ('bbbb', 'bbbbb', 'bbbbbb') !

explain 
select /*+indexaccess(i0)*/ * from t1 !
select /*+indexaccess(i0)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i1)*/ * from t1 !
select /*+indexaccess(i1)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i2)*/ * from t1 !
select /*+indexaccess(i2)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i3)*/ * from t1 !
select /*+indexaccess(i3)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i4)*/ * from t1 !
select /*+indexaccess(i4)*/ * from t1 !
fetch!
rollback !
alter table t1 column s1 add default 'xxxxx' !
alter table t1 column s1 char(8) ascii not null !
file sel_cols_tab ( T1 !

explain 
select /*+indexaccess(i0)*/ * from t1 !
select /*+indexaccess(i0)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i1)*/ * from t1 !
select /*+indexaccess(i1)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i2)*/ * from t1 !
select /*+indexaccess(i2)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i3)*/ * from t1 !
select /*+indexaccess(i3)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i4)*/ * from t1 !
select /*+indexaccess(i4)*/ * from t1 !
fetch!

insert t1 set s2 = 'bbbbb', s3 = 'bbbbbb' !

explain 
select /*+indexaccess(i0)*/ * from t1 !
select /*+indexaccess(i0)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i1)*/ * from t1 !
select /*+indexaccess(i1)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i2)*/ * from t1 !
select /*+indexaccess(i2)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i3)*/ * from t1 !
select /*+indexaccess(i3)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i4)*/ * from t1 !
select /*+indexaccess(i4)*/ * from t1 !
fetch!
rollback !
alter table t1 add constraint c1 check "S1" > 'a' !
alter table t1 add constraint c2 check s1 > 'a' and s2 > 'a' !
alter table t1 add constraint c3 check s1 > 'a' and s3 > 'a' !
alter table t1 column s1 char(8) ascii not null !
file sel_cols_tab ( T1 !
file sel_constraint ( T1 !

explain 
select /*+indexaccess(i0)*/ * from t1 !
select /*+indexaccess(i0)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i1)*/ * from t1 !
select /*+indexaccess(i1)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i2)*/ * from t1 !
select /*+indexaccess(i2)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i3)*/ * from t1 !
select /*+indexaccess(i3)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i4)*/ * from t1 !
select /*+indexaccess(i4)*/ * from t1 !
fetch!

insert t1 set s1 = 'bbbb', s2 = 'bbbbb', s3 = 'bbbbbb' !
 
explain 
select /*+indexaccess(i0)*/ * from t1 !
select /*+indexaccess(i0)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i1)*/ * from t1 !
select /*+indexaccess(i1)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i2)*/ * from t1 !
select /*+indexaccess(i2)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i3)*/ * from t1 !
select /*+indexaccess(i3)*/ * from t1 !
fetch!

explain 
select /*+indexaccess(i4)*/ * from t1 !
select /*+indexaccess(i4)*/ * from t1 !
fetch!

insert t1 values ('a', 'x', 'x') !
insert t1 values ('x', 'a', 'x') !
insert t1 values ('x', 'x', 'a') !
create table t2 (s1 int, s2 int) !
insert t2 values (1,1) !
alter table t2 add s3 char(3000) ascii !
update t2 set s3 = 'aaaaaaaaaaaaa' !
select * from t2 !
fetch !
rollback release !
file connect ( kern test !
CREATE TABLE ADMI_STATS (
"DOCUMENT" VARCHAR(6) ASCII DEFAULT '000000',
"DB_SPACE_W" FLOAT(20) DEFAULT 0.0000000000000000000E+00,
"DB_SPACE_D" FLOAT(20) DEFAULT 0.0000000000000000000E+00,
"DB_CLUST_W" FLOAT(20) DEFAULT 0.0000000000000000000E+00,
"DB_CLUST_D" FLOAT(20) DEFAULT 0.0000000000000000000E+00,
"FILE_HEAD" FLOAT(20) DEFAULT 0.0000000000000000000E+00,
"FILE_DATA" FLOAT(20) DEFAULT 0.0000000000000000000E+00,
"RUN_TIME_W" VARCHAR(6) ASCII DEFAULT '000000',
"RUN_TIME_D" VARCHAR(6) ASCII DEFAULT '000000',
"INACCURATE" VARCHAR(1) ASCII DEFAULT ' ',
"DB_SPACE_L" FLOAT(20) ,
"DB_INDEX_W" FLOAT(20) ,
"DB_INDEX_D" FLOAT(20) ,
"DB_INDEX_L" FLOAT(20) ,
"DB_CLUST_L" FLOAT(20) ,
"DB_STRUC_W" FLOAT(20) ,
"DB_STRUC_D" FLOAT(20) ,
"DB_STRUC_L" FLOAT(20) ,
"JOB_TIME_W" FIXED(10,0) ,
"JOB_TIME_D" FIXED(10,0) ,
"JOB_TIME_L" FIXED(10,0) ,
"OBJ_CNT_W" FIXED(10,0) ,
"OBJ_CNT_D" FIXED(10,0) ,
"OBJ_CNT_L" FIXED(10,0) ,
"DEL_JOBCNT" FIXED(10,0), 
PRIMARY KEY ("DOCUMENT"))!

pars_then_ex!

ALTER TABLE "ADMI_STATS" MODIFY (
"DB_SPACE_L" default 0 not null ,
"DB_INDEX_W" default 0 not null ,
"DB_INDEX_D" default 0 not null ,
"DB_INDEX_L" default 0 not null ,
"DB_CLUST_L" default 0 not null ,
"DB_STRUC_W" default 0 not null ,
"DB_STRUC_D" default 0 not null ,
"DB_STRUC_L" default 0 not null ,
"JOB_TIME_W" default 0 not null ,
"JOB_TIME_D" default 0 not null ,
"JOB_TIME_L" default 0 not null ,
"OBJ_CNT_W" default 0 not null ,
"OBJ_CNT_D" default 0 not null ,
"OBJ_CNT_L" default 0 not null ,
"DEL_JOBCNT" default 0 not null )!

pars_execute!

commit work release !
* PTS 1111002!
file connect ( kern test !
create table projects (id fixed (6) primary key, 
    name char(20))!
create table stunden (anzahl int)!
ALTER TABLE stunden ADD project fixed(6) 
 references projects(id) on delete set null!
select * from sysdd.FOREIGN_KEYS  where owner = 'KERN'!
fetch!
rollback release !
* PTS 1121471-3 !
file connect ( kern test !
create table t ( a int)!
insert t values (12345)!
alter table t modify a float (6)!
select * from columns where owner = 'KERN' and tablename = 'T'!
fetch !
rollback release !
* PTS 1121608-10 !
FILE CONNECT ( SUT SUT!
CREATE TABLE T ( T_CODE INTEGER KEY NOT NULL, DESCRIPTION VARCHAR(128))!
INSERT T VALUES (1, 'aaa')!
INSERT T VALUES (2, 'bbb')!
INSERT T VALUES (3, 'ccc')!
INSERT T VALUES (4, 'ddd')!
INSERT T VALUES (5, 'eee')!
INSERT T VALUES (6, 'fff')!
COMMIT !
select * from t !
fetch!
ALTER TABLE T MODIFY T_CODE SMALLINT!
SELECT * FROM T!
FETCH!
drop table t !
commit release !
* PTS 1122683-5 !
file connect ( kern test !
CREATE TABLE "KERN"."3_0_TEST"
(
	"ID"               Fixed (10,0)    NOT NULL    DEFAULT SERIAL (1),
	"NAME"               Varchar (30) ASCII,
	"DATE"               Timestamp    DEFAULT TIMESTAMP,
	PRIMARY KEY ("ID")
)!
alter table "3_0_TEST" modify ("DATE" date) !
rollback release !
* PTS 1126711, 1126794-5 !
file connect ( kern test !
create table t ( k serial primary key, a char (15), b char (15), c char (15))!
insert into t (a,b,c) values ('a', 'b', 'c')!
insert into t (a,b,c) values ('a', 'b', 'c')!
insert into t (a,b,c) values ('a', 'b', 'c')!
insert into t (a,b,c) values ('a', 'b', 'c')!
insert into t (a,b,c) values ('a', 'b', 'c')!
insert into t (a,b,c) values ('a', 'b', 'c')!
select * from tablestatistics
where owner = 'KERN' and tablename = 'T' and
Description like '%row length' !
fetch!
drop table t !
create table t ( k serial primary key, a char (15), b char (15), c char (15))
no fixed length column!
insert into t (a,b,c) values ('a', 'b', 'c')!
insert into t (a,b,c) values ('a', 'b', 'c')!
insert into t (a,b,c) values ('a', 'b', 'c')!
insert into t (a,b,c) values ('a', 'b', 'c')!
insert into t (a,b,c) values ('a', 'b', 'c')!
insert into t (a,b,c) values ('a', 'b', 'c')!
select * from tablestatistics
where owner = 'KERN' and tablename = 'T' and
Description like '%row length' !
fetch!
alter table t drop primary key !
select * from tablestatistics
where owner = 'KERN' and tablename = 'T' and
Description like '%row length' !
fetch!
alter table t add primary key (k) !
select * from tablestatistics
where owner = 'KERN' and tablename = 'T' and
Description like '%row length' !
fetch!
select * from tables
where owner = 'KERN' and tablename = 'T'!
fetch!
drop table t !
commit release !
* PTS 1132034-5!
file connect ( sut sut!
CREATE TABLE "KORTELE"
(
	"K_ID"               Integer    NOT NULL,
	"K_NR"               Integer    NOT NULL,
	"K_DATA"               Date    NOT NULL,
	"K_SUNAIKINTAGYVPLOTO"               Smallint    DEFAULT      0,
	"K_SUNAIKINTANEGYVPLOTO"               Integer    DEFAULT           0,
	"K_SUGADINTAGYVPLOTO"               Smallint    DEFAULT      0,
	"K_SUGADITANEGYVPLOTO"               Integer    DEFAULT           0,
	"K_UZPILDE"               Integer    NOT NULL,
	"K_UZPILDATA"               Date    NOT NULL    DEFAULT DATE,
	"K_PADALINYS"               Smallint    NOT NULL,
	"K_DARBU_ATLIKIMO_METAI"               Smallint    NOT NULL,
	"K_UZPILLAIKAS"               Time    NOT NULL    DEFAULT TIME,
	PRIMARY KEY ("K_ID"),
 CONSTRAINT "CNSTR_DARBU_ATLIKIMO_METAI" 
 CHECK K_DARBU_ATLIKIMO_METAI=YEAR(K_DATA)) !
insert "KORTELE"
(	"K_ID",
	"K_NR" ,
	"K_DATA" ,
	"K_UZPILDE" ,
	"K_UZPILDATA",
	"K_PADALINYS" ,
	"K_DARBU_ATLIKIMO_METAI",
	"K_UZPILLAIKAS" ) 
values
(1,2,date,4,date,5,2006,time)!
commit !
alter table "KORTELE" modify (K_SUNAIKINTAGYVPLOTO integer,
K_SUGADINTAGYVPLOTO integer) !
insert "KORTELE"
(	"K_ID",
	"K_NR" ,
	"K_DATA" ,
	"K_UZPILDE" ,
	"K_UZPILDATA",
	"K_PADALINYS" ,
	"K_DARBU_ATLIKIMO_METAI",
	"K_UZPILLAIKAS" ) 
values
(2,2,date,4,date,5,2006,time)!
select * from "KORTELE"!
fetch!
rollback release !
* PTS 1133230/1!
file connect ( kern test !
create table t ( a int, b int, primary key (a))!
alter table t alter primary key (a,c)!
rollback release !
* PTS 1133273,1133274
file connect ( sut sut !
* determine number of files (and blobs)
select count(*) from roots where tableid < x'8000000000000000'!
fetch !
rollback release !
file connect ( kern test !
create table t (a int, l longfile)!
insert t values (1, 'abc') !
commit !
alter table t add primary key (a)!
rollback !
select * from t !
fetch !
alter table t add primary key (a)!
commit !
insert t values (2, 'abc') !
commit release !
file connect ( kern test !
select * from t !
fetch !
drop table t !
commit release !
file connect ( sut sut !
* this should yield the same number of files as the previous select
* from roots, otherwise a blob value might have been left over
select count(*) from roots where tableid < x'8000000000000000'!
fetch !
rollback release !
* PTS 1133529-31 !
file connect ( kern test !
create table t ( a int, b char (150) UNICODE, c char (150) UNICODE)!
insert t values (1, 'bbbbb', 'ccccc')!
alter table t add primary key (a)!
alter table t add d char (150) UNICODE!
select * from t !
fetch!
alter table t modify a fixed (12) !
alter table t modify a int !
select * from t !
fetch!
update t set d = 'ddd' !
select * from t !
fetch!
rollback release !
file connect ( sut sut !
CREATE USER SNR_TEST PASSWORD SNR_TEST DBA NOT EXCLUSIVE
!
commit release !
file connect ( SNR_TEST SNR_TEST !

CREATE TABLE SNR_SYSTEM_MESSAGES
 (SSM_ID INTEGER NOT NULL DEFAULT SERIAL PRIMARY KEY
 ,MOD_ID INTEGER
 ,DATASET_VERSION INTEGER NOT NULL DEFAULT 1
 ,MESSAGE_NO INTEGER NOT NULL
 ,MESSAGE_CLASS VARCHAR(3) NOT NULL 
 CONSTRAINT SSM_CHK_MSG_CLASS CHECK MESSAGE_CLASS IN 
 ('CFM','CHK','PUT','DEL','UPD','SYS','DB','CON','NET','MSG')
 ,MESSAGE_TEXT VARCHAR(50) NOT NULL
 ,DESCRIPTION VARCHAR(300)
 ,CREATE_DATE TIMESTAMP NOT NULL DEFAULT TIMESTAMP
 ,CREATE_USER VARCHAR(50) NOT NULL DEFAULT USER
 ,UPDATE_DATE TIMESTAMP
 ,UPDATE_USER VARCHAR(50)
 ,CONSTRAINT SSM_UK_I UNIQUE (MESSAGE_NO)
 )
!

CREATE TABLE SNR_SYSTEM_LOG
 (SSL_ID INTEGER NOT NULL DEFAULT SERIAL PRIMARY KEY
 ,SSM_ID INTEGER
 ,SSL_DATE TIMESTAMP NOT NULL DEFAULT TIMESTAMP
 ,MESSAGE_CLASS VARCHAR(3) NOT NULL 
 CONSTRAINT SSL_CHK_MSG_CLASS CHECK MESSAGE_CLASS IN 
 ('CFM','CHK','PUT','DEL','UPD','SYS','DB','CON','NET','MSG')
 ,CALLING_USER VARCHAR(50) NOT NULL DEFAULT USER
 ,DB_MESSAGE_NO INTEGER
 ,DB_MESSAGE_TEXT VARCHAR(300)
 ,DESCRIPTION VARCHAR(300)
 )
!
CREATE TABLE TEST_CENTRES
 (TCE_ID INTEGER NOT NULL DEFAULT SERIAL PRIMARY KEY
 ,DATASET_VERSION INTEGER NOT NULL DEFAULT 1
 ,TEST_CENTRE_NAME VARCHAR(50) NOT NULL
 ,LOCAL_TEST_CENTRE_FLAG VARCHAR(1) NOT NULL DEFAULT 'N' 
 CONSTRAINT TCE_CHK_LOCAL_TCE CHECK LOCAL_TEST_CENTRE_FLAG IN ('Y','N')
 ,LOCATION VARCHAR(50) NOT NULL
 ,DESCRIPTION VARCHAR(300)
 ,CREATE_DATE TIMESTAMP NOT NULL DEFAULT TIMESTAMP
 ,CREATE_USER VARCHAR(50) NOT NULL DEFAULT USER
 ,UPDATE_DATE TIMESTAMP
 ,UPDATE_USER VARCHAR(50)
 ,CONSTRAINT TCE_UK1_I UNIQUE (TEST_CENTRE_NAME)
 )
!
CREATE PUBLIC SYNONYM TEST_CENTRES FOR TEST_CENTRES
!
* Creating Procedure 'SNR_PUT_SYSTEM_LOG'  !
noscript !
CREATE DBPROC SNR_PUT_SYSTEM_LOG
 (IN  PIN_MSG_NO_IN       INTEGER  
 ,IN  PIN_MSG_CLASS       CHAR(3)  
 ,IN  PIN_MSG_TEXT        CHAR(80) 
 ,IN  PIN_DESCRIPTION     CHAR(300)
 ,IN  PIN_CURRENT_USER    CHAR(50) 
 ,OUT POUT_MSG_NO_OUT     INTEGER  
 ) AS


VAR
  v_msg_no          INTEGER;
  v_msg_class       CHAR(3);
  v_description     CHAR(300);
  v_current_user    CHAR(50);
  v_db_message_no   INTEGER;
  v_db_message_text CHAR(80);
  v_db_return_code  INTEGER;
  v_db_error_msg    CHAR(80);
  v_ssm_id          INTEGER;
  v_msg_no_out      INTEGER;

TRY

  SET v_msg_no = pin_msg_no_in;
  SET v_msg_class = pin_msg_class;
  SET v_db_message_text = pin_msg_text;
  SET v_description = pin_description;
  SET v_current_user = pin_current_user;
  SET v_db_return_code = 77777777;
  SET v_db_error_msg = '## SNR_INIT ##';
  SET v_db_message_no = 77777777;
  SET v_ssm_id = 0;
  SET v_msg_no_out = 77777777;

  IF (v_msg_class IS NOT NULL) AND (v_current_user IS NOT NULL) 
  AND (v_msg_no IS NOT NULL) THEN
    BEGIN /* (v_msg_class IS NOT NULL) AND (v_current_user IS NOT NULL)
     AND (v_msg_no IS NOT NULL) */
      IF v_msg_class = 'DB' THEN  /* system message from DB server */
        BEGIN /* v_msg_class = 'DB' */
          SET v_db_message_no = pin_msg_no_in;
          SET v_ssm_id = NULL;
          INSERT INTO snr_test.snr_system_log
            (message_class,ssm_id,db_message_no,
            db_message_text,description)
            VALUES
            (:v_msg_class,:v_ssm_id,:v_db_message_no,
            :v_db_message_text,:v_description);
          SET v_msg_no_out = 101; 
          /* SNR1 confirm: SNR_PUT_SYS_LOG_OK */
        END /* v_msg_class = 'DB' */
      ELSE
        BEGIN /* v_msg_class <> 'DB' */
          SET v_db_message_no = NULL;
          SELECT ssm_id,message_class INTO :v_ssm_id,:v_msg_class
           /* query for SNR1 system message ID */
            FROM snr_test.snr_system_messages
            WHERE message_no = :v_msg_no;
          INSERT INTO snr_test.snr_system_log
            (message_class,ssm_id,db_message_no,
            db_message_text,description)
            VALUES
            (:v_msg_class,:v_ssm_id,:v_db_message_no,
            :v_db_message_text,:v_description);
          SET v_msg_no_out = 101; 
          /* SNR1 error: SNR_PUT_SYS_LOG_OK */
        END; /* v_msg_class <> 'DB' */
    END  /* (v_msg_class IS NOT NULL) AND 
    (v_current_user IS NOT NULL) AND (v_msg_no IS NOT NULL) */
  ELSE
    BEGIN /* (v_msg_class IS NULL) OR 
    (v_current_user IS NULL) OR (v_msg_no IS NOT NULL) */
      SET v_msg_no_out = 301; /* SNR1 error: SNR_PUT_SYS_LOG_ERR */
      SET v_db_message_no = NULL;
      SET v_db_message_text = NULL;
      IF v_msg_class IS NULL THEN
        SET v_description = '## ERROR: pin_msg_class IS NULL;'
      ELSE
        SET v_description = '## ERROR: ';
      IF v_current_user IS NULL THEN
        BEGIN /* v_current_user IS NULL */
          SET v_current_user = USER;
          SET v_description = v_description||
          ' pin_current_user IS NULL;';
        END;  /* v_current_user IS NULL */
      IF v_msg_no IS NULL THEN
        SET v_description = v_description||' pin_msg_no IS NULL';
      SET v_description = v_description||' ##';
      SELECT ssm_id,message_class INTO :v_ssm_id,:v_msg_class 
      /* query for SNR1 system message ID */
        FROM snr_test.snr_system_messages
        WHERE message_no = :v_msg_no_out;
      INSERT INTO snr_test.snr_system_log
        (message_class,ssm_id,db_message_no,db_message_text,description)
        VALUES
        (:v_msg_class,:v_ssm_id,:v_db_message_no,
        :v_db_message_text,:v_description);
    END;  /* (v_msg_class IS NULL) OR no IS NOT NULL) */

CATCH
  BEGIN /* begin CATCH block: other DB errors */
    SET v_db_return_code = $RC;
    IF v_db_return_code <> 0 THEN /* verify if DB errors occured */
      BEGIN /* v_db_return_code <> 0 */
        SET v_msg_no_out = 301; /* SNR1 error: SNR_PUT_SYS_LOG_ERR */
        SET v_db_error_msg = $ERRMSG;
        SET v_description = '## ERROR when INSERT in SNR_SYSTEM_LOG ##';
        INSERT INTO snr_test.snr_system_log
          (message_class,ssm_id,db_message_no,db_message_text,description)
        VALUES
          ('DB',NULL,:v_db_return_code,:v_db_error_msg,:v_description);
      END;  /* v_db_return_code <> 0 */
  END;  /* end CATCH block: other DB errors */

SET pout_msg_no_out = v_msg_no_out;  
!

CREATE DBPROC SNR_CHECK_LOCAL_TEST_CENTRE
 (IN  PIN_CURRENT_USER   CHAR(50) 
 ,OUT POUT_CHECK_RESULT  BOOLEAN  
 ,OUT POUT_MSG_NO_OUT    INTEGER  
 ,OUT POUT_DESCR_OUT     CHAR(300)
 ) AS


VAR
  v_current_user            CHAR(50);
  v_local_test_centre_count INTEGER;
  v_msg_no_out              INTEGER;
  v_msg_no_in               INTEGER;
  v_check_result            BOOLEAN;
  v_description             CHAR(300);
  v_msg_class               CHAR(3);
  v_db_return_code          INTEGER;
  v_db_error_msg            CHAR(80);

TRY
  SET v_current_user = pin_current_user;
  SET v_local_test_centre_count = -1;
  SET v_check_result = FALSE;
  SET v_msg_no_out = 7777777;
  SET v_msg_no_in = 7777777;
  SET v_description = '## SNR_INIT ##';
  SET v_msg_class = '###';
  SET v_db_return_code = 77777777;
  SET v_db_error_msg = '## SNR_INIT ##';

  IF (v_current_user IS NOT NULL) THEN
    BEGIN /* v_current_user IS NOT NULL */
      SELECT COUNT(*) INTO :v_local_test_centre_count
        FROM snr_test.test_centres
        WHERE local_test_centre_flag = 'Y';
      IF (v_local_test_centre_count <= 1) THEN
        BEGIN /* (v_local_test_centre_count <= 1) */
          SET v_msg_no_out = 122; 
          /* SNR1 system message: SNR_CHECK_TCE_OK */
          SET v_check_result = TRUE;
          SET v_description = '## OK: not more than but ONE ';
        END   /* (v_local_test_centre_count <= 1) */
      ELSE
        BEGIN /* (v_local_test_centre_count > 1) */
          SET v_msg_no_out = 212; 
          /* SNR1 system message: SNR_LOCAL_TCE_ERR */
          SET v_check_result = FALSE;
          SET v_description = '## ERROR: more than but ';
        END;  /* (v_local_test_centre_count > 1) */
    END   /* v_current_user IS NOT NULL */
  ELSE
    BEGIN /* v_current_user IS NULL */
      SET v_msg_no_out = 521; 
      /* SNR1 system message: SNR_CHECK_TCE_ERR */
      SET v_check_result = FALSE;
      SET v_description = '## ERROR: missing test centre ';
    END;  /* v_current_user IS NULL */

CATCH
  BEGIN /* CATCH block: other DB errors */
    SET v_db_return_code = $RC;
    IF v_db_return_code <> 0 THEN /* check if DB errors occurred */
      BEGIN /* v_db_return_code <> 0 */
        SET v_msg_no_out = 521; 
        /* SNR1 system message: SNR_CHECK_TCE_ERR */
        SET v_check_result = FALSE;
        SET v_msg_class = 'DB';
        SET v_db_error_msg = $ERRMSG;
        SET v_description = '## ERROR while executing ';
        CALL snr_test.snr_put_system_log(:v_db_return_code,
        :v_msg_class,:v_db_error_msg,:v_description,
        :v_current_user,:v_msg_no_in);
      END;  /* v_db_return_code <> 0 */
  END;  /* CATCH block: other DB errors */

SET pout_check_result = v_check_result;
SET pout_msg_no_out = v_msg_no_out;
SET pout_descr_out = v_description;
!



CREATE TRIGGER trg_aft_ins_tce FOR test_centres
  AFTER INSERT 
    EXECUTE (
      VAR
        v_description     CHAR(300);
        v_msg_no_in       INTEGER;
        v_msg_no_out      INTEGER;
        v_check_result    BOOLEAN;
      CALL snr_test.snr_check_local_test_centre
      (USER,:v_check_result,:v_msg_no_in,:v_description);
      IF NOT v_check_result THEN
        BEGIN /* v_check_result = FALSE */
          UPDATE snr_test.test_centres 
            SET local_test_centre_flag = 'N'
            ,description = :v_description;
          CALL snr_test.snr_put_system_log
          (:v_msg_no_in,'CHK','INSERT of TEST_CENTRES',:v_description,
          USER,:v_msg_no_out);
        END;  /* v_check_result = FALSE */
  )
!
CREATE TRIGGER trg_aft_upd_tce FOR test_centres
  AFTER UPDATE (tce_id
    ,test_centre_name
    ,local_test_centre_flag
    ,location
    ,create_date
    ,create_user) 
    EXECUTE (
      VAR
        v_description     CHAR(300);
        v_descr_err       CHAR(300);
        v_msg_no_in       INTEGER;
        v_msg_no_out      INTEGER;
        v_check_result    BOOLEAN;
      CALL snr_test.snr_check_local_test_centre
      (USER,:v_check_result,:v_msg_no_in,:v_descr_err);
      IF NOT v_check_result THEN
        BEGIN /* v_check_result = FALSE */
          CALL snr_test.snr_put_system_log(:v_msg_no_in,
          'CHK','UPDATE on TEST_CENTRES',:v_descr_err,USER,
          :v_msg_no_out);
          SELECT SUBSTR('Old values:tce_id='||CHR(:OLD.tce_id)
              ||';dataset_version='||CHR(:OLD.dataset_version)
              ||';test_centre_name='||TRIM(:OLD.test_centre_name)
              ||';create_date='||CHAR(:OLD.create_date)
              ||';create_user='||TRIM(:OLD.create_user),1,300)
            INTO :v_description
            FROM snr_test.test_centres 
            WHERE tce_id = :OLD.tce_id;
          CALL snr_test.snr_put_system_log(500,'SYS',
          'UPDATE on TEST_CENTRES',:v_description,USER,:v_msg_no_out);
          UPDATE snr_test.test_centres 
            SET local_test_centre_flag = 'N'
            ,description = :v_descr_err
            ,update_user = USER
            ,update_date = TIMESTAMP
            ,dataset_version = :OLD.dataset_version + 1;
        END  /* v_check_result = FALSE */
      ELSE
        BEGIN /* v_check_result = TRUE */
          SELECT SUBSTR('Old values:tce_id='||CHR(:OLD.tce_id)
              ||';dataset_version='||CHR(:OLD.dataset_version)
              ||';test_centre_name='||TRIM(:OLD.test_centre_name)
              ||';create_date='||CHAR(:OLD.create_date)
              ||';create_user='||TRIM(:OLD.create_user),1,300)
            INTO :v_description
            FROM snr_test.test_centres 
            WHERE tce_id = :OLD.tce_id;
          CALL snr_test.snr_put_system_log(0,'CFM','UPDATE on TEST_CENTRES',
          :v_description,USER,:v_msg_no_out);
          UPDATE snr_test.test_centres 
            SET update_user = USER
              ,update_date = TIMESTAMP
              ,dataset_version = :OLD.dataset_version + 1
            WHERE tce_id = :OLD.tce_id;
        END;  /* v_check_result = TRUE */
  )
!
script !
INSERT INTO snr_system_messages
  (mod_id,message_no,message_class,message_text,description)
  VALUES
  (NULL,0,'CFM','SNR_OP_OK',
  'OK: no error; transaktion successfully finished')
!
COMMIT
!
INSERT INTO snr_system_messages
  (mod_id,message_no,message_class,message_text,description)
  VALUES
  (NULL,500,'SYS','SNR_OP_ERR',
  'ERROR: an error occurred; dataset disabled')
!
COMMIT
!
INSERT INTO snr_system_messages
  (mod_id,message_no,message_class,message_text,description)
  VALUES
  (NULL,101,'CFM','SNR_PUT_SYS_LOG_OK',
  'OK: new entry in system log was successful')
!
COMMIT
!
INSERT INTO snr_system_messages
  (mod_id,message_no,message_class,message_text,description)
  VALUES
  (NULL,301,'PUT','SNR_PUT_SYS_LOG_PUT_ERR',
  'ERROR when inserting in SNR1 system log')
!
COMMIT
!
INSERT INTO snr_system_messages
  (mod_id,message_no,message_class,message_text,description)
  VALUES
  (NULL,122,'CFM','SNR_CHECK_TCE_OK',
  'OK: Not more than one flagged local test centre detected')
!
COMMIT
!
INSERT INTO snr_system_messages
  (mod_id,message_no,message_class,message_text,description)
  VALUES
  (NULL,212,'CHK','SNR_LOCAL_TCE_ERR',
  'ERROR More then one flagged local test centre detected')
!
COMMIT
!
INSERT INTO snr_system_messages
  (mod_id,message_no,message_class,message_text,description)
  VALUES
  (NULL,521,'SYS','SNR_CHECK_TCE_ERR',
  'ERROR when calling the module')
!
COMMIT
!

INSERT INTO snr_test.test_centres
  (test_centre_name,local_test_centre_flag,location,description)
  VALUES
  ('IMO TeCH','Y','Hamburg','local test centre')
!
COMMIT
!
INSERT INTO snr_test.test_centres
  (test_centre_name,local_test_centre_flag,location,description)
  VALUES
  ('PST','N','Bangkok','local test centre')
!
COMMIT
!
INSERT INTO snr_test.test_centres
  (test_centre_name,local_test_centre_flag,location,description)
  VALUES
  ('PSK','Y','Kaohsiung','local test centre')
!
COMMIT
!
INSERT INTO snr_test.test_centres
  (test_centre_name,local_test_centre_flag,location,description)
  VALUES
  ('PSC','Y','Calamba','local test centre')
!
COMMIT
!
INSERT INTO snr_test.test_centres
  (test_centre_name,local_test_centre_flag,location,description)
  VALUES
  ('IMO TCN','Y','Nyjmegen','local test centre')
!
COMMIT
!
alter table TEST_CENTRES add  
(PRODUCTION_HOST VARCHAR(15) ,PRODUCTION_DB_NAME VARCHAR(8) )!
update test_centres
set production_host='localhost'
,production_db_name='S_TEST'!
alter table TEST_CENTRES modify (PRODUCTION_HOST VARCHAR(15) NOT NULL,
PRODUCTION_DB_NAME VARCHAR(8) NOT NULL)!
rollback release !
file connect ( sut sut !
DROP USER SNR_TEST !
commit release !
 * PTS 1131705 / 1137199 / 1137201 !
file connect ( kern test !
 CREATE TABLE "C""ITY"
(
	"ZIP"               Char (5) ASCII    NOT NULL,
	"N""AME"""    Char (30) ASCII    NOT NULL,
	"S""TATE"      Char (2) ASCII    NOT NULL
)!
ALTER TABLE "C""ITY" ADD CONSTRAINT ABC CHECK "N""AME""" IS NOT NULL!
rollback release !
file shutdwnk !
vdnexit !
