*   *ID* MASSCMD  VDNTEST  changed on 1992-11-11-17.02.05 by KERN      *
file xinitdbk !
file connect ( kern test !
create table t ( a char ( 8) key, b char (12), c date) !
create table t_shadow like t !
create trigger tins for t after insert execute (
insert kern.t_shadow values (:a,:b,:c);
) !

* PTS 1118879
parsing !
mselect a,b,c into :a,:b,:c from t where a > :d!

executing !
data !
mselect t!
32767
2
1
c 8 'aaa'

parsing !
minsert t values (:a, :b, :c) !
executing !
data !
minsert    t!
32767
4
1
c 8 'aaa' c 12 'eins' C 10 '19940824'
c 8 'bbb' c 12 'zwei' C 10 '19940824'
c 8 'ccc' c 12 'drei' C 10 '19940824'
c 8 'ddd' c 12 'vier' C 10 '19940824'
 
nodata !
pars_execute !
select * from t !
fetch!
select * from t_shadow !
fetch!
parsing !
mupdate t set c = date where b = :a !
executing !
data !
mupdate    t!
32767
-5
1
c 12 'neun'
c 12 'neun'
c 12 'neun'
c 12 'neun'
c 12 'neun'

mupdate    t!
32767
5
1
c 12 'neun'
c 12 'neun'
c 12 'neun'
c 12 'neun'
c 12 'neun'

pars_execute!
nodata !
select * from t !
fetch !
drop table t !
diagnose share parse drop !
create table t ( a char ( 4) byte key, b char (12) DEFAULT 'def-val') !
parsing !
minsert t values (:a, :b) !
executing !
data !
minsert    t!
32767
4
1
b 4 61616161 D
b 4 62626262 D
b 4 63636363 D
b 4 64646464 D
 
nodata !
pars_execute !
select * from t !
fetch!
drop table t !
diagnose share parse drop!
create table t ( a char ( 8) key, b char (12)) !
parsing !
minsert t values (:a, :b) !
executing !
data !
minsert    t!
32767
1
1
c 8 'ccc' c 12 'drei'
 
nodata !
pars_execute !
select * from t !
fetch!
parsing !
minsert t values (:a, :b) !
executing !
data !
minsert    t!
32767
4
1
c 8 'aaa' c 12 'eins'
c 8 'bbb' c 12 'zwei'
c 8 'ccc' c 12 'drei'
c 8 'ddd' c 12 'vier'
 
nodata !
pars_execute !
select * from t !
fetch!
parsing !
minsert t values (:a, :b) !
executing !
data !
minsert    t!
32767
2
1
c 8 'aaa' c 12 'eins'
c 8 'bbb' c 12 'zwei'

parsing !
mselect count(*) from t where a > :a !
select count(*) from t where a > :a !
executing !
data !
mselect    t!
32767
2
1
c 8 'aaa'

executing !
data !
mselect    t!
32767
1
1
c 8 'aaa'
 
parsing!
mselect b from t where a > :a group by b having max(a) > 's'!
executing !
data !
mselect    t!
32767
2
1
c 8 'ccc'

nodata !
parsing!
mselect * from t where a > :a union select * from t where b <> :b !
executing !
data !
mselect    t!
32767
2
1
c 8 'ccc'

parsing !
mselect * from t, t t1 where t.a = :a and t.a = t1.a order by 1 !
executing !
data !
mselect    t!
32767
2
1
c 8 'aaa'
c 8 'bbb'
 
nodata !
pars_then_ex !
fetch into :a, :b, :c, :d !
select * from t, t t1 where t.a in ('aaa', 'bbb') and t.a=t1.a
       order by 1 !
fetch into :a, :b, :c, :d !
parsing !
mselect * from t t1 where a = :a and a =
      any (select a from t where t.a = t1.a)
      order by 1 !
executing !
data !
mselect    t!
32767
2
1
c 8 'aaa'
c 8 'bbb'
 
parsing !
nodata !
mselect * from t where a >= :a !
executing !
data !
mselect    t!
32767
-2
1
c 8 'aaa'
c 8 'ddd'
 
mselect    t!
3
2
1
c 8 'ccc'
c 8 'bbb'
 
nodata !
pars_then_ex !
fetch into :a, :b !
fetch pos (1) into :a, :b !
fetch pos (6) into :a, :b !
fetch pos (7) into :a, :b !
parsing !
mdeclare erg cursor for select count(*) from t where a > :a !
executing !
data !
mdeclare   t!
32767
1
1
c 8 'aaa'
 
parsing!
mdeclare erg1 cursor for 
    select * from t, t t1 where t.a = :a and t.a = t1.a order by 1 !
executing !
data !
mdeclare   t!
32767
2
1
c 8 'aaa'
c 8 'bbb'
 
nodata !
pars_then_ex !
fetch erg1 into :a, :b, :c, :d !
parsing !
mdeclare erg2 cursor for select * from t where a >= :a !
executing !
data !
mdeclare   t!
32767
-1
1
c 8 'aaa'
 
mdeclare   t!
3
-2
1
c 8 'ccc'
c 8 'bbb'
 
mdeclare   t!
6
-2
1
c 8 'aaa'
c 8 'ddd'
 
mdeclare   t!
9
2
1
c 8 'ccc'
c 8 'bbb'
 
nodata !
pars_then_ex !
fetch erg2 into :a, :b !
fetch pos (1) erg2 into :a, :b !
fetch pos (6) erg2 into :a, :b !
fetch pos (7) erg2 into :a, :b !
parsing !
minsert t values (:a, :b) !
executing !
data !
minsert    t!
32767
2
1
c 8 'ddd' c 12 'vier'
c 8 'eee' c 12 'fuenf'
 
nodata !
pars_execute !
select * from t !
fetch!
parsing !
mupdate t set b = :b key a = :a !
executing !
data !
mupdate    t!
32767
3
1
c 12 'neua' c 8 'yyy'
c 12 'neub' c 8 'bbb'
c 12 'neuc' c 8 'ccc'
 
nodata !
pars_execute !
select * from t !
fetch!
create unique index "t.b"
	on t( b ) !
diagnose share parse drop!
parsing !
mupdate t set b = :b key a = :a !
executing !
data !
mupdate    t!
32767
3
1
c 12 'neud' c 8 'aaa'
c 12 'neud' c 8 'bbb'
c 12 'neue' c 8 'ccc'
 
nodata !
pars_execute !
select * from t !
fetch!
drop index "t.b" !
diagnose share parse drop!
parsing !
mupdate t set b = :b key a = :a !
executing !
data !
mupdate    t!
32767
2
1
c 12 'neu1' c 8 'bbb'
c 12 'neu2' c 8 'ccc'
 
nodata !
pars_execute !
select * from t !
fetch!
parsing !
mupdate t set b = :b where a > :a !
executing !
data !
mupdate    t!
32767
2
1
c 12 'upd1' c 8 'aaa'
c 12 'upd2' c 8 'bbb'
 
nodata !
pars_execute !
select * from t !
fetch!
parsing !
mdelete t key a = :a !
executing !
data !
mdelete    t!
32767
2
1
c 8 'ccc'
c 8 'ddd'
 
nodata !
pars_execute !
select * from t !
fetch!
create table t1 like t !
select * from t !
fetch!
parsing!
minsert t1 select * from t where a > :a ignore duplicates !
executing !
data !
minsert    t!
32767
2
1
c 8 'aaa'
c 8 'ccc'

pars_execute !
select * from t1 !
fetch !
delete t1 !
diagnose share parse drop!
parsing!
minsert t1 select distinct * from t where a > :a !
executing !
data !
minsert    t!
32767
2
1
c 8 'aaa'
c 8 'ccc'

pars_execute !
delete t1 !
diagnose share parse drop!
parsing!
minsert t1 (a) select max(a) from t where a > :a !
executing !
data !
minsert    t!
32767
2
1
c 8 'aaa'
c 8 'ccc'

executing !
data !
minsert    t!
32767
1
1
c 8 'aaa'

pars_execute !
select * from t1 !
fetch !
delete t1 !
drop table t !
drop table t1 !
diagnose share parse drop!
commit release !
file connect ( kern test !
create table t ( a char ( 8) key, b char (12), s long) !
commit !
parsing !
minsert t values (:a, :b, :s) !
parsing !
minsert t (a,b,s) values (:a, :b, :s) !
executing !
data !
minsert    t!
32767
-2
1
c 8 'aaa' c 12 'eins' l 120 'Das ist der "aaa"-String'
c 8 'bbb' c 12 'zwei' l 150 'laber bbb blubber usw.  '
 
executing !
data !
minsert    t!
2
-2
1
c 8 'ccc' c 12 'drei' c 32
c 8 'ddd' c 12 'vier' l 200 'd soll auch noch was abkriegen '
 
executing !
data !
minsert    t!
4
4
1
c 8 'eee' c 12 'eins' l 120 'Das ist der "eee"-String'
c 8 'fff' c 12 'zwei' l 150 'lafer fff bluffer usw.  '
c 8 'ccc' c 12 'drei' l 100 'wird sowieso nix draus'
c 8 'hhh' c 12 'vier' l 200 'h soll auch noch was abkriegen '
 
nodata !
pars_execute !
select *, s from t !
fetch!
pars_then_ex !
select *, s from t !
fetch into :a, :b, :s, :s1 !
pars_execute !
rollback !
select count(*) into :a from t !
parsing !
minsert t values (:a, :b, :s) !
executing !
data !
minsert    t!
32767
1
1
c 8 'ccc' c 12 'drei' l 120 'Das ist der urspruengliche "ccc"-String'

nodata !
pars_execute !
select *, s from t !
fetch!
parsing !
minsert t values (:a, :b, :s) !
executing !
data !
minsert    t!
32767
4
1
c 8 'aaa' c 12 'eins' c 32
c 8 'bbb' c 12 'zwei' c 32
c 8 'ccc' c 12 'drei' c 32
c 8 'ddd' c 12 'vier' c 32

nodata !
pars_execute !
select *, s from t !
fetch!
pars_then_ex !
select *, s from t !
fetch into :a, :b, :s, :s1 !
syntax !
minsert t set a = :a !
pars_execute !
drop table t !
diagnose share parse drop!
commit release !
* PTS 1117182-3 !
file connect ( sut sut !
noscript !
create table tbtcp(s1 int, s2 int) !
create table trigtab(tabname  char(32), flagtrig char) !
create trigger ttt for tbtcp after delete, insert, update 
execute (
select tabname from user.trigtab where tabname = 'TBTCP';
if $rc = 100
then
begin
insert into user.trigtab values('TBTCP','X');
end
else
update user.trigtab set flagtrig='X' 
   where tabname='TBTCP' and flagtrig= 'X';
if $rc <> 0 and $rc <> 100 then 
stop($rc, 'SHADOW UPGRADE TRIGGER ON TABLE TBTCP FAILED');
) !
script !
commit !
parsing !
minsert tbtcp values (:a, :b) !
insert tbtcp values (:a, :b) !
executing !
data !
insert t!
2
n 10 1   n 10 2

minsert    t!
32767
4
1
n 10 1   n 10 2
n 10 2   n 10 2
n 10 3   n 10 2
n 10 4   n 10 2


pars_execute !
nodata !
select * from trigtab!
fetch!
select * from tbtcp !
fetch!
drop table tbtcp!
drop table trigtab!
commit release !
* PTS 1119953-5!
file connect ( kern test !
create table t ( k int primary key, a char (40) )!
insert into t values (1, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')!
insert into t values (2, 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb')!
declare c cursor for select * from t for update !
mfetch c !
3
fetch first c !
mfetch c !
1
update t set a = 'new not physical built' where current of c!
select * from t !
fetch!

declare c cursor for select * from t for update for reuse!
mfetch c !
3
fetch first c !
mfetch c !
1
update t set a = 'new for reuse' where current of c!
select * from t !
fetch!
rollback release !
file shutdwnk !
vdnexit !
