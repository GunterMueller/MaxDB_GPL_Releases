SAG.vdnts
 
Enter command:
FILE XINITDBK!
 
Enter command:
FILE XRESTORE !
 
Enter command:
DBMCLI SUPERDBA,COLDUSER!
UTIL_CONNECT SUPERDBA,COLDUSER!
OK
 
BACKUP_RESTORE XINITDB DATA!
OK
Returncode           0
Date                 DATEXXXX
Time                 TIMEYYYY
Server               <servernode>
Database             <serverdb>
Kernel Version       KERNEL    vv.vv.vv Build bbb-bbb-bbb-bbb
Pages Transferred    000
Pages Left           0
Volumes              1
Medianame            xinitdb
Location             xinitdb.sav
Errortext
Label                <label>
Is Consistent        true
First LOG Page       000
Last LOG Page
DB Stamp 1 Date      DATEXXXX
DB Stamp 1 Time      TIMEYYYY
DB Stamp 2 Date
DB Stamp 2 Time
Page Count           000
Devices Used         1
Database ID          <servernode>:<serverdb>_DATEXXXX_<timestamp>
Max Used Data Page  000
Converter Page Count 8
 
UTIL_EXECUTE CLEAR LOG!
OK
 
DB_ONLINE!
OK
 
UTIL_RELEASE!
OK
 
UTIL_CONNECT SUT,SUT!
OK
 
UTIL_RELEASE!
OK
 
BYE!
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT!
 
Enter command:
CREATE USER KERN PASSWORD TEST DBA NOT EXCLUSIVE !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE ABC (
A   INT NOT NULL,
B   INT NOT NULL,
C   INT )!
 
Enter command:
CREATE TABLE EMP (
ENO   INT      NOT NULL,
ENAME CHAR(10) NOT NULL,
SAL   INT )!
 
Enter command:
INSERT EMP VALUES (1, 'Adams',    100) !
 
Enter command:
INSERT EMP VALUES (2, 'Brooks',   200) !
 
Enter command:
INSERT EMP VALUES (3, 'Crispin',  200) !
 
Enter command:
INSERT EMP VALUES (4, 'Drew',     300) !
 
Enter command:
INSERT EMP VALUES (5, 'Endicott', 400) !
 
Enter command:
INSERT EMP VALUES (6, 'Fogarty',  400) !
 
Enter command:
INSERT EMP VALUES (7, 'Goddard',  200) !
 
Enter command:
SELECT COUNT(*) FROM ABC GROUP BY A!
 
***ERROR    100 Row not found                                              0001
 
Enter command:
SELECT A, COUNT(*)
  FROM ABC
  GROUP BY A !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
SELECT A, COUNT(A)
  FROM ABC
  GROUP BY A !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
SELECT COUNT(*)
  FROM ABC
  GROUP BY A !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
SELECT COUNT(DISTINCT A)
  FROM ABC
  GROUP BY A !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
SELECT COUNT(A)
  FROM ABC
  GROUP BY A !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
SELECT COUNT(*)
  FROM ABC !
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
          0
 
resultcount :                     1
 
Enter command:
SELECT COUNT(DISTINCT A)
  FROM ABC !
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
          0
 
resultcount :                     1
 
Enter command:
SELECT COUNT(A)
  FROM ABC !
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
-----------
          0
 
resultcount :                     1
 
Enter command:
SELECT SUM(A)
  FROM ABC !
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
--------------------------------------------
????????????????????????????????????????????
 
resultcount :                     1
 
Enter command:
SELECT SUM(C)
  FROM ABC !
 
resultcount :                     1
 
Enter command:
FETCH!
 
EXPRESSION1
--------------------------------------------
????????????????????????????????????????????
 
resultcount :                     1
 
Enter command:
SELECT SUM(A)
  FROM ABC
  GROUP BY A !
 
***ERROR    100 Row not found                                              0001
 
Enter command:
SELECT * FROM EMP WHERE SAL >
         ALL(SELECT COUNT(*) FROM ABC GROUP BY A)!
 
resultcount :                     7
 
Enter command:
SELECT * FROM EMP WHERE SAL >
         ALL(SELECT COUNT(*) FROM ABC)!
 
resultcount :                     7
 
Enter command:
SELECT * FROM EMP WHERE SAL >
         ALL(SELECT SUM(A) FROM ABC GROUP BY A)!
 
resultcount :                     7
 
Enter command:
SELECT * FROM EMP WHERE SAL >
         (SELECT COUNT(*) FROM ABC GROUP BY A)!
 
***ERROR    100 Row not found                                              0001
 
Enter command:
SELECT * FROM EMP WHERE SAL >
         (SELECT COUNT(*) FROM ABC)!
 
resultcount :                     7
 
Enter command:
SELECT * FROM EMP WHERE SAL >
         (SELECT COUNT(*) FROM ABC GROUP BY A )!
 
***ERROR    100 Row not found                                              0001
 
Enter command:
SELECT * FROM EMP WHERE SAL >
         (SELECT SUM(A) FROM ABC GROUP BY A)!
 
***ERROR    100 Row not found                                              0001
 
Enter command:
ROLLBACK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE STATISTIK (KDNR   DECIMAL NOT NULL,
                        MONAT  DECIMAL NOT NULL,
                        UMSATZ DECIMAL NOT NULL)!
 
Enter command:
INSERT STATISTIK VALUES (1, 1, 100)!
 
Enter command:
INSERT STATISTIK VALUES (3, 1, 200)!
 
Enter command:
INSERT STATISTIK VALUES (1, 3, 500)!
 
Enter command:
INSERT STATISTIK VALUES (2, 4, 100)!
 
Enter command:
INSERT STATISTIK VALUES (3, 4, 300)!
 
Enter command:
INSERT STATISTIK VALUES (1, 7, 800)!
 
Enter command:
INSERT STATISTIK VALUES (2, 7, 900)!
 
Enter command:
INSERT STATISTIK VALUES (3,10, 200)!
 
Enter command:
INSERT STATISTIK VALUES (2,11,1000)!
 
Enter command:
INSERT STATISTIK VALUES (1,12, 200)!
 
Enter command:
INSERT STATISTIK VALUES (3,12, 500)!
 
Enter command:
SELECT A.KDNR, A.MONAT, A.UMSATZ,
       SUM (B.UMSATZ) KUMUMSATZ
FROM STATISTIK A, STATISTIK B
WHERE A.KDNR = B.KDNR
  AND A.MONAT >= B.MONAT
GROUP BY A.KDNR, A.MONAT, A.UMSATZ
ORDER BY A.KDNR, A.MONAT !
 
resultcount :                    11
 
Enter command:
FETCH!
 
KDNR   | MONAT  | UMSATZ | KUMUMSATZ
-------+--------+--------+---------------------------------------------
     1 |      1 |    100 |  1.0000000000000000000000000000000000000E+02
     1 |      3 |    500 |  6.0000000000000000000000000000000000000E+02
     1 |      7 |    800 |  1.4000000000000000000000000000000000000E+03
     1 |     12 |    200 |  1.6000000000000000000000000000000000000E+03
     2 |      4 |    100 |  1.0000000000000000000000000000000000000E+02
     2 |      7 |    900 |  1.0000000000000000000000000000000000000E+03
     2 |     11 |   1000 |  2.0000000000000000000000000000000000000E+03
     3 |      1 |    200 |  2.0000000000000000000000000000000000000E+02
     3 |      4 |    300 |  5.0000000000000000000000000000000000000E+02
     3 |     10 |    200 |  7.0000000000000000000000000000000000000E+02
     3 |     12 |    500 |  1.2000000000000000000000000000000000000E+03
 
resultcount :                    11
 
Enter command:
ROLLBACK RELEASE !
 
Enter command:
FILE CONNECT ( KERN TEST !
 
Enter command:
CONNECT KERN IDENTIFIED BY TEST   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE PERSONEN (PERS_NR DECIMAL (6),
                       NAME    CHAR   (30))!
 
Enter command:
INSERT INTO PERSONEN VALUES (1, 'Schmitz,Peter')!
 
Enter command:
INSERT INTO PERSONEN VALUES (2, 'Hofer,Anette')!
 
Enter command:
INSERT INTO PERSONEN VALUES (3, 'Moericke,Michael')!
 
Enter command:
CREATE TABLE SPRACHE (PERS_NR DECIMAL (6),
                      SPRACHE CHAR (12))!
 
Enter command:
INSERT INTO SPRACHE VALUES (1, 'Englisch')!
 
Enter command:
INSERT INTO SPRACHE VALUES (1, 'Tuerkisch')!
 
Enter command:
INSERT INTO SPRACHE VALUES (1, 'Arabisch')!
 
Enter command:
INSERT INTO SPRACHE VALUES (2, 'Englisch')!
 
Enter command:
INSERT INTO SPRACHE VALUES (2, 'Franzoesisch')!
 
Enter command:
INSERT INTO SPRACHE VALUES (3, 'Englisch')!
 
Enter command:
INSERT INTO SPRACHE VALUES (3, 'Spanisch')!
 
Enter command:
INSERT INTO SPRACHE VALUES (3, 'Russisch')!
 
Enter command:
CREATE TABLE ANFORDERUNG (SPRACHE CHAR (12))!
 
Enter command:
INSERT INTO ANFORDERUNG VALUES ('Arabisch')!
 
Enter command:
INSERT INTO ANFORDERUNG VALUES ('Englisch')!
 
Enter command:
SELECT PERS_NR, NAME
  FROM PERSONEN P
 WHERE NOT EXISTS
       (SELECT *
         FROM ANFORDERUNG A
         WHERE NOT EXISTS
               (SELECT * FROM SPRACHE S
                 WHERE S.PERS_NR = P.PERS_NR
                   AND S.SPRACHE = A.SPRACHE))!
 
resultcount :                     1
 
Enter command:
FETCH !
 
PERS_NR | NAME
--------+-------------------------------
      1 | Schmitz,Peter
 
resultcount :                     1
 
Enter command:
SELECT PERS_NR, NAME
  FROM PERSONEN P, (SELECT COUNT(*) CNT FROM ANFORDERUNG) ACNT
 WHERE ACNT.CNT = (SELECT COUNT (*)
                     FROM ANFORDERUNG A, SPRACHE S
                    WHERE S.SPRACHE = A.SPRACHE
                      AND S.PERS_NR = P.PERS_NR) !
 
resultcount :                     1
 
Enter command:
FETCH !
 
PERS_NR | NAME
--------+-------------------------------
      1 | Schmitz,Peter
 
resultcount :                     1
 
Enter command:
SELECT P.NAME
  FROM PERSONEN P
 WHERE P.PERS_NR IN
       (SELECT S.PERS_NR
          FROM SPRACHE S, ANFORDERUNG A
         WHERE S.SPRACHE = A.SPRACHE
         GROUP BY S.PERS_NR
         HAVING COUNT (*) =
                (SELECT COUNT (*) FROM ANFORDERUNG)) !
 
resultcount :                     1
 
Enter command:
FETCH!
 
NAME
------------------------------
Schmitz,Peter
 
resultcount :                     1
 
Enter command:
SELECT P.PERS_NR, P.NAME
  FROM PERSONEN P
 WHERE NOT EXISTS
       (SELECT A.SPRACHE
          FROM ANFORDERUNG A
        EXCEPT
        SELECT S.SPRACHE
          FROM SPRACHE S
         WHERE P.PERS_NR = S.PERS_NR) !
 
***ERROR  -7011 Correlated subquery not allowed                            0141
 
Enter command:
FETCH!
 
***ERROR    100 Row not found                                              0001
 
Enter command:
SELECT PERS_NR, NAME
  FROM PERSONEN P
 WHERE NOT EXISTS
       (SELECT *
          FROM SPRACHE S, ANFORDERUNG A
         WHERE S.SPRACHE(+) = A.SPRACHE
           AND S.PERS_NR(+) = P.PERS_NR
           AND S.SPRACHE IS NULL) !
 
resultcount :                     1
 
Enter command:
FETCH!
 
PERS_NR | NAME
--------+-------------------------------
      1 | Schmitz,Peter
 
resultcount :                     1
 
Enter command:
SELECT PERS_NR, NAME
  FROM PERSONEN P
 WHERE NOT EXISTS
       (SELECT *
          FROM SPRACHE S, ANFORDERUNG A
         WHERE S.SPRACHE(+) = A.SPRACHE
           AND S.PERS_NR(+) = P.PERS_NR)!
 
***ERROR    100 Row not found                                              0001
 
Enter command:
FETCH!
 
***ERROR    100 Row not found                                              0001
 
Enter command:
ROLLBACK RELEASE !
 
Enter command:
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
CREATE USER SAG PASSWORD SAG DBA !
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE CONNECT ( SAG SAG!
 
Enter command:
CONNECT SAG IDENTIFIED BY SAG   ISOLATION LEVEL 1 !
 
Enter command:
CREATE TABLE "SAG           "."PLATFORM          " (
"HW_OS" FIXED     (4,0) ,
"OPSYS" CHAR      (18) ASCII    ,
"OS_VERS" CHAR      (30) ASCII    ,
"VENDOR" CHAR      (30) ASCII    ,
"TECHNICAL_ID" CHAR      (30) ASCII    ,
"OS_GROUP" CHAR      (30) ASCII    ,
"DEV_PLATF" CHAR      (5) ASCII    ,
"OPEN_SYS" CHAR      (5) ASCII    ,
"MAIN_DATE" DATE      ,
"COMPATIBLE_TO" CHAR      (10) ASCII    ,
"EXPIRATION" DATE      ,
"CD_ROM" CHAR      (12) ASCII    ,
"LEVEL" CHAR      (10) ASCII    ,
"ADD_INFO" CHAR      (250) ASCII    ,
"MOD_DATE" DATE      ,
"HARDWARE" CHAR      (30) ASCII    ,
"BETRIEBSSYSTEM" CHAR      (10) ASCII    ,
"MAIN_STOP" DATE
, PRIMARY KEY ("HW_OS"
))
!
 
Enter command:
CREATE TABLE "SAG           "."PRODUCT_ID        " (
"PRODUCT_CODE" CHAR      (10) ASCII    ,
"PRODUCT_NAME" CHAR      (60) ASCII    NOT NULL,
"MAIN_PROD" CHAR      (2) ASCII    ,
"STAT" CHAR      (10) ASCII    ,
"ADD_INFO" CHAR      (250) ASCII    ,
"UNIT" CHAR      (20) ASCII    ,
"GROUP_NO" CHAR      (4) ASCII    ,
"PROD_FAMILY" CHAR      (30) ASCII    ,
"SW_TYP" FIXED     (2,0) ,
"VERT" CHAR      (2) ASCII    ,
"DOKU" CHAR      (2) ASCII    ,
"RETIRED_DATE" DATE      ,
"RETIRED_USER" CHAR      (10) ASCII    ,
"NEW_DATE" DATE      ,
"NEW_USER" CHAR      (10) ASCII
, PRIMARY KEY ("PRODUCT_CODE"))
!
 
Enter command:
CREATE TABLE "SAG           "."PRODUCT           " (
"CODE" CHAR      (10) ASCII    ,
"VERS" CHAR      (6) ASCII    ,
"HW_OS" FIXED     (4,0) ,
"PP" CHAR      (10) ASCII    ,
"SPL" CHAR      (6) ASCII    ,
"PL" CHAR      (6) ASCII    ,
"STATUS" CHAR      (8) ASCII    ,
"PHASE" CHAR      (8) ASCII    ,
"DEV_END_FIRST" DATE      ,
"DEV_END_ACT" DATE      ,
"BETA_ST_FIRST" DATE      ,
"BETA_ST_ACT" DATE      ,
"GR_PLAN_FIRST" DATE      ,
"GR_PLAN_ACT" DATE      ,
"NEW_DATE" DATE      ,
"NEW_USER" CHAR      (6) ASCII    ,
"MOD_DATE" DATE      ,
"MOD_USER" CHAR      (6) ASCII    ,
"CANCEL_DATE" DATE      ,
"CANCEL_USER" CHAR      (6) ASCII    ,
"DEV_COMMENTS" CHAR      (254) ASCII    ,
"PUBLIC_COMMENTS" CHAR      (200) ASCII    ,
"DEV_END_LAST" DATE      ,
"GR_PLAN_LAST" DATE      ,
"COMMIT_ACT" DATE      ,
"COMMIT_LAST" DATE      ,
"CONFIDENCE_FACTOR" CHAR      (10) ASCII    ,
"FEATURES" CHAR      (250) ASCII    ,
"ADD_FEATURES" CHAR      (250) ASCII    ,
"PROJECT_NO" CHAR      (10) ASCII    ,
"COMMIT_FIRST" DATE      ,
"DEV_START" DATE      ,
"MP_PLAN" FIXED     (10,2) ,
"PROJ_TYP" CHAR      (5) ASCII
, PRIMARY KEY ("CODE", "VERS", "HW_OS" ))
!
 
Enter command:
ALTER TABLE "SAG           "."PRODUCT           " FOREIGN KEY
"PRODUCT_ID_PRODUCT"
("CODE              " ) REFERENCES "SAG           "."PRODUCT_ID        "
("PRODUCT_CODE      " ) ON DELETE RESTRICT
 !
 
Enter command:
ALTER TABLE "SAG           "."PRODUCT           " FOREIGN KEY
"PLAT_HWOS_PRODUCT "
("HW_OS             " ) REFERENCES "SAG           "."PLATFORM          "
("HW_OS             " ) ON DELETE RESTRICT
 !
 
Enter command:
 CREATE VIEW SPL AS SELECT CODE, VERS, OPSYS, PRODUCT_NAME, STATUS, PHASE,
      SPL, PL, PP, DEV_START, DEV_END_FIRST, DEV_END_ACT, BETA_ST_FIRST,
      BETA_ST_ACT, GR_PLAN_FIRST, GR_PLAN_ACT, COMMIT_FIRST, COMMIT_ACT
      , DEV_COMMENTS, PUBLIC_COMMENTS, PROJ_TYP, PROJECT_NO, MP_PLAN,
      PRODUCT.HW_OS, VENDOR
 FROM SAG.PRODUCT, SAG.PLATFORM, SAG.PRODUCT_ID
 WHERE PRODUCT.CODE = PRODUCT_ID.PRODUCT_CODE AND
       PRODUCT.HW_OS = PLATFORM.HW_OS AND (PRODUCT.STATUS = 'work'
           OR PRODUCT.STATUS = 'wait'
           OR PRODUCT.STATUS = 'hold')
           WITH CHECK OPTION !
 
Enter command:
INSERT INTO PLATFORM (HW_OS) VALUES (1049) !
 
Enter command:
INSERT INTO PRODUCT_ID (PRODUCT_CODE, PRODUCT_NAME)
   VALUES ('ADA', 'INTERNAL')!
 
Enter command:
INSERT INTO PRODUCT (CODE, STATUS, VERS, HW_OS)
             VALUES ('ADA', 'work', '2.2.1', 1049)!
 
Enter command:
UPDATE OF "SPL" SET "GR_PLAN_FIRST" = '19960331'
  WHERE ("CODE" =  'ADA') AND ("VERS" =  '2.2.1') AND ("HW_OS" = 1049)!
 
resultcount :                     1
 
Enter command:
ROLLBACK RELEASE!
 
Enter command:
FILE CONNECT ( SUT SUT !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT   ISOLATION LEVEL 1 !
 
Enter command:
DROP USER SAG !
 
Enter command:
COMMIT RELEASE !
 
Enter command:
FILE SHUTDWNK !
 
Enter command:
CONNECT SUT IDENTIFIED BY SUT !
 
Enter command:
DROP USER KERN !
 
Enter command:
COMMIT WORK RELEASE !
 
Enter command:
FILE SHUTDOWN !
 
Enter command:
DBMCLI SUPERDBA,COLDUSER!
UTIL_CONNECT SUT,SUT!
OK
 
DB_OFFLINE!
OK
 
BYE!
 
Enter command:
VDNEXIT !
SESSION END
 
