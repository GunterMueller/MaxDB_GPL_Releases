#! python
# PARS.diffscr
#
#    ========== licence begin  GPL
#    Copyright (c) 2000-2005 SAP AG
#
#    This program is free software; you can redistribute it and/or
#    modify it under the terms of the GNU General Public License
#    as published by the Free Software Foundation; either version 2
#    of the License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#    ========== licence end

import sys
import string
import re

from undiffLib import Undiffer, change


def PARSundiff (undiffer):
    # remove all occurences of a regular expression
    # Warning: characters with special meaning inside the regular expression
    #          must be quoted, e.g. '[*][+][+]' should match '*++'


    undiffer.removeAll (
    """[0-9]+c[0-9]+
< [*][*][*]ERROR[ ]*100 Row not found[ ]*[0-9]{4}
---
> [*][*][*]ERROR[ ]*100 Row not found[ ]*0001"""
    )

    undiffer.removeAll (
    """[0-9]+c[0-9]+
< [*][*][*]ERROR[ ]*200 Duplicate key[ ]*[0-9]{4}
---
> [*][*][*]ERROR[ ]*200 Duplicate key[ ]*0001"""
    )

    undiffer.removeAll (
    """[0-9]+c[0-9]+
< [*][*][*]ERROR[ ]*250 Duplicate secondary key[^\n]*[0-9]{4}
---
> [*][*][*]ERROR[ ]*250 Duplicate secondary key[^\n]*0001"""
    )

    undiffer.removeAll (
    """[0-9]+c[0-9]+
< [*][*][*]ERROR[ ]*300 Integrity violation[^\n]*[0-9]{4}
---
> [*][*][*]ERROR[ ]*300 Integrity violation[^\n]*0001"""
    )

    undiffer.removeAll (
    """[0-9]+c[0-9]+
< [*][*][*]ERROR[ ]*320 View violation[^\n]*[0-9]{4}
---
> [*][*][*]ERROR[ ]*320 View violation[^\n]*0001"""
    )

    undiffer.removeAll (
    """[0-9]+c[0-9]+
< [*][*][*]ERROR[ ]*-1 Duplicate key in index[ ]*[0-9]{4}
---
> [*][*][*]ERROR[ ]*-1 Duplicate key in index[ ]*0001"""
    )

    undiffer.removeAll (
    """[0-9]+c[0-9]+
< [*][*][*]ERROR[ ]*-2000 Row too long[ ]*[0-9]{4}
---
> [*][*][*]ERROR[ ]*-2000 Row too long[ ]*0001"""
    )

    undiffer.removeAll (
    """[0-9]+c[0-9]+
< [*][*][*]ERROR[ ]*-2010 Assignment impossible, char value too long[^\n]*[0-9]{4}
---
> [*][*][*]ERROR[ ]*-2010 Assignment impossible, char value too long[^\n]*0001"""
    )

    undiffer.removeAll (
    """[0-9]+c[0-9]+
< [*][*][*]ERROR[ ]*-3016 Invalid numeric constant[^\n]*[0-9]{4}
---
> [*][*][*]ERROR[ ]*-3016 Invalid numeric constant[^\n]*0001"""
    )

    undiffer.removeAll (
    """[0-9]+c[0-9]+
< [*][*][*]ERROR[ ]*-3019 Invalid exponent[^\n]*[0-9]{4}
---
> [*][*][*]ERROR[ ]*-3019 Invalid exponent[^\n]*0001"""
    )

    undiffer.removeAll (
    """[0-9]+c[0-9]+
< [*][*][*]ERROR[ ]*-3024 Invalid numeric expression[ ]*[0-9]{4}
---
> [*][*][*]ERROR[ ]*-3024 Invalid numeric expression[ ]*0001"""
    )

    undiffer.removeAll (
    """[0-9]+c[0-9]+
< [*][*][*]ERROR[ ]*-3048 Invalid date format[^\n]*[0-9]{4}
---
> [*][*][*]ERROR[ ]*-3048 Invalid date format[^\n]*0001"""
    )

    undiffer.removeAll (
    """[0-9]+c[0-9]+
< [*][*][*]ERROR[ ]*-3065 Invalid date input value[^\n]*[0-9]{4}
---
> [*][*][*]ERROR[ ]*-3065 Invalid date input value[^\n]*0001"""
    )

    undiffer.removeAll (
    """[0-9]+c[0-9]+
< [*][*][*]ERROR[ ]*-3066 Date input value inconsistent[^\n]*[0-9]{4}
---
> [*][*][*]ERROR[ ]*-3066 Date input value inconsistent[^\n]*0001"""
    )

    undiffer.removeAll (
    """[0-9]+c[0-9]+
< [*][*][*]ERROR[ ]*-7026 SQL statement not allowed without previous FETCH[^\n]*[0-9]{4}
---
> [*][*][*]ERROR[ ]*-7026 SQL statement not allowed without previous FETCH[^\n]*0001"""
    )

    undiffer.removeAll (change + """
< SQL commands                             \| [ ]*[0-9]+
< PREPAREs                                 \| [ ]*[0-9]+
---
> SQL commands                             \| [ ]*[0-9]+
> PREPAREs                                 \| [ ]*[0-9]+""")

    undiffer.removeAll (
    """[0-9]+c[0-9]+
< SQL commands                             \| [ ]*[0-9]+
---
> SQL commands                             \| [ ]*[0-9]+"""
    )
    undiffer.removeAll (
    """[0-9]+c[0-9]+
< EXECUTEs                                 \| [ ]*[0-9]+
---
> EXECUTEs                                 \| [ ]*[0-9]+"""
    )

    undiffer.removeAll (
    """[0-9]+c[0-9]+
< DELETEs                                  \| [ ]*[0-9]+
---
> DELETEs                                  \| [ ]*[0-9]+"""
    )

    undiffer.removeAll (
    """[0-9]+c[0-9]+
< SELECTs and FETCHes                      \| [ ]*[0-9]+
---
> SELECTs and FETCHes                      \| [ ]*[0-9]+"""
    )

    undiffer.removeAll (
    """[0-9]+c[0-9]+
< [*][*][*]ERROR[ ]*-8006 Data types must be compatible[ ]*[0-9]+
---
> [*][*][*]ERROR[ ]*-8004 Constant must be compatible with column type and length[ ]*[0-9]+"""
    )

    undiffer.removeAll (
    """[0-9]+c[0-9]+
< [*][*][*]ERROR[ ]*-4 COSTWARNING exhausted[ ]*0001
---
> resultcount :[ ]*1"""
    )

    undiffer.removeAll (
    """[0-9]+c[0-9]+
< [*]SQLSTATE 42000 Missing keyword:INTO[ ]*[0-9]+
---
> [*]SQLSTATE 42000 Invalid end of SQL statement[ ]*[0-9]+"""
    )

    undiffer.removeAll (
    """[0-9]+c[0-9]+
< [*][*][*]ERROR[ ]*-5015 Missing keyword:INTO[ ]*[0-9]+
---
> [*][*][*]ERROR[ ]*-3014 Invalid end of SQL statement[ ]*[0-9]+"""
    )

    undiffer.removeAll (
    """[0-9]+a[0-9]+,[0-9]+
> [*][*][*] SQLSTATEMENT HAS BEEN OPTIMIZED
>"""
    )

    undiffer.removeAll (
    """[0-9]+a[0-9]+,[0-9]+
>[ ]*
> [*][*][*] SQLSTATEMENT HAS BEEN OPTIMIZED"""
    )


    # write changed diff output back to file
    undiffer.write ()

Undiffer (sys.argv [1]).runSafe (PARSundiff)

