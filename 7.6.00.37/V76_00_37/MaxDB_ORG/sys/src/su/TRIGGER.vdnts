dbmcli superdba,colduser !
param_directput _PACKET_SIZE 72000 !
param_startsession !
param_checkall !
param_commitsession !
db_restart !
db_admin !
bye ! 
file xinitdbk !
file connect ( sut sut !
create user elke password elke dba not exclusive !
commit release !
file connect ( kern test !
noscript !
 * ein einführendes Beispiel, was guckt, ob man Ergebnismengen
 * wieder im Trigger löschen kann !
create table t1 (s1 int, s2 int) !
create table t2 (s1 int, s2 int) !
errormsg long !
create trigger t for t1 after insert execute (
  var i integer;
      c char(20);
      ret fixed(5);
  set i = s1 + s2 + 101;
  set s1 = s1 + 1;
  set s2 = i;
  insert kern.t2 values (:s1, :s2);
  if $rc = 0
  then
      declare res cursor for 
        select * from kern.t2 where s1 = :s1 and s2 = :s2;
  set i = 0;
  while $rc = 0 do
    begin
    fetch res into :s1, :i;
    if ($rc = 0) and (i <> s2)
    then
      stop (-1000, 'i <> s2');
    end;
  if $rc = 100
  then 
    set ret = 0
  else
    set ret = $rc; 
  close res;
  if ret <> 0
  then
    stop(ret);
) !
insert into t1 values (1,2) !
create index i2 on t2 (s1) !
insert into t1 values (2,3) !
select * from t2 !
fetch !
drop table t1 !
drop table t2 !
 * unsere im Weiteren genutzten Tabellen !
create table prot (action char(3), old_s1 fixed(20),
   new_s1 fixed(20), old_s2 char(20), new_s2 char(20)) !
create table prot1 (action char(3), old_s1 fixed(20),
   new_s1 fixed(20), old_s2 char(20), new_s2 char(20), ts timestamp) !
create table t1 (s1 integer, s2 char(10)) !
commit !
 * OLD geht nicht bei INSERT !
create trigger t1in_up for t1 after insert, update execute (
  insert into kern.prot values ('UP1', :OLD.S1, :NEW.S1, :OLD.S2, :NEW.S2); 
 if $rc <> 0 
 then
   stop($rc);
) !
drop trigger t1in_up of t1 !
 * NEW geht nicht bei DELETE !
create trigger t1delt for t1 after delete execute (
  insert into kern.prot values ('UP1', :OLD.S1, :NEW.S1, :OLD.S2, :NEW.S2); 
 if $rc <> 0 
 then
   stop($rc);
) !
 * falsche Spaltennamen !
create trigger t1in_up for t1 after insert, update execute (
  insert into kern.prot values ('UP1', NULL, :NEW.S11, NULL, :NEW.S2); 
 if $rc <> 0 
 then
   stop($rc);
) !
 * zwei DML-Befehle in einem Trigger ==> zwei Einträge in prot !
create trigger t1in_up for t1 after insert, update execute (
  insert into kern.prot values ('IU1', :NEW.S1, :NEW.S1, :NEW.S2, :NEW.S2); 
  if $rc <> 0 
  then
    stop($rc);
) !
insert t1 values (6, 'neu')!
select * from t1 !
fetch!
select * from prot !
fetch!
update t1 set s1 = 1234, s2 = 'upd'!
select * from t1 !
fetch!
select * from prot !
fetch!
delete t1 !
delete prot !
select * from domain.triggers !
fetch !
drop trigger t1in_up of t1 !
 * normaler INSERT-Trigger !
create trigger t1ins for t1 after insert execute (
  insert into kern.prot values ('INS', NULL, :S1, NULL, :S2); 
  if $rc <> 0 
  then
    stop($rc);
) !
 * UPDATE-Trigger mit Variablen ohne NEW/OLD !
create trigger t1upd1 for t1 after update execute (
  insert into kern.prot values ('UP1', :S1, :NEW.S1, :OLD.S2, :S2); 
  if $rc <> 0 
  then
    stop($rc);
) !
insert t1 values (6, 'neu')!
select * from t1 !
fetch!
select * from prot !
fetch!
update t1 set s1 = 1234, s2 = 'upd'!
select * from t1 !
fetch!
select * from prot !
fetch!
delete t1 !
delete prot !
 * 2 Trigger für UPDATE auf t1 gehen nicht !
create trigger t1upd for t1 after update execute (
  insert into kern.prot values ('UPD', :OLD.S1, :NEW.S1, :OLD.S2, :NEW.S2); 
  if $rc <> 0 
  then
    stop($rc);
) !
drop trigger t1upd1 of t1 !
 * normaler UPDATE-Trigger !
create trigger t1upd for t1 after update execute (
  insert into kern.prot values ('UPD', :OLD.S1, :NEW.S1, :OLD.S2, :NEW.S2); 
  if $rc <> 0 
  then
    stop($rc);
) !
 * normaler DELETE-Trigger !
create trigger t1del for t1 after delete execute (
  insert into kern.prot values ('DEL', :S1, NULL, :S2, NULL); 
  if $rc <> 0 
  then
    stop($rc);
) !
 * nun soll alles kaskadieren !
create trigger prot_prot1 for prot after insert execute (
  insert into kern.prot1 values (:action, :old_s1, :new_s1, 
  :old_s2, :new_s2, timestamp); 
  if $rc <> 0 
  then
    stop($rc);
) !
insert t1 values (1,'abc') !
update t1 set s1 = s1 + 1 !
delete t1 !
select * from prot !
fetch !
select * from prot1 !
fetch !
drop trigger t1ins of t1 !
select * from sysdd.triggers !
fetch !
 * wird Trigger gelöscht, wenn Tabelle wegfällt
   - wenn Triggertabelle wegfällt
   - wenn innerhalb von SQL im Trigger benutzte Tabelle wegfällt ?
   !
drop table prot !
select * from sysdd.triggers !
fetch!
 * wenn Trigger Fehler liefert, wird alles zurückgerollt ? !
insert t1 values (1,'abc') !
select * from t1 !
fetch !
delete t1 !
select * from t1 !
fetch !
drop table t1 !
 * was passiert, wenn der Trigger eigentlich endlos werden würde ?!
create table t1 (s1 integer, s2 char(10)) !
create trigger t1_t1 for t1 after insert execute (
  set s1 = s1 + 1;
  insert into kern.t1 values (:s1, :s2); 
  if $rc <> 0 
  then
    stop($rc, $errmsg);
) !
insert t1 values (1,'abc') !
select * from t1 !
fetch!
drop table t1 !
rollback !
 * Update-Trigger mit Spalten
   - wie sieht das Ergebnis von sysdd.triggers aus
   - wird der Trigger wirklich nur im richtigen Fall gemacht ?
!
create trigger t1upd for t1 after update (s1) execute (
  insert into kern.prot values ('UPD', :OLD.S1, :NEW.S1, :OLD.S2, :NEW.S2); 
  if $rc <> 0 
  then
    stop($rc);
) !
select * from sysdd.triggers !
fetch!
insert t1 values (1,'abc') !
update t1 set s1 = s1 + 1 !
select * from prot !
fetch !
update t1 set s2 = 'NEW' !
select * from prot !
fetch !
 * - Und wenn die auslösende Spalte wegfällt, 
          was ist mit dem Trigger ? !
alter table t1 drop s1 !
select * from sysdd.triggers !
fetch!
rollback !
 * - Und wenn nur eine von mehreren Spalten wegfällt ? !
create trigger t1upd for t1 after update (s1,s2) execute (
  insert into kern.prot values ('UPD', :OLD.S1, :NEW.S1, :OLD.S2, :NEW.S2); 
  if $rc <> 0 
  then
    stop($rc);
) !
select * from sysdd.triggers !
fetch!
alter table t1 drop s1 !
select * from sysdd.triggers !
fetch!
rollback !
 * gerüchteweise bleiben ja Stackentries erhalten, wenn ALTER TABLE
   kommt. Wenn dadurch aber das Recordlayout verändert wird, was ist
   dann ?!
create trigger t1ins for t1 after insert execute (
  insert into kern.prot values ('INS', NULL, :S1, NULL, :S2); 
  if $rc <> 0 
  then
    stop($rc);
) !
alter table t1 modify s1 fixed (20) !
insert t1 values (12345678901234567890, 'abc')!
select * from prot !
fetch !
rollback !
create trigger t1ins for t1 after insert execute (
  insert into kern.prot values ('INS', NULL, :S1, NULL, :S2); 
  if $rc <> 0 
  then
    stop($rc);
) !
select * from sysdd.triggers!
fetch!
alter table t1 drop s1 release space !
select * from sysdd.triggers!
fetch!
rollback !
create trigger t1ins for t1 after insert execute (
  insert into kern.prot values ('INS', NULL, 1, NULL, :S2); 
  if $rc <> 0 
  then
    stop($rc);
) !
select * from sysdd.triggers!
fetch!
alter table t1 drop s1 release space !
select * from sysdd.triggers!
fetch!
insert t1 values ('abc')!
select * from prot !
fetch !
rollback !
 * - gibt es da eine Obergrenze an Tabellenspalten, für die
     ein Trigger definiert werden kann ? !
create table Test1(
lc1 fixed(6), lc2 char(6), lc3 char(6), lc4 char(6), 
lc5 char(6), lc6 char(6), lc7 char(6), lc8 char(6), 
lc9 char(6), lc10 char(6), lc11 fixed(6), lc12 fixed(6), 
lc13 fixed(6), lc14 fixed(6), lc15 fixed(6), lc16 fixed(6), 
lc17 fixed(6), lc18 fixed(6), lc19 fixed(6), lc20 fixed(6), 
lc21 fixed(6), lc22 fixed(6), lc23 fixed(6), lc24 fixed(6), 
lc25 fixed(6), lc26 fixed(6), lc27 fixed(6), lc28 fixed(6), 
lc29 fixed(6), lc30 fixed(6), lc31 fixed(6), lc32 fixed(6), 
lc33 fixed(6), lc34 fixed(6), lc35 fixed(6), lc36 fixed(6), 
lc37 fixed(6), lc38 fixed(6), lc39 fixed(6), lc40 fixed(6), 
lc41 fixed(6), lc42 fixed(6), lc43 fixed(6), lc44 fixed(6), 
lc45 fixed(6), lc46 fixed(6), lc47 fixed(6), lc48 fixed(6), 
lc49 fixed(6), lc50 fixed(6), lc51 fixed(6), lc52 fixed(6), 
lc53 fixed(6), lc54 fixed(6), lc55 fixed(6), lc56 fixed(6), 
lc57 fixed(6), lc58 fixed(6), lc59 fixed(6), lc60 fixed(6), 
lc61 fixed(6), lc62 fixed(6), lc63 fixed(6), lc64 fixed(6), 
lc65 fixed(6), lc66 fixed(6), lc67 fixed(6), lc68 fixed(6), 
lc69 fixed(6), lc70 fixed(6), lc71 fixed(6), lc72 fixed(6), 
lc73 fixed(6), lc74 fixed(6), lc75 fixed(6), lc76 fixed(6), 
lc77 fixed(6), lc78 fixed(6), lc79 fixed(6), lc80 fixed(6), 
lc81 fixed(6), lc82 fixed(6), lc83 fixed(6), lc84 fixed(6), 
lc85 fixed(6), lc86 fixed(6), lc87 fixed(6), lc88 fixed(6), 
lc89 fixed(6), lc90 fixed(6), lc91 fixed(6), lc92 fixed(6), 
lc93 fixed(6), lc94 fixed(6), lc95 fixed(6), lc96 fixed(6), 
lc97 fixed(6), lc98 fixed(6), lc99 fixed(6), lc100 fixed(6), 
lc101 fixed(6), lc102 fixed(6), lc103 fixed(6), lc104 fixed(6), 
lc105 fixed(6), lc106 fixed(6), lc107 fixed(6), lc108 fixed(6), 
lc109 fixed(6), lc110 fixed(6), lc111 fixed(6), lc112 fixed(6), 
lc113 fixed(6), lc114 fixed(6), lc115 fixed(6), lc116 fixed(6), 
lc117 fixed(6), lc118 fixed(6), lc119 fixed(6), lc120 fixed(6), 
lc121 fixed(6), lc122 fixed(6), lc123 fixed(6), lc124 fixed(6), 
lc125 fixed(6), lc126 fixed(6), lc127 fixed(6), lc128 fixed(6), 
lc129 fixed(6), lc130 fixed(6), lc131 fixed(6), lc132 fixed(6), 
lc133 fixed(6), lc134 fixed(6), lc135 fixed(6), lc136 fixed(6), 
lc137 fixed(6), lc138 fixed(6), lc139 fixed(6), lc140 fixed(6), 
lc141 fixed(6), lc142 fixed(6), lc143 fixed(6), lc144 fixed(6), 
lc145 fixed(6), lc146 fixed(6), lc147 fixed(6), lc148 fixed(6), 
lc149 fixed(6), lc150 fixed(6), lc151 fixed(6), lc152 fixed(6), 
lc153 fixed(6), lc154 fixed(6), lc155 fixed(6), lc156 fixed(6), 
lc157 fixed(6), lc158 fixed(6), lc159 fixed(6), lc160 fixed(6), 
lc161 fixed(6), lc162 fixed(6), lc163 fixed(6), lc164 fixed(6), 
lc165 fixed(6), lc166 fixed(6), lc167 fixed(6), lc168 fixed(6), 
lc169 fixed(6), lc170 fixed(6), lc171 fixed(6), lc172 fixed(6), 
lc173 fixed(6), lc174 fixed(6), lc175 fixed(6), lc176 fixed(6), 
lc177 fixed(6), lc178 fixed(6), lc179 fixed(6), lc180 fixed(6), 
lc181 fixed(6), lc182 fixed(6), lc183 fixed(6), lc184 fixed(6), 
lc185 fixed(6), lc186 fixed(6), lc187 fixed(6), lc188 fixed(6), 
lc189 fixed(6), lc190 fixed(6), lc191 fixed(6), lc192 fixed(6), 
lc193 fixed(6), lc194 fixed(6), lc195 fixed(6), lc196 fixed(6), 
lc197 fixed(6), lc198 fixed(6), lc199 fixed(6), lc200 fixed(6), 
lc201 fixed(6), lc202 fixed(6), lc203 fixed(6), lc204 fixed(6), 
lc205 fixed(6), lc206 fixed(6), lc207 fixed(6), lc208 fixed(6), 
lc209 fixed(6), lc210 fixed(6), lc211 fixed(6), lc212 fixed(6), 
lc213 fixed(6), lc214 fixed(6), lc215 fixed(6), lc216 fixed(6), 
lc217 fixed(6), lc218 fixed(6), lc219 fixed(6), lc220 fixed(6), 
lc221 fixed(6), lc222 fixed(6), lc223 fixed(6), lc224 fixed(6), 
lc225 fixed(6), lc226 fixed(6), lc227 fixed(6), lc228 fixed(6), 
lc229 fixed(6), lc230 fixed(6), lc231 fixed(6), lc232 fixed(6), 
lc233 fixed(6), lc234 fixed(6), lc235 fixed(6), lc236 fixed(6), 
lc237 fixed(6), lc238 fixed(6), lc239 fixed(6), lc240 fixed(6), 
lc241 fixed(6), lc242 fixed(6), lc243 fixed(6), lc244 fixed(6), 
lc245 fixed(6), lc246 fixed(6), lc247 fixed(6), lc248 fixed(6), 
lc249 fixed(6), lc250 fixed(6), lc251 fixed(6), lc252 fixed(6), 
lc253 fixed(6), lc254 fixed(6), lc255 fixed(6), lc256 fixed(6), 
lc257 fixed(6), lc258 fixed(6), lc259 fixed(6), lc260 fixed(6), 
lc261 fixed(6), lc262 fixed(6), lc263 fixed(6), lc264 fixed(6), 
lc265 fixed(6), lc266 fixed(6), lc267 fixed(6), lc268 fixed(6), 
lc269 fixed(6), lc270 fixed(6), lc271 fixed(6), lc272 fixed(6), 
lc273 fixed(6), lc274 fixed(6), lc275 fixed(6), lc276 fixed(6), 
lc277 fixed(6), lc278 fixed(6), lc279 fixed(6), lc280 fixed(6), 
lc281 fixed(6), lc282 fixed(6), lc283 fixed(6), lc284 fixed(6), 
lc285 fixed(6), lc286 fixed(6), lc287 fixed(6), lc288 fixed(6), 
lc289 fixed(6), lc290 fixed(6), lc291 fixed(6), lc292 fixed(6), 
lc293 fixed(6), lc294 fixed(6), lc295 fixed(6), lc296 fixed(6), 
lc297 fixed(6), lc298 fixed(6), lc299 fixed(6), lc300 fixed(6), 
lc301 fixed(6), lc302 fixed(6), lc303 fixed(6), lc304 fixed(6), 
lc305 fixed(6), lc306 fixed(6), lc307 fixed(6), lc308 fixed(6), 
lc309 fixed(6), lc310 fixed(6), lc311 fixed(6), lc312 fixed(6), 
lc313 fixed(6), lc314 fixed(6), lc315 fixed(6), lc316 fixed(6), 
lc317 fixed(6), lc318 fixed(6), lc319 fixed(6), lc320 fixed(6), 
lc321 fixed(6), lc322 fixed(6), lc323 fixed(6), lc324 fixed(6), 
lc325 fixed(6), lc326 fixed(6), lc327 fixed(6), lc328 fixed(6), 
lc329 fixed(6), lc330 fixed(6), lc331 fixed(6), lc332 fixed(6), 
lc333 fixed(6), lc334 fixed(6), lc335 fixed(6), lc336 fixed(6), 
lc337 fixed(6), lc338 fixed(6), lc339 fixed(6), lc340 fixed(6), 
lc341 fixed(6), lc342 fixed(6), lc343 fixed(6), lc344 fixed(6), 
lc345 fixed(6), lc346 fixed(6), lc347 fixed(6), lc348 fixed(6), 
lc349 fixed(6), lc350 fixed(6), lc351 fixed(6), lc352 fixed(6), 
lc353 fixed(6), lc354 fixed(6), lc355 fixed(6), lc356 fixed(6), 
lc357 fixed(6), lc358 fixed(6), lc359 fixed(6), lc360 fixed(6), 
lc361 fixed(6), lc362 fixed(6), lc363 fixed(6), lc364 fixed(6), 
lc365 fixed(6), lc366 fixed(6), lc367 fixed(6), lc368 fixed(6), 
lc369 fixed(6), lc370 fixed(6), lc371 fixed(6), lc372 fixed(6), 
lc373 fixed(6), lc374 fixed(6), lc375 fixed(6), lc376 fixed(6), 
lc377 fixed(6), lc378 fixed(6), lc379 fixed(6), lc380 fixed(6), 
lc381 fixed(6), lc382 fixed(6), lc383 fixed(6), lc384 fixed(6), 
lc385 fixed(6), lc386 fixed(6), lc387 fixed(6), lc388 fixed(6), 
lc389 fixed(6), lc390 fixed(6), lc391 fixed(6), lc392 fixed(6), 
lc393 fixed(6), lc394 fixed(6), lc395 fixed(6), lc396 fixed(6), 
lc397 fixed(6), lc398 fixed(6), lc399 fixed(6), lc400 fixed(6), 
lc401 fixed(6), lc402 fixed(6), lc403 fixed(6), lc404 fixed(6), 
lc405 fixed(6), lc406 fixed(6), lc407 fixed(6), lc408 fixed(6), 
lc409 fixed(6), lc410 fixed(6), lc411 fixed(6), lc412 fixed(6), 
lc413 fixed(6), lc414 fixed(6), lc415 fixed(6), lc416 fixed(6), 
lc417 fixed(6), lc418 fixed(6), lc419 fixed(6), lc420 fixed(6), 
lc421 fixed(6), lc422 fixed(6), lc423 fixed(6), lc424 fixed(6), 
lc425 fixed(6), lc426 fixed(6), lc427 fixed(6), lc428 fixed(6), 
lc429 fixed(6), lc430 fixed(6), lc431 fixed(6), lc432 fixed(6), 
lc433 fixed(6), lc434 fixed(6), lc435 fixed(6), lc436 fixed(6), 
lc437 fixed(6), lc438 fixed(6), lc439 fixed(6), lc440 fixed(6), 
lc441 fixed(6), lc442 fixed(6), lc443 fixed(6), lc444 fixed(6), 
lc445 fixed(6), lc446 fixed(6), lc447 fixed(6), lc448 fixed(6), 
lc449 fixed(6), lc450 fixed(6), lc451 fixed(6), lc452 fixed(6), 
lc453 fixed(6), lc454 fixed(6), lc455 fixed(6), lc456 fixed(6), 
lc457 fixed(6), lc458 fixed(6), lc459 fixed(6), lc460 fixed(6), 
lc461 fixed(6), lc462 fixed(6), lc463 fixed(6), lc464 fixed(6), 
lc465 fixed(6), lc466 fixed(6), lc467 fixed(6), lc468 fixed(6), 
lc469 fixed(6), lc470 fixed(6), lc471 fixed(6), lc472 fixed(6), 
lc473 fixed(6), lc474 fixed(6), lc475 fixed(6), lc476 fixed(6), 
lc477 fixed(6), lc478 fixed(6), lc479 fixed(6), lc480 fixed(6), 
lc481 fixed(6), lc482 fixed(6), lc483 fixed(6), lc484 fixed(6), 
lc485 fixed(6), lc486 fixed(6), lc487 fixed(6), lc488 fixed(6), 
lc489 fixed(6), lc490 fixed(6), lc491 fixed(6), lc492 fixed(6), 
lc493 fixed(6), lc494 fixed(6), lc495 fixed(6), lc496 fixed(6), 
lc497 fixed(6), lc498 fixed(6), lc499 fixed(6), lc500 fixed(6), 
lc501 fixed(6), lc502 fixed(6), lc503 fixed(6), lc504 fixed(6), 
lc505 fixed(6), lc506 fixed(6), lc507 fixed(6), lc508 fixed(6), 
lc509 fixed(6), lc510 fixed(6), lc511 fixed(6), lc512 fixed(6), 
lc513 fixed(6), lc514 fixed(6), lc515 fixed(6), lc516 fixed(6), 
lc517 fixed(6), lc518 fixed(6), lc519 fixed(6), lc520 fixed(6), 
lc521 fixed(6), lc522 fixed(6), lc523 fixed(6), lc524 fixed(6), 
lc525 fixed(6), lc526 fixed(6), lc527 fixed(6), lc528 fixed(6), 
lc529 fixed(6), lc530 fixed(6), lc531 fixed(6), lc532 fixed(6), 
lc533 fixed(6), lc534 fixed(6), lc535 fixed(6), lc536 fixed(6), 
lc537 fixed(6), lc538 fixed(6), lc539 fixed(6), lc540 fixed(6), 
lc541 fixed(6), lc542 fixed(6), lc543 fixed(6), lc544 fixed(6), 
lc545 fixed(6), lc546 fixed(6), lc547 fixed(6), lc548 fixed(6), 
lc549 fixed(6), lc550 fixed(6), lc551 fixed(6), lc552 fixed(6), 
lc553 fixed(6), lc554 fixed(6), lc555 fixed(6), lc556 fixed(6), 
lc557 fixed(6), lc558 fixed(6), lc559 fixed(6), lc560 fixed(6), 
lc561 fixed(6), lc562 fixed(6), lc563 fixed(6), lc564 fixed(6), 
lc565 fixed(6), lc566 fixed(6), lc567 fixed(6), lc568 fixed(6), 
lc569 fixed(6), lc570 fixed(6), lc571 fixed(6), lc572 fixed(6), 
lc573 fixed(6), lc574 fixed(6), lc575 fixed(6), lc576 fixed(6), 
lc577 fixed(6), lc578 fixed(6), lc579 fixed(6), lc580 fixed(6), 
lc581 fixed(6), lc582 fixed(6), lc583 fixed(6), lc584 fixed(6), 
lc585 fixed(6), lc586 fixed(6), lc587 fixed(6), lc588 fixed(6), 
lc589 fixed(6), lc590 fixed(6), lc591 fixed(6), lc592 fixed(6), 
lc593 fixed(6), lc594 fixed(6), lc595 fixed(6), lc596 fixed(6), 
lc597 fixed(6), lc598 fixed(6), lc599 fixed(6), lc600 fixed(6), 
lc601 fixed(6), lc602 fixed(6), lc603 fixed(6), lc604 fixed(6), 
lc605 fixed(6), lc606 fixed(6), lc607 fixed(6), lc608 fixed(6), 
lc609 fixed(6), lc610 fixed(6), lc611 fixed(6), lc612 fixed(6), 
lc613 fixed(6), lc614 fixed(6), lc615 fixed(6), lc616 fixed(6), 
lc617 fixed(6), lc618 fixed(6), lc619 fixed(6), lc620 fixed(6), 
lc621 fixed(6), lc622 fixed(6), lc623 fixed(6), lc624 fixed(6), 
lc625 fixed(6), lc626 fixed(6), lc627 fixed(6), lc628 fixed(6), 
lc629 fixed(6), lc630 fixed(6), lc631 fixed(6), lc632 fixed(6), 
lc633 fixed(6), lc634 fixed(6), lc635 fixed(6), lc636 fixed(6), 
lc637 fixed(6), lc638 fixed(6), lc639 fixed(6), lc640 fixed(6), 
lc641 fixed(6), lc642 fixed(6), lc643 fixed(6), lc644 fixed(6), 
lc645 fixed(6), lc646 fixed(6), lc647 fixed(6), lc648 fixed(6), 
lc649 fixed(6), lc650 fixed(6), lc651 fixed(6), lc652 fixed(6), 
lc653 fixed(6), lc654 fixed(6), lc655 fixed(6), lc656 fixed(6), 
lc657 fixed(6), lc658 fixed(6), lc659 fixed(6), lc660 fixed(6), 
lc661 fixed(6), lc662 fixed(6), lc663 fixed(6), lc664 fixed(6), 
lc665 fixed(6), lc666 fixed(6), lc667 fixed(6), lc668 fixed(6), 
lc669 fixed(6), lc670 fixed(6), lc671 fixed(6), lc672 fixed(6), 
lc673 fixed(6), lc674 fixed(6), lc675 fixed(6), lc676 fixed(6), 
lc677 fixed(6), lc678 fixed(6), lc679 fixed(6), lc680 fixed(6), 
lc681 fixed(6), lc682 fixed(6), lc683 fixed(6), lc684 fixed(6), 
lc685 fixed(6), lc686 fixed(6), lc687 fixed(6), lc688 fixed(6), 
lc689 fixed(6), lc690 fixed(6), lc691 fixed(6), lc692 fixed(6), 
lc693 fixed(6), lc694 fixed(6), lc695 fixed(6), lc696 fixed(6), 
lc697 fixed(6), lc698 fixed(6), lc699 fixed(6), lc700 fixed(6), 
lc701 fixed(6), lc702 fixed(6), lc703 fixed(6), lc704 fixed(6), 
lc705 fixed(6), lc706 fixed(6), lc707 fixed(6), lc708 fixed(6), 
lc709 fixed(6), lc710 fixed(6), lc711 fixed(6), lc712 fixed(6), 
lc713 fixed(6), lc714 fixed(6), lc715 fixed(6), lc716 fixed(6), 
lc717 fixed(6), lc718 fixed(6), lc719 fixed(6), lc720 fixed(6), 
lc721 fixed(6), lc722 fixed(6), lc723 fixed(6), lc724 fixed(6), 
lc725 fixed(6), lc726 fixed(6), lc727 fixed(6), lc728 fixed(6), 
lc729 fixed(6), lc730 fixed(6), lc731 fixed(6), lc732 fixed(6), 
lc733 fixed(6), lc734 fixed(6), lc735 fixed(6), lc736 fixed(6), 
lc737 fixed(6), lc738 fixed(6), lc739 fixed(6), lc740 fixed(6), 
lc741 fixed(6), lc742 fixed(6), lc743 fixed(6), lc744 fixed(6), 
lc745 fixed(6), lc746 fixed(6), lc747 fixed(6), lc748 fixed(6), 
lc749 fixed(6), lc750 fixed(6), lc751 fixed(6), lc752 fixed(6), 
lc753 fixed(6), lc754 fixed(6), lc755 fixed(6), lc756 fixed(6), 
lc757 fixed(6), lc758 fixed(6), lc759 fixed(6), lc760 fixed(6), 
lc761 fixed(6), lc762 fixed(6), lc763 fixed(6), lc764 fixed(6), 
lc765 fixed(6), lc766 fixed(6), lc767 fixed(6), lc768 fixed(6), 
lc769 fixed(6), lc770 fixed(6), lc771 fixed(6), lc772 fixed(6), 
lc773 fixed(6), lc774 fixed(6), lc775 fixed(6), lc776 fixed(6), 
lc777 fixed(6), lc778 fixed(6), lc779 fixed(6), lc780 fixed(6), 
lc781 fixed(6), lc782 fixed(6), lc783 fixed(6), lc784 fixed(6), 
lc785 fixed(6), lc786 fixed(6), lc787 fixed(6), lc788 fixed(6), 
lc789 fixed(6), lc790 fixed(6), lc791 fixed(6), lc792 fixed(6), 
lc793 fixed(6), lc794 fixed(6), lc795 fixed(6), lc796 fixed(6), 
lc797 fixed(6), lc798 fixed(6), lc799 fixed(6), lc800 fixed(6), 
lc801 fixed(6), lc802 fixed(6), lc803 fixed(6), lc804 fixed(6), 
lc805 fixed(6), lc806 fixed(6), lc807 fixed(6), lc808 fixed(6), 
lc809 fixed(6), lc810 fixed(6), lc811 fixed(6), lc812 fixed(6), 
lc813 fixed(6), lc814 fixed(6), lc815 fixed(6), lc816 fixed(6), 
lc817 fixed(6), lc818 fixed(6), lc819 fixed(6), lc820 fixed(6), 
lc821 fixed(6), lc822 fixed(6), lc823 fixed(6), lc824 fixed(6), 
lc825 fixed(6), lc826 fixed(6), lc827 fixed(6), lc828 fixed(6), 
lc829 fixed(6), lc830 fixed(6), lc831 fixed(6), lc832 fixed(6), 
lc833 fixed(6), lc834 fixed(6), lc835 fixed(6), lc836 fixed(6), 
lc837 fixed(6), lc838 fixed(6), lc839 fixed(6), lc840 fixed(6), 
lc841 fixed(6), lc842 fixed(6), lc843 fixed(6), lc844 fixed(6), 
lc845 fixed(6), lc846 fixed(6), lc847 fixed(6), lc848 fixed(6), 
lc849 fixed(6), lc850 fixed(6), lc851 fixed(6), lc852 fixed(6), 
lc853 fixed(6), lc854 fixed(6), lc855 fixed(6), lc856 fixed(6), 
lc857 fixed(6), lc858 fixed(6), lc859 fixed(6), lc860 fixed(6), 
lc861 fixed(6), lc862 fixed(6), lc863 fixed(6), lc864 fixed(6), 
lc865 fixed(6), lc866 fixed(6), lc867 fixed(6), lc868 fixed(6), 
lc869 fixed(6), lc870 fixed(6), lc871 fixed(6), lc872 fixed(6), 
lc873 fixed(6), lc874 fixed(6), lc875 fixed(6), lc876 fixed(6), 
lc877 fixed(6), lc878 fixed(6), lc879 fixed(6), lc880 fixed(6), 
lc881 fixed(6), lc882 fixed(6), lc883 fixed(6), lc884 fixed(6), 
lc885 fixed(6), lc886 fixed(6), lc887 fixed(6), lc888 fixed(6), 
lc889 fixed(6), lc890 fixed(6), lc891 fixed(6), lc892 fixed(6), 
lc893 fixed(6), lc894 fixed(6), lc895 fixed(6), lc896 fixed(6), 
lc897 fixed(6), lc898 fixed(6), lc899 fixed(6), lc900 fixed(6), 
lc901 fixed(6), lc902 fixed(6), lc903 fixed(6), lc904 fixed(6), 
lc905 fixed(6), lc906 fixed(6), lc907 fixed(6), lc908 fixed(6), 
lc909 fixed(6), lc910 fixed(6), lc911 fixed(6), lc912 fixed(6), 
lc913 fixed(6), lc914 fixed(6), lc915 fixed(6), lc916 fixed(6), 
lc917 fixed(6), lc918 fixed(6), lc919 fixed(6), lc920 fixed(6), 
lc921 fixed(6), lc922 fixed(6), lc923 fixed(6), lc924 fixed(6), 
lc925 fixed(6), lc926 fixed(6), lc927 fixed(6), lc928 fixed(6), 
lc929 fixed(6), lc930 fixed(6), lc931 fixed(6), lc932 fixed(6), 
lc933 fixed(6), lc934 fixed(6), lc935 fixed(6), lc936 fixed(6), 
lc937 fixed(6), lc938 fixed(6), lc939 fixed(6), lc940 fixed(6), 
lc941 fixed(6), lc942 fixed(6), lc943 fixed(6), lc944 fixed(6), 
lc945 fixed(6), lc946 fixed(6), lc947 fixed(6), lc948 fixed(6), 
lc949 fixed(6), lc950 fixed(6), lc951 fixed(6), lc952 fixed(6), 
lc953 fixed(6), lc954 fixed(6), lc955 fixed(6), lc956 fixed(6), 
lc957 fixed(6), lc958 fixed(6), lc959 fixed(6), lc960 fixed(6), 
lc961 fixed(6), lc962 fixed(6), lc963 fixed(6), lc964 fixed(6), 
lc965 fixed(6), lc966 fixed(6), lc967 fixed(6), lc968 fixed(6), 
lc969 fixed(6), lc970 fixed(6), lc971 fixed(6), lc972 fixed(6), 
lc973 fixed(6), lc974 fixed(6), lc975 fixed(6), lc976 fixed(6), 
lc977 fixed(6), lc978 fixed(6), lc979 fixed(6), lc980 fixed(6), 
lc981 fixed(6), lc982 fixed(6), lc983 fixed(6), lc984 fixed(6), 
lc985 fixed(6), lc986 fixed(6), lc987 fixed(6), lc988 fixed(6), 
lc989 fixed(6), lc990 fixed(6), lc991 fixed(6), lc992 fixed(6), 
lc993 fixed(6), lc994 fixed(6), lc995 fixed(6), lc996 fixed(6), 
lc997 fixed(6), lc998 fixed(6), lc999 fixed(6), lc1000 fixed(6), 
lc1001 char(6), lc1002 char(6), lc1003 char(6), lc1004 char(6), 
lc1005 char(6), lc1006 char(6), lc1007 char(6), lc1008 char(6), 
lc1009 char(6), lc1010 char(6), lc1011 char(6), lc1012 char(6), 
lc1013 char(6), lc1014 char(6), lc1015 char(6), lc1016 char(6), 
lc1017 char(6), lc1018 char(6), lc1019 char(6), lc1020 char(6), 
lc1021 char(6), lc1022 char(6), lc1023 fixed(6), lc1024 char(6), 
primary key(
lc1, lc2, lc3, lc4, lc5, lc6, lc7, lc8, lc9, lc10,
lc11, lc12, lc13, lc14, lc15, lc16, lc17, lc18, lc19, lc20,
lc21, lc22, lc23, lc24, lc25, lc26, lc27, lc28, lc29, lc30,
lc31, lc32, lc33, lc34, lc35, lc36, lc37, lc38, lc39, lc40,
lc41, lc42, lc43, lc44, lc45, lc46, lc47, lc48, lc49, lc50,
lc51, lc52, lc53, lc54, lc55, lc56, lc57, lc58, lc59, lc60,
lc61, lc62, lc63, lc64, lc65, lc66, lc67, lc68, lc69, lc70,
lc71, lc72, lc73, lc74, lc75, lc76, lc77, lc78, lc79, lc80,
lc81, lc82, lc83, lc84, lc85, lc86, lc87, lc88, lc89, lc90,
lc91, lc92, lc93, lc94, lc95, lc96, lc97, lc98, lc99, lc100,
lc101, lc102, lc103, lc104, lc105, lc106, lc107, lc108, lc109, lc110,
lc111, lc112, lc113, lc114, lc115, lc116, lc117, lc118, lc119, lc120,
lc121, lc122, lc123, lc124, lc125, lc126, lc127, lc128, lc129, lc130,
lc131, lc132, lc133, lc134, lc135, lc136, lc137, lc138, lc139, lc140,
lc141, lc142, lc143, lc144, lc145, lc146)) !
create table test2 like test1 !
create trigger t1ins for Test1 after insert execute (
  insert into kern.test2 values (
:NEW.LC1,:NEW.LC2,:NEW.LC3,:NEW.LC4,:NEW.LC5,
:NEW.LC6,:NEW.LC7,:NEW.LC8,:NEW.LC9,:NEW.LC10,
:NEW.LC11,:NEW.LC12,:NEW.LC13,:NEW.LC14,:NEW.LC15,
:NEW.LC16,:NEW.LC17,:NEW.LC18,:NEW.LC19,:NEW.LC20,
:NEW.LC21,:NEW.LC22,:NEW.LC23,:NEW.LC24,:NEW.LC25,
:NEW.LC26,:NEW.LC27,:NEW.LC28,:NEW.LC29,:NEW.LC30,
:NEW.LC31,:NEW.LC32,:NEW.LC33,:NEW.LC34,:NEW.LC35,
:NEW.LC36,:NEW.LC37,:NEW.LC38,:NEW.LC39,:NEW.LC40,
:NEW.LC41,:NEW.LC42,:NEW.LC43,:NEW.LC44,:NEW.LC45,
:NEW.LC46,:NEW.LC47,:NEW.LC48,:NEW.LC49,:NEW.LC50,
:NEW.LC51,:NEW.LC52,:NEW.LC53,:NEW.LC54,:NEW.LC55,
:NEW.LC56,:NEW.LC57,:NEW.LC58,:NEW.LC59,:NEW.LC60,
:NEW.LC61,:NEW.LC62,:NEW.LC63,:NEW.LC64,:NEW.LC65,
:NEW.LC66,:NEW.LC67,:NEW.LC68,:NEW.LC69,:NEW.LC70,
:NEW.LC71,:NEW.LC72,:NEW.LC73,:NEW.LC74,:NEW.LC75,
:NEW.LC76,:NEW.LC77,:NEW.LC78,:NEW.LC79,:NEW.LC80,
:NEW.LC81,:NEW.LC82,:NEW.LC83,:NEW.LC84,:NEW.LC85,
:NEW.LC86,:NEW.LC87,:NEW.LC88,:NEW.LC89,:NEW.LC90,
:NEW.LC91,:NEW.LC92,:NEW.LC93,:NEW.LC94,:NEW.LC95,
:NEW.LC96,:NEW.LC97,:NEW.LC98,:NEW.LC99,:NEW.LC100,
:NEW.LC101,:NEW.LC102,:NEW.LC103,:NEW.LC104,
:NEW.LC105,:NEW.LC106,:NEW.LC107,:NEW.LC108,
:NEW.LC109,:NEW.LC110,:NEW.LC111,:NEW.LC112,
:NEW.LC113,:NEW.LC114,:NEW.LC115,:NEW.LC116,
:NEW.LC117,:NEW.LC118,:NEW.LC119,:NEW.LC120,
:NEW.LC121,:NEW.LC122,:NEW.LC123,:NEW.LC124,
:NEW.LC125,:NEW.LC126,:NEW.LC127,:NEW.LC128,
:NEW.LC129,:NEW.LC130,:NEW.LC131,:NEW.LC132,
:NEW.LC133,:NEW.LC134,:NEW.LC135,:NEW.LC136,
:NEW.LC137,:NEW.LC138,:NEW.LC139,:NEW.LC140,
:NEW.LC141,:NEW.LC142,:NEW.LC143,:NEW.LC144,
:NEW.LC145,:NEW.LC146,:NEW.LC147,:NEW.LC148,
:NEW.LC149,:NEW.LC150,:NEW.LC151,:NEW.LC152,
:NEW.LC153,:NEW.LC154,:NEW.LC155,:NEW.LC156,
:NEW.LC157,:NEW.LC158,:NEW.LC159,:NEW.LC160,
:NEW.LC161,:NEW.LC162,:NEW.LC163,:NEW.LC164,
:NEW.LC165,:NEW.LC166,:NEW.LC167,:NEW.LC168,
:NEW.LC169,:NEW.LC170,:NEW.LC171,:NEW.LC172,
:NEW.LC173,:NEW.LC174,:NEW.LC175,:NEW.LC176,
:NEW.LC177,:NEW.LC178,:NEW.LC179,:NEW.LC180,
:NEW.LC181,:NEW.LC182,:NEW.LC183,:NEW.LC184,
:NEW.LC185,:NEW.LC186,:NEW.LC187,:NEW.LC188,
:NEW.LC189,:NEW.LC190,:NEW.LC191,:NEW.LC192,
:NEW.LC193,:NEW.LC194,:NEW.LC195,:NEW.LC196,
:NEW.LC197,:NEW.LC198,:NEW.LC199,:NEW.LC200,
:NEW.LC201,:NEW.LC202,:NEW.LC203,:NEW.LC204,
:NEW.LC205,:NEW.LC206,:NEW.LC207,:NEW.LC208,
:NEW.LC209,:NEW.LC210,:NEW.LC211,:NEW.LC212,
:NEW.LC213,:NEW.LC214,:NEW.LC215,:NEW.LC216,
:NEW.LC217,:NEW.LC218,:NEW.LC219,:NEW.LC220,
:NEW.LC221,:NEW.LC222,:NEW.LC223,:NEW.LC224,
:NEW.LC225,:NEW.LC226,:NEW.LC227,:NEW.LC228,
:NEW.LC229,:NEW.LC230,:NEW.LC231,:NEW.LC232,
:NEW.LC233,:NEW.LC234,:NEW.LC235,:NEW.LC236,
:NEW.LC237,:NEW.LC238,:NEW.LC239,:NEW.LC240,
:NEW.LC241,:NEW.LC242,:NEW.LC243,:NEW.LC244,
:NEW.LC245,:NEW.LC246,:NEW.LC247,:NEW.LC248,
:NEW.LC249,:NEW.LC250,:NEW.LC251,:NEW.LC252,
:NEW.LC253,:NEW.LC254,:NEW.LC255,:NEW.LC256,
:NEW.LC257,:NEW.LC258,:NEW.LC259,:NEW.LC260,
:NEW.LC261,:NEW.LC262,:NEW.LC263,:NEW.LC264,
:NEW.LC265,:NEW.LC266,:NEW.LC267,:NEW.LC268,
:NEW.LC269,:NEW.LC270,:NEW.LC271,:NEW.LC272,
:NEW.LC273,:NEW.LC274,:NEW.LC275,:NEW.LC276,
:NEW.LC277,:NEW.LC278,:NEW.LC279,:NEW.LC280,
:NEW.LC281,:NEW.LC282,:NEW.LC283,:NEW.LC284,
:NEW.LC285,:NEW.LC286,:NEW.LC287,:NEW.LC288,
:NEW.LC289,:NEW.LC290,:NEW.LC291,:NEW.LC292,
:NEW.LC293,:NEW.LC294,:NEW.LC295,:NEW.LC296,
:NEW.LC297,:NEW.LC298,:NEW.LC299,:NEW.LC300,
:NEW.LC301,:NEW.LC302,:NEW.LC303,:NEW.LC304,
:NEW.LC305,:NEW.LC306,:NEW.LC307,:NEW.LC308,
:NEW.LC309,:NEW.LC310,:NEW.LC311,:NEW.LC312,
:NEW.LC313,:NEW.LC314,:NEW.LC315,:NEW.LC316,
:NEW.LC317,:NEW.LC318,:NEW.LC319,:NEW.LC320,
:NEW.LC321,:NEW.LC322,:NEW.LC323,:NEW.LC324,
:NEW.LC325,:NEW.LC326,:NEW.LC327,:NEW.LC328,
:NEW.LC329,:NEW.LC330,:NEW.LC331,:NEW.LC332,
:NEW.LC333,:NEW.LC334,:NEW.LC335,:NEW.LC336,
:NEW.LC337,:NEW.LC338,:NEW.LC339,:NEW.LC340,
:NEW.LC341,:NEW.LC342,:NEW.LC343,:NEW.LC344,
:NEW.LC345,:NEW.LC346,:NEW.LC347,:NEW.LC348,
:NEW.LC349,:NEW.LC350,:NEW.LC351,:NEW.LC352,
:NEW.LC353,:NEW.LC354,:NEW.LC355,:NEW.LC356,
:NEW.LC357,:NEW.LC358,:NEW.LC359,:NEW.LC360,
:NEW.LC361,:NEW.LC362,:NEW.LC363,:NEW.LC364,
:NEW.LC365,:NEW.LC366,:NEW.LC367,:NEW.LC368,
:NEW.LC369,:NEW.LC370,:NEW.LC371,:NEW.LC372,
:NEW.LC373,:NEW.LC374,:NEW.LC375,:NEW.LC376,
:NEW.LC377,:NEW.LC378,:NEW.LC379,:NEW.LC380,
:NEW.LC381,:NEW.LC382,:NEW.LC383,:NEW.LC384,
:NEW.LC385,:NEW.LC386,:NEW.LC387,:NEW.LC388,
:NEW.LC389,:NEW.LC390,:NEW.LC391,:NEW.LC392,
:NEW.LC393,:NEW.LC394,:NEW.LC395,:NEW.LC396,
:NEW.LC397,:NEW.LC398,:NEW.LC399,:NEW.LC400,
:NEW.LC401,:NEW.LC402,:NEW.LC403,:NEW.LC404,
:NEW.LC405,:NEW.LC406,:NEW.LC407,:NEW.LC408,
:NEW.LC409,:NEW.LC410,:NEW.LC411,:NEW.LC412,
:NEW.LC413,:NEW.LC414,:NEW.LC415,:NEW.LC416,
:NEW.LC417,:NEW.LC418,:NEW.LC419,:NEW.LC420,
:NEW.LC421,:NEW.LC422,:NEW.LC423,:NEW.LC424,
:NEW.LC425,:NEW.LC426,:NEW.LC427,:NEW.LC428,
:NEW.LC429,:NEW.LC430,:NEW.LC431,:NEW.LC432,
:NEW.LC433,:NEW.LC434,:NEW.LC435,:NEW.LC436,
:NEW.LC437,:NEW.LC438,:NEW.LC439,:NEW.LC440,
:NEW.LC441,:NEW.LC442,:NEW.LC443,:NEW.LC444,
:NEW.LC445,:NEW.LC446,:NEW.LC447,:NEW.LC448,
:NEW.LC449,:NEW.LC450,:NEW.LC451,:NEW.LC452,
:NEW.LC453,:NEW.LC454,:NEW.LC455,:NEW.LC456,
:NEW.LC457,:NEW.LC458,:NEW.LC459,:NEW.LC460,
:NEW.LC461,:NEW.LC462,:NEW.LC463,:NEW.LC464,
:NEW.LC465,:NEW.LC466,:NEW.LC467,:NEW.LC468,
:NEW.LC469,:NEW.LC470,:NEW.LC471,:NEW.LC472,
:NEW.LC473,:NEW.LC474,:NEW.LC475,:NEW.LC476,
:NEW.LC477,:NEW.LC478,:NEW.LC479,:NEW.LC480,
:NEW.LC481,:NEW.LC482,:NEW.LC483,:NEW.LC484,
:NEW.LC485,:NEW.LC486,:NEW.LC487,:NEW.LC488,
:NEW.LC489,:NEW.LC490,:NEW.LC491,:NEW.LC492,
:NEW.LC493,:NEW.LC494,:NEW.LC495,:NEW.LC496,
:NEW.LC497,:NEW.LC498,:NEW.LC499,:NEW.LC500,
:NEW.LC501,:NEW.LC502,:NEW.LC503,:NEW.LC504,
:NEW.LC505,:NEW.LC506,:NEW.LC507,:NEW.LC508,
:NEW.LC509,:NEW.LC510,:NEW.LC511,:NEW.LC512,
:NEW.LC513,:NEW.LC514,:NEW.LC515,:NEW.LC516,
:NEW.LC517,:NEW.LC518,:NEW.LC519,:NEW.LC520,
:NEW.LC521,:NEW.LC522,:NEW.LC523,:NEW.LC524,
:NEW.LC525,:NEW.LC526,:NEW.LC527,:NEW.LC528,
:NEW.LC529,:NEW.LC530,:NEW.LC531,:NEW.LC532,
:NEW.LC533,:NEW.LC534,:NEW.LC535,:NEW.LC536,
:NEW.LC537,:NEW.LC538,:NEW.LC539,:NEW.LC540,
:NEW.LC541,:NEW.LC542,:NEW.LC543,:NEW.LC544,
:NEW.LC545,:NEW.LC546,:NEW.LC547,:NEW.LC548,
:NEW.LC549,:NEW.LC550,:NEW.LC551,:NEW.LC552,
:NEW.LC553,:NEW.LC554,:NEW.LC555,:NEW.LC556,
:NEW.LC557,:NEW.LC558,:NEW.LC559,:NEW.LC560,
:NEW.LC561,:NEW.LC562,:NEW.LC563,:NEW.LC564,
:NEW.LC565,:NEW.LC566,:NEW.LC567,:NEW.LC568,
:NEW.LC569,:NEW.LC570,:NEW.LC571,:NEW.LC572,
:NEW.LC573,:NEW.LC574,:NEW.LC575,:NEW.LC576,
:NEW.LC577,:NEW.LC578,:NEW.LC579,:NEW.LC580,
:NEW.LC581,:NEW.LC582,:NEW.LC583,:NEW.LC584,
:NEW.LC585,:NEW.LC586,:NEW.LC587,:NEW.LC588,
:NEW.LC589,:NEW.LC590,:NEW.LC591,:NEW.LC592,
:NEW.LC593,:NEW.LC594,:NEW.LC595,:NEW.LC596,
:NEW.LC597,:NEW.LC598,:NEW.LC599,:NEW.LC600,
:NEW.LC601,:NEW.LC602,:NEW.LC603,:NEW.LC604,
:NEW.LC605,:NEW.LC606,:NEW.LC607,:NEW.LC608,
:NEW.LC609,:NEW.LC610,:NEW.LC611,:NEW.LC612,
:NEW.LC613,:NEW.LC614,:NEW.LC615,:NEW.LC616,
:NEW.LC617,:NEW.LC618,:NEW.LC619,:NEW.LC620,
:NEW.LC621,:NEW.LC622,:NEW.LC623,:NEW.LC624,
:NEW.LC625,:NEW.LC626,:NEW.LC627,:NEW.LC628,
:NEW.LC629,:NEW.LC630,:NEW.LC631,:NEW.LC632,
:NEW.LC633,:NEW.LC634,:NEW.LC635,:NEW.LC636,
:NEW.LC637,:NEW.LC638,:NEW.LC639,:NEW.LC640,
:NEW.LC641,:NEW.LC642,:NEW.LC643,:NEW.LC644,
:NEW.LC645,:NEW.LC646,:NEW.LC647,:NEW.LC648,
:NEW.LC649,:NEW.LC650,:NEW.LC651,:NEW.LC652,
:NEW.LC653,:NEW.LC654,:NEW.LC655,:NEW.LC656,
:NEW.LC657,:NEW.LC658,:NEW.LC659,:NEW.LC660,
:NEW.LC661,:NEW.LC662,:NEW.LC663,:NEW.LC664,
:NEW.LC665,:NEW.LC666,:NEW.LC667,:NEW.LC668,
:NEW.LC669,:NEW.LC670,:NEW.LC671,:NEW.LC672,
:NEW.LC673,:NEW.LC674,:NEW.LC675,:NEW.LC676,
:NEW.LC677,:NEW.LC678,:NEW.LC679,:NEW.LC680,
:NEW.LC681,:NEW.LC682,:NEW.LC683,:NEW.LC684,
:NEW.LC685,:NEW.LC686,:NEW.LC687,:NEW.LC688,
:NEW.LC689,:NEW.LC690,:NEW.LC691,:NEW.LC692,
:NEW.LC693,:NEW.LC694,:NEW.LC695,:NEW.LC696,
:NEW.LC697,:NEW.LC698,:NEW.LC699,:NEW.LC700,
:NEW.LC701,:NEW.LC702,:NEW.LC703,:NEW.LC704,
:NEW.LC705,:NEW.LC706,:NEW.LC707,:NEW.LC708,
:NEW.LC709,:NEW.LC710,:NEW.LC711,:NEW.LC712,
:NEW.LC713,:NEW.LC714,:NEW.LC715,:NEW.LC716,
:NEW.LC717,:NEW.LC718,:NEW.LC719,:NEW.LC720,
:NEW.LC721,:NEW.LC722,:NEW.LC723,:NEW.LC724,
:NEW.LC725,:NEW.LC726,:NEW.LC727,:NEW.LC728,
:NEW.LC729,:NEW.LC730,:NEW.LC731,:NEW.LC732,
:NEW.LC733,:NEW.LC734,:NEW.LC735,:NEW.LC736,
:NEW.LC737,:NEW.LC738,:NEW.LC739,:NEW.LC740,
:NEW.LC741,:NEW.LC742,:NEW.LC743,:NEW.LC744,
:NEW.LC745,:NEW.LC746,:NEW.LC747,:NEW.LC748,
:NEW.LC749,:NEW.LC750,:NEW.LC751,:NEW.LC752,
:NEW.LC753,:NEW.LC754,:NEW.LC755,:NEW.LC756,
:NEW.LC757,:NEW.LC758,:NEW.LC759,:NEW.LC760,
:NEW.LC761,:NEW.LC762,:NEW.LC763,:NEW.LC764,
:NEW.LC765,:NEW.LC766,:NEW.LC767,:NEW.LC768,
:NEW.LC769,:NEW.LC770,:NEW.LC771,:NEW.LC772,
:NEW.LC773,:NEW.LC774,:NEW.LC775,:NEW.LC776,
:NEW.LC777,:NEW.LC778,:NEW.LC779,:NEW.LC780,
:NEW.LC781,:NEW.LC782,:NEW.LC783,:NEW.LC784,
:NEW.LC785,:NEW.LC786,:NEW.LC787,:NEW.LC788,
:NEW.LC789,:NEW.LC790,:NEW.LC791,:NEW.LC792,
:NEW.LC793,:NEW.LC794,:NEW.LC795,:NEW.LC796,
:NEW.LC797,:NEW.LC798,:NEW.LC799,:NEW.LC800,
:NEW.LC801,:NEW.LC802,:NEW.LC803,:NEW.LC804,
:NEW.LC805,:NEW.LC806,:NEW.LC807,:NEW.LC808,
:NEW.LC809,:NEW.LC810,:NEW.LC811,:NEW.LC812,
:NEW.LC813,:NEW.LC814,:NEW.LC815,:NEW.LC816,
:NEW.LC817,:NEW.LC818,:NEW.LC819,:NEW.LC820,
:NEW.LC821,:NEW.LC822,:NEW.LC823,:NEW.LC824,
:NEW.LC825,:NEW.LC826,:NEW.LC827,:NEW.LC828,
:NEW.LC829,:NEW.LC830,:NEW.LC831,:NEW.LC832,
:NEW.LC833,:NEW.LC834,:NEW.LC835,:NEW.LC836,
:NEW.LC837,:NEW.LC838,:NEW.LC839,:NEW.LC840,
:NEW.LC841,:NEW.LC842,:NEW.LC843,:NEW.LC844,
:NEW.LC845,:NEW.LC846,:NEW.LC847,:NEW.LC848,
:NEW.LC849,:NEW.LC850,:NEW.LC851,:NEW.LC852,
:NEW.LC853,:NEW.LC854,:NEW.LC855,:NEW.LC856,
:NEW.LC857,:NEW.LC858,:NEW.LC859,:NEW.LC860,
:NEW.LC861,:NEW.LC862,:NEW.LC863,:NEW.LC864,
:NEW.LC865,:NEW.LC866,:NEW.LC867,:NEW.LC868,
:NEW.LC869,:NEW.LC870,:NEW.LC871,:NEW.LC872,
:NEW.LC873,:NEW.LC874,:NEW.LC875,:NEW.LC876,
:NEW.LC877,:NEW.LC878,:NEW.LC879,:NEW.LC880,
:NEW.LC881,:NEW.LC882,:NEW.LC883,:NEW.LC884,
:NEW.LC885,:NEW.LC886,:NEW.LC887,:NEW.LC888,
:NEW.LC889,:NEW.LC890,:NEW.LC891,:NEW.LC892,
:NEW.LC893,:NEW.LC894,:NEW.LC895,:NEW.LC896,
:NEW.LC897,:NEW.LC898,:NEW.LC899,:NEW.LC900,
:NEW.LC901,:NEW.LC902,:NEW.LC903,:NEW.LC904,
:NEW.LC905,:NEW.LC906,:NEW.LC907,:NEW.LC908,
:NEW.LC909,:NEW.LC910,:NEW.LC911,:NEW.LC912,
:NEW.LC913,:NEW.LC914,:NEW.LC915,:NEW.LC916,
:NEW.LC917,:NEW.LC918,:NEW.LC919,:NEW.LC920,
:NEW.LC921,:NEW.LC922,:NEW.LC923,:NEW.LC924,
:NEW.LC925,:NEW.LC926,:NEW.LC927,:NEW.LC928,
:NEW.LC929,:NEW.LC930,:NEW.LC931,:NEW.LC932,
:NEW.LC933,:NEW.LC934,:NEW.LC935,:NEW.LC936,
:NEW.LC937,:NEW.LC938,:NEW.LC939,:NEW.LC940,
:NEW.LC941,:NEW.LC942,:NEW.LC943,:NEW.LC944,
:NEW.LC945,:NEW.LC946,:NEW.LC947,:NEW.LC948,
:NEW.LC949,:NEW.LC950,:NEW.LC951,:NEW.LC952,
:NEW.LC953,:NEW.LC954,:NEW.LC955,:NEW.LC956,
:NEW.LC957,:NEW.LC958,:NEW.LC959,:NEW.LC960,
:NEW.LC961,:NEW.LC962,:NEW.LC963,:NEW.LC964,
:NEW.LC965,:NEW.LC966,:NEW.LC967,:NEW.LC968,
:NEW.LC969,:NEW.LC970,:NEW.LC971,:NEW.LC972,
:NEW.LC973,:NEW.LC974,:NEW.LC975,:NEW.LC976,
:NEW.LC977,:NEW.LC978,:NEW.LC979,:NEW.LC980,
:NEW.LC981,:NEW.LC982,:NEW.LC983,:NEW.LC984,
:NEW.LC985,:NEW.LC986,:NEW.LC987,:NEW.LC988,
:NEW.LC989,:NEW.LC990,:NEW.LC991,:NEW.LC992,
:NEW.LC993,:NEW.LC994,:NEW.LC995,:NEW.LC996,
:NEW.LC997,:NEW.LC998,:NEW.LC999,:NEW.LC1000,
:NEW.LC1001,:NEW.LC1002,:NEW.LC1003,:NEW.LC1004,
:NEW.LC1005,:NEW.LC1006,:NEW.LC1007,:NEW.LC1008,
:NEW.LC1009,:NEW.LC1010,:NEW.LC1011,:NEW.LC1012,
:NEW.LC1013,:NEW.LC1014,:NEW.LC1015,:NEW.LC1016,
:NEW.LC1017,:NEW.LC1018,:NEW.LC1019,:NEW.LC1020,
:NEW.LC1021,:NEW.LC1022,:NEW.LC1023,:NEW.LC1024
); 
  if $rc <> 0 
  then
    stop($rc);
) !
INSERT TEST1 (
LC1, LC2, LC3, LC4, LC5, LC6, LC7, LC8,
LC9, LC10, LC11, LC12, LC13, LC14, LC15, LC16,
LC17, LC18, LC19, LC20, LC21, LC22, LC23, LC24,
LC25, LC26, LC27, LC28, LC29, LC30, LC31, LC32,
LC33, LC34, LC35, LC36, LC37, LC38, LC39, LC40,
LC41, LC42, LC43, LC44, LC45, LC46, LC47, LC48,
LC49, LC50, LC51, LC52, LC53, LC54, LC55, LC56,
LC57, LC58, LC59, LC60, LC61, LC62, LC63, LC64,
LC65, LC66, LC67, LC68, LC69, LC70, LC71, LC72,
LC73, LC74, LC75, LC76, LC77, LC78, LC79, LC80,
LC81, LC82, LC83, LC84, LC85, LC86, LC87, LC88,
LC89, LC90, LC91, LC92, LC93, LC94, LC95, LC96,
LC97, LC98, LC99, LC100, LC101, LC102, LC103, LC104,
LC105, LC106, LC107, LC108, LC109, LC110, LC111, LC112,
LC113, LC114, LC115, LC116, LC117, LC118, LC119, LC120,
LC121, LC122, LC123, LC124, LC125, LC126, LC127, LC128,
LC129, LC130, LC131, LC132, LC133, LC134, LC135, LC136,
LC137, LC138, LC139, LC140, LC141, LC142, LC143, LC144,
LC145, LC146, LC147, LC148, LC149, LC150, LC151, LC152,
LC153, LC154, LC155, LC156, LC157, LC158, LC159, LC160,
LC161, LC162, LC163, LC164, LC165, LC166, LC167, LC168,
LC169, LC170, LC171, LC172, LC173, LC174, LC175, LC176,
LC177, LC178, LC179, LC180, LC181, LC182, LC183, LC184,
LC185, LC186, LC187, LC188, LC189, LC190, LC191, LC192,
LC193, LC194, LC195, LC196, LC197, LC198, LC199, LC200,
LC201, LC202, LC203, LC204, LC205, LC206, LC207, LC208,
LC209, LC210, LC211, LC212, LC213, LC214, LC215, LC216,
LC217, LC218, LC219, LC220, LC221, LC222, LC223, LC224,
LC225, LC226, LC227, LC228, LC229, LC230, LC231, LC232,
LC233, LC234, LC235, LC236, LC237, LC238, LC239, LC240,
LC241, LC242, LC243, LC244, LC245, LC246, LC247, LC248,
LC249, LC250, LC251, LC252, LC253, LC254, LC255, LC256,
LC257, LC258, LC259, LC260, LC261, LC262, LC263, LC264,
LC265, LC266, LC267, LC268, LC269, LC270, LC271, LC272,
LC273, LC274, LC275, LC276, LC277, LC278, LC279, LC280,
LC281, LC282, LC283, LC284, LC285, LC286, LC287, LC288,
LC289, LC290, LC291, LC292, LC293, LC294, LC295, LC296,
LC297, LC298, LC299, LC300, LC301, LC302, LC303, LC304,
LC305, LC306, LC307, LC308, LC309, LC310, LC311, LC312,
LC313, LC314, LC315, LC316, LC317, LC318, LC319, LC320,
LC321, LC322, LC323, LC324, LC325, LC326, LC327, LC328,
LC329, LC330, LC331, LC332, LC333, LC334, LC335, LC336,
LC337, LC338, LC339, LC340, LC341, LC342, LC343, LC344,
LC345, LC346, LC347, LC348, LC349, LC350, LC351, LC352,
LC353, LC354, LC355, LC356, LC357, LC358, LC359, LC360,
LC361, LC362, LC363, LC364, LC365, LC366, LC367, LC368,
LC369, LC370, LC371, LC372, LC373, LC374, LC375, LC376,
LC377, LC378, LC379, LC380, LC381, LC382, LC383, LC384,
LC385, LC386, LC387, LC388, LC389, LC390, LC391, LC392,
LC393, LC394, LC395, LC396, LC397, LC398, LC399, LC400,
LC401, LC402, LC403, LC404, LC405, LC406, LC407, LC408,
LC409, LC410, LC411, LC412, LC413, LC414, LC415, LC416,
LC417, LC418, LC419, LC420, LC421, LC422, LC423, LC424,
LC425, LC426, LC427, LC428, LC429, LC430, LC431, LC432,
LC433, LC434, LC435, LC436, LC437, LC438, LC439, LC440,
LC441, LC442, LC443, LC444, LC445, LC446, LC447, LC448,
LC449, LC450, LC451, LC452, LC453, LC454, LC455, LC456,
LC457, LC458, LC459, LC460, LC461, LC462, LC463, LC464,
LC465, LC466, LC467, LC468, LC469, LC470, LC471, LC472,
LC473, LC474, LC475, LC476, LC477, LC478, LC479, LC480,
LC481, LC482, LC483, LC484, LC485, LC486, LC487, LC488,
LC489, LC490, LC491, LC492, LC493, LC494, LC495, LC496,
LC497, LC498, LC499, LC500, LC501, LC502, LC503, LC504,
LC505, LC506, LC507, LC508, LC509, LC510, LC511, LC512,
LC513, LC514, LC515, LC516, LC517, LC518, LC519, LC520,
LC521, LC522, LC523, LC524, LC525, LC526, LC527, LC528,
LC529, LC530, LC531, LC532, LC533, LC534, LC535, LC536,
LC537, LC538, LC539, LC540, LC541, LC542, LC543, LC544,
LC545, LC546, LC547, LC548, LC549, LC550, LC551, LC552,
LC553, LC554, LC555, LC556, LC557, LC558, LC559, LC560,
LC561, LC562, LC563, LC564, LC565, LC566, LC567, LC568,
LC569, LC570, LC571, LC572, LC573, LC574, LC575, LC576,
LC577, LC578, LC579, LC580, LC581, LC582, LC583, LC584,
LC585, LC586, LC587, LC588, LC589, LC590, LC591, LC592,
LC593, LC594, LC595, LC596, LC597, LC598, LC599, LC600,
LC601, LC602, LC603, LC604, LC605, LC606, LC607, LC608,
LC609, LC610, LC611, LC612, LC613, LC614, LC615, LC616,
LC617, LC618, LC619, LC620, LC621, LC622, LC623, LC624,
LC625, LC626, LC627, LC628, LC629, LC630, LC631, LC632,
LC633, LC634, LC635, LC636, LC637, LC638, LC639, LC640,
LC641, LC642, LC643, LC644, LC645, LC646, LC647, LC648,
LC649, LC650, LC651, LC652, LC653, LC654, LC655, LC656,
LC657, LC658, LC659, LC660, LC661, LC662, LC663, LC664,
LC665, LC666, LC667, LC668, LC669, LC670, LC671, LC672,
LC673, LC674, LC675, LC676, LC677, LC678, LC679, LC680,
LC681, LC682, LC683, LC684, LC685, LC686, LC687, LC688,
LC689, LC690, LC691, LC692, LC693, LC694, LC695, LC696,
LC697, LC698, LC699, LC700, LC701, LC702, LC703, LC704,
LC705, LC706, LC707, LC708, LC709, LC710, LC711, LC712,
LC713, LC714, LC715, LC716, LC717, LC718, LC719, LC720,
LC721, LC722, LC723, LC724, LC725, LC726, LC727, LC728,
LC729, LC730, LC731, LC732, LC733, LC734, LC735, LC736,
LC737, LC738, LC739, LC740, LC741, LC742, LC743, LC744,
LC745, LC746, LC747, LC748, LC749, LC750, LC751, LC752,
LC753, LC754, LC755, LC756, LC757, LC758, LC759, LC760,
LC761, LC762, LC763, LC764, LC765, LC766, LC767, LC768,
LC769, LC770, LC771, LC772, LC773, LC774, LC775, LC776,
LC777, LC778, LC779, LC780, LC781, LC782, LC783, LC784,
LC785, LC786, LC787, LC788, LC789, LC790, LC791, LC792,
LC793, LC794, LC795, LC796, LC797, LC798, LC799, LC800,
LC801, LC802, LC803, LC804, LC805, LC806, LC807, LC808,
LC809, LC810, LC811, LC812, LC813, LC814, LC815, LC816,
LC817, LC818, LC819, LC820, LC821, LC822, LC823, LC824,
LC825, LC826, LC827, LC828, LC829, LC830, LC831, LC832,
LC833, LC834, LC835, LC836, LC837, LC838, LC839, LC840,
LC841, LC842, LC843, LC844, LC845, LC846, LC847, LC848,
LC849, LC850, LC851, LC852, LC853, LC854, LC855, LC856,
LC857, LC858, LC859, LC860, LC861, LC862, LC863, LC864,
LC865, LC866, LC867, LC868, LC869, LC870, LC871, LC872,
LC873, LC874, LC875, LC876, LC877, LC878, LC879, LC880,
LC881, LC882, LC883, LC884, LC885, LC886, LC887, LC888,
LC889, LC890, LC891, LC892, LC893, LC894, LC895, LC896,
LC897, LC898, LC899, LC900, LC901, LC902, LC903, LC904,
LC905, LC906, LC907, LC908, LC909, LC910, LC911, LC912,
LC913, LC914, LC915, LC916, LC917, LC918, LC919, LC920,
LC921, LC922, LC923, LC924, LC925, LC926, LC927, LC928,
LC929, LC930, LC931, LC932, LC933, LC934, LC935, LC936,
LC937, LC938, LC939, LC940, LC941, LC942, LC943, LC944,
LC945, LC946, LC947, LC948, LC949, LC950, LC951, LC952,
LC953, LC954, LC955, LC956, LC957, LC958, LC959, LC960,
LC961, LC962, LC963, LC964, LC965, LC966, LC967, LC968,
LC969, LC970, LC971, LC972, LC973, LC974, LC975, LC976,
LC977, LC978, LC979, LC980, LC981, LC982, LC983, LC984,
LC985, LC986, LC987, LC988, LC989, LC990, LC991, LC992,
LC993, LC994, LC995, LC996, LC997, LC998, LC999, LC1000,
LC1001, LC1002, LC1003, LC1004, LC1005, LC1006, LC1007, LC1008,
LC1009, LC1010, LC1011, LC1012, LC1013, LC1014, LC1015, LC1016,
LC1017, LC1018, LC1019, LC1020, LC1021, LC1022, LC1023, LC1024
) VALUES (
123, '12345', '12345', '12345', '12345',
'12345', '12345', '12345', '12345', '12345',
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
'12345', '12345', '12345', '12345', '12345',
'12345', '12345', '12345', '12345', '12345',
'12345', '12345', '12345', '12345', '12345',
'12345', '12345', '12345', '12345', '12345',
'12345', '     ', 1023, ' 1024'
)!
 
select lc1, lc2, lc1023, lc1024 from test2 !
fetch !
drop trigger t1ins of Test1 !
delete Test1 !
delete Test2 !
create trigger t1ins for Test1 after insert execute (
  insert into kern.test2 values (
:NEW.LC1, :NEW.LC2, :NEW.LC3, :NEW.LC4, :NEW.LC5, 
:NEW.LC6, :NEW.LC7, :NEW.LC8, :NEW.LC9, :NEW.LC10, 
:NEW.LC11, :NEW.LC12, :NEW.LC13, :NEW.LC14, :NEW.LC15, 
:NEW.LC16, :NEW.LC17, :NEW.LC18, :NEW.LC19, :NEW.LC20, 
:NEW.LC21, :NEW.LC22, :NEW.LC23, :NEW.LC24, :NEW.LC25, 
:NEW.LC26, :NEW.LC27, :NEW.LC28, :NEW.LC29, :NEW.LC30, 
:NEW.LC31, :NEW.LC32, :NEW.LC33, :NEW.LC34, :NEW.LC35, 
:NEW.LC36, :NEW.LC37, :NEW.LC38, :NEW.LC39, :NEW.LC40,
:NEW.LC41, :NEW.LC42, :NEW.LC43, :NEW.LC44, :NEW.LC45, 
:NEW.LC46, :NEW.LC47, :NEW.LC48, :NEW.LC49, :NEW.LC50, 
:NEW.LC51, :NEW.LC52, :NEW.LC53, :NEW.LC54, :NEW.LC55, 
:NEW.LC56, :NEW.LC57, :NEW.LC58, :NEW.LC59, :NEW.LC60, 
:NEW.LC61, :NEW.LC62, :NEW.LC63, :NEW.LC64, :NEW.LC65, 
:NEW.LC66, :NEW.LC67, :NEW.LC68, :NEW.LC69, :NEW.LC70, 
:NEW.LC71, :NEW.LC72, :NEW.LC73, :NEW.LC74, :NEW.LC75, 
:NEW.LC76, :NEW.LC77, :NEW.LC78, :NEW.LC79, :NEW.LC80,
:NEW.LC81, :NEW.LC82, :NEW.LC83, :NEW.LC84, :NEW.LC85, 
:NEW.LC86, :NEW.LC87, :NEW.LC88, :NEW.LC89, :NEW.LC90, 
:NEW.LC91, :NEW.LC92, :NEW.LC93, :NEW.LC94, :NEW.LC95, 
:NEW.LC96, :NEW.LC97, :NEW.LC98, :NEW.LC99, :NEW.LC100, 
:NEW.LC101, :NEW.LC102, :NEW.LC103, :NEW.LC104,
:NEW.LC105, :NEW.LC106, :NEW.LC107, :NEW.LC108, 
:NEW.LC109, :NEW.LC110, :NEW.LC111, :NEW.LC112,
:NEW.LC113, :NEW.LC114, :NEW.LC115, :NEW.LC116, 
:NEW.LC117, :NEW.LC118, :NEW.LC119, :NEW.LC120,
:NEW.LC121, :NEW.LC122, :NEW.LC123, :NEW.LC124, 
:NEW.LC125, :NEW.LC126, :NEW.LC127, :NEW.LC128,
:NEW.LC129, :NEW.LC130, :NEW.LC131, :NEW.LC132, 
:NEW.LC133, :NEW.LC134, :NEW.LC135, :NEW.LC136,
:NEW.LC137, :NEW.LC138, :NEW.LC139, :NEW.LC140, 
:NEW.LC141, :NEW.LC142, :NEW.LC143, :NEW.LC144,
:NEW.LC145, :NEW.LC146, :NEW.LC147, :NEW.LC148, 
:NEW.LC149, :NEW.LC150, :NEW.LC151, :NEW.LC152,
:NEW.LC153, :NEW.LC154, :NEW.LC155, :NEW.LC156, 
:NEW.LC157, :NEW.LC158, :NEW.LC159, :NEW.LC160,
:NEW.LC161, :NEW.LC162, :NEW.LC163, :NEW.LC164, 
:NEW.LC165, :NEW.LC166, :NEW.LC167, :NEW.LC168,
:NEW.LC169, :NEW.LC170, :NEW.LC171, :NEW.LC172, 
:NEW.LC173, :NEW.LC174, :NEW.LC175, :NEW.LC176,
:NEW.LC177, :NEW.LC178, :NEW.LC179, :NEW.LC180, 
:NEW.LC181, :NEW.LC182, :NEW.LC183, :NEW.LC184,
:NEW.LC185, :NEW.LC186, :NEW.LC187, :NEW.LC188, 
:NEW.LC189, :NEW.LC190, :NEW.LC191, :NEW.LC192,
:NEW.LC193, :NEW.LC194, :NEW.LC195, :NEW.LC196, 
:NEW.LC197, :NEW.LC198, :NEW.LC199, :NEW.LC200,
:NEW.LC201, :NEW.LC202, :NEW.LC203, :NEW.LC204, 
:NEW.LC205, :NEW.LC206, :NEW.LC207, :NEW.LC208,
:NEW.LC209, :NEW.LC210, :NEW.LC211, :NEW.LC212, 
:NEW.LC213, :NEW.LC214, :NEW.LC215, :NEW.LC216,
:NEW.LC217, :NEW.LC218, :NEW.LC219, :NEW.LC220, 
:NEW.LC221, :NEW.LC222, :NEW.LC223, :NEW.LC224,
:NEW.LC225, :NEW.LC226, :NEW.LC227, :NEW.LC228, 
:NEW.LC229, :NEW.LC230, :NEW.LC231, :NEW.LC232,
:NEW.LC233, :NEW.LC234, :NEW.LC235, :NEW.LC236, 
:NEW.LC237, :NEW.LC238, :NEW.LC239, :NEW.LC240,
:NEW.LC241, :NEW.LC242, :NEW.LC243, :NEW.LC244, 
:NEW.LC245, :NEW.LC246, :NEW.LC247, :NEW.LC248,
:NEW.LC249, :NEW.LC250, :NEW.LC251, :NEW.LC252, 
:NEW.LC253, :NEW.LC254, :NEW.LC255, :NEW.LC256,
:NEW.LC257, :NEW.LC258, :NEW.LC259, :NEW.LC260, 
:NEW.LC261, :NEW.LC262, :NEW.LC263, :NEW.LC264,
:NEW.LC265, :NEW.LC266, :NEW.LC267, :NEW.LC268, 
:NEW.LC269, :NEW.LC270, :NEW.LC271, :NEW.LC272,
:NEW.LC273, :NEW.LC274, :NEW.LC275, :NEW.LC276, 
:NEW.LC277, :NEW.LC278, :NEW.LC279, :NEW.LC280,
:NEW.LC281, :NEW.LC282, :NEW.LC283, :NEW.LC284, 
:NEW.LC285, :NEW.LC286, :NEW.LC287, :NEW.LC288,
:NEW.LC289, :NEW.LC290, :NEW.LC291, :NEW.LC292, 
:NEW.LC293, :NEW.LC294, :NEW.LC295, :NEW.LC296,
:NEW.LC297, :NEW.LC298, :NEW.LC299, :NEW.LC300, 
:NEW.LC301, :NEW.LC302, :NEW.LC303, :NEW.LC304,
:NEW.LC305, :NEW.LC306, :NEW.LC307, :NEW.LC308, 
:NEW.LC309, :NEW.LC310, :NEW.LC311, :NEW.LC312,
:NEW.LC313, :NEW.LC314, :NEW.LC315, :NEW.LC316, 
:NEW.LC317, :NEW.LC318, :NEW.LC319, :NEW.LC320,
:NEW.LC321, :NEW.LC322, :NEW.LC323, :NEW.LC324, 
:NEW.LC325, :NEW.LC326, :NEW.LC327, :NEW.LC328,
:NEW.LC329, :NEW.LC330, :NEW.LC331, :NEW.LC332, 
:NEW.LC333, :NEW.LC334, :NEW.LC335, :NEW.LC336,
:NEW.LC337, :NEW.LC338, :NEW.LC339, :NEW.LC340, 
:NEW.LC341, :NEW.LC342, :NEW.LC343, :NEW.LC344,
:NEW.LC345, :NEW.LC346, :NEW.LC347, :NEW.LC348, 
:NEW.LC349, :NEW.LC350, :NEW.LC351, :NEW.LC352,
:NEW.LC353, :NEW.LC354, :NEW.LC355, :NEW.LC356, 
:NEW.LC357, :NEW.LC358, :NEW.LC359, :NEW.LC360,
:NEW.LC361, :NEW.LC362, :NEW.LC363, :NEW.LC364, 
:NEW.LC365, :NEW.LC366, :NEW.LC367, :NEW.LC368,
:NEW.LC369, :NEW.LC370, :NEW.LC371, :NEW.LC372, 
:NEW.LC373, :NEW.LC374, :NEW.LC375, :NEW.LC376,
:NEW.LC377, :NEW.LC378, :NEW.LC379, :NEW.LC380, 
:NEW.LC381, :NEW.LC382, :NEW.LC383, :NEW.LC384,
:NEW.LC385, :NEW.LC386, :NEW.LC387, :NEW.LC388, 
:NEW.LC389, :NEW.LC390, :NEW.LC391, :NEW.LC392,
:NEW.LC393, :NEW.LC394, :NEW.LC395, :NEW.LC396, 
:NEW.LC397, :NEW.LC398, :NEW.LC399, :NEW.LC400,
:NEW.LC401, :NEW.LC402, :NEW.LC403, :NEW.LC404, 
:NEW.LC405, :NEW.LC406, :NEW.LC407, :NEW.LC408,
:NEW.LC409, :NEW.LC410, :NEW.LC411, :NEW.LC412, 
:NEW.LC413, :NEW.LC414, :NEW.LC415, :NEW.LC416,
:NEW.LC417, :NEW.LC418, :NEW.LC419, :NEW.LC420, 
:NEW.LC421, :NEW.LC422, :NEW.LC423, :NEW.LC424,
:NEW.LC425, :NEW.LC426, :NEW.LC427, :NEW.LC428, 
:NEW.LC429, :NEW.LC430, :NEW.LC431, :NEW.LC432,
:NEW.LC433, :NEW.LC434, :NEW.LC435, :NEW.LC436, 
:NEW.LC437, :NEW.LC438, :NEW.LC439, :NEW.LC440,
:NEW.LC441, :NEW.LC442, :NEW.LC443, :NEW.LC444, 
:NEW.LC445, :NEW.LC446, :NEW.LC447, :NEW.LC448,
:NEW.LC449, :NEW.LC450, :NEW.LC451, :NEW.LC452, 
:NEW.LC453, :NEW.LC454, :NEW.LC455, :NEW.LC456,
:NEW.LC457, :NEW.LC458, :NEW.LC459, :NEW.LC460, 
:NEW.LC461, :NEW.LC462, :NEW.LC463, :NEW.LC464,
:NEW.LC465, :NEW.LC466, :NEW.LC467, :NEW.LC468, 
:NEW.LC469, :NEW.LC470, :NEW.LC471, :NEW.LC472,
:NEW.LC473, :NEW.LC474, :NEW.LC475, :NEW.LC476, 
:NEW.LC477, :NEW.LC478, :NEW.LC479, :NEW.LC480,
:NEW.LC481, :NEW.LC482, :NEW.LC483, :NEW.LC484, 
:NEW.LC485, :NEW.LC486, :NEW.LC487, :NEW.LC488,
:NEW.LC489, :NEW.LC490, :NEW.LC491, :NEW.LC492, 
:NEW.LC493, :NEW.LC494, :NEW.LC495, :NEW.LC496,
:NEW.LC497, :NEW.LC498, :NEW.LC499, :NEW.LC500, 
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
:NEW.LC1001, :NEW.LC1002, :NEW.LC1003, :NEW.LC1004, 
:NEW.LC1005, :NEW.LC1006, :NEW.LC1007, :NEW.LC1008,
:NEW.LC1009, :NEW.LC1010, :NEW.LC1011, :NEW.LC1012, 
:NEW.LC1013, :NEW.LC1014, :NEW.LC1015, :NEW.LC1016,
:NEW.LC1017, :NEW.LC1018, :NEW.LC1019, :NEW.LC1020, 
:NEW.LC1021, :NEW.LC1022, :NEW.LC1023, :NEW.LC1024
); 
  if $rc <> 0 
  then
    stop($rc);
  insert into kern.test2 values (
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,
:NEW.LC501, :NEW.LC502, :NEW.LC503, :NEW.LC504,
:NEW.LC505, :NEW.LC506, :NEW.LC507, :NEW.LC508, 
:NEW.LC509, :NEW.LC510, :NEW.LC511, :NEW.LC512,
:NEW.LC513, :NEW.LC514, :NEW.LC515, :NEW.LC516, 
:NEW.LC517, :NEW.LC518, :NEW.LC519, :NEW.LC520,
:NEW.LC521, :NEW.LC522, :NEW.LC523, :NEW.LC524, 
:NEW.LC525, :NEW.LC526, :NEW.LC527, :NEW.LC528,
:NEW.LC529, :NEW.LC530, :NEW.LC531, :NEW.LC532, 
:NEW.LC533, :NEW.LC534, :NEW.LC535, :NEW.LC536,
:NEW.LC537, :NEW.LC538, :NEW.LC539, :NEW.LC540, 
:NEW.LC541, :NEW.LC542, :NEW.LC543, :NEW.LC544,
:NEW.LC545, :NEW.LC546, :NEW.LC547, :NEW.LC548, 
:NEW.LC549, :NEW.LC550, :NEW.LC551, :NEW.LC552,
:NEW.LC553, :NEW.LC554, :NEW.LC555, :NEW.LC556, 
:NEW.LC557, :NEW.LC558, :NEW.LC559, :NEW.LC560,
:NEW.LC561, :NEW.LC562, :NEW.LC563, :NEW.LC564, 
:NEW.LC565, :NEW.LC566, :NEW.LC567, :NEW.LC568,
:NEW.LC569, :NEW.LC570, :NEW.LC571, :NEW.LC572, 
:NEW.LC573, :NEW.LC574, :NEW.LC575, :NEW.LC576,
:NEW.LC577, :NEW.LC578, :NEW.LC579, :NEW.LC580, 
:NEW.LC581, :NEW.LC582, :NEW.LC583, :NEW.LC584,
:NEW.LC585, :NEW.LC586, :NEW.LC587, :NEW.LC588, 
:NEW.LC589, :NEW.LC590, :NEW.LC591, :NEW.LC592,
:NEW.LC593, :NEW.LC594, :NEW.LC595, :NEW.LC596, 
:NEW.LC597, :NEW.LC598, :NEW.LC599, :NEW.LC600,
:NEW.LC601, :NEW.LC602, :NEW.LC603, :NEW.LC604, 
:NEW.LC605, :NEW.LC606, :NEW.LC607, :NEW.LC608,
:NEW.LC609, :NEW.LC610, :NEW.LC611, :NEW.LC612, 
:NEW.LC613, :NEW.LC614, :NEW.LC615, :NEW.LC616,
:NEW.LC617, :NEW.LC618, :NEW.LC619, :NEW.LC620, 
:NEW.LC621, :NEW.LC622, :NEW.LC623, :NEW.LC624,
:NEW.LC625, :NEW.LC626, :NEW.LC627, :NEW.LC628, 
:NEW.LC629, :NEW.LC630, :NEW.LC631, :NEW.LC632,
:NEW.LC633, :NEW.LC634, :NEW.LC635, :NEW.LC636, 
:NEW.LC637, :NEW.LC638, :NEW.LC639, :NEW.LC640,
:NEW.LC641, :NEW.LC642, :NEW.LC643, :NEW.LC644, 
:NEW.LC645, :NEW.LC646, :NEW.LC647, :NEW.LC648,
:NEW.LC649, :NEW.LC650, :NEW.LC651, :NEW.LC652, 
:NEW.LC653, :NEW.LC654, :NEW.LC655, :NEW.LC656,
:NEW.LC657, :NEW.LC658, :NEW.LC659, :NEW.LC660, 
:NEW.LC661, :NEW.LC662, :NEW.LC663, :NEW.LC664,
:NEW.LC665, :NEW.LC666, :NEW.LC667, :NEW.LC668, 
:NEW.LC669, :NEW.LC670, :NEW.LC671, :NEW.LC672,
:NEW.LC673, :NEW.LC674, :NEW.LC675, :NEW.LC676, 
:NEW.LC677, :NEW.LC678, :NEW.LC679, :NEW.LC680,
:NEW.LC681, :NEW.LC682, :NEW.LC683, :NEW.LC684, 
:NEW.LC685, :NEW.LC686, :NEW.LC687, :NEW.LC688,
:NEW.LC689, :NEW.LC690, :NEW.LC691, :NEW.LC692, 
:NEW.LC693, :NEW.LC694, :NEW.LC695, :NEW.LC696,
:NEW.LC697, :NEW.LC698, :NEW.LC699, :NEW.LC700, 
:NEW.LC701, :NEW.LC702, :NEW.LC703, :NEW.LC704,
:NEW.LC705, :NEW.LC706, :NEW.LC707, :NEW.LC708, 
:NEW.LC709, :NEW.LC710, :NEW.LC711, :NEW.LC712,
:NEW.LC713, :NEW.LC714, :NEW.LC715, :NEW.LC716, 
:NEW.LC717, :NEW.LC718, :NEW.LC719, :NEW.LC720,
:NEW.LC721, :NEW.LC722, :NEW.LC723, :NEW.LC724, 
:NEW.LC725, :NEW.LC726, :NEW.LC727, :NEW.LC728,
:NEW.LC729, :NEW.LC730, :NEW.LC731, :NEW.LC732, 
:NEW.LC733, :NEW.LC734, :NEW.LC735, :NEW.LC736,
:NEW.LC737, :NEW.LC738, :NEW.LC739, :NEW.LC740, 
:NEW.LC741, :NEW.LC742, :NEW.LC743, :NEW.LC744,
:NEW.LC745, :NEW.LC746, :NEW.LC747, :NEW.LC748, 
:NEW.LC749, :NEW.LC750, :NEW.LC751, :NEW.LC752,
:NEW.LC753, :NEW.LC754, :NEW.LC755, :NEW.LC756, 
:NEW.LC757, :NEW.LC758, :NEW.LC759, :NEW.LC760,
:NEW.LC761, :NEW.LC762, :NEW.LC763, :NEW.LC764, 
:NEW.LC765, :NEW.LC766, :NEW.LC767, :NEW.LC768,
:NEW.LC769, :NEW.LC770, :NEW.LC771, :NEW.LC772, 
:NEW.LC773, :NEW.LC774, :NEW.LC775, :NEW.LC776,
:NEW.LC777, :NEW.LC778, :NEW.LC779, :NEW.LC780, 
:NEW.LC781, :NEW.LC782, :NEW.LC783, :NEW.LC784,
:NEW.LC785, :NEW.LC786, :NEW.LC787, :NEW.LC788, 
:NEW.LC789, :NEW.LC790, :NEW.LC791, :NEW.LC792,
:NEW.LC793, :NEW.LC794, :NEW.LC795, :NEW.LC796, 
:NEW.LC797, :NEW.LC798, :NEW.LC799, :NEW.LC800,
:NEW.LC801, :NEW.LC802, :NEW.LC803, :NEW.LC804, 
:NEW.LC805, :NEW.LC806, :NEW.LC807, :NEW.LC808,
:NEW.LC809, :NEW.LC810, :NEW.LC811, :NEW.LC812, 
:NEW.LC813, :NEW.LC814, :NEW.LC815, :NEW.LC816,
:NEW.LC817, :NEW.LC818, :NEW.LC819, :NEW.LC820, 
:NEW.LC821, :NEW.LC822, :NEW.LC823, :NEW.LC824,
:NEW.LC825, :NEW.LC826, :NEW.LC827, :NEW.LC828, 
:NEW.LC829, :NEW.LC830, :NEW.LC831, :NEW.LC832,
:NEW.LC833, :NEW.LC834, :NEW.LC835, :NEW.LC836, 
:NEW.LC837, :NEW.LC838, :NEW.LC839, :NEW.LC840,
:NEW.LC841, :NEW.LC842, :NEW.LC843, :NEW.LC844, 
:NEW.LC845, :NEW.LC846, :NEW.LC847, :NEW.LC848,
:NEW.LC849, :NEW.LC850, :NEW.LC851, :NEW.LC852, 
:NEW.LC853, :NEW.LC854, :NEW.LC855, :NEW.LC856,
:NEW.LC857, :NEW.LC858, :NEW.LC859, :NEW.LC860, 
:NEW.LC861, :NEW.LC862, :NEW.LC863, :NEW.LC864,
:NEW.LC865, :NEW.LC866, :NEW.LC867, :NEW.LC868, 
:NEW.LC869, :NEW.LC870, :NEW.LC871, :NEW.LC872,
:NEW.LC873, :NEW.LC874, :NEW.LC875, :NEW.LC876, 
:NEW.LC877, :NEW.LC878, :NEW.LC879, :NEW.LC880,
:NEW.LC881, :NEW.LC882, :NEW.LC883, :NEW.LC884, 
:NEW.LC885, :NEW.LC886, :NEW.LC887, :NEW.LC888,
:NEW.LC889, :NEW.LC890, :NEW.LC891, :NEW.LC892, 
:NEW.LC893, :NEW.LC894, :NEW.LC895, :NEW.LC896,
:NEW.LC897, :NEW.LC898, :NEW.LC899, :NEW.LC900, 
:NEW.LC901, :NEW.LC902, :NEW.LC903, :NEW.LC904,
:NEW.LC905, :NEW.LC906, :NEW.LC907, :NEW.LC908, 
:NEW.LC909, :NEW.LC910, :NEW.LC911, :NEW.LC912,
:NEW.LC913, :NEW.LC914, :NEW.LC915, :NEW.LC916, 
:NEW.LC917, :NEW.LC918, :NEW.LC919, :NEW.LC920,
:NEW.LC921, :NEW.LC922, :NEW.LC923, :NEW.LC924, 
:NEW.LC925, :NEW.LC926, :NEW.LC927, :NEW.LC928,
:NEW.LC929, :NEW.LC930, :NEW.LC931, :NEW.LC932, 
:NEW.LC933, :NEW.LC934, :NEW.LC935, :NEW.LC936,
:NEW.LC937, :NEW.LC938, :NEW.LC939, :NEW.LC940, 
:NEW.LC941, :NEW.LC942, :NEW.LC943, :NEW.LC944,
:NEW.LC945, :NEW.LC946, :NEW.LC947, :NEW.LC948, 
:NEW.LC949, :NEW.LC950, :NEW.LC951, :NEW.LC952,
:NEW.LC953, :NEW.LC954, :NEW.LC955, :NEW.LC956, 
:NEW.LC957, :NEW.LC958, :NEW.LC959, :NEW.LC960,
:NEW.LC961, :NEW.LC962, :NEW.LC963, :NEW.LC964, 
:NEW.LC965, :NEW.LC966, :NEW.LC967, :NEW.LC968,
:NEW.LC969, :NEW.LC970, :NEW.LC971, :NEW.LC972, 
:NEW.LC973, :NEW.LC974, :NEW.LC975, :NEW.LC976,
:NEW.LC977, :NEW.LC978, :NEW.LC979, :NEW.LC980, 
:NEW.LC981, :NEW.LC982, :NEW.LC983, :NEW.LC984,
:NEW.LC985, :NEW.LC986, :NEW.LC987, :NEW.LC988, 
:NEW.LC989, :NEW.LC990, :NEW.LC991, :NEW.LC992,
:NEW.LC993, :NEW.LC994, :NEW.LC995, :NEW.LC996, 
:NEW.LC997, :NEW.LC998, :NEW.LC999, :NEW.LC1000,
:NEW.LC1001, :NEW.LC1002, :NEW.LC1003, :NEW.LC1004, 
:NEW.LC1005, :NEW.LC1006, :NEW.LC1007, :NEW.LC1008,
:NEW.LC1009, :NEW.LC1010, :NEW.LC1011, :NEW.LC1012, 
:NEW.LC1013, :NEW.LC1014, :NEW.LC1015, :NEW.LC1016,
:NEW.LC1017, :NEW.LC1018, :NEW.LC1019, :NEW.LC1020, 
:NEW.LC1021, :NEW.LC1022, :NEW.LC1023, :NEW.LC1024
); 
  if $rc <> 0 
  then
    stop($rc);
) !
INSERT TEST1 (
LC1, LC2, LC3, LC4, LC5, LC6, LC7, LC8,
LC9, LC10, LC11, LC12, LC13, LC14, LC15, LC16,
LC17, LC18, LC19, LC20, LC21, LC22, LC23, LC24,
LC25, LC26, LC27, LC28, LC29, LC30, LC31, LC32,
LC33, LC34, LC35, LC36, LC37, LC38, LC39, LC40,
LC41, LC42, LC43, LC44, LC45, LC46, LC47, LC48,
LC49, LC50, LC51, LC52, LC53, LC54, LC55, LC56,
LC57, LC58, LC59, LC60, LC61, LC62, LC63, LC64,
LC65, LC66, LC67, LC68, LC69, LC70, LC71, LC72,
LC73, LC74, LC75, LC76, LC77, LC78, LC79, LC80,
LC81, LC82, LC83, LC84, LC85, LC86, LC87, LC88,
LC89, LC90, LC91, LC92, LC93, LC94, LC95, LC96,
LC97, LC98, LC99, LC100, LC101, LC102, LC103, LC104,
LC105, LC106, LC107, LC108, LC109, LC110, LC111, LC112,
LC113, LC114, LC115, LC116, LC117, LC118, LC119, LC120,
LC121, LC122, LC123, LC124, LC125, LC126, LC127, LC128,
LC129, LC130, LC131, LC132, LC133, LC134, LC135, LC136,
LC137, LC138, LC139, LC140, LC141, LC142, LC143, LC144,
LC145, LC146, LC147, LC148, LC149, LC150, LC151, LC152,
LC153, LC154, LC155, LC156, LC157, LC158, LC159, LC160,
LC161, LC162, LC163, LC164, LC165, LC166, LC167, LC168,
LC169, LC170, LC171, LC172, LC173, LC174, LC175, LC176,
LC177, LC178, LC179, LC180, LC181, LC182, LC183, LC184,
LC185, LC186, LC187, LC188, LC189, LC190, LC191, LC192,
LC193, LC194, LC195, LC196, LC197, LC198, LC199, LC200,
LC201, LC202, LC203, LC204, LC205, LC206, LC207, LC208,
LC209, LC210, LC211, LC212, LC213, LC214, LC215, LC216,
LC217, LC218, LC219, LC220, LC221, LC222, LC223, LC224,
LC225, LC226, LC227, LC228, LC229, LC230, LC231, LC232,
LC233, LC234, LC235, LC236, LC237, LC238, LC239, LC240,
LC241, LC242, LC243, LC244, LC245, LC246, LC247, LC248,
LC249, LC250, LC251, LC252, LC253, LC254, LC255, LC256,
LC257, LC258, LC259, LC260, LC261, LC262, LC263, LC264,
LC265, LC266, LC267, LC268, LC269, LC270, LC271, LC272,
LC273, LC274, LC275, LC276, LC277, LC278, LC279, LC280,
LC281, LC282, LC283, LC284, LC285, LC286, LC287, LC288,
LC289, LC290, LC291, LC292, LC293, LC294, LC295, LC296,
LC297, LC298, LC299, LC300, LC301, LC302, LC303, LC304,
LC305, LC306, LC307, LC308, LC309, LC310, LC311, LC312,
LC313, LC314, LC315, LC316, LC317, LC318, LC319, LC320,
LC321, LC322, LC323, LC324, LC325, LC326, LC327, LC328,
LC329, LC330, LC331, LC332, LC333, LC334, LC335, LC336,
LC337, LC338, LC339, LC340, LC341, LC342, LC343, LC344,
LC345, LC346, LC347, LC348, LC349, LC350, LC351, LC352,
LC353, LC354, LC355, LC356, LC357, LC358, LC359, LC360,
LC361, LC362, LC363, LC364, LC365, LC366, LC367, LC368,
LC369, LC370, LC371, LC372, LC373, LC374, LC375, LC376,
LC377, LC378, LC379, LC380, LC381, LC382, LC383, LC384,
LC385, LC386, LC387, LC388, LC389, LC390, LC391, LC392,
LC393, LC394, LC395, LC396, LC397, LC398, LC399, LC400,
LC401, LC402, LC403, LC404, LC405, LC406, LC407, LC408,
LC409, LC410, LC411, LC412, LC413, LC414, LC415, LC416,
LC417, LC418, LC419, LC420, LC421, LC422, LC423, LC424,
LC425, LC426, LC427, LC428, LC429, LC430, LC431, LC432,
LC433, LC434, LC435, LC436, LC437, LC438, LC439, LC440,
LC441, LC442, LC443, LC444, LC445, LC446, LC447, LC448,
LC449, LC450, LC451, LC452, LC453, LC454, LC455, LC456,
LC457, LC458, LC459, LC460, LC461, LC462, LC463, LC464,
LC465, LC466, LC467, LC468, LC469, LC470, LC471, LC472,
LC473, LC474, LC475, LC476, LC477, LC478, LC479, LC480,
LC481, LC482, LC483, LC484, LC485, LC486, LC487, LC488,
LC489, LC490, LC491, LC492, LC493, LC494, LC495, LC496,
LC497, LC498, LC499, LC500, LC501, LC502, LC503, LC504,
LC505, LC506, LC507, LC508, LC509, LC510, LC511, LC512,
LC513, LC514, LC515, LC516, LC517, LC518, LC519, LC520,
LC521, LC522, LC523, LC524, LC525, LC526, LC527, LC528,
LC529, LC530, LC531, LC532, LC533, LC534, LC535, LC536,
LC537, LC538, LC539, LC540, LC541, LC542, LC543, LC544,
LC545, LC546, LC547, LC548, LC549, LC550, LC551, LC552,
LC553, LC554, LC555, LC556, LC557, LC558, LC559, LC560,
LC561, LC562, LC563, LC564, LC565, LC566, LC567, LC568,
LC569, LC570, LC571, LC572, LC573, LC574, LC575, LC576,
LC577, LC578, LC579, LC580, LC581, LC582, LC583, LC584,
LC585, LC586, LC587, LC588, LC589, LC590, LC591, LC592,
LC593, LC594, LC595, LC596, LC597, LC598, LC599, LC600,
LC601, LC602, LC603, LC604, LC605, LC606, LC607, LC608,
LC609, LC610, LC611, LC612, LC613, LC614, LC615, LC616,
LC617, LC618, LC619, LC620, LC621, LC622, LC623, LC624,
LC625, LC626, LC627, LC628, LC629, LC630, LC631, LC632,
LC633, LC634, LC635, LC636, LC637, LC638, LC639, LC640,
LC641, LC642, LC643, LC644, LC645, LC646, LC647, LC648,
LC649, LC650, LC651, LC652, LC653, LC654, LC655, LC656,
LC657, LC658, LC659, LC660, LC661, LC662, LC663, LC664,
LC665, LC666, LC667, LC668, LC669, LC670, LC671, LC672,
LC673, LC674, LC675, LC676, LC677, LC678, LC679, LC680,
LC681, LC682, LC683, LC684, LC685, LC686, LC687, LC688,
LC689, LC690, LC691, LC692, LC693, LC694, LC695, LC696,
LC697, LC698, LC699, LC700, LC701, LC702, LC703, LC704,
LC705, LC706, LC707, LC708, LC709, LC710, LC711, LC712,
LC713, LC714, LC715, LC716, LC717, LC718, LC719, LC720,
LC721, LC722, LC723, LC724, LC725, LC726, LC727, LC728,
LC729, LC730, LC731, LC732, LC733, LC734, LC735, LC736,
LC737, LC738, LC739, LC740, LC741, LC742, LC743, LC744,
LC745, LC746, LC747, LC748, LC749, LC750, LC751, LC752,
LC753, LC754, LC755, LC756, LC757, LC758, LC759, LC760,
LC761, LC762, LC763, LC764, LC765, LC766, LC767, LC768,
LC769, LC770, LC771, LC772, LC773, LC774, LC775, LC776,
LC777, LC778, LC779, LC780, LC781, LC782, LC783, LC784,
LC785, LC786, LC787, LC788, LC789, LC790, LC791, LC792,
LC793, LC794, LC795, LC796, LC797, LC798, LC799, LC800,
LC801, LC802, LC803, LC804, LC805, LC806, LC807, LC808,
LC809, LC810, LC811, LC812, LC813, LC814, LC815, LC816,
LC817, LC818, LC819, LC820, LC821, LC822, LC823, LC824,
LC825, LC826, LC827, LC828, LC829, LC830, LC831, LC832,
LC833, LC834, LC835, LC836, LC837, LC838, LC839, LC840,
LC841, LC842, LC843, LC844, LC845, LC846, LC847, LC848,
LC849, LC850, LC851, LC852, LC853, LC854, LC855, LC856,
LC857, LC858, LC859, LC860, LC861, LC862, LC863, LC864,
LC865, LC866, LC867, LC868, LC869, LC870, LC871, LC872,
LC873, LC874, LC875, LC876, LC877, LC878, LC879, LC880,
LC881, LC882, LC883, LC884, LC885, LC886, LC887, LC888,
LC889, LC890, LC891, LC892, LC893, LC894, LC895, LC896,
LC897, LC898, LC899, LC900, LC901, LC902, LC903, LC904,
LC905, LC906, LC907, LC908, LC909, LC910, LC911, LC912,
LC913, LC914, LC915, LC916, LC917, LC918, LC919, LC920,
LC921, LC922, LC923, LC924, LC925, LC926, LC927, LC928,
LC929, LC930, LC931, LC932, LC933, LC934, LC935, LC936,
LC937, LC938, LC939, LC940, LC941, LC942, LC943, LC944,
LC945, LC946, LC947, LC948, LC949, LC950, LC951, LC952,
LC953, LC954, LC955, LC956, LC957, LC958, LC959, LC960,
LC961, LC962, LC963, LC964, LC965, LC966, LC967, LC968,
LC969, LC970, LC971, LC972, LC973, LC974, LC975, LC976,
LC977, LC978, LC979, LC980, LC981, LC982, LC983, LC984,
LC985, LC986, LC987, LC988, LC989, LC990, LC991, LC992,
LC993, LC994, LC995, LC996, LC997, LC998, LC999, LC1000,
LC1001, LC1002, LC1003, LC1004, LC1005, LC1006, LC1007, LC1008,
LC1009, LC1010, LC1011, LC1012, LC1013, LC1014, LC1015, LC1016,
LC1017, LC1018, LC1019, LC1020, LC1021, LC1022, LC1023, LC1024
) VALUES (
123, '12345', '12345', '12345', '12345',
'12345', '12345', '12345', '12345', '12345',
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
12345, 12345, 12345, 12345, 12345,
'12345', '12345', '12345', '12345', '12345',
'12345', '12345', '12345', '12345', '12345',
'12345', '12345', '12345', '12345', '12345',
'12345', '12345', '12345', '12345', '12345',
'12345', '     ', 1023, ' 1024'
)!
 
select lc1, lc2, lc1023, lc1024 from test2 !
fetch !
create trigger t1upd for Test1 after update
 (
   lc1, lc2, lc3, lc4, lc5, lc6, lc7, lc8, lc9, lc10,
   lc11, lc12, lc13, lc14, lc15, lc16, lc17, lc18, lc19, lc20,
   lc21, lc22, lc23, lc24, lc25, lc26, lc27, lc28, lc29, lc30,
   lc31, lc32, lc33, lc34, lc35, lc36, lc37, lc38, lc39, lc40,
   lc41, lc42, lc43, lc44, lc45, lc46, lc47, lc48, lc49, lc50,
   lc51, lc52, lc53, lc54, lc55, lc56, lc57, lc58, lc59, lc60,
   lc61, lc62, lc63, lc64, lc65, lc66, lc67, lc68, lc69, lc70,
   lc71, lc72, lc73, lc74, lc75, lc76, lc77, lc78, lc79, lc80,
   lc81, lc82, lc83, lc84, lc85, lc86, lc87, lc88, lc89, lc90,
   lc91, lc92, lc93, lc94, lc95, lc96, lc97, lc98, lc99, lc100,
   lc101, lc102, lc103, lc104, lc105, lc106, lc107, lc108, lc109, lc110,
   lc111, lc112, lc113, lc114, lc115, lc116, lc117, lc118, lc119, lc120,
   lc121, lc122, lc123, lc124, lc125, lc126, lc127, lc128, lc129, lc130,
   lc131, lc132, lc133, lc134, lc135, lc136, lc137, lc138, lc139, lc140,
   lc141, lc142, lc143, lc144, lc145, lc146, lc1023, lc1024
 )
 execute (
  insert into kern.prot values ('TUP', :OLD.lc1023, :NEW.lc1023, 
                                  :OLD.lc1024, :NEW.lc1024); 
  if $rc <> 0 
  then
    stop($rc);
) !

update test1 set lc1023 = 3201 !
select * from prot !
fetch !
select * from sysdd.triggers !
fetch!
rollback !
 * wie sieht es mit der Anzahl von Statements in einem Trigger aus ? !
errormsg short !
create trigger t1ins for t1 after insert execute (
  insert into kern.prot values ('INS', 001, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 002, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 003, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 004, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 005, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 006, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 007, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 008, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 009, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 010, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 011, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 012, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 013, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 014, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 015, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 016, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 017, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 018, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 019, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 020, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 021, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 022, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 023, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 024, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 025, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 026, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 027, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 028, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 029, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 030, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 031, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 032, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 033, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 034, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 035, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 036, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 037, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 038, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 039, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 040, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 041, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 042, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 043, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 044, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 045, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 046, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 047, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 048, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 049, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 050, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 051, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 052, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 053, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 054, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 055, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 056, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 057, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 058, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 059, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 060, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 061, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 062, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 063, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 064, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 065, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 066, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 067, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 068, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 069, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 070, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 071, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 072, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 073, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 074, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 075, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 076, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 077, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 078, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 079, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 080, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 081, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 082, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 083, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 084, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 085, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 086, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 087, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 088, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 089, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 090, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 091, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 092, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 093, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 094, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 095, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 096, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 097, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 098, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 099, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 100, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 101, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 102, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 103, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 104, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 105, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 106, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 107, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 108, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 109, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 110, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 111, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 112, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 113, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 114, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 115, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 116, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 117, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 118, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 119, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 120, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 121, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 122, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 123, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 124, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 125, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 126, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 127, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 128, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 129, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 130, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 131, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 132, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 133, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 134, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 135, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 136, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 137, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 138, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 139, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 140, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 141, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 142, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 143, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 144, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 145, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 146, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 147, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 148, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 149, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 150, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 151, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 152, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 153, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 154, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 155, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 156, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 157, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 158, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 159, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 160, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 161, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 162, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 163, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 164, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 165, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 166, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 167, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 168, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 169, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 170, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 171, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 172, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 173, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 174, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 175, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 176, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 177, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 178, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 179, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 180, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 181, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 182, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 183, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 184, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 185, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 186, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 187, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 188, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 189, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 190, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 191, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 192, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 193, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 194, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 195, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 196, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 197, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 198, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 199, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 200, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 201, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 202, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 203, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 204, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 205, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 206, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 207, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 208, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 209, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 210, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 211, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 212, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 213, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 214, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 215, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 216, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 217, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 218, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 219, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 220, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 221, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 222, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 223, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 224, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 225, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 226, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 227, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 228, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 229, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 230, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 231, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 232, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 233, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 234, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 235, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 236, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 237, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 238, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 239, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 240, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 241, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 242, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 243, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 244, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 245, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 246, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 247, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 248, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 249, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 250, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 251, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 252, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 253, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 254, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 255, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 256, :NEW.S1, NULL, :NEW.S2);
) !
insert t1 values (256, 'abc')!
select count(*) from prot !
fetch!
rollback !
create trigger t1ins for t1 after insert execute (
  insert into kern.prot values ('INS', 001, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 002, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 003, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 004, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 005, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 006, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 007, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 008, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 009, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 010, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 011, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 012, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 013, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 014, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 015, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 016, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 017, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 018, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 019, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 020, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 021, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 022, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 023, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 024, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 025, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 026, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 027, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 028, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 029, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 030, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 031, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 032, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 033, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 034, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 035, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 036, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 037, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 038, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 039, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 040, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 041, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 042, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 043, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 044, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 045, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 046, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 047, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 048, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 049, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 050, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 051, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 052, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 053, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 054, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 055, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 056, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 057, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 058, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 059, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 060, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 061, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 062, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 063, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 064, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 065, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 066, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 067, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 068, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 069, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 070, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 071, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 072, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 073, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 074, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 075, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 076, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 077, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 078, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 079, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 080, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 081, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 082, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 083, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 084, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 085, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 086, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 087, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 088, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 089, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 090, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 091, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 092, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 093, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 094, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 095, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 096, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 097, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 098, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 099, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 100, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 101, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 102, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 103, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 104, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 105, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 106, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 107, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 108, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 109, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 110, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 111, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 112, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 113, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 114, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 115, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 116, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 117, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 118, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 119, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 120, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 121, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 122, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 123, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 124, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 125, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 126, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 127, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 128, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 129, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 130, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 131, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 132, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 133, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 134, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 135, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 136, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 137, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 138, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 139, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 140, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 141, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 142, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 143, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 144, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 145, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 146, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 147, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 148, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 149, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 150, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 151, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 152, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 153, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 154, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 155, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 156, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 157, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 158, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 159, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 160, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 161, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 162, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 163, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 164, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 165, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 166, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 167, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 168, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 169, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 170, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 171, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 172, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 173, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 174, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 175, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 176, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 177, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 178, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 179, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 180, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 181, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 182, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 183, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 184, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 185, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 186, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 187, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 188, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 189, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 190, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 191, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 192, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 193, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 194, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 195, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 196, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 197, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 198, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 199, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 200, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 201, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 202, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 203, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 204, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 205, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 206, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 207, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 208, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 209, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 210, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 211, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 212, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 213, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 214, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 215, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 216, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 217, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 218, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 219, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 220, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 221, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 222, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 223, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 224, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 225, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 226, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 227, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 228, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 229, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 230, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 231, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 232, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 233, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 234, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 235, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 236, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 237, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 238, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 239, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 240, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 241, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 242, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 243, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 244, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 245, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 246, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 247, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 248, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 249, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 250, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 251, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 252, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 253, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 254, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 255, :NEW.S1, NULL, :NEW.S2);
) !
insert t1 values (255, 'abc')!
select count(*) from prot !
fetch!
rollback !
create trigger t1ins for t1 after insert execute (
var i integer;
  insert into kern.prot values ('INS', 001, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 002, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 003, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 004, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 005, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 006, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 007, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 008, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 009, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 010, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 011, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 012, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 013, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 014, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 015, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 016, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 017, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 018, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 019, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 020, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 021, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 022, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 023, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 024, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 025, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 026, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 027, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 028, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 029, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 030, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 031, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 032, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 033, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 034, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 035, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 036, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 037, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 038, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 039, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 040, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 041, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 042, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 043, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 044, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 045, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 046, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 047, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 048, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 049, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 050, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 051, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 052, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 053, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 054, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 055, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 056, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 057, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 058, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 059, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 060, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 061, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 062, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 063, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 064, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 065, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 066, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 067, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 068, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 069, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 070, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 071, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 072, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 073, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 074, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 075, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 076, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 077, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 078, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 079, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 080, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 081, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 082, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 083, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 084, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 085, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 086, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 087, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 088, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 089, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 090, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 091, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 092, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 093, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 094, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 095, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 096, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 097, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 098, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 099, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 100, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 101, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 102, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 103, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 104, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 105, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 106, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 107, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 108, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 109, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 110, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 111, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 112, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 113, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 114, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 115, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 116, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 117, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 118, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 119, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 120, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 121, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 122, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 123, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 124, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 125, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 126, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 127, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 128, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 129, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 130, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 131, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 132, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 133, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 134, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 135, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 136, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 137, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 138, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 139, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 140, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 141, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 142, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 143, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 144, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 145, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 146, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 147, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 148, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 149, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 150, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 151, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 152, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 153, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 154, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 155, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 156, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 157, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 158, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 159, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 160, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 161, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 162, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 163, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 164, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 165, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 166, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 167, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 168, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 169, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 170, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 171, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 172, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 173, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 174, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 175, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 176, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 177, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 178, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 179, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 180, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 181, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 182, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 183, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 184, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 185, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 186, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 187, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 188, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 189, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 190, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 191, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 192, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 193, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 194, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 195, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 196, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 197, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 198, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 199, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 200, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 201, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 202, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 203, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 204, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 205, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 206, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 207, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 208, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 209, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 210, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 211, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 212, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 213, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 214, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 215, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 216, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 217, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 218, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 219, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 220, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 221, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 222, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 223, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 224, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 225, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 226, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 227, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 228, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 229, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 230, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 231, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 232, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 233, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 234, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 235, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 236, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 237, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 238, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 239, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 240, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 241, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 242, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 243, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 244, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 245, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 246, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 247, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 248, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 249, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 250, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 251, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 252, :NEW.S1, NULL, :NEW.S2);
  insert into kern.prot values ('INS', 253, :NEW.S1, NULL, :NEW.S2);
  select count(*) into :i from kern.prot;
  if i <> 253
  then
      stop (i, 'count not correct');
) !
insert t1 values (1, 'abc')!
select count(*) from prot !
fetch!
rollback !
 * Die WHENEVER-Clause ist zum Test dran
 * - Sachen drin ansprechen, die es nicht gibt ? !
create trigger t1ins for t1 after insert execute (
  insert into kern.prot values ('INS', NULL, :NEW.S1, NULL, :NEW.S2);
) WHENEVER s11 <> 3 !
 * - Subquery darin, die nicht sein darf !
create trigger t1ins for t1 after insert execute (
  insert into kern.prot values ('INS', NULL, :NEW.S1, NULL, :NEW.S2);
) WHENEVER s1 <> 3 and s1 in (select s1 from t1)!
 * - Datentyp-Inkompatibilitäten darin !
create trigger t1ins for t1 after insert execute (
  insert into kern.prot values ('INS', NULL, :NEW.S1, NULL, :NEW.S2);
) WHENEVER s1 <> s2!
 * - wird der Trigger nur ausgeführt, 
         wenn die Bedingung erfüllt ist ?!
create trigger t1ins for t1 after insert execute (
  insert into kern.prot values ('INS', NULL, :NEW.S1, NULL, :NEW.S2);
) WHENEVER s1 > 12 !
insert t1 values (1,'abc') !
select * from prot !
fetch !
insert t1 values (23,'cde') !
select * from prot !
fetch !
rollback !
 * - was ist, wenn die Bedingung nie erfüllt ist ? !
create trigger t1ins for t1 after insert execute (
  insert into kern.prot values ('INS', NULL, :NEW.S1, NULL, :NEW.S2);
) WHENEVER s1 > 12 and s1 < 7 !
insert t1 values (1,'abc') !
select * from prot !
fetch !
insert t1 values (23,'cde') !
select * from prot !
fetch !
rollback !
 * - was ist, wenn die Bedingung gegen die Column-Liste 
         des Update-Triggers verstößt ?!
create trigger t1upd for t1 after update(s1) execute (
  insert into kern.prot values ('UPD', :OLD.S1, :NEW.S1, :OLD.S2, :NEW.S2);
) WHENEVER OLD.s2 <> NEW.s2 !
insert t1 values (1,'abc') !
update t1 set s1 = 7 !
select * from prot !
fetch !
rollback!
 * - naja, einen richtigen Fall sollte man auch noch testen !
create trigger t1upd for t1 after update(s1) execute (
  insert into kern.prot values ('UPD', :OLD.S1, :NEW.S1, :OLD.S2, :NEW.S2);
) WHENEVER OLD.s1 + 10 < NEW.s1 !
insert t1 values (1,'abc') !
update t1 set s1 = 7 !
select * from prot !
fetch !
update t1 set s1 = 27 !
select * from prot !
fetch !
rollback !
 * was passiert mit WHENEVER-Klausel, wenn ein ALTER TABLE zuschlägt ? !
create trigger t1ins for t1 after insert execute (
  insert into kern.prot values ('INS', NULL, null, NULL, :NEW.S2);
  if $rc <> 0
  then
      stop ($rc);
) WHENEVER s1 <> 17!
insert t1 values ( 1, 'abc')!
select * from prot !
fetch!
alter table t1 drop s1 !
select * from sysdd.triggers !
insert t1 values ('bcd')!
select * from prot !
fetch!
rollback !
 * was passiert bei mißratenem STOP-Statement ? 
   - gleiche Fehlernummer wie bekannte !
create trigger t1ins for t1 after insert execute (
IF s1 = 1
THEN
   sop (-4004, 'value mag ich nicht');
) !
create trigger t1ins for t1 after insert execute (
IF s1 = 1
THEN
   stop (-4004, 'value mag ich nicht');
) !
insert t1 values (1, 'abc') !
rollback !
 * - zu langer Text ? !
create trigger t1ins for t1 after insert execute (
IF s1 = 1
THEN
   stop (-4004, 
'Das ist ein Value, den ich mit einem besonders langen Fehlertext nicht mag');
) !
insert t1 values (1, 'abc') !
rollback !
 * die lokalen Variablen sind dran 
   - Syntaxfehler werden richtig erkannt ? !
create trigger t1ins for t1 after insert execute (
var i : integer;
  insert into kern.prot values ('INS', 001, :NEW.S1, NULL, :NEW.S2);
) !
rollback !
 * - doppelte Namen werden erkannt ? !
create trigger t1ins for t1 after insert execute (
var s1 integer;
  insert into kern.prot values ('INS', :s1, :NEW.S1, NULL, :S2); 
) !
rollback !
create trigger t1ins for t1 after insert execute (
var s101 integer;
    s101 integer;
  insert into kern.prot values ('INS', :s1, :NEW.S1, NULL, :S2); 
) !
rollback !
 * - Falscher Datentyp in Zuweisung an lokale Variable !
create trigger t1ins for t1 after insert execute (
var s101 integer;
  set s101 = 'abc';
  insert into kern.prot values ('INS', :s1, :NEW.S1, NULL, :S2); 
) !
rollback release !
 * - geht es vielleicht im Oracle-Mode mit String-Zahlen ? !
connect kern identified by test sqlmode oracle !
create trigger t1ins for t1 after insert execute (
var s101 integer;
  set s101 = '123';
  insert into kern.prot values ('INS', :s1, :NEW.S1, NULL, :S2); 
) !
drop trigger t1ins of t1 !
rollback release !
connect kern identified by test sqlmode oracle !
 * wie halten wir es mit VARCHAR (PTS 1103734 ) ? !
create table tvar (a varchar (4))!
commit release !
connect kern identified by test !
create trigger tvarins for tvar after insert execute (
  insert into kern.prot
     values ('INS', 1, 2, :NEW.a, 'VARC');
)!
insert into tvar values ('abcd')!
select * from kern.prot !
fetch !
drop table tvar !
delete kern.prot!
commit release !
connect kern identified by test !
 * - was passiert bei Over- oder Underflow ? !
create trigger t1ins for t1 after insert execute (
var i smallint;
set i = 256 * 512;
  insert into kern.prot values ('INS', :s1, :i, null, :s2); 
) !
insert t1 values (1, 'abc') !
select * from t1 !
fetch!
select * from prot !
fetch !
rollback !
 * - zu viele lokale Variablen 
 * (> 1024 incl. $RC, $ERRMSG, $COUNT ) !
create trigger t1ins for t1 after insert execute (
var lc1 char(6); lc2 char(6); lc3 char(6); lc4 char(6); 
lc5 char(6); lc6 char(6); lc7 char(6); lc8 char(6); 
lc9 char(6); lc10 char(6); lc11 char(6); lc12 char(6); 
lc13 char(6); lc14 char(6); lc15 char(6); lc16 char(6); 
lc17 char(6); lc18 char(6); lc19 char(6); lc20 char(6); 
lc21 char(6); lc22 char(6); lc23 char(6); lc24 char(6); 
lc25 char(6); lc26 char(6); lc27 char(6); lc28 char(6); 
lc29 char(6); lc30 char(6); lc31 char(6); lc32 char(6); 
lc33 char(6); lc34 char(6); lc35 char(6); lc36 char(6); 
lc37 char(6); lc38 char(6); lc39 char(6); lc40 char(6); 
lc41 char(6); lc42 char(6); lc43 char(6); lc44 char(6); 
lc45 char(6); lc46 char(6); lc47 char(6); lc48 char(6); 
lc49 char(6); lc50 char(6); lc51 char(6); lc52 char(6); 
lc53 char(6); lc54 char(6); lc55 char(6); lc56 char(6); 
lc57 char(6); lc58 char(6); lc59 char(6); lc60 char(6); 
lc61 char(6); lc62 char(6); lc63 char(6); lc64 char(6); 
lc65 char(6); lc66 char(6); lc67 char(6); lc68 char(6); 
lc69 char(6); lc70 char(6); lc71 char(6); lc72 char(6); 
lc73 char(6); lc74 char(6); lc75 char(6); lc76 char(6); 
lc77 char(6); lc78 char(6); lc79 char(6); lc80 char(6); 
lc81 char(6); lc82 char(6); lc83 char(6); lc84 char(6); 
lc85 char(6); lc86 char(6); lc87 char(6); lc88 char(6); 
lc89 char(6); lc90 char(6); lc91 char(6); lc92 char(6); 
lc93 char(6); lc94 char(6); lc95 char(6); lc96 char(6); 
lc97 char(6); lc98 char(6); lc99 char(6); lc100 char(6); 
lc101 char(6); lc102 char(6); lc103 char(6); lc104 char(6); 
lc105 char(6); lc106 char(6); lc107 char(6); lc108 char(6); 
lc109 char(6); lc110 char(6); lc111 char(6); lc112 char(6); 
lc113 char(6); lc114 char(6); lc115 char(6); lc116 char(6); 
lc117 char(6); lc118 char(6); lc119 char(6); lc120 char(6); 
lc121 char(6); lc122 char(6); lc123 char(6); lc124 char(6); 
lc125 char(6); lc126 char(6); lc127 char(6); lc128 char(6); 
lc129 char(6); lc130 char(6); lc131 char(6); lc132 char(6); 
lc133 char(6); lc134 char(6); lc135 char(6); lc136 char(6); 
lc137 char(6); lc138 char(6); lc139 char(6); lc140 char(6); 
lc141 char(6); lc142 char(6); lc143 char(6); lc144 char(6); 
lc145 char(6); lc146 char(6); lc147 char(6); lc148 char(6); 
lc149 char(6); lc150 char(6); lc151 char(6); lc152 char(6); 
lc153 char(6); lc154 char(6); lc155 char(6); lc156 char(6); 
lc157 char(6); lc158 char(6); lc159 char(6); lc160 char(6); 
lc161 char(6); lc162 char(6); lc163 char(6); lc164 char(6); 
lc165 char(6); lc166 char(6); lc167 char(6); lc168 char(6); 
lc169 char(6); lc170 char(6); lc171 char(6); lc172 char(6); 
lc173 char(6); lc174 char(6); lc175 char(6); lc176 char(6); 
lc177 char(6); lc178 char(6); lc179 char(6); lc180 char(6); 
lc181 char(6); lc182 char(6); lc183 char(6); lc184 char(6); 
lc185 char(6); lc186 char(6); lc187 char(6); lc188 char(6); 
lc189 char(6); lc190 char(6); lc191 char(6); lc192 char(6); 
lc193 char(6); lc194 char(6); lc195 char(6); lc196 char(6); 
lc197 char(6); lc198 char(6); lc199 char(6); lc200 char(6); 
lc201 char(6); lc202 char(6); lc203 char(6); lc204 char(6); 
lc205 char(6); lc206 char(6); lc207 char(6); lc208 char(6); 
lc209 char(6); lc210 char(6); lc211 char(6); lc212 char(6); 
lc213 char(6); lc214 char(6); lc215 char(6); lc216 char(6); 
lc217 char(6); lc218 char(6); lc219 char(6); lc220 char(6); 
lc221 char(6); lc222 char(6); lc223 char(6); lc224 char(6); 
lc225 char(6); lc226 char(6); lc227 char(6); lc228 char(6); 
lc229 char(6); lc230 char(6); lc231 char(6); lc232 char(6); 
lc233 char(6); lc234 char(6); lc235 char(6); lc236 char(6); 
lc237 char(6); lc238 char(6); lc239 char(6); lc240 char(6); 
lc241 char(6); lc242 char(6); lc243 char(6); lc244 char(6); 
lc245 char(6); lc246 char(6); lc247 char(6); lc248 char(6); 
lc249 char(6); lc250 char(6); lc251 char(6); lc252 char(6); 
lc253 char(6); lc254 char(6); lc255 char(6); lc256 char(6); 
lc257 char(6); lc258 char(6); lc259 char(6); lc260 char(6); 
lc261 char(6); lc262 char(6); lc263 char(6); lc264 char(6); 
lc265 char(6); lc266 char(6); lc267 char(6); lc268 char(6); 
lc269 char(6); lc270 char(6); lc271 char(6); lc272 char(6); 
lc273 char(6); lc274 char(6); lc275 char(6); lc276 char(6); 
lc277 char(6); lc278 char(6); lc279 char(6); lc280 char(6); 
lc281 char(6); lc282 char(6); lc283 char(6); lc284 char(6); 
lc285 char(6); lc286 char(6); lc287 char(6); lc288 char(6); 
lc289 char(6); lc290 char(6); lc291 char(6); lc292 char(6); 
lc293 char(6); lc294 char(6); lc295 char(6); lc296 char(6); 
lc297 char(6); lc298 char(6); lc299 char(6); lc300 char(6); 
lc301 char(6); lc302 char(6); lc303 char(6); lc304 char(6); 
lc305 char(6); lc306 char(6); lc307 char(6); lc308 char(6); 
lc309 char(6); lc310 char(6); lc311 char(6); lc312 char(6); 
lc313 char(6); lc314 char(6); lc315 char(6); lc316 char(6); 
lc317 char(6); lc318 char(6); lc319 char(6); lc320 char(6); 
lc321 char(6); lc322 char(6); lc323 char(6); lc324 char(6); 
lc325 char(6); lc326 char(6); lc327 char(6); lc328 char(6); 
lc329 char(6); lc330 char(6); lc331 char(6); lc332 char(6); 
lc333 char(6); lc334 char(6); lc335 char(6); lc336 char(6); 
lc337 char(6); lc338 char(6); lc339 char(6); lc340 char(6); 
lc341 char(6); lc342 char(6); lc343 char(6); lc344 char(6); 
lc345 char(6); lc346 char(6); lc347 char(6); lc348 char(6); 
lc349 char(6); lc350 char(6); lc351 char(6); lc352 char(6); 
lc353 char(6); lc354 char(6); lc355 char(6); lc356 char(6); 
lc357 char(6); lc358 char(6); lc359 char(6); lc360 char(6); 
lc361 char(6); lc362 char(6); lc363 char(6); lc364 char(6); 
lc365 char(6); lc366 char(6); lc367 char(6); lc368 char(6); 
lc369 char(6); lc370 char(6); lc371 char(6); lc372 char(6); 
lc373 char(6); lc374 char(6); lc375 char(6); lc376 char(6); 
lc377 char(6); lc378 char(6); lc379 char(6); lc380 char(6); 
lc381 char(6); lc382 char(6); lc383 char(6); lc384 char(6); 
lc385 char(6); lc386 char(6); lc387 char(6); lc388 char(6); 
lc389 char(6); lc390 char(6); lc391 char(6); lc392 char(6); 
lc393 char(6); lc394 char(6); lc395 char(6); lc396 char(6); 
lc397 char(6); lc398 char(6); lc399 char(6); lc400 char(6); 
lc401 char(6); lc402 char(6); lc403 char(6); lc404 char(6); 
lc405 char(6); lc406 char(6); lc407 char(6); lc408 char(6); 
lc409 char(6); lc410 char(6); lc411 char(6); lc412 char(6); 
lc413 char(6); lc414 char(6); lc415 char(6); lc416 char(6); 
lc417 char(6); lc418 char(6); lc419 char(6); lc420 char(6); 
lc421 char(6); lc422 char(6); lc423 char(6); lc424 char(6); 
lc425 char(6); lc426 char(6); lc427 char(6); lc428 char(6); 
lc429 char(6); lc430 char(6); lc431 char(6); lc432 char(6); 
lc433 char(6); lc434 char(6); lc435 char(6); lc436 char(6); 
lc437 char(6); lc438 char(6); lc439 char(6); lc440 char(6); 
lc441 char(6); lc442 char(6); lc443 char(6); lc444 char(6); 
lc445 char(6); lc446 char(6); lc447 char(6); lc448 char(6); 
lc449 char(6); lc450 char(6); lc451 char(6); lc452 char(6); 
lc453 char(6); lc454 char(6); lc455 char(6); lc456 char(6); 
lc457 char(6); lc458 char(6); lc459 char(6); lc460 char(6); 
lc461 char(6); lc462 char(6); lc463 char(6); lc464 char(6); 
lc465 char(6); lc466 char(6); lc467 char(6); lc468 char(6); 
lc469 char(6); lc470 char(6); lc471 char(6); lc472 char(6); 
lc473 char(6); lc474 char(6); lc475 char(6); lc476 char(6); 
lc477 char(6); lc478 char(6); lc479 char(6); lc480 char(6); 
lc481 char(6); lc482 char(6); lc483 char(6); lc484 char(6); 
lc485 char(6); lc486 char(6); lc487 char(6); lc488 char(6); 
lc489 char(6); lc490 char(6); lc491 char(6); lc492 char(6); 
lc493 char(6); lc494 char(6); lc495 char(6); lc496 char(6); 
lc497 char(6); lc498 char(6); lc499 char(6); lc500 char(6); 
lc501 char(6); lc502 char(6); lc503 char(6); lc504 char(6); 
lc505 char(6); lc506 char(6); lc507 char(6); lc508 char(6); 
lc509 char(6); lc510 char(6); lc511 char(6); lc512 char(6); 
lc513 char(6); lc514 char(6); lc515 char(6); lc516 char(6); 
lc517 char(6); lc518 char(6); lc519 char(6); lc520 char(6); 
lc521 char(6); lc522 char(6); lc523 char(6); lc524 char(6); 
lc525 char(6); lc526 char(6); lc527 char(6); lc528 char(6); 
lc529 char(6); lc530 char(6); lc531 char(6); lc532 char(6); 
lc533 char(6); lc534 char(6); lc535 char(6); lc536 char(6); 
lc537 char(6); lc538 char(6); lc539 char(6); lc540 char(6); 
lc541 char(6); lc542 char(6); lc543 char(6); lc544 char(6); 
lc545 char(6); lc546 char(6); lc547 char(6); lc548 char(6); 
lc549 char(6); lc550 char(6); lc551 char(6); lc552 char(6); 
lc553 char(6); lc554 char(6); lc555 char(6); lc556 char(6); 
lc557 char(6); lc558 char(6); lc559 char(6); lc560 char(6); 
lc561 char(6); lc562 char(6); lc563 char(6); lc564 char(6); 
lc565 char(6); lc566 char(6); lc567 char(6); lc568 char(6); 
lc569 char(6); lc570 char(6); lc571 char(6); lc572 char(6); 
lc573 char(6); lc574 char(6); lc575 char(6); lc576 char(6); 
lc577 char(6); lc578 char(6); lc579 char(6); lc580 char(6); 
lc581 char(6); lc582 char(6); lc583 char(6); lc584 char(6); 
lc585 char(6); lc586 char(6); lc587 char(6); lc588 char(6); 
lc589 char(6); lc590 char(6); lc591 char(6); lc592 char(6); 
lc593 char(6); lc594 char(6); lc595 char(6); lc596 char(6); 
lc597 char(6); lc598 char(6); lc599 char(6); lc600 char(6); 
lc601 char(6); lc602 char(6); lc603 char(6); lc604 char(6); 
lc605 char(6); lc606 char(6); lc607 char(6); lc608 char(6); 
lc609 char(6); lc610 char(6); lc611 char(6); lc612 char(6); 
lc613 char(6); lc614 char(6); lc615 char(6); lc616 char(6); 
lc617 char(6); lc618 char(6); lc619 char(6); lc620 char(6); 
lc621 char(6); lc622 char(6); lc623 char(6); lc624 char(6); 
lc625 char(6); lc626 char(6); lc627 char(6); lc628 char(6); 
lc629 char(6); lc630 char(6); lc631 char(6); lc632 char(6); 
lc633 char(6); lc634 char(6); lc635 char(6); lc636 char(6); 
lc637 char(6); lc638 char(6); lc639 char(6); lc640 char(6); 
lc641 char(6); lc642 char(6); lc643 char(6); lc644 char(6); 
lc645 char(6); lc646 char(6); lc647 char(6); lc648 char(6); 
lc649 char(6); lc650 char(6); lc651 char(6); lc652 char(6); 
lc653 char(6); lc654 char(6); lc655 char(6); lc656 char(6); 
lc657 char(6); lc658 char(6); lc659 char(6); lc660 char(6); 
lc661 char(6); lc662 char(6); lc663 char(6); lc664 char(6); 
lc665 char(6); lc666 char(6); lc667 char(6); lc668 char(6); 
lc669 char(6); lc670 char(6); lc671 char(6); lc672 char(6); 
lc673 char(6); lc674 char(6); lc675 char(6); lc676 char(6); 
lc677 char(6); lc678 char(6); lc679 char(6); lc680 char(6); 
lc681 char(6); lc682 char(6); lc683 char(6); lc684 char(6); 
lc685 char(6); lc686 char(6); lc687 char(6); lc688 char(6); 
lc689 char(6); lc690 char(6); lc691 char(6); lc692 char(6); 
lc693 char(6); lc694 char(6); lc695 char(6); lc696 char(6); 
lc697 char(6); lc698 char(6); lc699 char(6); lc700 char(6); 
lc701 char(6); lc702 char(6); lc703 char(6); lc704 char(6); 
lc705 char(6); lc706 char(6); lc707 char(6); lc708 char(6); 
lc709 char(6); lc710 char(6); lc711 char(6); lc712 char(6); 
lc713 char(6); lc714 char(6); lc715 char(6); lc716 char(6); 
lc717 char(6); lc718 char(6); lc719 char(6); lc720 char(6); 
lc721 char(6); lc722 char(6); lc723 char(6); lc724 char(6); 
lc725 char(6); lc726 char(6); lc727 char(6); lc728 char(6); 
lc729 char(6); lc730 char(6); lc731 char(6); lc732 char(6); 
lc733 char(6); lc734 char(6); lc735 char(6); lc736 char(6); 
lc737 char(6); lc738 char(6); lc739 char(6); lc740 char(6); 
lc741 char(6); lc742 char(6); lc743 char(6); lc744 char(6); 
lc745 char(6); lc746 char(6); lc747 char(6); lc748 char(6); 
lc749 char(6); lc750 char(6); lc751 char(6); lc752 char(6); 
lc753 char(6); lc754 char(6); lc755 char(6); lc756 char(6); 
lc757 char(6); lc758 char(6); lc759 char(6); lc760 char(6); 
lc761 char(6); lc762 char(6); lc763 char(6); lc764 char(6); 
lc765 char(6); lc766 char(6); lc767 char(6); lc768 char(6); 
lc769 char(6); lc770 char(6); lc771 char(6); lc772 char(6); 
lc773 char(6); lc774 char(6); lc775 char(6); lc776 char(6); 
lc777 char(6); lc778 char(6); lc779 char(6); lc780 char(6); 
lc781 char(6); lc782 char(6); lc783 char(6); lc784 char(6); 
lc785 char(6); lc786 char(6); lc787 char(6); lc788 char(6); 
lc789 char(6); lc790 char(6); lc791 char(6); lc792 char(6); 
lc793 char(6); lc794 char(6); lc795 char(6); lc796 char(6); 
lc797 char(6); lc798 char(6); lc799 char(6); lc800 char(6); 
lc801 char(6); lc802 char(6); lc803 char(6); lc804 char(6); 
lc805 char(6); lc806 char(6); lc807 char(6); lc808 char(6); 
lc809 char(6); lc810 char(6); lc811 char(6); lc812 char(6); 
lc813 char(6); lc814 char(6); lc815 char(6); lc816 char(6); 
lc817 char(6); lc818 char(6); lc819 char(6); lc820 char(6); 
lc821 char(6); lc822 char(6); lc823 char(6); lc824 char(6); 
lc825 char(6); lc826 char(6); lc827 char(6); lc828 char(6); 
lc829 char(6); lc830 char(6); lc831 char(6); lc832 char(6); 
lc833 char(6); lc834 char(6); lc835 char(6); lc836 char(6); 
lc837 char(6); lc838 char(6); lc839 char(6); lc840 char(6); 
lc841 char(6); lc842 char(6); lc843 char(6); lc844 char(6); 
lc845 char(6); lc846 char(6); lc847 char(6); lc848 char(6); 
lc849 char(6); lc850 char(6); lc851 char(6); lc852 char(6); 
lc853 char(6); lc854 char(6); lc855 char(6); lc856 char(6); 
lc857 char(6); lc858 char(6); lc859 char(6); lc860 char(6); 
lc861 char(6); lc862 char(6); lc863 char(6); lc864 char(6); 
lc865 char(6); lc866 char(6); lc867 char(6); lc868 char(6); 
lc869 char(6); lc870 char(6); lc871 char(6); lc872 char(6); 
lc873 char(6); lc874 char(6); lc875 char(6); lc876 char(6); 
lc877 char(6); lc878 char(6); lc879 char(6); lc880 char(6); 
lc881 char(6); lc882 char(6); lc883 char(6); lc884 char(6); 
lc885 char(6); lc886 char(6); lc887 char(6); lc888 char(6); 
lc889 char(6); lc890 char(6); lc891 char(6); lc892 char(6); 
lc893 char(6); lc894 char(6); lc895 char(6); lc896 char(6); 
lc897 char(6); lc898 char(6); lc899 char(6); lc900 char(6); 
lc901 char(6); lc902 char(6); lc903 char(6); lc904 char(6); 
lc905 char(6); lc906 char(6); lc907 char(6); lc908 char(6); 
lc909 char(6); lc910 char(6); lc911 char(6); lc912 char(6); 
lc913 char(6); lc914 char(6); lc915 char(6); lc916 char(6); 
lc917 char(6); lc918 char(6); lc919 char(6); lc920 char(6); 
lc921 char(6); lc922 char(6); lc923 char(6); lc924 char(6); 
lc925 char(6); lc926 char(6); lc927 char(6); lc928 char(6); 
lc929 char(6); lc930 char(6); lc931 char(6); lc932 char(6); 
lc933 char(6); lc934 char(6); lc935 char(6); lc936 char(6); 
lc937 char(6); lc938 char(6); lc939 char(6); lc940 char(6); 
lc941 char(6); lc942 char(6); lc943 char(6); lc944 char(6); 
lc945 char(6); lc946 char(6); lc947 char(6); lc948 char(6); 
lc949 char(6); lc950 char(6); lc951 char(6); lc952 char(6); 
lc953 char(6); lc954 char(6); lc955 char(6); lc956 char(6); 
lc957 char(6); lc958 char(6); lc959 char(6); lc960 char(6); 
lc961 char(6); lc962 char(6); lc963 char(6); lc964 char(6); 
lc965 char(6); lc966 char(6); lc967 char(6); lc968 char(6); 
lc969 char(6); lc970 char(6); lc971 char(6); lc972 char(6); 
lc973 char(6); lc974 char(6); lc975 char(6); lc976 char(6); 
lc977 char(6); lc978 char(6); lc979 char(6); lc980 char(6); 
lc981 char(6); lc982 char(6); lc983 char(6); lc984 char(6); 
lc985 char(6); lc986 char(6); lc987 char(6); lc988 char(6); 
lc989 char(6); lc990 char(6); lc991 char(6); lc992 char(6); 
lc993 char(6); lc994 char(6); lc995 char(6); lc996 char(6); 
lc997 char(6); lc998 char(6); lc999 char(6); lc1000 char(6); 
lc1001 char(6); lc1002 char(6); lc1003 char(6); lc1004 char(6); 
lc1005 char(6); lc1006 char(6); lc1007 char(6); lc1008 char(6); 
lc1009 char(6); lc1010 char(6); lc1011 char(6); lc1012 char(6); 
lc1013 char(6); lc1014 char(6); lc1015 char(6); lc1016 char(6); 
lc1017 char(6); lc1018 char(6); lc1019 char(6); lc1020 char(6); 
lc1021 char(6); lc1022 char(6); 
set lc503 = 'abc';
) !
create trigger t1ins for t1 after insert execute (
var lc1 char(6); lc2 char(6); lc3 char(6); lc4 char(6); 
lc5 char(6); lc6 char(6); lc7 char(6); lc8 char(6); 
lc9 char(6); lc10 char(6); lc11 char(6); lc12 char(6); 
lc13 char(6); lc14 char(6); lc15 char(6); lc16 char(6); 
lc17 char(6); lc18 char(6); lc19 char(6); lc20 char(6); 
lc21 char(6); lc22 char(6); lc23 char(6); lc24 char(6); 
lc25 char(6); lc26 char(6); lc27 char(6); lc28 char(6); 
lc29 char(6); lc30 char(6); lc31 char(6); lc32 char(6); 
lc33 char(6); lc34 char(6); lc35 char(6); lc36 char(6); 
lc37 char(6); lc38 char(6); lc39 char(6); lc40 char(6); 
lc41 char(6); lc42 char(6); lc43 char(6); lc44 char(6); 
lc45 char(6); lc46 char(6); lc47 char(6); lc48 char(6); 
lc49 char(6); lc50 char(6); lc51 char(6); lc52 char(6); 
lc53 char(6); lc54 char(6); lc55 char(6); lc56 char(6); 
lc57 char(6); lc58 char(6); lc59 char(6); lc60 char(6); 
lc61 char(6); lc62 char(6); lc63 char(6); lc64 char(6); 
lc65 char(6); lc66 char(6); lc67 char(6); lc68 char(6); 
lc69 char(6); lc70 char(6); lc71 char(6); lc72 char(6); 
lc73 char(6); lc74 char(6); lc75 char(6); lc76 char(6); 
lc77 char(6); lc78 char(6); lc79 char(6); lc80 char(6); 
lc81 char(6); lc82 char(6); lc83 char(6); lc84 char(6); 
lc85 char(6); lc86 char(6); lc87 char(6); lc88 char(6); 
lc89 char(6); lc90 char(6); lc91 char(6); lc92 char(6); 
lc93 char(6); lc94 char(6); lc95 char(6); lc96 char(6); 
lc97 char(6); lc98 char(6); lc99 char(6); lc100 char(6); 
lc101 char(6); lc102 char(6); lc103 char(6); lc104 char(6); 
lc105 char(6); lc106 char(6); lc107 char(6); lc108 char(6); 
lc109 char(6); lc110 char(6); lc111 char(6); lc112 char(6); 
lc113 char(6); lc114 char(6); lc115 char(6); lc116 char(6); 
lc117 char(6); lc118 char(6); lc119 char(6); lc120 char(6); 
lc121 char(6); lc122 char(6); lc123 char(6); lc124 char(6); 
lc125 char(6); lc126 char(6); lc127 char(6); lc128 char(6); 
lc129 char(6); lc130 char(6); lc131 char(6); lc132 char(6); 
lc133 char(6); lc134 char(6); lc135 char(6); lc136 char(6); 
lc137 char(6); lc138 char(6); lc139 char(6); lc140 char(6); 
lc141 char(6); lc142 char(6); lc143 char(6); lc144 char(6); 
lc145 char(6); lc146 char(6); lc147 char(6); lc148 char(6); 
lc149 char(6); lc150 char(6); lc151 char(6); lc152 char(6); 
lc153 char(6); lc154 char(6); lc155 char(6); lc156 char(6); 
lc157 char(6); lc158 char(6); lc159 char(6); lc160 char(6); 
lc161 char(6); lc162 char(6); lc163 char(6); lc164 char(6); 
lc165 char(6); lc166 char(6); lc167 char(6); lc168 char(6); 
lc169 char(6); lc170 char(6); lc171 char(6); lc172 char(6); 
lc173 char(6); lc174 char(6); lc175 char(6); lc176 char(6); 
lc177 char(6); lc178 char(6); lc179 char(6); lc180 char(6); 
lc181 char(6); lc182 char(6); lc183 char(6); lc184 char(6); 
lc185 char(6); lc186 char(6); lc187 char(6); lc188 char(6); 
lc189 char(6); lc190 char(6); lc191 char(6); lc192 char(6); 
lc193 char(6); lc194 char(6); lc195 char(6); lc196 char(6); 
lc197 char(6); lc198 char(6); lc199 char(6); lc200 char(6); 
lc201 char(6); lc202 char(6); lc203 char(6); lc204 char(6); 
lc205 char(6); lc206 char(6); lc207 char(6); lc208 char(6); 
lc209 char(6); lc210 char(6); lc211 char(6); lc212 char(6); 
lc213 char(6); lc214 char(6); lc215 char(6); lc216 char(6); 
lc217 char(6); lc218 char(6); lc219 char(6); lc220 char(6); 
lc221 char(6); lc222 char(6); lc223 char(6); lc224 char(6); 
lc225 char(6); lc226 char(6); lc227 char(6); lc228 char(6); 
lc229 char(6); lc230 char(6); lc231 char(6); lc232 char(6); 
lc233 char(6); lc234 char(6); lc235 char(6); lc236 char(6); 
lc237 char(6); lc238 char(6); lc239 char(6); lc240 char(6); 
lc241 char(6); lc242 char(6); lc243 char(6); lc244 char(6); 
lc245 char(6); lc246 char(6); lc247 char(6); lc248 char(6); 
lc249 char(6); lc250 char(6); lc251 char(6); lc252 char(6); 
lc253 char(6); lc254 char(6); lc255 char(6); lc256 char(6); 
lc257 char(6); lc258 char(6); lc259 char(6); lc260 char(6); 
lc261 char(6); lc262 char(6); lc263 char(6); lc264 char(6); 
lc265 char(6); lc266 char(6); lc267 char(6); lc268 char(6); 
lc269 char(6); lc270 char(6); lc271 char(6); lc272 char(6); 
lc273 char(6); lc274 char(6); lc275 char(6); lc276 char(6); 
lc277 char(6); lc278 char(6); lc279 char(6); lc280 char(6); 
lc281 char(6); lc282 char(6); lc283 char(6); lc284 char(6); 
lc285 char(6); lc286 char(6); lc287 char(6); lc288 char(6); 
lc289 char(6); lc290 char(6); lc291 char(6); lc292 char(6); 
lc293 char(6); lc294 char(6); lc295 char(6); lc296 char(6); 
lc297 char(6); lc298 char(6); lc299 char(6); lc300 char(6); 
lc301 char(6); lc302 char(6); lc303 char(6); lc304 char(6); 
lc305 char(6); lc306 char(6); lc307 char(6); lc308 char(6); 
lc309 char(6); lc310 char(6); lc311 char(6); lc312 char(6); 
lc313 char(6); lc314 char(6); lc315 char(6); lc316 char(6); 
lc317 char(6); lc318 char(6); lc319 char(6); lc320 char(6); 
lc321 char(6); lc322 char(6); lc323 char(6); lc324 char(6); 
lc325 char(6); lc326 char(6); lc327 char(6); lc328 char(6); 
lc329 char(6); lc330 char(6); lc331 char(6); lc332 char(6); 
lc333 char(6); lc334 char(6); lc335 char(6); lc336 char(6); 
lc337 char(6); lc338 char(6); lc339 char(6); lc340 char(6); 
lc341 char(6); lc342 char(6); lc343 char(6); lc344 char(6); 
lc345 char(6); lc346 char(6); lc347 char(6); lc348 char(6); 
lc349 char(6); lc350 char(6); lc351 char(6); lc352 char(6); 
lc353 char(6); lc354 char(6); lc355 char(6); lc356 char(6); 
lc357 char(6); lc358 char(6); lc359 char(6); lc360 char(6); 
lc361 char(6); lc362 char(6); lc363 char(6); lc364 char(6); 
lc365 char(6); lc366 char(6); lc367 char(6); lc368 char(6); 
lc369 char(6); lc370 char(6); lc371 char(6); lc372 char(6); 
lc373 char(6); lc374 char(6); lc375 char(6); lc376 char(6); 
lc377 char(6); lc378 char(6); lc379 char(6); lc380 char(6); 
lc381 char(6); lc382 char(6); lc383 char(6); lc384 char(6); 
lc385 char(6); lc386 char(6); lc387 char(6); lc388 char(6); 
lc389 char(6); lc390 char(6); lc391 char(6); lc392 char(6); 
lc393 char(6); lc394 char(6); lc395 char(6); lc396 char(6); 
lc397 char(6); lc398 char(6); lc399 char(6); lc400 char(6); 
lc401 char(6); lc402 char(6); lc403 char(6); lc404 char(6); 
lc405 char(6); lc406 char(6); lc407 char(6); lc408 char(6); 
lc409 char(6); lc410 char(6); lc411 char(6); lc412 char(6); 
lc413 char(6); lc414 char(6); lc415 char(6); lc416 char(6); 
lc417 char(6); lc418 char(6); lc419 char(6); lc420 char(6); 
lc421 char(6); lc422 char(6); lc423 char(6); lc424 char(6); 
lc425 char(6); lc426 char(6); lc427 char(6); lc428 char(6); 
lc429 char(6); lc430 char(6); lc431 char(6); lc432 char(6); 
lc433 char(6); lc434 char(6); lc435 char(6); lc436 char(6); 
lc437 char(6); lc438 char(6); lc439 char(6); lc440 char(6); 
lc441 char(6); lc442 char(6); lc443 char(6); lc444 char(6); 
lc445 char(6); lc446 char(6); lc447 char(6); lc448 char(6); 
lc449 char(6); lc450 char(6); lc451 char(6); lc452 char(6); 
lc453 char(6); lc454 char(6); lc455 char(6); lc456 char(6); 
lc457 char(6); lc458 char(6); lc459 char(6); lc460 char(6); 
lc461 char(6); lc462 char(6); lc463 char(6); lc464 char(6); 
lc465 char(6); lc466 char(6); lc467 char(6); lc468 char(6); 
lc469 char(6); lc470 char(6); lc471 char(6); lc472 char(6); 
lc473 char(6); lc474 char(6); lc475 char(6); lc476 char(6); 
lc477 char(6); lc478 char(6); lc479 char(6); lc480 char(6); 
lc481 char(6); lc482 char(6); lc483 char(6); lc484 char(6); 
lc485 char(6); lc486 char(6); lc487 char(6); lc488 char(6); 
lc489 char(6); lc490 char(6); lc491 char(6); lc492 char(6); 
lc493 char(6); lc494 char(6); lc495 char(6); lc496 char(6); 
lc497 char(6); lc498 char(6); lc499 char(6); lc500 char(6); 
lc501 char(6); lc502 char(6); lc503 char(6); lc504 char(6); 
lc505 char(6); lc506 char(6); lc507 char(6); lc508 char(6); 
lc509 char(6); lc510 char(6); lc511 char(6); lc512 char(6); 
lc513 char(6); lc514 char(6); lc515 char(6); lc516 char(6); 
lc517 char(6); lc518 char(6); lc519 char(6); lc520 char(6); 
lc521 char(6); lc522 char(6); lc523 char(6); lc524 char(6); 
lc525 char(6); lc526 char(6); lc527 char(6); lc528 char(6); 
lc529 char(6); lc530 char(6); lc531 char(6); lc532 char(6); 
lc533 char(6); lc534 char(6); lc535 char(6); lc536 char(6); 
lc537 char(6); lc538 char(6); lc539 char(6); lc540 char(6); 
lc541 char(6); lc542 char(6); lc543 char(6); lc544 char(6); 
lc545 char(6); lc546 char(6); lc547 char(6); lc548 char(6); 
lc549 char(6); lc550 char(6); lc551 char(6); lc552 char(6); 
lc553 char(6); lc554 char(6); lc555 char(6); lc556 char(6); 
lc557 char(6); lc558 char(6); lc559 char(6); lc560 char(6); 
lc561 char(6); lc562 char(6); lc563 char(6); lc564 char(6); 
lc565 char(6); lc566 char(6); lc567 char(6); lc568 char(6); 
lc569 char(6); lc570 char(6); lc571 char(6); lc572 char(6); 
lc573 char(6); lc574 char(6); lc575 char(6); lc576 char(6); 
lc577 char(6); lc578 char(6); lc579 char(6); lc580 char(6); 
lc581 char(6); lc582 char(6); lc583 char(6); lc584 char(6); 
lc585 char(6); lc586 char(6); lc587 char(6); lc588 char(6); 
lc589 char(6); lc590 char(6); lc591 char(6); lc592 char(6); 
lc593 char(6); lc594 char(6); lc595 char(6); lc596 char(6); 
lc597 char(6); lc598 char(6); lc599 char(6); lc600 char(6); 
lc601 char(6); lc602 char(6); lc603 char(6); lc604 char(6); 
lc605 char(6); lc606 char(6); lc607 char(6); lc608 char(6); 
lc609 char(6); lc610 char(6); lc611 char(6); lc612 char(6); 
lc613 char(6); lc614 char(6); lc615 char(6); lc616 char(6); 
lc617 char(6); lc618 char(6); lc619 char(6); lc620 char(6); 
lc621 char(6); lc622 char(6); lc623 char(6); lc624 char(6); 
lc625 char(6); lc626 char(6); lc627 char(6); lc628 char(6); 
lc629 char(6); lc630 char(6); lc631 char(6); lc632 char(6); 
lc633 char(6); lc634 char(6); lc635 char(6); lc636 char(6); 
lc637 char(6); lc638 char(6); lc639 char(6); lc640 char(6); 
lc641 char(6); lc642 char(6); lc643 char(6); lc644 char(6); 
lc645 char(6); lc646 char(6); lc647 char(6); lc648 char(6); 
lc649 char(6); lc650 char(6); lc651 char(6); lc652 char(6); 
lc653 char(6); lc654 char(6); lc655 char(6); lc656 char(6); 
lc657 char(6); lc658 char(6); lc659 char(6); lc660 char(6); 
lc661 char(6); lc662 char(6); lc663 char(6); lc664 char(6); 
lc665 char(6); lc666 char(6); lc667 char(6); lc668 char(6); 
lc669 char(6); lc670 char(6); lc671 char(6); lc672 char(6); 
lc673 char(6); lc674 char(6); lc675 char(6); lc676 char(6); 
lc677 char(6); lc678 char(6); lc679 char(6); lc680 char(6); 
lc681 char(6); lc682 char(6); lc683 char(6); lc684 char(6); 
lc685 char(6); lc686 char(6); lc687 char(6); lc688 char(6); 
lc689 char(6); lc690 char(6); lc691 char(6); lc692 char(6); 
lc693 char(6); lc694 char(6); lc695 char(6); lc696 char(6); 
lc697 char(6); lc698 char(6); lc699 char(6); lc700 char(6); 
lc701 char(6); lc702 char(6); lc703 char(6); lc704 char(6); 
lc705 char(6); lc706 char(6); lc707 char(6); lc708 char(6); 
lc709 char(6); lc710 char(6); lc711 char(6); lc712 char(6); 
lc713 char(6); lc714 char(6); lc715 char(6); lc716 char(6); 
lc717 char(6); lc718 char(6); lc719 char(6); lc720 char(6); 
lc721 char(6); lc722 char(6); lc723 char(6); lc724 char(6); 
lc725 char(6); lc726 char(6); lc727 char(6); lc728 char(6); 
lc729 char(6); lc730 char(6); lc731 char(6); lc732 char(6); 
lc733 char(6); lc734 char(6); lc735 char(6); lc736 char(6); 
lc737 char(6); lc738 char(6); lc739 char(6); lc740 char(6); 
lc741 char(6); lc742 char(6); lc743 char(6); lc744 char(6); 
lc745 char(6); lc746 char(6); lc747 char(6); lc748 char(6); 
lc749 char(6); lc750 char(6); lc751 char(6); lc752 char(6); 
lc753 char(6); lc754 char(6); lc755 char(6); lc756 char(6); 
lc757 char(6); lc758 char(6); lc759 char(6); lc760 char(6); 
lc761 char(6); lc762 char(6); lc763 char(6); lc764 char(6); 
lc765 char(6); lc766 char(6); lc767 char(6); lc768 char(6); 
lc769 char(6); lc770 char(6); lc771 char(6); lc772 char(6); 
lc773 char(6); lc774 char(6); lc775 char(6); lc776 char(6); 
lc777 char(6); lc778 char(6); lc779 char(6); lc780 char(6); 
lc781 char(6); lc782 char(6); lc783 char(6); lc784 char(6); 
lc785 char(6); lc786 char(6); lc787 char(6); lc788 char(6); 
lc789 char(6); lc790 char(6); lc791 char(6); lc792 char(6); 
lc793 char(6); lc794 char(6); lc795 char(6); lc796 char(6); 
lc797 char(6); lc798 char(6); lc799 char(6); lc800 char(6); 
lc801 char(6); lc802 char(6); lc803 char(6); lc804 char(6); 
lc805 char(6); lc806 char(6); lc807 char(6); lc808 char(6); 
lc809 char(6); lc810 char(6); lc811 char(6); lc812 char(6); 
lc813 char(6); lc814 char(6); lc815 char(6); lc816 char(6); 
lc817 char(6); lc818 char(6); lc819 char(6); lc820 char(6); 
lc821 char(6); lc822 char(6); lc823 char(6); lc824 char(6); 
lc825 char(6); lc826 char(6); lc827 char(6); lc828 char(6); 
lc829 char(6); lc830 char(6); lc831 char(6); lc832 char(6); 
lc833 char(6); lc834 char(6); lc835 char(6); lc836 char(6); 
lc837 char(6); lc838 char(6); lc839 char(6); lc840 char(6); 
lc841 char(6); lc842 char(6); lc843 char(6); lc844 char(6); 
lc845 char(6); lc846 char(6); lc847 char(6); lc848 char(6); 
lc849 char(6); lc850 char(6); lc851 char(6); lc852 char(6); 
lc853 char(6); lc854 char(6); lc855 char(6); lc856 char(6); 
lc857 char(6); lc858 char(6); lc859 char(6); lc860 char(6); 
lc861 char(6); lc862 char(6); lc863 char(6); lc864 char(6); 
lc865 char(6); lc866 char(6); lc867 char(6); lc868 char(6); 
lc869 char(6); lc870 char(6); lc871 char(6); lc872 char(6); 
lc873 char(6); lc874 char(6); lc875 char(6); lc876 char(6); 
lc877 char(6); lc878 char(6); lc879 char(6); lc880 char(6); 
lc881 char(6); lc882 char(6); lc883 char(6); lc884 char(6); 
lc885 char(6); lc886 char(6); lc887 char(6); lc888 char(6); 
lc889 char(6); lc890 char(6); lc891 char(6); lc892 char(6); 
lc893 char(6); lc894 char(6); lc895 char(6); lc896 char(6); 
lc897 char(6); lc898 char(6); lc899 char(6); lc900 char(6); 
lc901 char(6); lc902 char(6); lc903 char(6); lc904 char(6); 
lc905 char(6); lc906 char(6); lc907 char(6); lc908 char(6); 
lc909 char(6); lc910 char(6); lc911 char(6); lc912 char(6); 
lc913 char(6); lc914 char(6); lc915 char(6); lc916 char(6); 
lc917 char(6); lc918 char(6); lc919 char(6); lc920 char(6); 
lc921 char(6); lc922 char(6); lc923 char(6); lc924 char(6); 
lc925 char(6); lc926 char(6); lc927 char(6); lc928 char(6); 
lc929 char(6); lc930 char(6); lc931 char(6); lc932 char(6); 
lc933 char(6); lc934 char(6); lc935 char(6); lc936 char(6); 
lc937 char(6); lc938 char(6); lc939 char(6); lc940 char(6); 
lc941 char(6); lc942 char(6); lc943 char(6); lc944 char(6); 
lc945 char(6); lc946 char(6); lc947 char(6); lc948 char(6); 
lc949 char(6); lc950 char(6); lc951 char(6); lc952 char(6); 
lc953 char(6); lc954 char(6); lc955 char(6); lc956 char(6); 
lc957 char(6); lc958 char(6); lc959 char(6); lc960 char(6); 
lc961 char(6); lc962 char(6); lc963 char(6); lc964 char(6); 
lc965 char(6); lc966 char(6); lc967 char(6); lc968 char(6); 
lc969 char(6); lc970 char(6); lc971 char(6); lc972 char(6); 
lc973 char(6); lc974 char(6); lc975 char(6); lc976 char(6); 
lc977 char(6); lc978 char(6); lc979 char(6); lc980 char(6); 
lc981 char(6); lc982 char(6); lc983 char(6); lc984 char(6); 
lc985 char(6); lc986 char(6); lc987 char(6); lc988 char(6); 
lc989 char(6); lc990 char(6); lc991 char(6); lc992 char(6); 
lc993 char(6); lc994 char(6); lc995 char(6); lc996 char(6); 
lc997 char(6); lc998 char(6); lc999 char(6); lc1000 char(6); 
lc1001 char(6); lc1002 char(6); lc1003 char(6); lc1004 char(6); 
lc1005 char(6); lc1006 char(6); lc1007 char(6); lc1008 char(6); 
lc1009 char(6); lc1010 char(6); lc1011 char(6); lc1012 char(6); 
lc1013 char(6); lc1014 char(6); lc1015 char(6); lc1016 char(6); 
lc1017 char(6); lc1018 char(6); lc1019 char(6); lc1020 char(6); 
lc1021 char(6); 
set lc503 = 'abc';
) !
insert t1 values (1,'abc')!
rollback !
 * Testen von Rename 
   geht hinterher noch alles, stimmt die Ausgabe in sysdd.triggers ? 
   - Spalte unbenennen ? 
     Das sagenhafte ist, auch bei RENAME TABLE, daß der Stackcode
     anscheinend noch stimmt, er tut das richtige, der Trigger-
     Definitionstext aber nicht angepaßt wird/werden kann !
create trigger t1ins for t1 after insert execute (
  insert into kern.prot values ('INS', NULL, :NEW.S1, NULL, :NEW.S2);
  if $rc <> 0
  then
      stop ($rc);
) !
create trigger t1upd for t1 after update(s1) execute (
  insert into kern.prot values ('UPD', :OLD.S1, :NEW.S1, :OLD.S2, :NEW.S2);
) whenever s1 > 0 !
select * from sysdd.triggers !
fetch!
rename column t1.s1 to new_s1 !
select * from sysdd.triggers !
fetch !
insert t1 values (1, 'abc' )!
update t1 set new_s1 = -200 ignore trigger !
update t1 set new_s1 = -200 !
select * from prot !
fetch!
update t1 set new_s1 = 200 !
select * from prot !
fetch!
 * - Tabelle umbenennen !
rename table t1 to new_t1 !
select * from sysdd.triggers !
fetch!
insert new_t1 values (2, 'hij')!
select * from prot !
fetch!
 * SQLMODEs
   - kann man nur in INTERNAL definieren ?
   - kann man in anderen SQLMODEs arbeiten und trotzdem 
     den Trigger in INTERNAL ausführen, incl. Funktionen ? !
rollback release !
connect kern identified by test sqlmode sapr3 !
create trigger t1ins for t1 after insert execute (
  insert into kern.prot values ('INS', NULL, :NEW.S1, NULL, :NEW.S2);
) !
drop trigger t1ins of t1 !
commit release !
connect kern test !
 * - als Nebeneffekt hat uns hier der zu viele Wert, der zu allem
     Überfluß auch noch ein Parameter ist, ziemlich viele Nerven
     gekostet !
create trigger t1ins for t1 after insert execute (
  insert into kern.prot values ('INS', 
   index(:NEW.S2, 'b'), :NEW.S1, null, NULL, :NEW.S2);
) !
parsing!
insert into kern.prot values (:S2 || :lc1, NULL, :S1, NULL, 'abc')!
insert into kern.prot values ('INS', NULL, :S1, NULL, :S2 || :lc1)!
pars_execute !
create trigger t1ins for t1 after insert execute (
var lc1 char(6); lc2 char(6); lc3 char(6); lc4 char(6); 
  insert into kern.prot values ('INS', NULL, :S1, NULL, :S2 || :lc1); 
  if $rc <> 0 
  then
    stop($rc);
) !
rollback !
create trigger t1ins for t1 after insert execute (
var lc1 char(6); lc2 char(6); lc3 char(6); lc4 char(6); 
  insert into kern.prot values (:S2 || :lc1, NULL, :S1, NULL, 'abc'); 
  if $rc <> 0 
  then
    stop($rc);
) !
rollback !
create trigger t1ins for t1 after insert execute (
  insert into kern.prot values ('INS', 
   index(:NEW.S2, 'b'), :NEW.S1, NULL, :NEW.S2);
) !
create trigger t1upd for t1 after update execute (
  update kern.prot set action = 'UPD', old_s1 = index(:OLD.S2, 'b'),
        new_s1 = :NEW.S1, old_s2 = :OLD.S2, new_s2 = :NEW.S2
        where new_s1 = :OLD.s1 ignore trigger;
        ) !
commit release !
connect kern identified by test sqlmode sapr3 !
insert into t1 values (1, 'abc')!
insert into t1 values (2, 'def')!
select * from prot !
fetch into :a, :b, :c, :d, :e !
update t1 set s2 = 'new' !
select * from prot !
fetch into :a, :b, :c, :d, :e !
rollback release !
connect kern test !
drop trigger t1ins of t1 !
drop trigger t1upd of t1 !
commit !
 * kann man mit privaten/fremden Tabellen durcheinanderkommen ?!
 * Man sollte die Triggerdefinition zu voll spezifizierten Tabellen
   zwingen !
create trigger t1ins for t1 after insert execute (
  insert into prot values ('INS', NULL, :NEW.S1, NULL, :NEW.S2);
) !
create trigger t1ins for t1 after insert execute (
  insert into kern.prot values ('INS', NULL, :NEW.S1, NULL, :NEW.S2);
) !
grant select on prot to elke !
grant insert on t1 to elke !
commit release !
connect elke elke !
insert kern.t1 values (1, 'abc')!
select * from kern.prot !
fetch!
create table prot (action char(3), old_s1 fixed(20,2),
   new_s1 fixed(20,2), old_s2 char(20), new_s2 char(20)) !
insert kern.t1 values (2, 'abc')!
select * from kern.prot !
fetch!
select * from prot !
fetch!
commit !
 * kann ein fremder Benutzer einen Trigger definieren ? !
create trigger t1upd for kern.t1 after update(s1) execute (
  insert into kern.prot values ('UPD', :OLD.S1, :NEW.S1, :OLD.S2, :NEW.S2);
) WHENEVER OLD.s1 + 10 < NEW.s1 !
commit release !
connect kern test !
grant all on t1 to elke !
commit release !
connect elke elke !
 * offensichtlich kann kein fremder Benutzer einen Trigger definieren !
create trigger t1upd for kern.t1 after update(s1) execute (
  insert into kern.prot values ('UPD', :OLD.S1, :NEW.S1, :OLD.S2, :NEW.S2);
) WHENEVER OLD.s1 + 10 < NEW.s1 !
drop table prot !
commit release !
connect kern test !
drop trigger t1ins of t1 !
delete t1 !
delete prot !
delete prot1 !
commit !
 * kann man Trigger auf Views definieren ? !
 * Trigger sollten auch ausgeführt werden, wenn man Views angibt,
   deren Basistabelle einen Trigger hat, gleichgültig, wann die
   View im Verhältnis zur Triggerdefinition definiert wurde !
create view v1 as select * from t1 !
create trigger t1ins for v1 after insert execute (
  insert into kern.prot values ('INS', NULL, :NEW.S1, NULL, :NEW.S2);
) !
create trigger t1ins for t1 after insert execute (
  insert into kern.prot values ('INS', NULL, :NEW.S1, NULL, :NEW.S2);
) !
create view v2 as select * from t1 !
 * aber der Trigger wird ausgeführt, auch wenn DML auf View
   gemacht wird ? !
insert v1 values (1, 'abc')!
insert t1 values (2, 'def')!
insert v2 values (3, 'ghi')!
select * from prot!
fetch!
rollback !
 * eigentlich wären hier noch Tests auf updatebaren Joinviews fällig,
   aber das mag ich nicht mehr ... !
 * wie verhalten sich Synonyme ?
   - sind Trigger dafür definierbar ? !
create synonym s1 for t1 !
create trigger t1ins for s1 after insert execute (
  insert into kern.prot values ('INS', NULL, :NEW.S1, NULL, :NEW.S2);
) !
create synonym s2 for t1 !
insert s1 values (1, 'abc')!
insert t1 values (2, 'def')!
insert s2 values (3, 'ghi')!
select * from prot!
fetch!
rollback !
 * - und was passiert bei Synonymen im Triggercode ? !
create synonym p1 for prot !
create trigger t1ins for t1 after insert execute (
  insert into p1 values ('INS', NULL, :NEW.S1, NULL, :NEW.S2);
) !
create trigger t1ins for t1 after insert execute (
  insert into kern.p1 values ('INS', NULL, :NEW.S1, NULL, :NEW.S2);
) !
grant insert on t1 to elke !
grant select on prot to elke !
commit release !
connect elke elke !
insert kern.t1 values (1, 'wer')!
select * from kern.prot !
fetch!
commit release !
connect kern test !
drop synonym p1 !
drop trigger t1ins of t1 !
commit !
 * macht uns das getrennte Parsen und Executen eines CREATE TRIGGER
   Schwierigkeiten ?!
create trigger t1ins for t1 after insert execute (
  insert into kern.prot values ('INS', NULL, :NEW.S1, NULL, :NEW.S2);
) !
rollback !
pars_then_ex !
create trigger t1ins for t1 after insert execute (
  insert into kern.prot values ('INS', NULL, :NEW.S1, NULL, :NEW.S2);
) !
pars_execute !
insert kern.t1 values (1, 'wer')!
select * from kern.prot !
fetch!
rollback !
drop table t1 !
drop table prot !
drop table prot1 !
commit !
*             ========================== !
create table prot (action char(3), old_s1 fixed(20,2),
   new_s1 fixed(20,2), old_s2 char(20), new_s2 char(20)) !
create table prot1 (action char(3), new_s1 fixed(20, 4),
   old_s1 fixed(20,4), new_s2 char(20), old_s2 char(20), ts timestamp) !
create table t1 (s1 fixed(20,3), s2 char(10)) !
create trigger t1ins for t1 after insert execute (
  insert into kern.prot values ('INS', NULL, :S1, NULL, :S2);
  if $rc <> 0 
  then
    stop($rc, $errmsg);
) !
create trigger t1upd for t1 after update execute (
  insert into kern.prot values ('UPD', :OLD.S1, :NEW.S1, :OLD.S2, :NEW.S2); 
  if $rc <> 0 
  then
    stop($rc, $errmsg);
) !
create trigger t1del for t1 after delete execute (
  insert into kern.prot values ('DEL', :S1, NULL, :S2, NULL); 
  if $rc <> 0
  then
    stop($rc, $errmsg);
) !
create trigger t1prot for prot after insert execute (
  insert into kern.prot1 values (:action, :old_s1, :new_s1, 
  :old_s2, :new_s2, timestamp); 
  if $rc <> 0
  then
    stop($rc, $errmsg);
) !
insert t1 values (1000000000.118, 'abc') !
insert t1 values (10000000000000000.000, 'xyz') !
update t1 set s1 = s1 + 1 !
delete t1 !
select * from prot !
fetch !
select * from prot1 !
fetch !
create table IfThenElseTest (val integer) !
create table greater1000 (val integer, check val > 1000) !
create table greater10000 (val integer, check val > 10000) !
create table between76and100 (val integer, check val >= 76 and val <= 100) !
create table between51and75 (val integer, check val >= 51 and val <= 75) !
create table between26and50 (val integer, check val >= 26 and val <= 50) !
create table between1and25 (val integer, check val >= 1 and val <= 25) !
errormsg long !
create trigger Ins for IfThenElseTest after insert execute (
  if val > 100
  then
    begin
    if val > 1000
    then
      insert kern.greater1000 values (:val);
    if val > 10000
    then
      insert kern.greater10000 values(:val);
    end
  else
    if val > 50
    then
      if val > 75 
      then
        insert kern.between76and100 values(:val)
      else
        insert kern.between51and75 values(:val) 
    else
      if val > 25
      then
        insert kern.between26and50 values(:val)
      else
        insert kern.between1and25 values(:val);
  if $rc <> 0
  then
    stop ($rc);
) !
insert IfThenElseTest values (10) !
insert IfThenElseTest values (40) ! 
insert IfThenElseTest values (60) !
insert IfThenElseTest values (80) !
insert IfThenElseTest values (100) !
insert IfThenElseTest values (2000) !
insert IfThenElseTest values (20000) !
select * from greater1000 !
fetch !
select * from greater10000 !
fetch !
select * from between76and100 !
fetch !
select * from between51and75 !
fetch !
select * from between26and50 !
fetch !
select * from between1and25 !
fetch !
drop table t1 !
create table t1 (s1 int, s2 int) !
create trigger t1ins for t1 after insert execute (
  stop(-1, 'Insert not allowed');
) !
insert t1 values (1,2) !
select * from t1 !
rollback work !
* PTS 1130202, 1132211-2 !
create table t1 (s1 int, s2 int) !
create table prot1 ( k1 char (3), k2 int, primary key (k1, k2))!
create trigger t1ins for t1 after insert execute (
  insert into kern.prot1 values ('INS',:S1);
  insert into kern.prot1 values ('INS',:S1);
  if $rc <> 0
  then
      stop (-1000, 'duplicate');
) !
parsing !
insert t1 values (:a, :b)!
executing !
data !
insert !
1
n 10 0 n 10 0

parsing !
minsert t1 values (:a, :b)!
executing !
data !
minsert !
32767
2
1
n 10 1 n 10 0
n 10 2 n 10 0

pars_execute !
nodata !
rollback work release !
* PTS 1111445 !
script !
file connect ( kern test !
noscript !
CREATE TABLE category (
   category_id smallint DEFAULT SERIAL primary key, 
   parent_id smallint,
   parent_categories varchar(1000),
   category_order smallint,
   category_name varchar(100) NOT NULL,
   description varchar(255),
   dateadded integer,
   categories smallint DEFAULT 0,
   FOREIGN KEY (parent_id) REFERENCES category(category_id) ON DELETE
CASCADE
)!
CREATE TRIGGER delete_category FOR category AFTER DELETE EXECUTE (

UPDATE kern.category SET categories = categories -1 WHERE category_id =
:OLD.parent_id;
)!
INSERT INTO CATEGORY
 (PARENT_ID, CATEGORIES, CATEGORY_NAME)
 VALUES
 ( null,     2,          'Master')!
INSERT INTO CATEGORY
 (PARENT_ID, CATEGORIES, CATEGORY_NAME)
 VALUES
 ( 1,        2,          'detail 1')!
INSERT INTO CATEGORY
 (PARENT_ID, CATEGORIES, CATEGORY_NAME)
 VALUES
 ( 1,        2,          'detail 2')!
INSERT INTO CATEGORY
 (PARENT_ID, CATEGORIES, CATEGORY_NAME)
 VALUES
 ( 2,        1,          'subdetail 1.1')!
INSERT INTO CATEGORY
 (PARENT_ID, CATEGORIES, CATEGORY_NAME)
 VALUES
 ( 2,        0,          'subdetail 1.2')!
INSERT INTO CATEGORY
 (PARENT_ID, CATEGORIES, CATEGORY_NAME)
 VALUES
 ( 3,        0,          'subdetail 2.1')!
INSERT INTO CATEGORY
 (PARENT_ID, CATEGORIES, CATEGORY_NAME)
 VALUES
 ( 3,        0,          'subdetail 2.2')!
INSERT INTO CATEGORY
 (PARENT_ID, CATEGORIES, CATEGORY_NAME)
 VALUES
 ( 4,        0,          'subsub 1.1.1')!
INSERT INTO CATEGORY
 (PARENT_ID, CATEGORIES, CATEGORY_NAME)
 VALUES
 ( 5,        0,          'subsub 1.2.1')!
 select category_id, PARENT_ID, CATEGORIES, 
      substr(CATEGORY_NAME, 1, 20)name
  from category !
 fetch !
delete category where category_name = 'detail 1'!
 select category_id, PARENT_ID, CATEGORIES, 
      substr(CATEGORY_NAME, 1, 20)name
  from category !
 fetch !
 drop table category !
 commit release !
*==========================================================!
 * check if way around will work !
*==========================================================!
script !
file connect ( kern test !
noscript !
CREATE TABLE category (
   category_id smallint DEFAULT SERIAL primary key, 
   parent_id smallint,
   parent_categories varchar(1000),
   category_order smallint,
   category_name varchar(100) NOT NULL,
   description varchar(255),
   dateadded integer,
   categories smallint DEFAULT 0
)!
CREATE TRIGGER delete_category FOR category AFTER DELETE EXECUTE (
var PAR_ID smallint;
set PAR_ID = OLD.parent_id;
delete kern.category where parent_id = :OLD.category_id;
UPDATE kern.category SET categories = categories -1 
WHERE category_id = :PAR_ID;
)!
CREATE TRIGGER delete_category FOR category AFTER DELETE EXECUTE (
var PAR_ID smallint;
set PAR_ID = parent_id;
delete kern.category where parent_id = :OLD.category_id;
UPDATE kern.category SET categories = categories -1 
WHERE category_id = :PAR_ID;
)!
INSERT INTO CATEGORY
 (PARENT_ID, CATEGORIES, CATEGORY_NAME)
 VALUES
 ( null,     2,          'Master')!
INSERT INTO CATEGORY
 (PARENT_ID, CATEGORIES, CATEGORY_NAME)
 VALUES
 ( 1,        2,          'detail 1')!
INSERT INTO CATEGORY
 (PARENT_ID, CATEGORIES, CATEGORY_NAME)
 VALUES
 ( 1,        2,          'detail 2')!
INSERT INTO CATEGORY
 (PARENT_ID, CATEGORIES, CATEGORY_NAME)
 VALUES
 ( 2,        1,          'subdetail 1.1')!
INSERT INTO CATEGORY
 (PARENT_ID, CATEGORIES, CATEGORY_NAME)
 VALUES
 ( 2,        0,          'subdetail 1.2')!
INSERT INTO CATEGORY
 (PARENT_ID, CATEGORIES, CATEGORY_NAME)
 VALUES
 ( 3,        0,          'subdetail 2.1')!
INSERT INTO CATEGORY
 (PARENT_ID, CATEGORIES, CATEGORY_NAME)
 VALUES
 ( 3,        0,          'subdetail 2.2')!
INSERT INTO CATEGORY
 (PARENT_ID, CATEGORIES, CATEGORY_NAME)
 VALUES
 ( 4,        0,          'subsub 1.1.1')!
INSERT INTO CATEGORY
 (PARENT_ID, CATEGORIES, CATEGORY_NAME)
 VALUES
 ( 5,        0,          'subsub 1.2.1')!
 select category_id, PARENT_ID, CATEGORIES, 
      substr(CATEGORY_NAME, 1, 20)name
  from category !
 fetch !
 * by now categories of
 * master will not be decreased, because only the recursive
 * delete down to the first leave (row 8) works correctly.
 * the backtracking is 'murks' !
delete category where category_name = 'detail 1'!
 select category_id, PARENT_ID, CATEGORIES, 
      substr(CATEGORY_NAME, 1, 20)name
  from category !
 fetch !
 drop table category !
 commit release !
*==========================================================!
 * check if way around will work !
 * try it the other way round (update first, then recursive delete!
*==========================================================!
script !
file connect ( kern test !
noscript !
CREATE TABLE category (
   category_id smallint DEFAULT SERIAL primary key, 
   parent_id smallint,
   parent_categories varchar(1000),
   category_order smallint,
   category_name varchar(100) NOT NULL,
   description varchar(255),
   dateadded integer,
   categories smallint DEFAULT 0
)!
CREATE TRIGGER delete_category FOR category AFTER DELETE EXECUTE (
var CAT_ID smallint;
set CAT_ID = category_id;
UPDATE kern.category SET categories = categories -1 
WHERE category_id = :OLD.parent_id;
delete kern.category where parent_id = :CAT_ID;
)!
INSERT INTO CATEGORY
 (PARENT_ID, CATEGORIES, CATEGORY_NAME)
 VALUES
 ( null,     2,          'Master')!
INSERT INTO CATEGORY
 (PARENT_ID, CATEGORIES, CATEGORY_NAME)
 VALUES
 ( 1,        2,          'detail 1')!
INSERT INTO CATEGORY
 (PARENT_ID, CATEGORIES, CATEGORY_NAME)
 VALUES
 ( 1,        2,          'detail 2')!
INSERT INTO CATEGORY
 (PARENT_ID, CATEGORIES, CATEGORY_NAME)
 VALUES
 ( 2,        1,          'subdetail 1.1')!
INSERT INTO CATEGORY
 (PARENT_ID, CATEGORIES, CATEGORY_NAME)
 VALUES
 ( 2,        0,          'subdetail 1.2')!
INSERT INTO CATEGORY
 (PARENT_ID, CATEGORIES, CATEGORY_NAME)
 VALUES
 ( 3,        0,          'subdetail 2.1')!
INSERT INTO CATEGORY
 (PARENT_ID, CATEGORIES, CATEGORY_NAME)
 VALUES
 ( 3,        0,          'subdetail 2.2')!
INSERT INTO CATEGORY
 (PARENT_ID, CATEGORIES, CATEGORY_NAME)
 VALUES
 ( 4,        0,          'subsub 1.1.1')!
INSERT INTO CATEGORY
 (PARENT_ID, CATEGORIES, CATEGORY_NAME)
 VALUES
 ( 5,        0,          'subsub 1.2.1')!
 select category_id, PARENT_ID, CATEGORIES, 
      substr(CATEGORY_NAME, 1, 20)name
  from category !
 fetch !
delete category where category_name = 'detail 1'!
 select category_id, PARENT_ID, CATEGORIES, 
      substr(CATEGORY_NAME, 1, 20)name
  from category !
 fetch !
 drop table category !
 commit release !
* PTS 1113100 !
script !
file connect ( kern test !
noscript !
create table a (oid int, sid int, 
    constraint apk  primary key (oid,sid),va int)!
create table b (oid int, sid int, 
    constraint bpk primary key (oid,sid),vb int)!
create view c (oid,sid,a,b) as 
    select a.oid, a.sid, a.va, b.vb 
      from a,b 
     where a.oid = b.oid and a.sid = b.sid!
pars_then_ex !
create dbproc ab(in oid int, in sid int, in va int,in vb int) as 
insert into kern.a (oid, va) values (:oid, :sid, :va); 
insert into kern.b (oid, vb) values (:oid, :sid, :vb);
!
create dbproc ab(in oid int, in sid int, in va int,in vb int) as 
insert into kern.a (oid, sid, va) values (:oid, :sid, :va); 
insert into kern.b (oid, sid, vb) values (:oid, :sid, :vb);
!
pars_execute!
select * from domain.dbprocedures !
fetch !
select * from domain.dbprocparams !
fetch !
rollback release!
script !
* PTS 1113594-6 !
file connect ( kern test !
CREATE TABLE Tabelle1 (
    pk          SERIAL PRIMARY KEY,
    daten1        varchar(300),
    daten2        varchar(300)
)!
noscript !
CREATE TRIGGER update_trigger FOR tabelle1
AFTER UPDATE EXECUTE
BEGINPROC
      IF OLD.daten1 = NEW.daten1 THEN
      BEGIN
            STOP( -505, 'TRIGGER FAILED!' );
      END;
ENDPROC !
script !
insert into tabelle1 ( daten1, daten2 ) values ('TESTDATEN1', 'TESTDATEN2' )!
insert into tabelle1 (pk, daten1, daten2 ) 
   values (0, 'TESTDATEN1', 'TESTDATEN2' )!
select * from tabelle1 !
fetch!
update tabelle1 set daten1='TESTDATEN2', daten2='TEST' WHERE pk=2 !
select * from tabelle1 !
fetch!
rollback release !
* PTS 1116177 !
file connect ( kern test !
create table t_date_time (d1 date, t1 time, ts1 timestamp,
                          d2 date, t2 time, ts2 timestamp) !
create table t_date_time_prot like t_date_time !
create trigger ins_prot for t_date_time after insert execute
(
  insert kern.t_date_time_prot values (:d1,:t1,:ts1,:d2,:t2,:ts2);
  if $rc <> 0
  then
    stop ($rc, 'unexpected error');
) !
set format eur !
insert t_date_time values (date, time, timestamp, date, time, timestamp) !
select d1, t1, date(ts1), time(ts1), d2, t2, date(ts2), time(ts2) 
from t_date_time_prot !
fetch !
rollback release !
file connect ( sut sut !
drop user elke !
commit release !
* PTS 1114828-830!
file connect ( sut sut !
create user mthomas password test dba !
commit release !
file connect ( mthomas test !
create domain mthomas.status_domain varchar(12) 
  default 'OPEN' CONSTRAINT status_domain in 
('OPEN', 'ON HOLD', 'DEFERRED', 'COMPLETED', 'CANCELLED')!

create domain mthomas.priority_domain varchar(12) 
default 'NORMAL' CONSTRAINT priority_domain in
('LOW', 'NORMAL', 'HIGH', 'URGENT', 'DEADLINE')!

create domain mthomas.category_domain varchar(24) 
 CONSTRAINT category_domain in
('TRUESCRIPT', 'SECURITY', 'DATABASE', 
'PROGRAMMING', 'SYSTEMS', 'SUPPORT', 'RESEARCH')!

create table tasklist (
"ID" integer default serial primary key,
title varchar(32),
description varchar(255),
category mthomas.category_domain,
creation_dt date default date,
resolve_dt date, 
deadline_dt date, 
priority mthomas.priority_domain,
initiator varchar(32) default user,
status mthomas.status_domain
)!
noscript !
create trigger tr_tasklist_status_upd 
for mthomas.tasklist AFTER update execute (
  VAR today_date date;
  TRY
      CREATE table temp.dateworkaround(tempval integer, 
      today date default date);
      INSERT INTO temp.dateworkaround(tempval) values (1);
      SELECT today from temp.dateworkaround;
      FETCH INTO :today_date;
    IF NEW.status = 'COMPLETED' OR NEW.status = 'CANCELLED'
    THEN
      SET creation_dt = today_date;
  CATCH
    STOP ($rc, 'Failed to update status date');
)
!
script !
rollback release !
file connect ( sut sut !
drop user mthomas !
commit release !
* PTS 1116632-4 !
file connect ( kern test !
create table x ( a fixed (10))!
create table y ( a fixed (10), b fixed (10))!
create table t ( a char (8) key , b fixed (8))!
insert into t values ('aaa', 1)!
insert into t values ('bbb', 2)!
insert into t values ('ccc', 3)!

CREATE TRIGGER update_t FOR t AFTER update EXECUTE (
insert into kern.y values (:old.b, :new.b);
)!

CREATE TRIGGER delete_t FOR t AFTER delete EXECUTE (
insert into kern.x values (:old.b);
)!

update t set b = 4711 where a = 'aaa'!
commit release !
file connect ( kern test sqlmode oracle !
update t set b = 4711 where a = 'bbb'!

alter table t modify (b number (10))!

update t set b = 4711 where a = 'ccc'!
select * from x !
fetch into :a !
select * from y !
fetch into :a, :b!
delete t where a = 'aaa'!
drop table t !
drop table x !
drop table y !
commit release !
* PTS 1117426-7 !
file connect (sut sut!
create user dba password dba dba !
commit release !
connect dba dba !
create table dba.ClStartBereich ( clSBID_pk int primary key, 
                                  clSBBeschreibung char (20), 
                                  clSBVorraussetzung char (20) ) !
create sequence countCLSB!

create table DBA.CLSTARTELEMENT ( CLSEID_PK int primary key,
      CLSECLSBID_FK int references dba.ClStartBereich,
      CLSETEXT      char (25))!
create sequence COUNTCLSE !

create table DBA.CLSTARTELEMENTFRAGE ( 
       CLSEFID_FK int references DBA.CLSTARTELEMENT,
       CLSEFTEXT  char (25),
       CLSEFIO int, CLSEFNIO int)     !

CREATE DBPROC SP_CREATESTARTELEMENTFRAGE
    ( IN CLSTARTELEMENTID_PK FIXED ( 4 ) ) AS
     VAR         ID_FK FIXED( 4 );
             SET ID_FK = CLSTARTELEMENTID_PK;
         INSERT INTO DBA.CLSTARTELEMENTFRAGE ( CLSEFID_FK, CLSEFTEXT, 
                                               CLSEFIO, CLSEFNIO)     
         VALUES (:ID_FK,'Wird Cip gestartet?', 0, 0);      
!

CREATE DBPROC SP_CREATESTARTELEMENT( IN BEREICHID FIXED (4),
                         OUT CLSTARTELEMENTID_PK FIXED( 4 ) ) AS
VAR         ELEMENTID FIXED( 4 );
        SET ELEMENTID = COUNTCLSE.NEXTVAL;       
        INSERT INTO DBA.CLSTARTELEMENT ( CLSEID_PK,
                                         CLSECLSBID_FK,
                                         CLSETEXT )
              VALUES( :ELEMENTID, :BEREICHID,'CIP starten');
              SET CLSTARTELEMENTID_PK = ELEMENTID;
              CALL SP_CREATESTARTELEMENTFRAGE(:CLSTARTELEMENTID_PK);  
!

CREATE DBPROC sp_CreateStartBereich ( OUT clStartBereichID_pk FIXED( 4 ) ) 
AS 
    VAR 
        BereichID FIXED( 4 ); 
    
    SET BereichID = countCLSB.nextval; 
    
    INSERT INTO dba.ClStartBereich ( clSBID_pk, 
                                     clSBBeschreibung, 
                                     clSBVorraussetzung ) 
               VALUES ( :BereichID, 'Beschreibung', 'Voraussetzung' ); 
          
     SET clStartBereichID_pk = BereichID; 
     CALL SP_CREATESTARTELEMENT(:clStartBereichID_pk,?);
!
rollback release !
* PTS 1121143-5 !
file connect ( kern test !
CREATE TABLE "TBL_TEST"
(
 ID  Fixed (10,0)  DEFAULT  SERIAL (1),
 NAME  Char (30) ASCII,
 COUNTER smallint  default 0,
 PRIMARY KEY ("ID"),
 UNIQUE (NAME, COUNTER) 
) !
INSERT INTO "TBL_TEST" (NAME, COUNTER) VALUES ('Name', 1)!
INSERT INTO "TBL_TEST" (NAME, COUNTER) VALUES ('Name', 2)!
INSERT INTO "TBL_TEST" (NAME, COUNTER) VALUES ('blabla', 1)!
CREATE TRIGGER trig_tbl_Test 
FOR "TBL_TEST" 
AFTER INSERT 
EXECUTE 
(
 VAR iCounter INT;
 
 SELECT COUNT(Name) 
 INTO :iCounter 
 FROM KERN."TBL_TEST" 
 WHERE :NEW.NAME = NAME;
 
 UPDATE KERN."TBL_TEST" 
 SET COUNTER = :iCounter
 WHERE :NEW.NAME = NAME 
  AND :NEW.COUNTER = COUNTER;
 )!

INSERT INTO "TBL_TEST" (NAME) VALUES ('Name')!
select * from "TBL_TEST" !
fetch!
rollback release !
* PTS 1119981-3 !
file connect ( sut sut !
* with union !
noscript !
CREATE DBPROC P_TEST
 RETURNS CURSOR AS
$CURSOR = 'GETCOUNTRIES';
TRY
    DECLARE :$CURSOR CURSOR FOR 
    SELECT 1
    FROM  sysdba.dual
    UNION
    SELECT 2
    FROM  sysdba.dual;
 RETURN;
 CATCH
     IF $RC = 100 THEN CONTINUE EXECUTE; 
     STOP ($RC, $ERRMSG); 
!
pars_then_ex !
call p_test !
fetch GETCOUNTRIES !
* with recursive select !
pars_execute !
create table t ( w char (3),
x char (8) ,
y fixed (12))!
insert t values ('aaa', 'bbb', 12)!
insert t values ('aaa', 'ccc', 13)!
insert t values ('b  ', 'ccc', 83)!
insert t values ('bbb', 'ddd', 124)!
insert t values ('bbb', 'eee', 125)!
insert t values ('ccc', 'eee', 135)!
insert t values ('eee', 'fff', 12561356)!
create table tt ( a char (1))!
insert tt set a = 'b'!
declare c cursor for 
  with recursive px (minor) as
  (select x from t where w = 'aaa'
   union all
   select x from t, px
       where minor = t.w
  )
select minor
from px !
fetch c!
CREATE DBPROC P_TEST_RECURS
 RETURNS CURSOR AS
$CURSOR = 'GETRECURS';
TRY
  DECLARE :$CURSOR CURSOR FOR 
  with recursive px (minor) as
  (select x from sut.t where w = 'aaa'
   union all
   select x from sut.t, sut.px
       where minor = t.w
  )
select minor, rowno
from sut.px ;
 RETURN;
 CATCH
     IF $RC = 100 THEN CONTINUE EXECUTE; 
     STOP ($RC, $ERRMSG); 
!
pars_then_ex !
call p_test_recurs !
fetch getrecurs !
pars_execute !
drop table t !
* with correlation !
CREATE TABLE TEST1 ( A FIXED (4), B FIXED (4))!
INSERT TEST1 VALUES (1, NULL) !
INSERT TEST1 VALUES (2, NULL) !
INSERT TEST1 VALUES (3, NULL) !
INSERT TEST1 VALUES (4, NULL) !
INSERT TEST1 VALUES (5, 5) !
INSERT TEST1 VALUES (6, 6) !
INSERT TEST1 VALUES (7, 7) !
INSERT TEST1 VALUES (8, 8) !
CREATE TABLE TEST2 ( A FIXED (5), B FIXED (5))!
INSERT TEST2 VALUES (5, 5)!
INSERT TEST2 VALUES (5, 6)!
SELECT * FROM TEST1 !
FETCH !
SELECT * FROM TEST2 !
FETCH !
SELECT A, B FROM TEST1 WHERE NOT EXISTS
    (SELECT A, B FROM TEST2 WHERE TEST1.B = TEST2.B)
                           OR B IS NULL !
fetch !
CREATE DBPROC P_TEST_CORR
 RETURNS CURSOR AS
$CURSOR = 'GETCORR';
TRY
  DECLARE :$CURSOR CURSOR FOR 
  SELECT A, B FROM sut.TEST1 WHERE NOT EXISTS
    (SELECT A, B FROM sut.TEST2 WHERE TEST1.B = TEST2.B)
                           OR B IS NULL;
 RETURN;
 CATCH
     IF $RC = 100 THEN CONTINUE EXECUTE; 
     STOP ($RC, $ERRMSG); 
!
pars_then_ex !
call p_test_corr !
fetch getcorr !
pars_execute !
script !
rollback release !
* PTS 1122740-2!
file connect ( kern test !

create table n_stellen (
Stellen_nr integer,
Vze_zuw float(38),
Vze_anspruch float(38),
Akt_datum date,
Deckring_sl smallint,
Schulamt_nr integer)!
insert n_stellen values (1, 1, 1, '20020101',1,3)!

create table n_deckring (
Deckring_nr smallint,
Deckring_sl smallint,
Verguet_sl smallint,
Ueberlauf boolean)!
insert n_deckring values (1,1,6,false)!

parsing!

update n_Stellen 
set vze_anspruch=vze_anspruch+:vze 
where deckring_sl in 
  (select deckring_sl 
   from n_deckring 
   where verguet_sl=:c_verguet and not ueberlauf)
AND akt_datum>=:c_beg and akt_datum<=:c_end
AND SCHULAMT_NR=:SANR !

executing!
data!

update !
1
f 38 2.9285714285479964285714286000000000000E-02
n 5  6 
c 10 '20020101' 
c 10 '20020801' 
n 10 3 
    
pars_execute!
nodata !
CREATE DBPROC test1 AS
VAR 
vze float(38);

set vze = 2.9285714285479964285714286000000000000E-02;

update kern.n_Stellen 
set vze_anspruch=vze_anspruch+:vze;
!

call test1!

rollback work release!
* PTS 1128123/4!
file connect ( kern test!
noscript !
create function FUNC_IDSOCIETE
 (in1 integer, in2 integer) returns integer as
return in1 + in2;
!
create function FUNC_IDSOCIETE1
 (in1 integer) returns integer as
return in1 + in1;
!
script !
create table t ( a integer, b integer)!
INSERT INTO t
VALUES
((SELECT FUNC_IDSOCIETE (1, 2) FROM DUAL), 3)!
INSERT INTO t
VALUES
((SELECT FUNC_IDSOCIETE (1) FROM DUAL), 5)!
INSERT INTO t
VALUES
((SELECT FUNC_IDSOCIETE1 (1) FROM DUAL), 7)!
SELECT FUNC_IDSOCIETE (1, 2) FROM DUAL!
fetch!
select * from t!
fetch!
rollback release !
* PTS 1130224-5 !
file connect ( kern test sqlmode oracle!
noscript !
CREATE FUNCTION TO_CHAR2(VAL FLOAT) RETURNS VARCHAR AS
BEGIN
    RETURN TO_CHAR(FLOOR(VAL));
END; !
script !
create table REGISTRY_TREE ( k_key char (5))!
insert into REGISTRY_TREE values ('1')!
insert into REGISTRY_TREE values ('4711')!
insert into REGISTRY_TREE values ('23')!
insert into REGISTRY_TREE values ('894')!
insert into REGISTRY_TREE values ('3')!
commit release !
file connect ( kern test sqlmode oracle!
SELECT kern.TO_CHAR2(Max(TO_NUMBER(K_KEY) +1)) pluto FROM REGISTRY_TREE!
fetch into :a !
commit release !
file connect ( kern test !
SELECT kern.TO_CHAR2(Max(TO_NUMBER(K_KEY) +1)) pluto FROM REGISTRY_TREE!
drop function to_char2 !
drop table REGISTRY_TREE !

noscript !
create table trigprot ( i int key, ts timestamp, action char)!
create table t (i int key, l long) !
create trigger trig_i for t after insert execute (
  insert kern.trigprot values (:i, timestamp, 'i');
) !
create trigger trig_u for t after update execute (
  update kern.trigprot 
  set action = 'u', ts = timestamp
  where i = :i;
) !
script !
parsing !

insert t values (:i, :l)!

executing !
data!

insert !
1
n 10 1
l 15000,0 'x'  

putval !
1
l 15000,0 'x'

putval !
1
l 15000,2 'x'
 
putval !
1
l 1,5 'y'
 

insert !
1
n 10 2
l 15000,0 'a'  

putval !
1
l 15000,0 'a'

putval !
1
l 15000,2 'a'
 
putval !
1
l 1,5 'b'
 

nodata!
pars_execute!

select *, length(l) from t!
fetch !

select * from trigprot!
fetch !

parsing !

update t set l = :l!

executing !
data!

update !
1
l 15000,0 'y'  

putval !
1
l 15000,0 'y'

putval !
1
l 15000,2 'y'
 
putval !
1
l 1,5 'x'
 

nodata!
pars_execute!

select *, length(l) from t!
fetch !

select * from trigprot!
fetch !

rollback !

noscript !
create table trigprot ( i int key, ts timestamp, action char)!
create table t (i int key, l long) !
create trigger trig_i for t after insert execute (
  insert kern.trigprot values (:i, timestamp, 'i');
) !
create trigger trig_u for t after update execute (
  update kern.trigprot 
  set action = 'u', ts = timestamp
  where i = :i;
) !
script !
parsing !

insert t values (:i, :l)!

executing !
data!

insert !
1
n 10 1
l 15000,0 'x'  

putval !
1
l 15000,0 'x'

putval !
1
l 15000,2 'x'
 
putval !
1
l 1,5 'y'
 

nodata!
pars_execute!

select *, length(l) from t!
fetch !

select * from trigprot!
fetch !

parsing !

update t set l = :l
where i = 1!

executing !
data!

update !
1
l 15000,0 'y'  

putval !
1
l 15000,0 'y'

putval !
1
l 15000,2 'y'
 
putval !
1
l 1,5 'x'
 

nodata!
pars_execute!

select *, length(l) from t!
fetch !

select * from trigprot!
fetch !

rollback !

noscript !
create table trigprot ( i int key, ts timestamp, action char)!
create table t (i int key, l long) !
create trigger trig_i for t after insert execute (
  insert kern.trigprot values (:i, timestamp, 'i');
) !
create trigger trig_u for t after update execute (
  update kern.trigprot 
  set action = 'u', ts = timestamp
  where i = :i;
) !
script !
parsing !

insert t values (:i, :l)!

executing !
data!

insert !
1
n 10 1
l 15000,0 'x'  

putval !
1
l 15000,0 'x'

putval !
1
l 15000,2 'x'
 
putval !
1
l 1,5 'y'
 

nodata!
pars_execute!

select *, length(l) from t!
fetch !

select * from trigprot!
fetch !

parsing !

declare myc cursor for 
select * from t for update for reuse !



executing !

declare !
1

parsing noinit !


fetch myc !

update t set l = :l where current of myc!

executing !

fetch !
2

data!


update !
3
l 15000,0 'y'  

putval !
3
l 15000,0 'y'

putval !
3
l 15000,2 'y'
 
putval !
3
l 1,5 'x'
 

nodata!
pars_execute!

select *, length(l) from t!
fetch !

select * from trigprot!
fetch !

rollback !

noscript !
create table trigprot ( 
  i int key, 
  ts timestamp, 
  action char, 
  lold char(1000),
  lnew long)!
create table t (i int key, l long) !
create trigger trig_i for t after insert execute (
  insert kern.trigprot values (:i, timestamp, 'i', NULL, :l);
) !
create trigger trig_u for t after update execute (
  update kern.trigprot 
  set action = 'u', 
      ts = timestamp, 
      lold = substr(lnew,1,1000),
      lnew = :NEW.l
  where i = :i;
) !
script !
parsing !

insert t values (:i, :l)!

executing !
data!

insert !
1
n 10 1
l 15000,0 'x'  

putval !
1
l 15000,0 'x'

putval !
1
l 15000,2 'x'
 
putval !
1
l 1,5 'y'
 

insert !
1
n 10 2
l 15000,0 'a'  

putval !
1
l 15000,0 'a'

putval !
1
l 15000,2 'a'
 
putval !
1
l 1,5 'b'
 

nodata!
pars_execute!

select *, length(l) from t!
fetch !

select * from trigprot!
fetch !

* PTS 1136529
select * from files f, tables t where f.fileid = t.tableid and
 t.tablename = 'TRIGPROT' !
fetch !

select * from files f, tables t where f.fileid = t.tableid and
 t.tablename = 'T' !
fetch !

parsing !

update t set l = :l!

executing !
data!

update !
1
l 15000,0 'y'  

putval !
1
l 15000,0 'y'

putval !
1
l 15000,2 'y'
 
putval !
1
l 1,5 'x'
 

nodata!
pars_execute!

select *, length(l) from t!
fetch !

select * from trigprot!
fetch !

* PTS 1136529
select * from files f, tables t where f.fileid = t.tableid and
 t.tablename = 'TRIGPROT' !
fetch !

select * from files f, tables t where f.fileid = t.tableid and
 t.tablename = 'T' !
fetch !

rollback!
commit release !
file connect (sut sut!
drop user dba !
commit release !
* PTS 1137331-3 !
file connect ( sut sut !
create user ttt password ttt dba !
commit release !
senderid ODB !
file connect ( ttt ttt !
CREATE TABLE "TTT"."DOCTOR_ACCESS"
(
    "OS_USER" Varchar (50)  NOT NULL,
    "RESID" Varchar(10)  NOT NULL,
    "LIFETIME" smallint,
    UNIQUE("OS_USER", "RESID")
)!
noscript !
CREATE DBPROC ttt.pr(
    IN d date,
    IN nv smallint)
RETURNS CURSOR AS
VAR sqlText varchar(1000);
BEGIN
    TRY
        TRY
            SET sqlText = 'DECLARE INVEST_ARM CURSOR FOR
                     select * from ttt.DOCTOR_ACCESS a 
                     where a.os_user=''USER'' FOR REUSE';

            EXECUTE sqlText;
        CATCH
            IF $rc <> 100 THEN
                STOP($rc, 'INVEST_ARM '||$errmsg);

        TRY
            $CURSOR = 'GET_RES_CURSOR';
            SET sqlText = 'DECLARE ' || $CURSOR || 
            ' CURSOR FOR select * from INVEST_ARM ';
            CASE nv
            WHEN 0 THEN
                sqlText = sqlText;
            WHEN 1 THEN
                sqlText = sqlText|| ' where 1 <> 2';
            END CASE;
            EXECUTE sqlText;
        CATCH
            IF $rc <> 100 THEN
                STOP($rc, $CURSOR||' '||$errmsg);
    CATCH
        STOP($rc, $errmsg);
END;
!
script !
call pr('2005-08-01',0)!
call pr('2005-08-01',1)!
rollback release !
senderid XCI !
file connect ( sut sut !
drop user ttt !
commit release !
* PTS 1140435-7 !
file connect ( kern test !
parsing !
noscript !
CREATE TRIGGER TRG_I_CONTRACT_TYPE FOR kern.CONTRACT_TYPE AFTER INSERT 
EXECUTE (
VAR fatherPath Varchar(1000);
TRY
    If E_CON_TYP_K_CONTRACT_TYPE is null
    THEN
        UPDATE kern.CONTRACT_TYPE set C_TREE_PATH = '/' & 
CHR(:NEW.K_CONTRACT_TYPE) & '/'
        WHERE K_CONTRACT_TYPE=:NEW.K_CONTRACT_TYPE AND D_END IS NULL
    ELSE
    BEGIN
        select C_TREE_PATH into :fatherPath from kern.CONTRACT_TYPE
        where K_CONTRACT_TYPE=:NEW.E_CON_TYP_K_CONTRACT_TYPE ;
        if fatherPath is null
        THEN
                UPDATE kern.CONTRACT_TYPE set C_TREE_PATH = '/' & 
CHR(:NEW.K_CONTRACT_TYPE) & '/'
                WHERE K_CONTRACT_TYPE=:NEW.K_CONTRACT_TYPE 
        ELSE
                UPDATE kern.CONTRACT_TYPE set C_TREE_PATH = 
SUBSTR(TRIM(:fatherPath) & CHR(:NEW.K_CONTRACT_TYPE) & '/',1,1000)
                WHERE K_CONTRACT_TYPE=:NEW.K_CONTRACT_TYPE ;
    END;
CATCH
  IF $rc <> 100
  THEN STOP ($rc, 'unexpected error');
)!
pars_execute !
script !
commit release !
file shutdwnk !
dbmcli superdba,colduser !
&ifdef vers80
param_directput _PACKET_SIZE 49152 !
&else
param_directput _PACKET_SIZE 32768 !
&endif
param_directput _CAT_CACHE_MINSIZE 131072 !
param_directput CAT_CACHE_SUPPLY 96 !
param_startsession !
param_checkall !
param_commitsession !
db_restart !
db_admin !
bye ! 
vdnexit!
