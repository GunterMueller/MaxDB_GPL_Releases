
#    ========== licence begin  GPL
#    Copyright (c) 2000-2005 SAP AG
#
#    This program is free software; you can redistribute it and/or
#    modify it under the terms of the GNU General Public License
#    as published by the Free Software Foundation; either version 2
#    of the License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#    ========== licence end

from installib import *

def install (session,options):
    """Installing tables for JDBC Database Metadata
    """
    loaderCmd(session, 'INSTALLATION ON')
    loaderCmd(session, 'AUTOCOMMIT OFF')

    stopIfSqlNotErr(session, -4024, 'DROP SCHEMA SYSJDBC')

    stopIfSqlNotOK(session, 'CREATE SCHEMA SYSJDBC')
   
    switchToSchema (session, 'SYSJDBC')

    # ----------------------------------------------------------------------
    # SYSJDBC.SYSTEMLIMITS
    #
    # Contains some system limits from the 'Technical Specification'.
    # ----------------------------------------------------------------------
    dropTable(session, "SYSTEMLIMITS")
    stopIfSqlNotOK(session, """CREATE TABLE SYSTEMLIMITS (
                               "PROPERTY" VARCHAR(32) PRIMARY KEY,
                               "VALUE"    VARCHAR(255) 
    ) INTERNAL""")
    stopIfSqlNotOK(session, """GRANT SELECT ON SYSTEMLIMITS TO PUBLIC""")
    stopIfSqlNotOK(session, """COMMENT ON TABLE "SYSJDBC"."SYSTEMLIMITS" IS 'Internal table needed by JDBC to store technical limits.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."SYSTEMLIMITS"."PROPERTY" IS 'Property key'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."SYSTEMLIMITS"."VALUE" IS 'Property value'""")

    # Maximum length of binary literal (X'0A...')
    stopIfSqlNotOK(session, """INSERT INTO SYSTEMLIMITS VALUES('MAXBINARYLITERALLENGTH',    8000)""")
    # Maximum length of catalog name (0, as not used)
    stopIfSqlNotOK(session, """INSERT INTO SYSTEMLIMITS VALUES('MAXCATALOGNAMELENGTH',      0)""")
    # Maximum length of column name
    stopIfSqlNotOK(session, """INSERT INTO SYSTEMLIMITS VALUES('MAXCOLUMNNAMELENGTH',       32)""")
    # Maximum length of cursor name
    stopIfSqlNotOK(session, """INSERT INTO SYSTEMLIMITS VALUES('MAXCURSORNAMELENGTH',       32)""")
    # Maximum length of procedure name
    stopIfSqlNotOK(session, """INSERT INTO SYSTEMLIMITS VALUES('MAXPROCEDURENAMELENGTH',    32)""")
    # Maximum length of schema name
    stopIfSqlNotOK(session, """INSERT INTO SYSTEMLIMITS VALUES('MAXSCHEMANAMELENGTH',       32)""")
    # Maximum length of table name
    stopIfSqlNotOK(session, """INSERT INTO SYSTEMLIMITS VALUES('MAXTABLENAMELENGTH' ,       32)""")
    # Maximum length of user name
    stopIfSqlNotOK(session, """INSERT INTO SYSTEMLIMITS VALUES('MAXUSERNAMELENGTH' ,        32)""")
    # Maximal number of columns in GROUP BY clause.
    stopIfSqlNotOK(session, """INSERT INTO SYSTEMLIMITS VALUES('MAXCOLUMNSINGROUPBY',       128)""")
    # Maximal number of columns in index
    stopIfSqlNotOK(session, """INSERT INTO SYSTEMLIMITS VALUES('MAXCOLUMNSININDEX',         16)""")
    # Maximal number of columns in index
    stopIfSqlNotOK(session, """INSERT INTO SYSTEMLIMITS VALUES('MAXCOLUMNSINORDERBY',       128)""")
    # Maximal number of columns in SELECT
    stopIfSqlNotOK(session, """INSERT INTO SYSTEMLIMITS VALUES('MAXCOLUMNSINSELECT',        1023)""")
    # Maximal number of columns in TABLE. (The lesser value without KEY is used).
    stopIfSqlNotOK(session, """INSERT INTO SYSTEMLIMITS VALUES('MAXCOLUMNSINTABLE',         1023)""")
    # Maximal length of INDEX
    stopIfSqlNotOK(session, """INSERT INTO SYSTEMLIMITS VALUES('MAXINDEXLENGTH',            1024)""")
    # Maximal length of a ROW
    stopIfSqlNotOK(session, """INSERT INTO SYSTEMLIMITS VALUES('MAXROWSIZE',                8088)""")
    # Maximal number of (join) tables in SELECT 
    stopIfSqlNotOK(session, """INSERT INTO SYSTEMLIMITS VALUES('MAXTABLESINSELECT',         64)""")

    if sqlOK (session, """
            SELECT PARAMETERNAME
            FROM SYSDD.ACTIVECONFIGURATION
            WHERE PARAMETERNAME = '_UNICODE'
            AND "VALUE" = 'YES'"""):
        stopIfSqlNotOK(session, """INSERT INTO SYSTEMLIMITS VALUES('MAXCHARLITERALLENGTH',      4000)""")
    else:
        stopIfSqlNotOK(session, """INSERT INTO SYSTEMLIMITS VALUES('MAXCHARLITERALLENGTH',      8000)""")
    
    # ----------------------------------------------------------------------
    # SYSJDBC.SYSTEMINFO
    #
    # Contains kernel version, status of unicode support, maximum
    # number of sessions.
    # ----------------------------------------------------------------------
    stopIfSqlNotOK(session, """CREATE OR REPLACE VIEW SYSTEMINFO AS
                                  SELECT 'MAXCONNECTIONS' AS "PROPERTY",
                                         VALUE AS "VALUE" FROM SYSDD.ACTIVECONFIGURATION WHERE PARAMETERNAME='MAXUSERTASKS'
                                  UNION ALL
                                  SELECT 'UNICODE' AS "PROPERTY",
                                          VALUE AS "VALUE" FROM SYSDD.ACTIVECONFIGURATION WHERE PARAMETERNAME='_UNICODE'
                                  UNION ALL
                                  SELECT 'KERNELVERSION' AS "PROPERTY",
                                         VALUE AS "VALUE" FROM SYSDD.ACTIVECONFIGURATION WHERE PARAMETERNAME='KERNELVERSION'
                                  UNION ALL
                                  SELECT 'SQLMODE' AS PROPERTY, "SQLMODE" AS "VALUE" 
                                          FROM SYSDD.CONNECTPARAMETERS
                                  UNION ALL
                                  SELECT "PROPERTY", "VALUE" FROM SYSJDBC.SYSTEMLIMITS
                                  UNION ALL
                                  SELECT 'SYSTEMTABLES_VERSION' AS "PROPERTY",
                                    '1' AS "VALUE" FROM SYSDBA.DUAL
                               INTERNAL
    """)

    stopIfSqlNotOK(session, """GRANT SELECT ON SYSTEMINFO TO PUBLIC""")
    stopIfSqlNotOK(session, """COMMENT ON TABLE "SYSJDBC"."SYSTEMINFO" IS 'Collection of database server properties needed by JDBC'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."SYSTEMINFO"."PROPERTY" IS 'Property key'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."SYSTEMINFO"."VALUE" IS 'Property value'""")

    # ----------------------------------------------------------------------
    # SYSJDBC.CATALOGS
    #
    # Contains information on catalogs (none currently)
    # ----------------------------------------------------------------------
    stopIfSqlNotOK(session, """CREATE OR REPLACE VIEW "CATALOGS" AS SELECT '' AS "TABLE_CAT" FROM SYSDBA.DUAL INTERNAL""")
    stopIfSqlNotOK(session, """GRANT SELECT ON "CATALOGS" TO PUBLIC WITH GRANT OPTION""")
    stopIfSqlNotOK(session, """COMMENT ON TABLE "SYSJDBC"."CATALOGS" IS 'The available catalogs in the system'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."CATALOGS"."TABLE_CAT" IS 'Catalog name'""")
    
    # ----------------------------------------------------------------------
    # SYSJDBC.COLUMNS
    #
    # Contains information on columns of tables.
    # ----------------------------------------------------------------------
    stopIfSqlNotOK(session, """CREATE OR REPLACE VIEW "COLUMNS" AS
                            SELECT ''                        AS TABLE_CAT,
                                   SCHEMANAME                AS TABLE_SCHEM,
                                   TABLENAME                 AS TABLE_NAME,
                                   COLUMNNAME                AS COLUMN_NAME,
                                   DECODE((DATATYPE || (' ' || CODE)),
                                          'CHAR',             1,
                                          'CHAR ASCII',       1,
                                          'CHAR UNICODE',     1,
                                          'CHAR BYTE',        -2,
                                          'VARCHAR',          12,
                                          'VARCHAR ASCII',    12,
                                          'VARCHAR UNICODE',  12,
                                          'VARCHAR BYTE',     -3,
                                          'LONG',             -1,
                                          'LONG ASCII',       -1,
                                          'LONG UNICODE',     -1,
                                          'LONG BYTE',        -4,
                                          'LONG RAW',         -4,
                                          'FIXED',             3,
                                          'DECIMAL',           3,
                                          'REAL',              7,
                                          'FLOAT',             6,
                                          'DOUBLE PRECISION',  8,
                                          'SMALLINT',          5,
                                          'INTEGER',           4,
                                          'BOOLEAN',           -7,
                                          'TIME',              92,
                                          'DATE',              91,
                                          'TIMESTAMP',         93,
                                          'NUMBER',            2,
                                          1111) 
                                                             AS DATA_TYPE,
                                   DECODE(DATATYPE,
                                          'CHAR',     'CHAR()',
                                          'VARCHAR',  'VARCHAR()',
                                          'LONG',     'LONG',
                                          'LONG RAW', 'LONG',
                                           DATATYPE) 
                                   || (' ' || CODE)
                                                             AS TYPE_NAME,
                                   PRECISION                 AS COLUMN_SIZE,
                                   NUM(NULL)                 AS BUFFER_LENGTH,
                                   DEC                       AS DECIMAL_DIGITS,
                                   10                        AS NUM_PREC_RADIX,
                                   NULLABLE                   NULLABLE,
                                   COMMENT                   AS REMARKS,
                                   "DEFAULT"                 AS COLUMN_DEF,
                                   0                         AS SQL_DATA_TYPE,
                                   0                         AS SQL_DATETIME_SUB,
                                   DECODE(DECODE((DATATYPE || (' ' || CODE)),
                                          'CHAR',             'B',
                                          'CHAR ASCII',       'B',
                                          'CHAR UNICODE',     'U',
                                          'CHAR BYTE',        'B',
                                          'VARCHAR',          'B',
                                          'VARCHAR ASCII',    'B',
                                          'VARCHAR UNICODE',  'U',
                                          'CHAR BYTE',        'B',
                                          'LONG ASCII',       'L',
                                          'LONG UNICODE',     'L',
                                          'LONG BYTE',        'L',
                                          'LONG',             'L',
                                          'NC'),
                                          'B',   PRECISION,
                                          'U',   PRECISION + PRECISION,
                                          'L',  2147483647,
                                           NUM(NULL))              AS CHAR_OCTET_LENGTH,
                                   "COLUMNNO"                 AS ORDINAL_POSITION,
                                   DECODE (NULLABLE,1,\'YES\',0,\'NO\',\'NO\')    IS_NULLABLE,
                                   ASCII(NULL)                AS SCOPE_CATLOG,
                                   ASCII(NULL)                AS SCOPE_SCHEMA,
                                   ASCII(NULL)                AS SCOPE_TABLE,
                                   NUM(NULL)                  AS SOURCE_DATA_TYPE,
                                   DEFAULTFUNCTION            AS COLUMN_DEF_FUNC
                                   FROM SYSDD.ODBC_COLUMNS 
                                   INTERNAL
    """)
    stopIfSqlNotOK(session, """GRANT SELECT ON "COLUMNS" TO PUBLIC WITH GRANT OPTION""")
    stopIfSqlNotOK(session, """COMMENT ON TABLE "SYSJDBC"."COLUMNS" IS 'Information about columns of tables'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNS"."TABLE_CAT" IS 'Catalog name, always '''''""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNS"."TABLE_SCHEM" IS 'Schema name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNS"."TABLE_NAME" IS 'Table name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNS"."COLUMN_NAME" IS 'Column name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNS"."DATA_TYPE" IS 'SQL type code of the column'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNS"."TYPE_NAME" IS 'SQL type name of the column'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNS"."COLUMN_SIZE" IS 'Column size, either maximum number of characters or precision'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNS"."BUFFER_LENGTH" IS 'Unused, always NULL'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNS"."DECIMAL_DIGITS" IS 'Number of fractional digits'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNS"."NUM_PREC_RADIX" IS 'Radix, always 10'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNS"."NULLABLE" IS '1 if NULL values are allowed, 0 otherwise'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNS"."REMARKS" IS 'Comment for this column'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNS"."COLUMN_DEF" IS 'Default value'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNS"."SQL_DATA_TYPE" IS 'Unused, always NULL'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNS"."SQL_DATETIME_SUB" IS 'Unused, always NULL'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNS"."CHAR_OCTET_LENGTH" IS 'The maximum number of bytes in the column for character types'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNS"."ORDINAL_POSITION" IS 'Index of column in table (starting with 1)'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNS"."IS_NULLABLE" IS '''YES'' if the column does allow NULL values, ''NO'' if not'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNS"."SCOPE_CATLOG" IS 'Catalog of the table that is scope of reference attribute (always NULL)'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNS"."SCOPE_SCHEMA" IS 'Schema of the table that is scope of reference attribute (always NULL)'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNS"."SCOPE_TABLE" IS 'Table that is scope of reference attribute (always NULL)'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNS"."SOURCE_DATA_TYPE" IS 'Source type for DISTINCT or UDT (always NULL)'""")

    # ----------------------------------------------------------------------
    # SYSJDBC.COLUMNPRIVILEGES
    #
    # Contains information on privileges on columns.
    # ----------------------------------------------------------------------
    stopIfSqlNotOK(session, """CREATE OR REPLACE VIEW "COLUMNPRIVILEGES" AS 
            SELECT ''             AS TABLE_CAT,
                   C.SCHEMANAME   AS TABLE_SCHEM,
                   C.TABLENAME    AS TABLE_NAME,
                   C.COLUMNNAME   AS COLUMN_NAME,
                   P.GRANTOR      AS GRANTOR,
                   P.GRANTEE      AS GRANTEE,
                   ASCII(DECODE(SUBSTR(P.PRIVILEGES, LENGTH(P.PRIVILEGES), 1), 
                         '+', SUBSTR(P.PRIVILEGES, 1, LENGTH(P.PRIVILEGES)-1),
                         P.PRIVILEGES)) AS PRIVILEGE,
                   ASCII(DECODE(SUBSTR(P.PRIVILEGES, LENGTH(P.PRIVILEGES), 1),
                         '+', 'YES',
                         'NO')) AS IS_GRANTABLE
         FROM SYSDD.NEW_PRIVILEGES P, SYSDD.COLUMNS C 
         WHERE C.SCHEMANAME=P.SCHEMANAME 
               AND C.TABLENAME = P.NAME1 
               AND (C.COLUMNNAME = P.NAME2 OR P.NAME2 IS NULL)
               AND P.TYPE NOT IN ('SEQUENCE', 'DBPROC') 
         INTERNAL
    """)        
    stopIfSqlNotOK(session, """GRANT SELECT ON "COLUMNPRIVILEGES" TO PUBLIC WITH GRANT OPTION""") 
    stopIfSqlNotOK(session, """COMMENT ON TABLE "SYSJDBC"."COLUMNPRIVILEGES" IS 'Information about access rights for columns of tables'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNPRIVILEGES"."TABLE_CAT" IS 'Catalog name, always '''''""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNPRIVILEGES"."TABLE_SCHEM" IS 'Schema name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNPRIVILEGES"."TABLE_NAME" IS 'Table name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNPRIVILEGES"."COLUMN_NAME" IS 'Column name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNPRIVILEGES"."GRANTOR" IS 'Grantor of access'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNPRIVILEGES"."GRANTEE" IS 'Grantee of access'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNPRIVILEGES"."PRIVILEGE" IS 'Name of access'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."COLUMNPRIVILEGES"."IS_GRANTABLE" IS '''YES'' if grantee is permitted to grant to others, ''NO'' otherwise'""")

    # ----------------------------------------------------------------------
    # SYSJDBC.TABLEPRIVILEGES
    #
    # Contains information on privileges for complete tables.
    # ----------------------------------------------------------------------
    stopIfSqlNotOK(session, """CREATE OR REPLACE VIEW "TABLEPRIVILEGES" AS
                               SELECT ''                       AS TABLE_CAT,
                                      T.SCHEMANAME             AS TABLE_SCHEM,
                                      T.TABLENAME              AS TABLE_NAME,
                                      P.GRANTOR                AS GRANTOR,
                                      P.GRANTEE                AS GRANTEE,
                                      ASCII(DECODE(SUBSTR(P.PRIVILEGES, LENGTH(P.PRIVILEGES), 1), 
                                            '+', SUBSTR(P.PRIVILEGES, 1, LENGTH(P.PRIVILEGES)-1),
                                             P.PRIVILEGES))   AS PRIVILEGE,
                                      ASCII(DECODE(SUBSTR(P.PRIVILEGES, LENGTH(P.PRIVILEGES), 1),
                                            '+', 'YES',
                                            'NO'))           AS IS_GRANTABLE
                                FROM SYSDD.NEW_PRIVILEGES P, SYSDD.TABLES T
                                WHERE T.SCHEMANAME=P.SCHEMANAME 
                                AND T.TABLENAME = P.NAME1 
                                AND P.NAME2 IS NULL
                                AND P.TYPE NOT IN ('SEQUENCE', 'DBPROC') 
                                AND T.TYPE <> 'SYNONYM' 
                                INTERNAL                                   
    """)
    stopIfSqlNotOK(session, """GRANT SELECT ON "TABLEPRIVILEGES" TO PUBLIC WITH GRANT OPTION""") 
    stopIfSqlNotOK(session, """COMMENT ON TABLE "SYSJDBC"."TABLEPRIVILEGES" IS 'Information about access rights for tables'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."TABLEPRIVILEGES"."TABLE_CAT" IS 'Catalog name, always '''''""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."TABLEPRIVILEGES"."TABLE_SCHEM" IS 'Schema name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."TABLEPRIVILEGES"."TABLE_NAME" IS 'Table name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."TABLEPRIVILEGES"."GRANTOR" IS 'Grantor of access'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."TABLEPRIVILEGES"."GRANTEE" IS 'Grantee of access'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."TABLEPRIVILEGES"."PRIVILEGE" IS 'Name of access'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."TABLEPRIVILEGES"."IS_GRANTABLE" IS '''YES'' if grantee is permitted to grant to others, ''NO'' otherwise'""")
    
    stopIfSqlNotOK(session, """CREATE OR REPLACE VIEW BESTROWIDENTIFIER AS SELECT
                                 ''         AS TABLE_CAT,
                                 SCHEMANAME AS TABLE_SCHEM,
                                 TABLENAME  AS TABLE_NAME,
                                 2          AS SCOPE,
                                 COLUMNNAME AS COLUMN_NAME,
                                 DECODE((DATATYPE || (' ' || CODE)),
                                        'CHAR',             1,
                                        'CHAR ASCII',       1,
                                        'CHAR UNICODE',     1,
                                        'CHAR BYTE',        -2,
                                        'VARCHAR',          12,
                                        'VARCHAR ASCII',    12,
                                        'VARCHAR UNICODE',  12,
                                        'VARCHAR BYTE',     -3,
                                        'LONG',             -1,
                                        'LONG ASCII',       -1,
                                        'LONG UNICODE',     -1,
                                        'LONG BYTE',        -4,
                                        'LONG RAW',         -4,
                                        'FIXED',             3,
                                        'DECIMAL',           3,
                                        'REAL',              7,
                                        'FLOAT',             6,
                                        'DOUBLE PRECISION',  8,
                                        'SMALLINT',          5,
                                        'INTEGER',           4,
                                        'BOOLEAN',           -7,
                                        'TIME',              92,
                                        'DATE',              91,
                                        'TIMESTAMP',         93,
                                        'NUMBER',            2,
                                         1111) 
                                                             AS DATA_TYPE,
                                 DECODE(DATATYPE,
                                        'CHAR',     'CHAR()',
                                        'VARCHAR',  'VARCHAR()',
                                        'LONG',     'LONG',
                                        'LONG RAW', 'LONG',
                                         DATATYPE) 
                                 || (' ' || CODE)
                                                             AS TYPE_NAME,
                                 LEN                         AS COLUMN_SIZE,
                                 NUM(NULL)                   AS BUFFER_LENGTH,
                                 DEC                         AS DECIMAL_DIGITS,
                                 1                           AS PSEUDO_COLUMN 
                                 FROM SYSDD.COLUMNS 
                                 WHERE KEYCOLUMNNO IS NOT NULL
                                 INTERNAL
    """) 
    stopIfSqlNotOK(session, """GRANT SELECT ON "BESTROWIDENTIFIER" TO PUBLIC WITH GRANT OPTION""") 
    stopIfSqlNotOK(session, """COMMENT ON TABLE "SYSJDBC"."BESTROWIDENTIFIER" IS 'Information about the best identifier of a row.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."BESTROWIDENTIFIER"."TABLE_CAT" IS 'Catalog name, always '''''""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."BESTROWIDENTIFIER"."TABLE_SCHEM" IS 'Schema name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."BESTROWIDENTIFIER"."TABLE_NAME" IS 'Table name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."BESTROWIDENTIFIER"."SCOPE" IS 'Scope of the identifier, always 2.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."BESTROWIDENTIFIER"."COLUMN_NAME" IS 'Column name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."BESTROWIDENTIFIER"."DATA_TYPE" IS 'SQL type code of the column'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."BESTROWIDENTIFIER"."TYPE_NAME" IS 'SQL type name of the column'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."BESTROWIDENTIFIER"."COLUMN_SIZE" IS 'Column size, either maximum number of characters or precision'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."BESTROWIDENTIFIER"."BUFFER_LENGTH" IS 'Unused, always NULL'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."BESTROWIDENTIFIER"."DECIMAL_DIGITS" IS 'Number of fractional digits'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."BESTROWIDENTIFIER"."PSEUDO_COLUMN" IS 'Whether the column is a pseudo-column'""")

    stopIfSqlNotOK(session, """CREATE OR REPLACE VIEW PRIMARYKEYS AS SELECT
                                 ''          AS TABLE_CAT,
                                 SCHEMANAME  AS TABLE_SCHEM,
                                 TABLENAME   AS TABLE_NAME,
                                 COLUMNNAME  AS COLUMN_NAME,
                                 KEYCOLUMNNO AS KEY_SEQ,
                                 ASCII(NULL) AS PK_NAME
                                 FROM SYSDD.COLUMNS
                                 WHERE KEYCOLUMNNO IS NOT NULL
                                 INTERNAL
    """) 
    stopIfSqlNotOK(session, """GRANT SELECT ON "PRIMARYKEYS" TO PUBLIC WITH GRANT OPTION""") 
    stopIfSqlNotOK(session, """COMMENT ON TABLE "SYSJDBC"."PRIMARYKEYS" IS 'Information about the primary keys'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."PRIMARYKEYS"."TABLE_CAT" IS 'Catalog name, always '''''""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."PRIMARYKEYS"."TABLE_SCHEM" IS 'Schema name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."PRIMARYKEYS"."TABLE_NAME" IS 'Table name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."PRIMARYKEYS"."COLUMN_NAME" IS 'Column name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."PRIMARYKEYS"."KEY_SEQ" IS 'Sequence number within the primary key'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."PRIMARYKEYS"."PK_NAME" IS 'Primary key name, always NULL'""")

    stopIfSqlNotOK(session, """CREATE OR REPLACE VIEW "CROSSREFERENCES" AS SELECT
                               ''            AS PKTABLE_CAT,
                               REFSCHEMANAME AS PKTABLE_SCHEM,
                               REFTABLENAME  AS PKTABLE_NAME,
                               REFCOLUMNNAME AS PKCOLUMN_NAME,
                               ''            AS FKTABLE_CAT,
                               SCHEMANAME    AS FKTABLE_SCHEM,
                               TABLENAME     AS FKTABLE_NAME,
                               COLUMNNAME    AS FKCOLUMN_NAME,
                               KEYCOLUMNNO   AS KEY_SEQ,
                               1             AS UPDATE_RULE,
                               DECODE(RULE,
                                      'DELETE CASCADE',     0,
                                      'DELETE RESTRICT',    1,
                                      'DELETE SET NULL',    2,
                                      'DELETE SET DEFAULT', 4,
                                       2)    AS DELETE_RULE,
                               REFNAME       AS FK_NAME,
                               ASCII(NULL)   AS PK_NAME,
                               7             AS DEFERRABILITY,
                               COMMENT
                               FROM SYSDD.FOREIGN_KEYS           
                               INTERNAL
    """)
    stopIfSqlNotOK(session, """GRANT SELECT ON "CROSSREFERENCES" TO PUBLIC WITH GRANT OPTION""") 
    stopIfSqlNotOK(session, """COMMENT ON TABLE "SYSJDBC"."CROSSREFERENCES" IS 'Information about foreign key relations'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."CROSSREFERENCES"."PKTABLE_CAT" IS 'Primary table catalog name, always '''''""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."CROSSREFERENCES"."PKTABLE_SCHEM" IS 'Primary table schema name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."CROSSREFERENCES"."PKTABLE_NAME" IS 'Primary table name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."CROSSREFERENCES"."PKCOLUMN_NAME" IS 'Primary table column name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."CROSSREFERENCES"."FKTABLE_CAT" IS 'Foreign key table catalog name, always '''''""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."CROSSREFERENCES"."FKTABLE_SCHEM" IS 'Foreign key table schema name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."CROSSREFERENCES"."FKTABLE_NAME" IS 'Foreign key table table name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."CROSSREFERENCES"."FKCOLUMN_NAME" IS 'Foreign key table column name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."CROSSREFERENCES"."KEY_SEQ" IS 'Sequence number within the foreign key'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."CROSSREFERENCES"."UPDATE_RULE" IS 'Constant for rule at UPDATE command'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."CROSSREFERENCES"."DELETE_RULE" IS 'Constant for rule at DELETE command'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."CROSSREFERENCES"."FK_NAME"     IS 'Name of the foreign key'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."CROSSREFERENCES"."PK_NAME"     IS 'Name of the referenced primary key, always NULL'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."CROSSREFERENCES"."DEFERRABILITY" IS 'Whether the evaluation of the constraint can be deferred to the COMMIT'""")


    dropTable(session, "TYPEINFO")
    stopIfSqlNotOK(session, """CREATE TABLE TYPEINFO (
                            "TYPE_NAME"      VARCHAR(18) ASCII NOT NULL,
                            "DATA_TYPE"      INTEGER NOT NULL,
                            "PRECISION"      INTEGER,
                            "LITERAL_PREFIX" CHAR(2) ASCII,
                            "LITERAL_SUFFIX" CHAR(1) ASCII,
                            "CREATE_PARAMS"      VARCHAR(30) ASCII,
                            "NULLABLE"           SMALLINT,
                            "CASE_SENSITIVE"     BOOLEAN,
                            "SEARCHABLE"         SMALLINT,
                            "UNSIGNED_ATTRIBUTE" BOOLEAN,
                            "FIXED_PREC_SCALE"   BOOLEAN,
                            "AUTO_INCREMENT"     BOOLEAN,
                            "LOCAL_TYPE_NAME"    VARCHAR(18) ASCII,
                            "MINIMUM_SCALE"      SMALLINT,
                            "MAXIMUM_SCALE"      SMALLINT,
                            "SQL_DATA_TYPE"      INTEGER,
                            "SQL_DATETIME_SUB"   INTEGER,
                            "NUM_PREC_RADIX"     INTEGER,
                            "MATCHORDER"         SMALLINT NOT NULL,
                            "DEFAULTCODE"        VARCHAR(7) ASCII,
                            "MODE"               CHAR(1) ASCII
                            )
                            INTERNAL
    """)
    stopIfSqlNotOK(session, """INSERT INTO TYPEINFO VALUES ('CHAR',                1, 8008,       '''',  '''', 'length',
    1, TRUE, 3, FALSE, FALSE, FALSE, 'CHAR',               NULL, NULL, NULL, NULL, NULL, 2, 'ASCII', NULL)""")
    
    stopIfSqlNotOK(session, """INSERT INTO TYPEINFO VALUES ('CHAR () ASCII',       1, 8008,       '''',  '''', 'length',
    1, TRUE, 3, FALSE, FALSE, FALSE, 'CHAR () ASCII',      NULL, NULL, NULL, NULL, NULL, 3, NULL, NULL)""")
                   
    stopIfSqlNotOK(session, """INSERT INTO TYPEINFO VALUES ('CHAR',                1, 4004,       '''',  '''', 'length',
    1, TRUE, 3, FALSE, FALSE, FALSE, 'CHAR',               NULL, NULL, NULL, NULL, NULL, 2, 'UNICODE', NULL)""")
                   
    stopIfSqlNotOK(session, """INSERT INTO TYPEINFO VALUES ('CHAR () BYTE',       -2, 8008,       'X''', '''', 'length',
    1, TRUE, 3, FALSE, FALSE, FALSE, 'CHAR () BYTE',       NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL)""")
    

    stopIfSqlNotOK(session, """INSERT INTO TYPEINFO VALUES ('VARCHAR',            12, 8008,       '''',  '''', 'length',
    1, TRUE, 3, FALSE, FALSE, FALSE, 'VARCHAR',            NULL, NULL, NULL, NULL, NULL, 2, 'ASCII', NULL)""")

    stopIfSqlNotOK(session, """INSERT INTO TYPEINFO VALUES ('VARCHAR () ASCII',    12, 8008,       '''',  '''', 'length',
    1, TRUE, 3, FALSE, FALSE, FALSE, 'VARCHAR () ASCII',   NULL, NULL, NULL, NULL, NULL, 3, NULL, NULL)""")

    stopIfSqlNotOK(session, """INSERT INTO TYPEINFO VALUES ('VARCHAR',            12, 4004,       '''',  '''', 'length',
    1, TRUE, 3, FALSE, FALSE, FALSE, 'VARCHAR',            NULL, NULL, NULL, NULL, NULL, 2, 'UNICODE', NULL)""")
                   
    stopIfSqlNotOK(session, """INSERT INTO TYPEINFO VALUES ('VARCHAR () BYTE',    -3, 8008,      'X''', '''', 'length',
    1, TRUE, 3, FALSE, FALSE, FALSE, 'VARCHAR () BYTE',    NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL)""")

    # Maximum size of LONG is 2G - 8K - 1    
    stopIfSqlNotOK(session, """INSERT INTO TYPEINFO VALUES ('LONG',               -1, 2147475455, '''',  '''', NULL,
    1, TRUE, 0, FALSE, FALSE, FALSE, 'LONG',               NULL, NULL, NULL, NULL, NULL, 2, 'ASCII', NULL)""")

    stopIfSqlNotOK(session, """INSERT INTO TYPEINFO VALUES ('LONG ASCII',         -1, 2147475455, '''',  '''', NULL,
    1, TRUE, 0, FALSE, FALSE, FALSE, 'LONG ASCII',           NULL, NULL, NULL, NULL, NULL, 3, NULL, NULL)""")

    stopIfSqlNotOK(session, """INSERT INTO TYPEINFO VALUES ('LONG',               -1, 1073737727, '''',  '''', NULL,
    1, TRUE, 0, FALSE, FALSE, FALSE, 'LONG',               NULL, NULL, NULL, NULL, NULL, 2, 'UNICODE', NULL)""")

    stopIfSqlNotOK(session, """INSERT INTO TYPEINFO VALUES ('LONG BYTE',          -4, 2147475455, 'X''', '''', NULL,
    1, TRUE, 0, FALSE, FALSE, FALSE, 'LONG BYTE',          NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL)""")
    stopIfSqlNotOK(session, """INSERT INTO TYPEINFO VALUES ('BOOLEAN',            16, 1,          NULL,  NULL, NULL,
    1, TRUE, 2, FALSE, FALSE, FALSE, 'BOOLEAN',            NULL, NULL, NULL, NULL, NULL, 1, NULL, 'I')""")
    stopIfSqlNotOK(session, """INSERT INTO TYPEINFO VALUES ('FIXED',               3, 38,         NULL,  NULL, 'precision, scale',
    1, TRUE, 2, FALSE, TRUE,  TRUE,  'FIXED',              0,    38,   NULL, NULL, 10,   1, NULL, NULL)""")
    stopIfSqlNotOK(session, """INSERT INTO TYPEINFO VALUES ('DECIMAL',             3, 38,         NULL,  NULL, 'precision, scale',
    1, TRUE, 2, FALSE, TRUE,  TRUE,  'DECIMAL',            0,    38,   NULL, NULL, 10,   2, NULL, NULL)""")
    stopIfSqlNotOK(session, """INSERT INTO TYPEINFO VALUES ('NUMERIC',             3, 38,         NULL,  NULL, 'precision, scale',
    1, TRUE, 2, FALSE, TRUE,  TRUE,  'NUMERIC',            0,    38,   NULL, NULL, 10,   3, NULL, NULL)""")
    stopIfSqlNotOK(session, """INSERT INTO TYPEINFO VALUES ('FLOAT',               6, 38,         NULL,  NULL, 'precision',
    1, TRUE, 2, FALSE, FALSE, FALSE, 'FLOAT',              NULL, NULL, NULL, NULL, 10,   1, NULL, NULL)""")
    stopIfSqlNotOK(session, """INSERT INTO TYPEINFO VALUES ('REAL',                7, 38,         NULL,  NULL, 'precision',
    1, TRUE, 2, FALSE, FALSE, FALSE, 'REAL',               NULL, NULL, NULL, NULL, 10,   1, NULL, NULL)""")
    stopIfSqlNotOK(session, """INSERT INTO TYPEINFO VALUES ('DOUBLE PRECISION',    8, 38,         NULL,  NULL, NULL,
    1, TRUE, 2, FALSE, FALSE, FALSE, 'DOUBLE PRECISION',   NULL, NULL, NULL, NULL, 10,   1, NULL, NULL)""")
    stopIfSqlNotOK(session, """INSERT INTO TYPEINFO VALUES ('INTEGER',             4, 10,         NULL,  NULL, NULL,
    1, TRUE, 2, FALSE, TRUE,  TRUE,  'INTEGER',            NULL, NULL, NULL, NULL, 10,   1, NULL, NULL)""")
    stopIfSqlNotOK(session, """INSERT INTO TYPEINFO VALUES ('SMALLINT',            5, 5,          NULL,  NULL, NULL,
    1, TRUE, 2, FALSE, TRUE,  TRUE,  'SMALLINT',           NULL, NULL, NULL, NULL, 10,   1, NULL, NULL)""")
    stopIfSqlNotOK(session, """INSERT INTO TYPEINFO VALUES ('DATE',               91, 10,         NULL,  NULL, NULL,
    1, TRUE, 2, FALSE, FALSE, FALSE, 'DATE',               NULL, NULL, NULL, NULL, NULL, 1, NULL, 'I')""")
    stopIfSqlNotOK(session, """INSERT INTO TYPEINFO VALUES ('DATE',               93, 26,         NULL,  NULL, NULL,
    1, TRUE, 2, FALSE, FALSE, FALSE, 'DATE',               NULL, NULL, NULL, NULL, NULL, 1, NULL, 'O')""")
    stopIfSqlNotOK(session, """INSERT INTO TYPEINFO VALUES ('TIME',               92, 8,          NULL,  NULL, NULL,
    1, TRUE, 2, FALSE, FALSE, FALSE, 'TIME',               NULL, NULL, NULL, NULL, NULL, 1, NULL, 'I')""")
    stopIfSqlNotOK(session, """INSERT INTO TYPEINFO VALUES ('TIMESTAMP',          93, 26,         NULL,  NULL, NULL,
    1, TRUE, 2, FALSE, FALSE, FALSE, 'TIMESTAMP',          NULL, NULL, NULL, NULL, NULL, 1, NULL, 'I')""")

    if sqlOK (session, """SELECT PARAMETERNAME
                          FROM SYSDD.ACTIVECONFIGURATION
                          WHERE "PARAMETERNAME" = '_UNICODE' AND "VALUE"='YES'"""):    
        stopIfSqlNotOK(session, """INSERT INTO TYPEINFO VALUES ('CHAR () UNICODE',     1, 4004,       '''',  '''', 'length',
        1, TRUE, 3, FALSE, FALSE, FALSE, 'CHAR () UNICODE',    NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL)""")
        stopIfSqlNotOK(session, """INSERT INTO TYPEINFO VALUES ('LONG UNICODE',       -1, 1073741823, '''',  '''', NULL,
        1, TRUE, 0, FALSE, FALSE, FALSE, 'LONG UNICODE',       NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL)""")
        stopIfSqlNotOK(session, """INSERT INTO TYPEINFO VALUES ('VARCHAR () UNICODE', 12, 4004,       '''',  '''', 'length',
        1, TRUE, 3, FALSE, FALSE, FALSE, 'VARCHAR () UNICODE', NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL)""")

    stopIfSqlNotOK(session, """GRANT SELECT ON "TYPEINFO" TO PUBLIC WITH GRANT OPTION""") 
    stopIfSqlNotOK(session, """COMMENT ON TABLE "SYSJDBC"."TYPEINFO" IS 'Information about all database types, base for SESSIONTYPEINFO.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."TYPEINFO"."TYPE_NAME" IS 'Type name.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."TYPEINFO"."DATA_TYPE" IS 'SQL Type from java.sql.Types'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."TYPEINFO"."PRECISION" IS 'Maximum precision.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."TYPEINFO"."LITERAL_PREFIX" IS 'Prefix used to quote a literal.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."TYPEINFO"."LITERAL_SUFFIX" IS 'Suffix used to quote a literal.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."TYPEINFO"."CREATE_PARAMS" IS 'Parameters used on create.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."TYPEINFO"."NULLABLE" IS 'Whether NULL can be used for this type.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."TYPEINFO"."CASE_SENSITIVE" IS 'Whether the type is case-sensitive'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."TYPEINFO"."SEARCHABLE" IS 'Whether the type can be searched.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."TYPEINFO"."UNSIGNED_ATTRIBUTE" IS 'Whether the type is unsigned.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."TYPEINFO"."FIXED_PREC_SCALE" IS 'Whether the scale parameter of the type is fixed for all values.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."TYPEINFO"."AUTO_INCREMENT" IS 'Whether the type can be used for auto-increment columns.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."TYPEINFO"."LOCAL_TYPE_NAME" IS 'Localized type name.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."TYPEINFO"."MINIMUM_SCALE" IS 'Minimum scale supported.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."TYPEINFO"."MAXIMUM_SCALE" IS 'Maximum scale supported.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."TYPEINFO"."SQL_DATA_TYPE" IS 'Unused, reserved for future use.'""")    
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."TYPEINFO"."SQL_DATETIME_SUB" IS 'Unused, reserved for future use.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."TYPEINFO"."NUM_PREC_RADIX" IS 'Radix of the type if it is a number.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."TYPEINFO"."MATCHORDER" IS 'Priority in the mapping to a specific java.sql.Types type.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."TYPEINFO"."DEFAULTCODE" IS 'DEFAULT_CODE setting under which this type is valid.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."TYPEINFO"."MODE" IS 'SQL mode for which the type is valid.'""")
    
    
    stopIfSqlNotOK(session, """CREATE OR REPLACE VIEW SESSIONTYPEINFO AS
                               SELECT "TYPE_NAME", "DATA_TYPE", "PRECISION", "LITERAL_PREFIX", "LITERAL_SUFFIX",
                                       "CREATE_PARAMS", "NULLABLE", "CASE_SENSITIVE", "SEARCHABLE","UNSIGNED_ATTRIBUTE",
                                       "FIXED_PREC_SCALE", "AUTO_INCREMENT", "LOCAL_TYPE_NAME", "MINIMUM_SCALE",
                                       "MAXIMUM_SCALE", "SQL_DATA_TYPE", "SQL_DATETIME_SUB", "NUM_PREC_RADIX",
                                       "MATCHORDER"
                                       FROM SYSJDBC.TYPEINFO
                                       WHERE ( "MODE" IS NULL
                                                OR
                                                "MODE" = DECODE((SELECT "SQLMODE" FROM SYSDD.CONNECTPARAMETERS),
                                                                'ORACLE', 'O',
                                                                'SAPR3',  'O',
                                                                'INTERNAL', 'I',
                                                                'I')
                                             )
                                             AND
                                             ( "DEFAULTCODE" IS NULL
                                               OR
                                               "DEFAULTCODE" = SUBSTR((SELECT VALUE
                                                                       FROM SYSDD.ACTIVECONFIGURATION
                                                                       WHERE PARAMETERNAME='DEFAULT_CODE'), 1) 
                                             )                      
                                 INTERNAL 
    """)
    # The SUBSTR is necessary in ORACLE mode.
    
    stopIfSqlNotOK(session, """GRANT SELECT ON "SESSIONTYPEINFO" TO PUBLIC WITH GRANT OPTION""") 

    stopIfSqlNotOK(session, """CREATE OR REPLACE VIEW ATTRIBUTES AS SELECT 
                               '' AS "TYPE_CAT",          
                               '' AS "TYPE_SCHEM",
                               '' AS "TYPE_NAME",
                               '' AS "ATTR_NAME",
                               0  AS "DATA_TYPE",
                               '' AS "ATTR_TYPE_NAME",
                               0  AS "ATTR_SIZE",
                               0  AS "DECIMAL_DIGITS",
                               0  AS "NUM_PREC_RADIX",
                               0  AS "NULLABLE",
                               0  AS "REMARKS",
                               '' AS "ATTR_DEF",
                               0  AS "SQL_DATA_TYPE",
                               0  AS "SQL_DATETIME_SUB",
                               0  AS "CHAR_OCTET_LENGTH",
                               0  AS "ORDINAL_POSITION", 
                               '' AS "IS_NULLABLE",
                               '' AS "SCOPE_CATALOG",
                               '' AS "SCOPE_SCHEMA",
                               '' AS "SCOPE_TABLE",
                               0 AS "SOURCE_DATA_TYPE"
                               FROM DUAL WHERE 1<>1
                               INTERNAL """)
    stopIfSqlNotOK(session, """GRANT SELECT ON "ATTRIBUTES" TO PUBLIC WITH GRANT OPTION""") 
    stopIfSqlNotOK(session, """COMMENT ON TABLE "SYSJDBC"."ATTRIBUTES" IS 'Information about UDTs, currently not used.'""")

    # ----------------------------------------------------------------------
    # SYSJDBC.EXPORTEDKEYS not created as same as SYSJDBC.CROSSREFERENCES
    # ----------------------------------------------------------------------
    
    # ----------------------------------------------------------------------
    # SYSJDBC.IMPORTEDKEYS not created as same as SYSJDBC.CROSSREFERENCES
    # ----------------------------------------------------------------------

    # ----------------------------------------------------------------------
    # SYSJDBC.INDEXINFO
    #
    # Contains index information and table statistics.
    # ----------------------------------------------------------------------
    stopIfSqlNotOK(session, """CREATE OR REPLACE VIEW INDEXINFO AS SELECT
                               ''                AS "TABLE_CAT",
                               I.SCHEMANAME      AS "TABLE_SCHEM",
                               I.TABLENAME       AS "TABLE_NAME",
                               DECODE(TYPE,
                                      'UNIQUE', FALSE,
                                      TRUE)      AS "NON_UNIQUE",
                               ASCII(NULL)       AS "INDEX_QUALIFIER",
                               I.INDEXNAME       AS "INDEX_NAME",
                               3                 AS "TYPE",
                               COLUMNNO          AS "ORDINAL_POSITION",
                               I.COLUMNNAME      AS "COLUMN_NAME",
                               DECODE(SORT,
                                      'ASC', 'A',
                                      'DESC', 'D',
                                      ASCII(NULL))      AS "ASC_OR_DESC",
                               S1.NUMERIC_VALUE  AS "CARDINALITY",
                               S2.NUMERIC_VALUE  AS "PAGES",
                               ASCII(NULL)       AS "FILTER_CONDITION",
                               I.COMMENT
                               FROM SYSDD.INDEXES I, SYSDD.INDEXSTATISTICS S1, SYSDD.INDEXSTATISTICS S2 
                               WHERE     I.SCHEMANAME   = S1.SCHEMANAME
                                     AND I.TABLENAME    = S1.TABLENAME
                                     AND I.INDEXNAME    = S1.INDEXNAME
                                     AND S1.DESCRIPTION = 'Primary keys'
                                     AND I.SCHEMANAME   = S2.SCHEMANAME
                                     AND I.TABLENAME    = S2.TABLENAME
                                     AND I.INDEXNAME    = S2.INDEXNAME
                                     AND S2.DESCRIPTION = 'Index pages'

                               UNION ALL
                               SELECT
                                 ''               AS TABLE_CAT,
                                 S.SCHEMANAME     AS TABLE_SCHEM,
                                 S.TABLENAME      AS TABLE_NAME,
                                 FALSE            AS NON_UNIQUE,
                                 ASCII(NULL)      AS INDEX_QUALIFIER,
                                 ASCII(NULL)      AS INDEX_NAME,
                                 0                AS TYPE,
                                 0                AS ORDINAL_POSITION,
                                 ASCII(NULL)      AS COLUMN_NAME,
                                 ASCII(NULL)      AS ASC_OR_DESC,
                                 S.NUMERIC_VALUE  AS CARDINALITY,
                                 S1.NUMERIC_VALUE AS "PAGES",
                                 ASCII(NULL)      AS FILTER_CONDITION,
                                 NULL             AS COMMENT
                                 FROM SYSDD.TABLESTATISTICS S, SYSDD.TABLESTATISTICS S1
                                 WHERE S.DESCRIPTION  = 'Rows'
                                   AND S.SCHEMANAME   = S1.SCHEMANAME
                                   AND S.TABLENAME    = S1.TABLENAME
                                   AND S1.DESCRIPTION = 'Used  pages'
                                 INTERNAL
  """)

    stopIfSqlNotOK(session, """GRANT SELECT ON "INDEXINFO" TO PUBLIC WITH GRANT OPTION""") 
    stopIfSqlNotOK(session, """COMMENT ON TABLE "SYSJDBC"."INDEXINFO" IS 'Information about indexes and table statistics.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."INDEXINFO"."TABLE_CAT" IS 'Table catalog.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."INDEXINFO"."TABLE_SCHEM" IS 'Table schema.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."INDEXINFO"."TABLE_NAME" IS 'Table name.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."INDEXINFO"."NON_UNIQUE" IS 'Whether the index is non-unique, false for statistics.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."INDEXINFO"."INDEX_QUALIFIER" IS 'Index qualifier, always NULL.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."INDEXINFO"."INDEX_NAME" IS 'Index name, NULL for statistics.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."INDEXINFO"."TYPE" IS 'Index type or statistic.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."INDEXINFO"."ORDINAL_POSITION" IS 'Ordinal position of indexed column in the index, or 0 for statistic.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."INDEXINFO"."COLUMN_NAME" IS 'Name of the indexed column, or NULL for statistic.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."INDEXINFO"."ASC_OR_DESC" IS 'Ascending or descending sort order, or NULL for statistic.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."INDEXINFO"."CARDINALITY" IS 'Number of indexed rows, or table rows for statistic.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."INDEXINFO"."PAGES" IS 'Number of pages the index uses, or pages the table uses for statistic.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."INDEXINFO"."FILTER_CONDITION" IS 'Filter condition of the index, always NULL.'""")


    # ----------------------------------------------------------------------
    # SYSJDBC.UNIQUEINDEXINFO
    #
    # Contains index information and table statistics.
    # ----------------------------------------------------------------------
    stopIfSqlNotOK(session, """CREATE OR REPLACE VIEW UNIQUEINDEXINFO AS SELECT
                               ''                AS "TABLE_CAT",
                               I.SCHEMANAME      AS "TABLE_SCHEM",
                               I.TABLENAME       AS "TABLE_NAME",
                               DECODE(TYPE,
                                      'UNIQUE', FALSE,
                                      TRUE)      AS "NON_UNIQUE",
                               ASCII(NULL)       AS "INDEX_QUALIFIER",
                               I.INDEXNAME       AS "INDEX_NAME",
                               3                 AS "TYPE",
                               COLUMNNO          AS "ORDINAL_POSITION",
                               I.COLUMNNAME      AS "COLUMN_NAME",
                               DECODE(SORT,
                                      'ASC', 'A',
                                      'DESC', 'D',
                                      ASCII(NULL))      AS "ASC_OR_DESC",
                               S1.NUMERIC_VALUE  AS "CARDINALITY",
                               S2.NUMERIC_VALUE  AS "PAGES",
                               ASCII(NULL)       AS "FILTER_CONDITION",
                               I.COMMENT
                               FROM SYSDD.INDEXES I, SYSDD.INDEXSTATISTICS S1, SYSDD.INDEXSTATISTICS S2 
                               WHERE I.TYPE='UNIQUE'
                                     AND I.SCHEMANAME = S1.SCHEMANAME
                                     AND I.TABLENAME  = S1.TABLENAME
                                     AND I.INDEXNAME  = S1.INDEXNAME
                                     AND S1.DESCRIPTION = 'Primary keys'
                                     AND I.SCHEMANAME = S2.SCHEMANAME
                                     AND I.TABLENAME  = S2.TABLENAME
                                     AND I.INDEXNAME  = S2.INDEXNAME
                                     AND S2.DESCRIPTION = 'Index pages'
                               INTERNAL
    """)

    stopIfSqlNotOK(session, """GRANT SELECT ON "UNIQUEINDEXINFO" TO PUBLIC WITH GRANT OPTION""") 
    stopIfSqlNotOK(session, """COMMENT ON TABLE "SYSJDBC"."UNIQUEINDEXINFO" IS 'Information about indexes and table statistics.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."UNIQUEINDEXINFO"."TABLE_CAT" IS 'Table catalog.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."UNIQUEINDEXINFO"."TABLE_SCHEM" IS 'Table schema.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."UNIQUEINDEXINFO"."TABLE_NAME" IS 'Table name.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."UNIQUEINDEXINFO"."NON_UNIQUE" IS 'Whether the index is non-unique, false for statistics.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."UNIQUEINDEXINFO"."INDEX_QUALIFIER" IS 'Index qualifier, always NULL.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."UNIQUEINDEXINFO"."INDEX_NAME" IS 'Index name, NULL for statistics.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."UNIQUEINDEXINFO"."TYPE" IS 'Index type or statistic.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."UNIQUEINDEXINFO"."ORDINAL_POSITION" IS 'Ordinal position of indexed column in the index, or 0 for statistic.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."UNIQUEINDEXINFO"."COLUMN_NAME" IS 'Name of the indexed column, or NULL for statistic.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."UNIQUEINDEXINFO"."ASC_OR_DESC" IS 'Ascending or descending sort order, or NULL for statistic.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."UNIQUEINDEXINFO"."CARDINALITY" IS 'Number of indexed rows, or table rows for statistic.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."UNIQUEINDEXINFO"."PAGES" IS 'Number of pages the index uses, or pages the table uses for statistic.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."UNIQUEINDEXINFO"."FILTER_CONDITION" IS 'Filter condition of the index, always NULL.'""")

    #----------------------------------------------------------------------
    # SYSJDBC.APPROXINDEXINFO
    # Approximate (fast) index info. All statistic is skipped.
    #----------------------------------------------------------------------
    stopIfSqlNotOK(session, """CREATE OR REPLACE VIEW APPROXINDEXINFO AS SELECT
                               ''                AS "TABLE_CAT",
                               I.SCHEMANAME      AS "TABLE_SCHEM",
                               I.TABLENAME       AS "TABLE_NAME",
                               DECODE(TYPE,
                                      'UNIQUE', FALSE,
                                      TRUE)      AS "NON_UNIQUE",
                               ASCII(NULL)       AS "INDEX_QUALIFIER",
                               I.INDEXNAME       AS "INDEX_NAME",
                               3                 AS "TYPE",
                               COLUMNNO          AS "ORDINAL_POSITION",
                               I.COLUMNNAME      AS "COLUMN_NAME",
                               DECODE(SORT,
                                      'ASC', 'A',
                                      'DESC', 'D',
                                      ASCII(NULL))      AS "ASC_OR_DESC",
                               0  AS "CARDINALITY",
                               0  AS "PAGES",
                               ASCII(NULL)       AS "FILTER_CONDITION",
                               I.COMMENT
                               FROM SYSDD.INDEXES I
                               INTERNAL
    """)
    stopIfSqlNotOK(session, """GRANT SELECT ON "APPROXINDEXINFO" TO PUBLIC WITH GRANT OPTION""") 
    stopIfSqlNotOK(session, """COMMENT ON TABLE "SYSJDBC"."APPROXINDEXINFO" IS 'Information about indexes and table statistics.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."APPROXINDEXINFO"."TABLE_CAT" IS 'Table catalog.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."APPROXINDEXINFO"."TABLE_SCHEM" IS 'Table schema.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."APPROXINDEXINFO"."TABLE_NAME" IS 'Table name.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."APPROXINDEXINFO"."NON_UNIQUE" IS 'Whether the index is non-unique, false for statistics.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."APPROXINDEXINFO"."INDEX_QUALIFIER" IS 'Index qualifier, always NULL.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."APPROXINDEXINFO"."INDEX_NAME" IS 'Index name, NULL for statistics.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."APPROXINDEXINFO"."TYPE" IS 'Index type or statistic.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."APPROXINDEXINFO"."ORDINAL_POSITION" IS 'Ordinal position of indexed column in the index, or 0 for statistic.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."APPROXINDEXINFO"."COLUMN_NAME" IS 'Name of the indexed column, or NULL for statistic.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."APPROXINDEXINFO"."ASC_OR_DESC" IS 'Ascending or descending sort order, or NULL for statistic.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."APPROXINDEXINFO"."CARDINALITY" IS 'Number of indexed rows, or table rows for statistic.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."APPROXINDEXINFO"."PAGES" IS 'Number of pages the index uses, or pages the table uses for statistic.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."APPROXINDEXINFO"."FILTER_CONDITION" IS 'Filter condition of the index, always NULL.'""")
    
    # ----------------------------------------------------------------------
    # SYSJDBC.PROCEDURECOLUMNS
    #
    # Contains infos about db procedure parameters
    # ----------------------------------------------------------------------
    stopIfSqlNotOK(session, """CREATE OR REPLACE VIEW PROCEDURECOLUMNS AS SELECT
                               ''              AS PROCEDURE_CAT,
                               SCHEMANAME      AS PROCEDURE_SCHEM,
                               DBPROCEDURE     AS PROCEDURE_NAME,
                               PARAMETERNAME   AS COLUMN_NAME,
                               DECODE("IN/OUT-TYPE\",
                                       'IN', 1,
                                       '   OUT', 2,
                                       'IN/OUT', 4,
                                       0)     AS COLUMN_TYPE,
                               DECODE((DATATYPE || (' ' || CODE)),
                                          'CHAR',             1,
                                          'CHAR ASCII',       1,
                                          'CHAR UNICODE',     1,
                                          'CHAR BYTE',        -2,
                                          'VARCHAR',          12,
                                          'VARCHAR ASCII',    12,
                                          'VARCHAR UNICODE',  12,
                                          'VARCHAR BYTE',     -3,
                                          'LONG',             -1,
                                          'LONG ASCII',       -1,
                                          'LONG UNICODE',     -1,
                                          'LONG BYTE',        -4,
                                          'LONG RAW',         -4,
                                          'FIXED',             3,
                                          'DECIMAL',           3,
                                          'REAL',              7,
                                          'FLOAT',             6,
                                          'DOUBLE PRECISION',  8,
                                          'SMALLINT',          5,
                                          'INTEGER',           4,
                                          'BOOLEAN',           -7,
                                          'TIME',              92,
                                          'DATE',              91,
                                          'TIMESTAMP',         93,
                                          'NUMBER',            2,
                                          1111) 
                                               AS DATA_TYPE,
                               DECODE(DATATYPE,
                                      'CHAR',     'CHAR()',
                                      'VARCHAR',  'VARCHAR()',
                                      'LONG',     'LONG',
                                      'LONG RAW', 'LONG',
                                      DATATYPE) 
                                   || (' ' || CODE)
                                               AS TYPE_NAME,
                               LEN             AS PRECISION,
                                   DECODE(DECODE((DATATYPE || (' ' || CODE)),
                                          'CHAR',             'B',
                                          'CHAR ASCII',       'B',
                                          'CHAR UNICODE',     'U',
                                          'CHAR BYTE',        'B',
                                          'VARCHAR',          'B',
                                          'VARCHAR ASCII',    'B',
                                          'VARCHAR UNICODE',  'U',
                                          'CHAR BYTE',        'B',
                                          'LONG ASCII',       'L',
                                          'LONG UNICODE',     'L',
                                          'LONG BYTE',        'L',
                                          'LONG',             'L',
                                          'NC'),
                                          'B',   LEN,
                                          'U',   LEN + LEN,
                                          'L',  2147483647,
                                           NUM(NULL))
                                               AS "LENGTH",
                               "DEC"           AS "SCALE",
                               10              AS RADIX,
                               2               AS NULLABLE,
                               ASCII(NULL)     AS REMARKS,
                               PARAM_NO        AS ORDINAL_POSITION
                               FROM SYSDD.DBPROCPARAMETERS                               
                               INTERNAL
    """)
    stopIfSqlNotOK(session, """GRANT SELECT ON "PROCEDURECOLUMNS" TO PUBLIC WITH GRANT OPTION""") 
    stopIfSqlNotOK(session, """COMMENT ON TABLE "SYSJDBC"."PROCEDURECOLUMNS" IS 'Information about procedure parameters.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."PROCEDURECOLUMNS"."PROCEDURE_CAT" IS 'Procedure catalog.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."PROCEDURECOLUMNS"."PROCEDURE_SCHEM" IS 'Procedure schema.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."PROCEDURECOLUMNS"."PROCEDURE_NAME" IS 'Procedure name.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."PROCEDURECOLUMNS"."COLUMN_NAME"    IS 'Procedure parameter name.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."PROCEDURECOLUMNS"."COLUMN_TYPE"    IS 'Kind of parameter (IN/OUT).'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."PROCEDURECOLUMNS"."DATA_TYPE"      IS 'SQL data type.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."PROCEDURECOLUMNS"."TYPE_NAME"      IS 'SQL type name.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."PROCEDURECOLUMNS"."PRECISION"      IS 'Precision.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."PROCEDURECOLUMNS"."LENGTH"         IS 'Length in bytes.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."PROCEDURECOLUMNS"."SCALE"          IS 'Scale.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."PROCEDURECOLUMNS"."RADIX"          IS 'Radix.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."PROCEDURECOLUMNS"."NULLABLE"       IS 'Wether it can be a NULL value.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."PROCEDURECOLUMNS"."REMARKS"        IS 'Comment, always NULL.'""")

    stopIfSqlNotOK(session, """CREATE OR REPLACE VIEW PROCEDURES AS SELECT
                               ''                                AS PROCEDURE_CAT,
                               SCHEMANAME                        AS PROCEDURE_SCHEM,
                               DBPROCEDURE                       AS PROCEDURE_NAME,
                               NULL                              AS RESERVED4,
                               NULL                              AS RESERVED5,
                               NULL                              AS RESERVED6,
                               COMMENT                           AS REMARKS,
                               DECODE("CURSOR",
                                      'YES', 2,
                                      'NO',  1,
                                      0)                         AS PROCEDURE_TYPE
                               FROM SYSDD.DBPROCEDURES WHERE TYPE = 'DBPROC'
                               INTERNAL
    """)
    stopIfSqlNotOK(session, """GRANT SELECT ON "PROCEDURES" TO PUBLIC WITH GRANT OPTION""") 
    stopIfSqlNotOK(session, """COMMENT ON TABLE "SYSJDBC"."PROCEDURES" IS 'Information about procedures.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."PROCEDURES"."PROCEDURE_CAT" IS 'Procedure catalog.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."PROCEDURES"."PROCEDURE_SCHEM" IS 'Procedure schema.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."PROCEDURES"."PROCEDURE_NAME" IS 'Procedure name.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSJDBC"."PROCEDURES"."REMARKS"        IS 'Comment.'""")

    stopIfSqlNotOK(session, """CREATE OR REPLACE VIEW SCHEMAS AS SELECT
                               SCHEMANAME                     AS TABLE_SCHEM,
                               ''                             AS TABLE_CATALOG
                               FROM DOMAIN.SCHEMAS
                               INTERNAL
    """)
    stopIfSqlNotOK(session, """GRANT SELECT ON "SCHEMAS" TO PUBLIC WITH GRANT OPTION""") 

    stopIfSqlNotOK(session, """CREATE OR REPLACE VIEW SUPERTABLES AS SELECT
                               ''                             AS TABLE_CAT,
                               ''                             AS TABLE_SCHEM,
                               ''                             AS TABLE_NAME,
                               ''                             AS SUPERTABLE_NAME
                               FROM DUAL WHERE 1 <> 1
                               INTERNAL
    """)
    stopIfSqlNotOK(session, """GRANT SELECT ON "SUPERTABLES" TO PUBLIC WITH GRANT OPTION""")

    stopIfSqlNotOK(session, """CREATE OR REPLACE VIEW SUPERTYPES AS SELECT
                               ''                             AS TYPE_CAT,
                               ''                             AS TYPE_SCHEM,
                               ''                             AS TYPE_NAME,
                               ''                             AS SUPERTYPE_CAT,
                               ''                             AS SUPERTYPE_SCHEM,
                               ''                             AS SUPERTYPE_NAME
                               FROM DUAL WHERE 1 <> 1
                               INTERNAL
    """)
    stopIfSqlNotOK(session, """GRANT SELECT ON "SUPERTYPES" TO PUBLIC WITH GRANT OPTION""")
    
    dropTable(session, "TABLETYPES")
    stopIfSqlNotOK(session, """CREATE TABLE TABLETYPES (TABLE_TYPE VARCHAR(32) ASCII PRIMARY KEY) INTERNAL""")
    stopIfSqlNotOK(session, """INSERT INTO TABLETYPES VALUES('RESULT')""")
    stopIfSqlNotOK(session, """INSERT INTO TABLETYPES VALUES('VIEW')""")
    stopIfSqlNotOK(session, """INSERT INTO TABLETYPES VALUES('TABLE')""")
    stopIfSqlNotOK(session, """INSERT INTO TABLETYPES VALUES('SYSTEM')""")
    stopIfSqlNotOK(session, """INSERT INTO TABLETYPES VALUES('SYNONYM')""")
    stopIfSqlNotOK(session, """GRANT SELECT ON "TABLETYPES" TO PUBLIC WITH GRANT OPTION""")

    
    stopIfSqlNotOK(session, """CREATE OR REPLACE VIEW TABLES AS SELECT
                   ''                   AS TABLE_CAT,
                   SCHEMANAME           AS TABLE_SCHEM,
                   TABLENAME            AS TABLE_NAME,
                   TYPE                 AS TABLE_TYPE,
                   COMMENT              AS REMARKS,
                   SAMPLE_PERCENT,
                   SAMPLE_ROWS
                   FROM DOMAIN.TABLES
                   INTERNAL
    """)
    stopIfSqlNotOK(session, """GRANT SELECT ON "TABLES" TO PUBLIC WITH GRANT OPTION""")
   
    stopIfSqlNotOK(session, """CREATE OR REPLACE VIEW CONSTRAINTS AS SELECT
                   ''                   AS TABLE_CAT,
                   SCHEMANAME           AS TABLE_SCHEM,
                   TABLENAME            AS TABLE_NAME,
                   CONSTRAINTNAME       AS CONSTRAINT_NAME,
                   DEFINITION           AS CONSTRAINTS_DEFINITION
                   FROM DOMAIN.CONSTRAINTS
                   INTERNAL
    """)
    stopIfSqlNotOK(session, """GRANT SELECT ON "CONSTRAINTS" TO PUBLIC WITH GRANT OPTION""")
    
    stopIfSqlNotOK(session, """CREATE OR REPLACE VIEW VERSIONCOLUMNS AS SELECT
                               0                              AS SCOPE,
                               ''                             AS COLUMN_NAME,
                               0                              AS DATA_TYPE,
                               ''                             AS TYPE_NAME,
                               0                              AS COLUMN_SIZE,
                               0                              AS BUFFER_LENGTH,
                               0                              AS DECIMAL_DIGITS,
                               0                              AS PSEUDO_COLUMN
                               FROM DUAL WHERE 1 <> 1
                               INTERNAL
    """)
    stopIfSqlNotOK(session, """GRANT SELECT ON "VERSIONCOLUMNS" TO PUBLIC WITH GRANT OPTION""")

    stopIfSqlNotOK(session, """CREATE OR REPLACE VIEW UDTS AS SELECT
                               ''                             AS TYPE_CAT,
                               ''                             AS TYPE_SCHEM,
                               ''                             AS TYPE_NAME,
                               ''                             AS CLASS_NAME,
                               0                              AS DATA_TYPE,
                               ''                             AS REMARKS,
                               0                              AS BASE_TYPE
                               FROM DUAL WHERE 1 <> 1
                               INTERNAL
    """)
    stopIfSqlNotOK(session, """GRANT SELECT ON "UDTS" TO PUBLIC WITH GRANT OPTION""")

    switchToDefaultSchema (session, options)

    loaderCmd(session, 'COMMIT')
    loaderCmd(session, 'INSTALLATION OFF')

if __name__ == '__main__':
    connectAndInstall (install, install.__doc__)

