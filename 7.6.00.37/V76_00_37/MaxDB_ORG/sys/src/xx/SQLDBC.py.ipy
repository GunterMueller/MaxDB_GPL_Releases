
#    ========== licence begin  GPL
#    Copyright (c) 2000-2005 SAP AG
#
#    This program is free software; you can redistribute it and/or
#    modify it under the terms of the GNU General Public License
#    as published by the Free Software Foundation; either version 2
#    of the License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#    ========== licence end

from installib import *

def install (session,options):
    """Installing tables for SQLDBC Database Metadata
    """
    loaderCmd(session, 'INSTALLATION ON')
    loaderCmd(session, 'AUTOCOMMIT OFF')

    stopIfSqlNotErr(session, -4024, 'DROP SCHEMA SYSSQLDBC')

    stopIfSqlNotOK(session, 'CREATE SCHEMA SYSSQLDBC')
   
    switchToSchema (session, 'SYSSQLDBC')
###############

    # ----------------------------------------------------------------------
    # SYSSQLDBC.TABLEPRIVILEGES
    #
    # Contains information on privileges for complete tables.
    # ----------------------------------------------------------------------
    stopIfSqlNotOK(session, """CREATE OR REPLACE VIEW "TABLEPRIVILEGES" AS
                               SELECT ASCII(NULL)              AS TABLE_CAT,
                                      T.SCHEMANAME             AS TABLE_SCHEM,
                                      T.TABLENAME              AS TABLE_NAME,
                                      P.GRANTOR                AS GRANTOR,
                                      P.GRANTEE                AS GRANTEE,
                                      ASCII(DECODE(SUBSTR(P.PRIVILEGES, LENGTH(P.PRIVILEGES), 1), 
                                            '+', SUBSTR(P.PRIVILEGES, 1, LENGTH(P.PRIVILEGES)-1),
                                             P.PRIVILEGES))   AS PRIVILEGE,
                                      ASCII(DECODE(SUBSTR(P.PRIVILEGES, LENGTH(P.PRIVILEGES), 1),
                                            '+', 'YES',
                                            'NO'))           AS IS_GRANTABLE
                                FROM SYSDD.NEW_PRIVILEGES P, SYSDD.TABLES T
                                WHERE T.SCHEMANAME=P.SCHEMANAME 
                                AND T.TABLENAME = P.NAME1 
                                AND P.NAME2 IS NULL
                                AND P.TYPE NOT IN ('SEQUENCE', 'DBPROC') 
                                AND T.TYPE <> 'SYNONYM' INTERNAL                                   
    """)
    stopIfSqlNotOK(session, """GRANT SELECT ON "TABLEPRIVILEGES" TO PUBLIC WITH GRANT OPTION""") 
    stopIfSqlNotOK(session, """COMMENT ON TABLE "SYSSQLDBC"."TABLEPRIVILEGES" IS 'Information about access rights for tables'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."TABLEPRIVILEGES"."TABLE_CAT" IS 'Catalog name, always '''''""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."TABLEPRIVILEGES"."TABLE_SCHEM" IS 'Schema name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."TABLEPRIVILEGES"."TABLE_NAME" IS 'Table name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."TABLEPRIVILEGES"."GRANTOR" IS 'Grantor of access'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."TABLEPRIVILEGES"."GRANTEE" IS 'Grantee of access'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."TABLEPRIVILEGES"."PRIVILEGE" IS 'Name of access'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."TABLEPRIVILEGES"."IS_GRANTABLE" IS '''YES'' if grantee is permitted to grant to others, ''NO'' otherwise'""")
    

    # ----------------------------------------------------------------------
    # SYSSQLDBC.PROCCOLUMNS
    #
    # Contains infos about db procedure parameters
    # ----------------------------------------------------------------------
    stopIfSqlNotOK(session, """CREATE OR REPLACE VIEW PROCCOLUMNS AS SELECT
                               ASCII(NULL)      PROCEDURE_CAT,
                               SCHEMANAME       PROCEDURE_SCHEM,
                               DBPROCEDURE      PROCEDURE_NAME,
                               PARAMETERNAME    COLUMN_NAME,
                               DECODE("IN/OUT-TYPE\",
                                       'IN', 1,
                                       '   OUT', 2,
                                       'IN/OUT', 4,
                                       0)     AS COLUMN_TYPE,
                               DECODE((DATATYPE || (' ' || CODE)),
                                          'CHAR',             1,
                                          'CHAR ASCII',       1,
                                          'CHAR UNICODE',     1,
                                          'CHAR BYTE',        -2,
                                          'VARCHAR',          12,
                                          'VARCHAR ASCII',    12,
                                          'VARCHAR UNICODE',  12,
                                          'VARCHAR BYTE',     -3,
                                          'LONG',             -1,
                                          'LONG ASCII',       -1,
                                          'LONG UNICODE',     -1,
                                          'LONG BYTE',        -4,
                                          'LONG RAW',         -4,
                                          'FIXED',             3,
                                          'DECIMAL',           3,
                                          'REAL',              7,
                                          'FLOAT',             6,
                                          'DOUBLE PRECISION',  8,
                                          'SMALLINT',          5,
                                          'INTEGER',           4,
                                          'BOOLEAN',           -7,
                                          'TIME',              92,
                                          'DATE',              91,
                                          'TIMESTAMP',         93,
                                          'NUMBER',            2,
                                          99) 
                                                DATA_TYPE,
                               DECODE(DATATYPE,
                                      'CHAR',     'CHAR',
                                      'VARCHAR',  'VARCHAR',
                                      'LONG',     'LONG',
                                      'LONG RAW', 'LONG',
                                      DATATYPE) 
                                   || (' ' || CODE)
                                                TYPE_NAME,
                               LEN              COLUMN_SIZE,
                               DECODE(DECODE((DATATYPE || (' ' || CODE)),
                                      'CHAR',             'B',
                                      'CHAR ASCII',       'B',
                                      'CHAR UNICODE',     'U',
                                      'CHAR BYTE',        'B',
                                      'VARCHAR',          'B',
                                      'VARCHAR ASCII',    'B',
                                      'VARCHAR UNICODE',  'U',
                                      'CHAR BYTE',        'B',
                                      'LONG ASCII',       'L',
                                      'LONG UNICODE',     'L',
                                      'LONG BYTE',        'L',
                                      'LONG',             'L',
                                      'NC'),
                                      'B',   LEN,
                                      'U',   LEN + LEN,
                                      'L',  2147483647,
                                       NUM(NULL))
                                                BUFFER_LENGTH,
                               "DEC"            DECIMAL_DIGITS,
                               10               NUM_PREC_RADIX,
                               2                NULLABLE,
                               ASCII(NULL)      REMARKS,
                               ASCII(NULL)      COLUMN_DEF,
                               0                SQL_DATA_TYPE,
                               0                SQL_DATETIME_SUB,
                               DECODE(DECODE((DATATYPE || (' ' || CODE)),
                                      'CHAR',             'B',
                                      'CHAR ASCII',       'B',
                                      'CHAR UNICODE',     'U',
                                      'CHAR BYTE',        'B',
                                      'VARCHAR',          'B',
                                      'VARCHAR ASCII',    'B',
                                      'VARCHAR UNICODE',  'U',
                                      'CHAR BYTE',        'B',
                                      'LONG ASCII',       'L',
                                      'LONG UNICODE',     'L',
                                      'LONG BYTE',        'L',
                                      'LONG',             'L',
                                      'NC'),
                                      'B',   LEN,
                                      'U',   LEN + LEN,
                                      'L',  2147483647,
                                       NUM(NULL))
                                                CHAR_OCTET_LENGTH,
                               PARAM_NO         ORDINAL_POSITION,
                               'YES'            IS_NULLABLE
                               FROM SYSDD.DBPROCPARAMETERS INTERNAL                              
    """)
    stopIfSqlNotOK(session, """GRANT SELECT ON "PROCCOLUMNS" TO PUBLIC WITH GRANT OPTION""") 
    stopIfSqlNotOK(session, """COMMENT ON TABLE "SYSSQLDBC"."PROCCOLUMNS" IS 'Information about procedure parameters.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."PROCCOLUMNS"."PROCEDURE_CAT" IS 'Procedure catalog.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."PROCCOLUMNS"."PROCEDURE_SCHEM" IS 'Procedure schema.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."PROCCOLUMNS"."PROCEDURE_NAME" IS 'Procedure name.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."PROCCOLUMNS"."COLUMN_NAME"    IS 'Procedure parameter name.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."PROCCOLUMNS"."COLUMN_TYPE"    IS 'Kind of parameter (IN/OUT).'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."PROCCOLUMNS"."DATA_TYPE"      IS 'SQL data type.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."PROCCOLUMNS"."TYPE_NAME"      IS 'SQL type name.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."PROCCOLUMNS"."COLUMN_SIZE"      IS 'Precision.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."PROCCOLUMNS"."BUFFER_LENGTH"         IS 'Length in bytes.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."PROCCOLUMNS"."DECIMAL_DIGITS"          IS 'Scale.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."PROCCOLUMNS"."NUM_PREC_RADIX"          IS 'Radix.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."PROCCOLUMNS"."NULLABLE"       IS 'Wether it can be a NULL value.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."PROCCOLUMNS"."REMARKS"        IS 'Comment, always NULL.'""")

    # ********************************
    #  View SYSSQLDBC.PROCEDURES
    # ********************************
    stopIfSqlNotOK(session, """CREATE OR REPLACE VIEW PROCEDURES AS SELECT
                               ASCII(NULL)                        PROCEDURE_CAT,
                               SCHEMANAME                         PROCEDURE_SCHEM,
                               DBPROCEDURE                        PROCEDURE_NAME,
                               NUM(NULL)                          NUM_INPUT_PARAMS,
                               NUM(NULL)                          NUM_OUTPUT_PARAMS,
                               NUM(NULL)                          NUM_RESULT_SETS,
                               COMMENT                            REMARKS,
                               DECODE("CURSOR",
                                      'YES', 2,
                                      'NO',  1,
                                      0)                          PROCEDURE_TYPE
                               FROM SYSDD.DBPROCEDURES WHERE TYPE = 'DBPROC' INTERNAL
    """)
    stopIfSqlNotOK(session, """GRANT SELECT ON "PROCEDURES" TO PUBLIC WITH GRANT OPTION""") 
    stopIfSqlNotOK(session, """COMMENT ON TABLE "SYSSQLDBC"."PROCEDURES" IS 'Information about procedures.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."PROCEDURES"."PROCEDURE_CAT" IS 'Procedure catalog.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."PROCEDURES"."PROCEDURE_SCHEM" IS 'Procedure schema.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."PROCEDURES"."PROCEDURE_NAME" IS 'Procedure name.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."PROCEDURES"."REMARKS"        IS 'Comment.'""")



    # ********************************
    #  View SQLDBC.FOREIGNKEYS
    #
    #  Contains references of foreign keys.
    #
    # ********************************

#    dropTable (session, "FOREIGNKEYS")

    stopIfSqlNotOK (session, """
        CREATE OR REPLACE VIEW FOREIGNKEYS
              (PKTABLE_CAT, PKTABLE_SCHEM, PKTABLE_NAME, PKCOLUMN_NAME,
               FK_TABLE_CAT, FKTABLE_SCHEM, FKTABLE_NAME, FKCOLUMN_NAME,
               KEY_SEQ, UPDATE_RULE, DELETE_RULE, FK_NAME, PK_NAME, DEFERRABILITY)
            AS SELECT
               ASCII(NULL), REFSCHEMANAME, REFTABLENAME, REFCOLUMNNAME, ASCII(NULL), SCHEMANAME,
               TABLENAME, COLUMNNAME, KEYCOLUMNNO, NUM(NULL), NUM(DECODE(RULE,
               'DELETE CASCADE',0,'DELETE RESTRICT',1,'DELETE SET NULL',2,2)),
               REFNAME, ASCII(NULL), NUM(7)
            FROM SYSDD.FOREIGN_KEYS
            INTERNAL""")

    stopIfSqlNotOK (session, 'GRANT SELECT ON FOREIGNKEYS TO PUBLIC')
    stopIfSqlNotOK(session, """COMMENT ON TABLE "SYSSQLDBC"."FOREIGNKEYS" IS 'Information about foreign key relations'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."FOREIGNKEYS"."PKTABLE_CAT" IS 'Primary table catalog name, always '''''""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."FOREIGNKEYS"."PKTABLE_SCHEM" IS 'Primary table schema name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."FOREIGNKEYS"."PKTABLE_NAME" IS 'Primary table name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."FOREIGNKEYS"."PKCOLUMN_NAME" IS 'Primary table column name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."FOREIGNKEYS"."FK_TABLE_CAT" IS 'Foreign key table catalog name, always '''''""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."FOREIGNKEYS"."FKTABLE_SCHEM" IS 'Foreign key table schema name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."FOREIGNKEYS"."FKTABLE_NAME" IS 'Foreign key table table name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."FOREIGNKEYS"."FKCOLUMN_NAME" IS 'Foreign key table column name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."FOREIGNKEYS"."KEY_SEQ" IS 'Sequence number within the foreign key'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."FOREIGNKEYS"."UPDATE_RULE" IS 'Constant for rule at UPDATE command'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."FOREIGNKEYS"."DELETE_RULE" IS 'Constant for rule at DELETE command'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."FOREIGNKEYS"."FK_NAME"     IS 'Name of the foreign key'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."FOREIGNKEYS"."PK_NAME"     IS 'Name of the referenced primary key, always NULL'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."FOREIGNKEYS"."DEFERRABILITY" IS 'Whether the evaluation of the constraint can be deferred to the COMMIT'""")


    # ********************************
    #  Table SYSSQLDBC.TYPES
    #
    #  Contains supported types.
    #
    # ********************************

    dropTable (session, "TYPES")

    stopIfSqlNotOK (session, """
CREATE TABLE TYPES
    (
      "TYPE_NAME"           VARCHAR(18) ASCII NOT NULL,
      "DATA_TYPE"           SMALLINT NOT NULL,
      "PRECISION"           INTEGER,
      "LITERAL_PREFIX"      VARCHAR(3) ASCII,
      "LITERAL_SUFFIX"      VARCHAR(3) ASCII,
      "CREATE_PARAMS"       VARCHAR(128) ASCII,
      "NULLABLE"            SMALLINT NOT NULL,
      "CASE_SENSITIVE"      SMALLINT NOT NULL,
      "SEARCHABLE"          SMALLINT NOT NULL,
      "UNSIGNED_ATTRIBUTE"  SMALLINT,
      "MONEY"               SMALLINT NOT NULL,
      "AUTO_INCREMENT"      SMALLINT,
      "LOCAL_TYPE_NAME"     VARCHAR(18) ASCII,
      "MINIMUM_SCALE"       SMALLINT,
      "MAXIMUM_SCALE"       SMALLINT,
      "SQL_DATA_TYPE"       SMALLINT NOT NULL,
      "SQL_DATETIME_SUB"    SMALLINT,
      "NUM_PREC_RADIX"      INTEGER,
      "INTERVAL_PRECISION"  SMALLINT,
      "REMARKS"             VARCHAR(254) ASCII
    )
INTERNAL""")

    stopIfSqlNotOK (session, 'GRANT SELECT ON TYPES TO PUBLIC')

    dataLoad (session, """
DATALOAD TABLE TYPES
"TYPE_NAME"           1
"DATA_TYPE"           2
"PRECISION"           3 DEFAULT NULL
"LITERAL_PREFIX"      4 DEFAULT NULL
"LITERAL_SUFFIX"      5 DEFAULT NULL
"CREATE_PARAMS"       6 DEFAULT NULL
"NULLABLE"            7
"CASE_SENSITIVE"      8
"SEARCHABLE"          9
"UNSIGNED_ATTRIBUTE" 10 DEFAULT NULL
"MONEY"              11
"AUTO_INCREMENT"     12 DEFAULT NULL
"LOCAL_TYPE_NAME"    13 DEFAULT NULL
"MINIMUM_SCALE"      14 DEFAULT NULL
"MAXIMUM_SCALE"      15 DEFAULT NULL
"SQL_DATA_TYPE"      16
"SQL_DATETIME_SUB"   17 DEFAULT NULL
"NUM_PREC_RADIX"     18 DEFAULT NULL
"INTERVAL_PRECISION" 19 DEFAULT NULL
"REMARKS"            20 DEFAULT NULL
INFILE *
COMPRESSED
SEPARATOR '|'
DELIMITER '' ""","""
CHAR|1|8000|'|'|max length|1|1|3|?|0|?|CHAR|?|?|1|?|?|?|?
DECIMAL|2|38|?|?|precision,scale|1|0|2|0|0|?|NUMERIC|0|38|2|?|10|?|?
FIXED|3|38|?|?|precision,scale|1|0|2|0|0|?|DECIMAL|0|38|3|?|10|?|?
INTEGER|4|10|?|?|?|1|0|2|0|0|?|INTEGER|?|?|4|?|10|?|?
SMALLINT|5|5|?|?|?|1|0|2|0|0|?|SMALLINT|?|?|5|?|10|?|?
FLOAT|6|15|?|?|?|1|0|2|0|0|?|FLOAT|?|?|6|?|2|?|?
REAL|7|15|?|?|?|1|0|2|0|0|?|REAL|?|?|7|?|2|?|?
DOUBLE PRECISION|8|16|?|?|?|1|0|2|0|0|?|DOUBLE PRECISION|?|?|8|?|2|?|?
DATE|9|10|'|'|?|1|0|2|?|0|?|DATE|?|?|9|1|?|?|?
TIME|10|8|'|'|?|1|0|2|?|0|?|TIME|?|?|9|2|?|?|?
TIMESTAMP|11|26|'|'|?|1|0|2|?|0|?|TIMESTAMP|?|?|9|3|?|?|?
VARCHAR|12|8000|'|'|max length|1|1|3|?|0|?|VARCHAR|?|?|12|?|?|?|?
LONG|-1|2147483647|'|'|?|1|1|0|?|0|?|LONG|?|?|-1|?|?|?|?
CHAR BYTE|-2|8000|X'|'|max length|1|0|2|?|0|?|BINARY|?|?|-2|?|?|?|?
VARCHAR BYTE|-3|8000|X'|'|max length|1|0|2|?|0|?|VARBINARY|?|?|-3|?|?|?|?
LONG BYTE|-4|2147483647|X'|'|?|1|0|0|?|0|?|LONG BYTE|?|?|-4|?|?|?|?
BOOLEAN|-7|1|?|?|?|1|0|2|?|0|?|BOOLEAN|?|?|-7|?|?|?|?
""")


    if sqlOK (session, """
            SELECT PARAMETERNAME
            FROM SYSDD.ACTIVECONFIGURATION
            WHERE PARAMETERNAME = '_UNICODE'
            AND "VALUE" = 'YES'"""):
        dataLoad (session, """
DATALOAD TABLE TYPES
"TYPE_NAME"           1
"DATA_TYPE"           2
"PRECISION"           3 DEFAULT NULL
"LITERAL_PREFIX"      4 DEFAULT NULL
"LITERAL_SUFFIX"      5 DEFAULT NULL
"CREATE_PARAMS"       6 DEFAULT NULL
"NULLABLE"            7
"CASE_SENSITIVE"      8
"SEARCHABLE"          9
"UNSIGNED_ATTRIBUTE" 10 DEFAULT NULL
"MONEY"              11
"AUTO_INCREMENT"     12 DEFAULT NULL
"LOCAL_TYPE_NAME"    13 DEFAULT NULL
"MINIMUM_SCALE"      14 DEFAULT NULL
"MAXIMUM_SCALE"      15 DEFAULT NULL
"SQL_DATA_TYPE"      16
"SQL_DATETIME_SUB"   17 DEFAULT NULL
"NUM_PREC_RADIX"     18 DEFAULT NULL
"INTERVAL_PRECISION" 19 DEFAULT NULL
"REMARKS"            20 DEFAULT NULL
INFILE *
COMPRESSED SEPARATOR '|' DELIMITER '' ""","""
CHAR UNICODE|-8|4000|'|'|max length|1|1|3|?|0|?|UNICODE|?|?|-8|?|?|?|?
VARCHAR UNICODE|-9|4000|'|'|max length|1|1|3|?|0|?|UNICODE VARCHAR|?|?|-9|?|?|?|?
LONG UNICODE|-10|1073741823|?|?|?|1|0|2|?|0|?|LONG UNICODE|?|?|-10|?|?|?|?
""")



    # ********************************
    #  Table SYSSQLDBC.TABLETYPES
    #
    #  Contains types of tables.
    #
    # ********************************

    dropTable(session, "TABLETYPES")
    stopIfSqlNotOK(session, """CREATE TABLE TABLETYPES (TABLE_TYPE VARCHAR(32) ASCII PRIMARY KEY) INTERNAL """)
    stopIfSqlNotOK(session, """INSERT INTO TABLETYPES VALUES('RESULT')""")
    stopIfSqlNotOK(session, """INSERT INTO TABLETYPES VALUES('VIEW')""")
    stopIfSqlNotOK(session, """INSERT INTO TABLETYPES VALUES('TABLE')""")
    stopIfSqlNotOK(session, """INSERT INTO TABLETYPES VALUES('SYSTEM TABLE')""")
    stopIfSqlNotOK(session, """INSERT INTO TABLETYPES VALUES('SYNONYM')""")
    stopIfSqlNotOK(session, """GRANT SELECT ON "TABLETYPES" TO PUBLIC WITH GRANT OPTION""")


    # ********************************
    #  View SYSSQLDBC.SCHEMAS
    #
    #  Contains information on schemas.
    #
    # ********************************

    stopIfSqlNotOK(session, """CREATE OR REPLACE VIEW SCHEMAS AS SELECT
                               ASCII(NULL)   TABLE_CATALOG,
                               SCHEMANAME    TABLE_SCHEM
                               FROM DOMAIN.SCHEMAS
                               INTERNAL
    """)
    stopIfSqlNotOK(session, """GRANT SELECT ON "SCHEMAS" TO PUBLIC WITH GRANT OPTION""") 


    # ********************************
    #  View SYSSQLDBC.TABLES
    #
    #  Contains information on tables.
    #
    # ********************************

    rc = sqlRC (session, """SELECT PARAMETERNAME FROM SYSDD.ACTIVECONFIGURATION 
        WHERE PARAMETERNAME = '_UNICODE'
        AND "VALUE" = 'YES'""")

    if rc == 0:
        stopIfSqlNotOK (session, """CREATE OR REPLACE VIEW TABLES AS SELECT
                   ASCII(NULL)                                        TABLE_CAT,
                   SCHEMANAME                                         TABLE_SCHEM,
                   TABLENAME                                          TABLE_NAME,
                   DECODE(TYPE,'SYSTEM',UNICODE('SYSTEM TABLE'),TYPE) TABLE_TYPE,
                   COMMENT                                            REMARKS
                FROM "SYSDD".TABLES
                INTERNAL""")

    else:
        stopIfSqlNotOK (session, """CREATE OR REPLACE VIEW TABLES AS SELECT
                   ASCII(NULL)                               TABLE_CAT,
                   SCHEMANAME                                TABLE_SCHEM,
                   TABLENAME                                 TABLE_NAME,
                   DECODE(TYPE,'SYSTEM','SYSTEM TABLE',TYPE) TABLE_TYPE,
                   COMMENT                                   REMARKS
                FROM "SYSDD".TABLES
                INTERNAL""")

    stopIfSqlNotOK(session, """GRANT SELECT ON "TABLES" TO PUBLIC WITH GRANT OPTION""")


    # ----------------------------------------------------------------------
    # VIEW SYSSQLDBC.BESTROWIDENTIFIER
    #
    # Contains information on columns of tables.
    # ----------------------------------------------------------------------
    stopIfSqlNotOK(session, """CREATE OR REPLACE VIEW BESTROWIDENTIFIER AS SELECT
                                 ASCII(NULL) TABLE_CAT,
                                 SCHEMANAME  TABLE_SCHEM,
                                 TABLENAME   TABLE_NAME,
                                 2           SCOPE,
                                 COLUMNNAME  COLUMN_NAME,
                                 DECODE((DATATYPE || (' ' || CODE)),
                                        'CHAR',             1,
                                        'CHAR ASCII',       1,
                                        'CHAR UNICODE',     1,
                                        'CHAR BYTE',        -2,
                                        'VARCHAR',          12,
                                        'VARCHAR ASCII',    12,
                                        'VARCHAR UNICODE',  12,
                                        'VARCHAR BYTE',     -3,
                                        'LONG',             -1,
                                        'LONG ASCII',       -1,
                                        'LONG UNICODE',     -1,
                                        'LONG BYTE',        -4,
                                        'LONG RAW',         -4,
                                        'FIXED',             3,
                                        'DECIMAL',           3,
                                        'REAL',              7,
                                        'FLOAT',             6,
                                        'DOUBLE PRECISION',  8,
                                        'SMALLINT',          5,
                                        'INTEGER',           4,
                                        'BOOLEAN',           -7,
                                        'TIME',              92,
                                        'DATE',              91,
                                        'TIMESTAMP',         93,
                                        'NUMBER',            2,
                                         99) 
                                                             AS DATA_TYPE,
                                 DECODE(DATATYPE,
                                        'CHAR',     'CHAR',
                                        'VARCHAR',  'VARCHAR',
                                        'LONG',     'LONG',
                                        'LONG RAW', 'LONG',
                                         DATATYPE) 
                                 || (' ' || CODE)
                                                              TYPE_NAME,
                                 LEN                          COLUMN_SIZE,
                                 NUM(NULL)                    BUFFER_LENGTH,
                                 DEC                          DECIMAL_DIGITS,
                                 1                            PSEUDO_COLUMN 
                                 FROM SYSDD.COLUMNS 
                                 WHERE KEYCOLUMNNO IS NOT NULL
                                 INTERNAL
    """) 
    stopIfSqlNotOK(session, """GRANT SELECT ON "BESTROWIDENTIFIER" TO PUBLIC WITH GRANT OPTION""") 
    stopIfSqlNotOK(session, """COMMENT ON TABLE "SYSSQLDBC"."BESTROWIDENTIFIER" IS 'Information about the best identifier of a row.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."BESTROWIDENTIFIER"."TABLE_CAT" IS 'Catalog name, always '''''""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."BESTROWIDENTIFIER"."TABLE_SCHEM" IS 'Schema name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."BESTROWIDENTIFIER"."TABLE_NAME" IS 'Table name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."BESTROWIDENTIFIER"."SCOPE" IS 'Scope of the identifier, always 2.'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."BESTROWIDENTIFIER"."COLUMN_NAME" IS 'Column name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."BESTROWIDENTIFIER"."DATA_TYPE" IS 'SQL type code of the column'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."BESTROWIDENTIFIER"."TYPE_NAME" IS 'SQL type name of the column'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."BESTROWIDENTIFIER"."COLUMN_SIZE" IS 'Column size, either maximum number of characters or precision'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."BESTROWIDENTIFIER"."BUFFER_LENGTH" IS 'Unused, always NULL'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."BESTROWIDENTIFIER"."DECIMAL_DIGITS" IS 'Number of fractional digits'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."BESTROWIDENTIFIER"."PSEUDO_COLUMN" IS 'Whether the column is a pseudo-column'""")


    # ----------------------------------------------------------------------
    # VIEW SYSSQLDBC.COLUMNS
    #
    # Contains information on columns of tables.
    # ----------------------------------------------------------------------
    stopIfSqlNotOK(session, """CREATE OR REPLACE VIEW "COLUMNS" AS
                            SELECT ASCII(NULL)                TABLE_CAT,
                                   SCHEMANAME                 TABLE_SCHEM,
                                   TABLENAME                  TABLE_NAME,
                                   COLUMNNAME                 COLUMN_NAME,
                                   DECODE((DATATYPE || (' ' || CODE)),
                                          'CHAR',             1,
                                          'CHAR ASCII',       1,
                                          'CHAR UNICODE',     1,
                                          'CHAR BYTE',        -2,
                                          'VARCHAR',          12,
                                          'VARCHAR ASCII',    12,
                                          'VARCHAR UNICODE',  12,
                                          'VARCHAR BYTE',     -3,
                                          'LONG',             -1,
                                          'LONG ASCII',       -1,
                                          'LONG UNICODE',     -1,
                                          'LONG BYTE',        -4,
                                          'LONG RAW',         -4,
                                          'FIXED',             3,
                                          'DECIMAL',           3,
                                          'REAL',              7,
                                          'FLOAT',             6,
                                          'DOUBLE PRECISION',  8,
                                          'SMALLINT',          5,
                                          'INTEGER',           4,
                                          'BOOLEAN',           -7,
                                          'TIME',              92,
                                          'DATE',              91,
                                          'TIMESTAMP',         93,
                                          'NUMBER',            2,
                                          99) 
                                                              DATA_TYPE,
               decode (T.VALUE, 'UNICODE',
                                   DECODE((DATATYPE || (' ' || CODE)),
                                          'CHAR ASCII',       'CHAR ASCII',
                                          'CHAR UNICODE',     'CHAR UNICODE',
                                          'CHAR BYTE',        'CHAR BYTE',
                                          'VARCHAR ASCII',    'VARCHAR ASCII',
                                          'VARCHAR UNICODE',  'VARCHAR UNICODE',
                                          'VARCHAR BYTE',     'VARCHAR BYTE',
                                          'FIXED',            'DECIMAL',
                                          DATATYPE),

                                   DECODE((DATATYPE || (' ' || CODE)),
                                          'CHAR UNICODE',     'CHAR UNICODE',
                                          'CHAR BYTE',        'CHAR BYTE',
                                          'VARCHAR UNICODE',  'VARCHAR UNICODE',
                                          'VARCHAR BYTE',     'VARCHAR BYTE',
                                          'FIXED',            'DECIMAL',
                                          DATATYPE))  TYPE_NAME,

                                   DECODE(DECODE((DATATYPE || (' ' || CODE)),
                                          'CHAR',             'B',
                                          'CHAR ASCII',       'B',
                                          'CHAR UNICODE',     'B',
                                          'CHAR BYTE',        'B',
                                          'VARCHAR',          'B',
                                          'VARCHAR ASCII',    'B',
                                          'VARCHAR UNICODE',  'B',
                                          'VARCHAR BYTE',     'B',
                                          'LONG',             'L',
                                          'LONG ASCII',       'L',
                                          'LONG UNICODE',     'L',
                                          'LONG BYTE',        'L',
                                          'FIXED',            'F',
                                          'DECIMAL',          'F',
                                          'REAL',             'P',
                                          'FLOAT',            'P',
                                          'DOUBLE PRECISION', 'P',
                                          'SMALLINT',         'S5',
                                          'INTEGER',          'S10',
                                          'BOOLEAN',          'S1',
                                          'TIME',             'S8',
                                          'DATE',             'S10',
                                          'TIMESTAMP',        'S26',
                                          'NUMBER',           'F',
                                          'S99'),
                                          'B',   LEN,
                                          'L',   2147483647,
                                          'F',   PRECISION,
                                          'P',   PRECISION,
                                          'S1',  1,
                                          'S4',  4,
                                          'S5',  5,
                                          'S6',  6,
                                          'S8',  8,
                                          'S10',  10,
                                          'S16',  16,
                                          'S20',  20,
                                          'S26', 26,
                                          99)                 COLUMN_SIZE,
                                   DECODE(DECODE((DATATYPE || (' ' || CODE)),
                                          'CHAR',             'B',
                                          'CHAR ASCII',       'B',
                                          'CHAR UNICODE',     'U',
                                          'CHAR BYTE',        'B',
                                          'VARCHAR',          'B',
                                          'VARCHAR ASCII',    'B',
                                          'VARCHAR UNICODE',  'U',
                                          'VARCHAR BYTE',     'B',
                                          'LONG',             'L',
                                          'LONG ASCII',       'L',
                                          'LONG UNICODE',     'L',
                                          'LONG BYTE',        'L',
                                          'LONG RAW',         'L',
                                          'FIXED',            'F',
                                          'DECIMAL',          'F',
                                          'REAL',             'S4',
                                          'FLOAT',            'S8',
                                          'DOUBLE PRECISION', 'S8',
                                          'SMALLINT',         'S2',
                                          'INTEGER',          'S4',
                                          'BOOLEAN',          'S1',
                                          'TIME',             'S6',
                                          'DATE',             'S6',
                                          'TIMESTAMP',        'S16',
                                          'NUMBER',           'F',
                                          'S99'),
                                          'B',   LEN,
                                          'U',   LEN + LEN,
                                          'L',   2147483647,
                                          'F',   LEN,
                                          'S1',  1,
                                          'S2',  2,
                                          'S4',  4,
                                          'S6',  6,
                                          'S8',  8,
                                          'S16', 16,
                                          99)                 BUFFER_LENGTH,
                                   DEC                        DECIMAL_DIGITS,
                                   DECODE(DATATYPE,
                                         'FIXED', 10,
                                         'DECIMAL', 10,
                                         'REAL', 10,
                                         'FLOAT', 10,
                                         'DOUBLE PRECISION', 10,
                                         'SMALLINT', 10,
                                         'INTEGER', 10, NUM(NULL)) NUM_PREC_RADIX,
                                   NULLABLE                   NULLABLE,

                                   "DEFAULT"                  COLUMN_DEF,
                                   COMMENT                    REMARKS,
                                   NULL                       SQL_DATETIME_SUB,
                                   DECODE(DECODE((DATATYPE || (' ' || CODE)),
                                          'CHAR',             'B',
                                          'CHAR ASCII',       'B',
                                          'CHAR UNICODE',     'U',
                                          'CHAR BYTE',        'B',
                                          'VARCHAR',          'B',
                                          'VARCHAR ASCII',    'B',
                                          'VARCHAR UNICODE',  'U',
                                          'CHAR BYTE',        'B',
                                          'LONG ASCII',       'L',
                                          'LONG UNICODE',     'L',
                                          'LONG BYTE',        'L',
                                          'LONG',             'L',
                                          'NC'),
                                          'B',   LEN,
                                          'U',   LEN + LEN,
                                          'L',  2147483647,
                                           NUM(NULL))
               CHAR_OCTET_LENGTH,
                                   "COLUMNNO"                  ORDINAL_POSITION,
                                   DECODE (NULLABLE,1,\'YES\',0,\'NO\',\'NO\')    IS_NULLABLE,
                                                    KEY_SEQ,
                                   "DEFAULTFUNCTION"
            FROM SYSDD.ODBC_COLUMNS, SYSDD.ACTIVECONFIGURATION T
            WHERE T.PARAMETERNAME='DEFAULT_CODE' 
                                   INTERNAL
    """)
    stopIfSqlNotOK(session, """GRANT SELECT ON "COLUMNS" TO PUBLIC WITH GRANT OPTION""")
    stopIfSqlNotOK(session, """COMMENT ON TABLE "SYSSQLDBC"."COLUMNS" IS 'Information about columns of tables'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."COLUMNS"."TABLE_CAT" IS 'Catalog name, always '''''""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."COLUMNS"."TABLE_SCHEM" IS 'Schema name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."COLUMNS"."TABLE_NAME" IS 'Table name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."COLUMNS"."COLUMN_NAME" IS 'Column name'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."COLUMNS"."DATA_TYPE" IS 'SQL type code of the column'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."COLUMNS"."TYPE_NAME" IS 'SQL type name of the column'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."COLUMNS"."COLUMN_SIZE" IS 'Column size, either maximum number of characters or precision'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."COLUMNS"."BUFFER_LENGTH" IS 'Unused, always NULL'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."COLUMNS"."DECIMAL_DIGITS" IS 'Number of fractional digits'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."COLUMNS"."NUM_PREC_RADIX" IS 'Radix, always 10'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."COLUMNS"."NULLABLE" IS '1 if NULL values are allowed, 0 otherwise'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."COLUMNS"."REMARKS" IS 'Comment for this column'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."COLUMNS"."COLUMN_DEF" IS 'Default value'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."COLUMNS"."SQL_DATETIME_SUB" IS 'Unused, always NULL'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."COLUMNS"."CHAR_OCTET_LENGTH" IS 'The maximum number of bytes in the column for character types'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."COLUMNS"."ORDINAL_POSITION" IS 'Index of column in table (starting with 1)'""")
    stopIfSqlNotOK(session, """COMMENT ON COLUMN "SYSSQLDBC"."COLUMNS"."IS_NULLABLE" IS '''YES'' if the column does allow NULL values, ''NO'' if not'""")


    # ********************************
    #  View SYSSQLDBC.INDEXSTAT
    # ********************************

    stopIfSqlNotOK (session, """
        CREATE OR REPLACE VIEW INDEXSTAT
            AS SELECT
               SCHEMANAME TABLESCHEM, TABLENAME, INDEXNAME, COLUMNNAME, ROWS CARDINALITY, PAGECOUNT PAGES
            FROM SYSDD.ODBC_INDEXSTATS
            INTERNAL""")

    stopIfSqlNotOK (session, 'GRANT SELECT ON INDEXSTAT TO PUBLIC')

    # ********************************
    #  View SYSSQLDBC.TABLESTAT
    # ********************************

    stopIfSqlNotOK (session, """
        CREATE OR REPLACE VIEW TABLESTAT
            AS SELECT
               SCHEMANAME TABLESCHEM, TABLENAME, ROWS CARDINALITY, PAGECOUNT PAGES
            FROM SYSDD.ODBC_TABLESTATS
            INTERNAL""")

    stopIfSqlNotOK (session, 'GRANT SELECT ON TABLESTAT TO PUBLIC')

    # ********************************
    #  View SYSSQLDBC.INDEXES
    # ********************************

    rc = sqlRC (session, """SELECT PARAMETERNAME 
        FROM SYSDD.ACTIVECONFIGURATION 
        WHERE PARAMETERNAME = '_UNICODE'
        AND "VALUE" = 'YES'""")

    if rc == 0:

        stopIfSqlNotOK (session, """
            CREATE OR REPLACE VIEW INDEXES
                  (TABLE_CAT, TABLE_SCHEM, TABLE_NAME, NON_UNIQUE,
                   INDEX_QUALIFIER, INDEX_NAME, TYPE, ORDINAL_POSITION, COLUMN_NAME,
                   ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, INDEX_TYPE)
                    AS SELECT
                   ASCII(NULL), SCHEMANAME, TABLENAME, NUM(DECODE(TYPE, 'UNIQUE', 0, 1)),
                   DECODE(INDEXNAME, 'SYSPRIMARYKEYINDEX', UNICODE(' '), UNICODE(NULL)),
                   INDEXNAME, 3, COLUMNNO, COLUMNNAME, SUBSTR(SORT, 1, 1),
                   NUM(NULL), NUM(NULL), UNICODE(NULL), TYPE
                    FROM SYSDD.ODBC_INDEXES
                INTERNAL""")

    else:
        stopIfSqlNotOK (session, """
            CREATE OR REPLACE VIEW INDEXES
                  (TABLE_CAT, TABLE_SCHEM, TABLE_NAME, NON_UNIQUE,
                   INDEX_QUALIFIER, INDEX_NAME, TYPE, ORDINAL_POSITION, COLUMN_NAME,
                   ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, INDEX_TYPE)
                    AS SELECT
                   ASCII(NULL), SCHEMANAME, TABLENAME, NUM(DECODE(TYPE, 'UNIQUE', 0, 1)),
                   DECODE(INDEXNAME, 'SYSPRIMARYKEYINDEX', ' ', ASCII(NULL)),
                   INDEXNAME, 3, COLUMNNO, COLUMNNAME, SUBSTR(SORT, 1, 1),
                   NUM(NULL), NUM(NULL), ASCII(NULL), TYPE
                    FROM SYSDD.ODBC_INDEXES
                INTERNAL""")

    stopIfSqlNotOK (session, 'GRANT SELECT ON INDEXES TO PUBLIC')

    # ********************************
    #  View SYSSQLDBC.COLUMNPRIVILEGES
    # ********************************

    stopIfSqlNotOK (session, """
        CREATE OR REPLACE VIEW COLUMNPRIVILEGES
              (TABLE_CAT, TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, GRANTOR,
               GRANTEE, PRIVILEGE, IS_GRANTABLE)
            AS SELECT
                   ASCII(NULL), C.SCHEMANAME, C.TABLENAME, C.COLUMNNAME, P.GRANTOR, P.GRANTEE,
                   ASCII (DECODE (SUBSTR(P.PRIVILEGES, LENGTH(P.PRIVILEGES), 1), '+',
                   SUBSTR (P.PRIVILEGES, 1, LENGTH(P.PRIVILEGES) - 1), P.PRIVILEGES)),
                   ASCII (DECODE (SUBSTR(P.PRIVILEGES, LENGTH(P.PRIVILEGES), 1), '+',
                   'YES', 'NO'))
                FROM  SYSDD.NEW_PRIVILEGES P, SYSDD.COLUMNS C
                WHERE
               P.TYPE NOT IN ('SEQUENCE', 'DBPROC')        AND
                   C.SCHEMANAME = P.SCHEMANAME AND C.TABLENAME = P.NAME1 AND
                   (C.COLUMNNAME = P.NAME2 OR P.NAME2 IS NULL)
                INTERNAL""")

    stopIfSqlNotOK (session, 'GRANT SELECT ON COLUMNPRIVILEGES TO PUBLIC')


    # ********************************
    #  View SYSSQLDBC.PROCEDURES
    # ********************************

    stopIfSqlNotOK (session, """
        CREATE OR REPLACE VIEW PROCEDURES
              (PROCEDURE_CAT, PROCEDURE_SCHEM, PROCEDURE_NAME,
               NUM_INPUT_PARAMS, NUM_OUTPUT_PARAMS, NUM_RESULT_SETS, REMARKS,
               PROCEDURE_TYPE)
            AS SELECT
               NULL, SCHEMANAME, DBPROCEDURE, NULL, NULL, NULL, COMMENT, NUM(1)
            FROM SYSDD.DBPROCEDURES
            WHERE
               DBPROCEDURE <> ' '
            INTERNAL""")

    stopIfSqlNotOK (session, 'GRANT SELECT ON PROCEDURES TO PUBLIC')

    switchToDefaultSchema (session, options)


    loaderCmd(session, 'COMMIT')
    loaderCmd(session, 'INSTALLATION OFF')

if __name__ == '__main__':
    connectAndInstall (install, install.__doc__)

