/*!**********************************************************************

  module: o3whitespace.c

  -----------------------------------------------------------------------

  responsible:  TTK (D024584)

  special area: ODBC-Tests

  description:  \r,\t,\n within a SQL statement literal

  -----------------------------------------------------------------------

                         Copyright (c) 2000-2005 SAP AG




    ========== licence begin  GPL
    Copyright (c) 2000-2005 SAP AG

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
    ========== licence end




************************************************************************/

#define PROGNAME "o3whitespaces"
#define TABNAME  PROGNAME
#define COLDEF   "text char(50)"

#define ODBCVER 0x0350
#define SQL_ATTR_CODEPAGE 1013

#include "o3util.c"

#define CODEPAGE "ISO-8859-8"

int MAIN(int argc, char **argv) {
    RETCODE    rc    = SQL_SUCCESS;
    SQLHENV    henv  = SQL_NULL_HENV;
    SQLHDBC    hdbc  = SQL_NULL_HDBC;
    SQLHSTMT   hstmt = SQL_NULL_HSTMT;
    UCHAR      textBuffer[O3UTIL_TEXT_BUFFER_LEN];

    SQLCHAR    buffer[150], stmt[256], data[50];
    SQLLEN     len;
    int        i;

    StartTest( PROGNAME );
    FullConnect (&henv, &hdbc);

    rc = SQLAllocStmt(hdbc, &hstmt);
    SPRINTF(buffer," SQLAllocStmt retcode: %d"CRLF, rc);
    PRINTF(buffer);
    ErrorCheck(SQL_HANDLE_STMT, hstmt);

    SPRINTF (stmt, "drop table "TABNAME"");
    rc = SQLExecDirect(hstmt, stmt, SQL_NTS);
    SPRINTF((char *) buffer, "SQLExecDirect(%s) retcode: %d"CRLF, stmt, rc);
    PRINTF(buffer);
    ErrorCheck(SQL_HANDLE_STMT, hstmt);

    SPRINTF (stmt, "create table "TABNAME" ("COLDEF")");
    rc = SQLExecDirect(hstmt, stmt, SQL_NTS);
    SPRINTF((char *) buffer, "SQLExecDirect(%s) retcode: %d"CRLF, stmt, rc);
    PRINTF(buffer);
    ErrorCheck(SQL_HANDLE_STMT, hstmt);


    SPRINTF (stmt, "insert into "TABNAME" values ('abc%s123')","\r\n\t");
    rc = SQLExecDirect(hstmt, stmt, SQL_NTS);
    SPRINTF(buffer," SQLExecDirect(<%s>) retcode: %d"CRLF, stmt, rc);
    PRINTF(buffer);
    ErrorCheck(SQL_HANDLE_STMT, hstmt);


    SPRINTF (stmt, "select * from "TABNAME"");
    rc = SQLExecDirect(hstmt, stmt, SQL_NTS);
    SPRINTF(buffer," SQLExecDirect(<%s>) retcode: %d"CRLF, stmt, rc);
    PRINTF(buffer);
    ErrorCheck(SQL_HANDLE_STMT, hstmt);


    rc = SQLFetch(hstmt);
    SPRINTF(buffer," SQLFetch retcode: %d"CRLF, rc);
    PRINTF(buffer);
    ErrorCheck(SQL_HANDLE_STMT, hstmt);

    rc = SQLGetData(hstmt, 1, SQL_C_CHAR, data, sizeof(data), &len);
    SPRINTF(buffer," SQLGetData: <%s> retcode: %d\tLen: %ld"CRLF, data, rc, len);
    PRINTF(buffer);
    ErrorCheck(SQL_HANDLE_STMT, hstmt);

    if (rc == SQL_SUCCESS)
      for (i=0; i<len; i++) {
        SPRINTF(buffer, "%d ", data[i]);
        PRINTF(buffer);
      }

    PRINTF(CRLF);

    /* rc = SQLFreeHandle (SQL_HANDLE_STMT, hstmt); */

    FullDisconnect (&henv, &hdbc);

    EndTest( PROGNAME );
 exit:
    return 0;
}; /* main */

