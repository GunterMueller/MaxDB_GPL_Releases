/*



    ========== licence begin  GPL
    Copyright (c) 2000-2005 SAP AG

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
    ========== licence end





*/
#include "winhead.h"

#define PROGNAME "ALLFUNC"

#define TABLE PROGNAME
#define PROC PROGNAME
#ifndef DEFAULTS
#define USERNAME "SUPERDBA"
#define PASSWORD "ADMIN"
#define DBNODE "sqlprec:D"

#define ODBCUSER  "ODBC"
#define ODBCPASSW "ODBC"
#endif

#define ERROR_CHECK(hstmtx)      if (retcode != SQL_SUCCESS) {\
			   SQLError(henv,\
				    hdbc,\
				    hstmtx,\
				    sqlstate,\
				    &esq_sql_code,\
				    error_txt,\
				    len_error_txt,\
				    &used_error_txt);\
			   SPRINTF(buffer," sqlstate: %s\n", sqlstate);\
                           PRINTF(buffer);\
		  SPRINTF(buffer," esq_sql_code: %ld\n", esq_sql_code);\
                  PRINTF(buffer);\
                  switch (retcode) {\
		  case(100) :\
			  break;\
		  default   :\
		          if (esq_sql_code != -6000) \
			  return(16);\
			  break; } }

UCHAR driverver [ 11 ];
UCHAR buffer [1024];

#define MAXCOLS 26

#define C_LEN 0
SWORD sC[MAXCOLS];
SQLLEN cbC[MAXCOLS];
HENV henv   = SQL_NULL_HENV;
HDBC hdbc   = SQL_NULL_HDBC;
HSTMT hstmt = SQL_NULL_HSTMT;
UCHAR sqlstate  [ 10 ];
SDWORD esq_sql_code;
UCHAR error_txt  [ 101 ] ;
SWORD len_error_txt = 100;
SWORD used_error_txt;

int fetchout (HSTMT hstmt);

int MAIN(int argc, char **argv)
{
  UCHAR stmt [ 1024 ];
  UCHAR colstr [ 50 ];

  RETCODE retcode;
  SWORD i, val[MAXCOLS];
  argc, argv;
  SPRINTF(buffer," %s running.\n", PROGNAME);
  PRINTF(buffer);

  retcode = SQLAllocEnv(&henv);
  SPRINTF(buffer," SQLAllocEnv retcode: %d\n", retcode);
  PRINTF(buffer);
  ERROR_CHECK(NULL);

  retcode = SQLAllocConnect(henv, &hdbc);
  SPRINTF(buffer," SQLAllocConnect retcode: %d\n", retcode);
  PRINTF(buffer);
  ERROR_CHECK(NULL);

  retcode = SQLConnect(hdbc,
		       DBNODE,
		       (SWORD) SQL_NTS,
		       ODBCUSER,
		       (SWORD) SQL_NTS,
		       ODBCPASSW,
		       (SWORD) SQL_NTS );
  SPRINTF(buffer," SQLConnect retcode: %d\n", retcode);
  PRINTF(buffer);
  ERROR_CHECK(NULL);

  retcode = SQLAllocStmt (hdbc, &hstmt);
  SPRINTF(buffer," SQLAllocStmt retcode: %d\n", retcode);
  PRINTF(buffer);
  ERROR_CHECK(NULL);

  STRCPY(stmt, "select ");
  STRCAT(stmt, "ABS(1) \"ABS\"");
  STRCAT(stmt, ", ACOS(.32696) \"ACOS\"");
  STRCAT(stmt, ", ASIN(.32696) \"ASIN\"");
  STRCAT(stmt, ", ATAN(-862.42) \"ATAN\"");
  STRCAT(stmt, ", ATAN2(-862.42, 78.5149) \"ATAN2\"");
  STRCAT(stmt, ", CEILING(10.0) \"CEILING\"");
  STRCAT(stmt, ", COS(PI()) \"COS\"");
  STRCAT(stmt, ", COT(124.1332) \"COT\"");
  STRCAT(stmt, ", EXP(3.6) \"EXP\"");
  STRCAT(stmt, ", FLOOR(-123.45) \"FLOOR\"");
  STRCAT(stmt, ", LOG(5.175643) \"LOG\"");
  STRCAT(stmt, ", LOG10(10) \"LOG10\"");
  STRCAT(stmt, ", MOD(36,10) \"MOD\"");
  STRCAT(stmt, ", SIGN(-1) \"SIGN\"");
  STRCAT(stmt, ", SIN(PI( )/2) \"SIN\"");
  STRCAT(stmt, ", SQRT(4) \"SQRT\"");
  STRCAT(stmt, ", TAN(PI( )/4) \"TAN\"");
  STRCAT(stmt, ", PI() \"PI\"");
  STRCAT(stmt, ", DEGREES(90) \"DEGREES\"");
  STRCAT(stmt, ", POWER(2, 2) \"POWER\"");
  STRCAT(stmt, ", RADIANS(0) \"RADIANS\"");
  STRCAT(stmt, ", ROUND(748.58, -1) \"ROUND\"");
  STRCAT(stmt, " from dual");

  retcode = SQLExecDirect (hstmt, stmt, SQL_NTS);
  SPRINTF(buffer," SQLExecDirect retcode: %d\n", retcode);
  PRINTF(buffer);
  ERROR_CHECK(hstmt);

  retcode = SQLFetch (hstmt);
  SPRINTF(buffer," SQLFetch retcode: %d\n", retcode);
  PRINTF(buffer);
  ERROR_CHECK(hstmt);

  retcode = SQLFreeStmt(hstmt, SQL_CLOSE);
  SPRINTF(buffer," SQLFreeStmt retcode: %d\n", retcode);
  PRINTF(buffer);
  ERROR_CHECK(hstmt);

  STRCPY(stmt, "select ");
  STRCAT(stmt, "LEFT('abcdefg',2) \"LEFT\"");
  STRCAT(stmt, ", LTRIM('  abcdefg') \"LTRIM\"");
  STRCAT(stmt, ", LCASE('ABCD') \"LCASE\"");
  STRCAT(stmt, ", REPLACE('abcdefghicde','cde','xxx') \"REPLACE\"");
  STRCAT(stmt, ", RIGHT('abcdefg',2) \"RIGHT\"");
  STRCAT(stmt, ", RTRIM('abcdefg     ') \"RIGHT\"");
  STRCAT(stmt, ", SUBSTRING('abcdefghicde', 1, 5) \"SUBSTRING\"");
  STRCAT(stmt, ", UCASE('abcd') \"UCASE\"");
  STRCAT(stmt, ", SOUNDEX('Green') \"SOUNDEX\"");
  STRCAT(stmt, "from dual");

  retcode = SQLExecDirect (hstmt, stmt, SQL_NTS);
  SPRINTF(buffer," SQLExecDirect retcode: %d\n", retcode);
  PRINTF(buffer);
  ERROR_CHECK(hstmt);

  retcode = SQLFetch (hstmt);
  SPRINTF(buffer," SQLFetch retcode: %d\n", retcode);
  PRINTF(buffer);
  ERROR_CHECK(hstmt);

  retcode = SQLFreeStmt(hstmt, SQL_CLOSE);
  SPRINTF(buffer," SQLFreeStmt retcode: %d\n", retcode);
  PRINTF(buffer);
  ERROR_CHECK(hstmt);

  STRCPY(stmt, "select ");
  STRCAT(stmt, "USER() \"USER\"");
  STRCAT(stmt, ", DATABASE() \"DATABASE\"");
  STRCAT(stmt, ", IFNULL(NULL, 2) \"IFNULL\"");
  STRCAT(stmt, "from dual");

  retcode = SQLExecDirect (hstmt, stmt, SQL_NTS);
  SPRINTF(buffer," SQLExecDirect retcode: %d\n", retcode);
  PRINTF(buffer);
  ERROR_CHECK(hstmt);

  retcode = SQLFetch (hstmt);
  SPRINTF(buffer," SQLFetch retcode: %d\n", retcode);
  PRINTF(buffer);
  ERROR_CHECK(hstmt);

  retcode = SQLFreeStmt(hstmt, SQL_CLOSE);
  SPRINTF(buffer," SQLFreeStmt retcode: %d\n", retcode);
  PRINTF(buffer);
  ERROR_CHECK(hstmt);

  STRCPY(stmt, "select ");
  STRCAT(stmt, "NOW() \"NOW\"");
  STRCAT(stmt, ", CURDATE() \"CURDATE\"");
  STRCAT(stmt, ", DAYOFMONTH('2002-11-19') \"DAYOFMONTH\"");
  STRCAT(stmt, ", DAYOFWEEK('2002-11-19') \"DAYOFWEEK\"");
  STRCAT(stmt, ", DAYOFYEAR('2002-11-19') \"DAYOFYEAR\"");
  STRCAT(stmt, ", MONTH('2002-11-19') \"MONTH\"");
  STRCAT(stmt, ", WEEK('2002-11-19') \"WEEK\"");
  STRCAT(stmt, ", YEAR('2002-11-19') \"YEAR\"");
  STRCAT(stmt, ", CURTIME() \"CURTIME\"");
  STRCAT(stmt, ", HOUR('10:54:55') \"HOUR\"");
  STRCAT(stmt, ", MINUTE('10:54:55') \"MINUTE\"");
  STRCAT(stmt, ", SECOND('10:54:55') \"SECOND\"");
  STRCAT(stmt, ", DAYNAME('2002-11-19') \"DAYNAME\"");
  STRCAT(stmt, ", MONTHNAME('2002-11-19') \"MONTHNAME\"");
  STRCAT(stmt, "from dual");

  retcode = SQLExecDirect (hstmt, stmt, SQL_NTS);
  SPRINTF(buffer," SQLExecDirect retcode: %d\n", retcode);
  PRINTF(buffer);
  ERROR_CHECK(hstmt);

  retcode = SQLFetch (hstmt);
  SPRINTF(buffer," SQLFetch retcode: %d\n", retcode);
  PRINTF(buffer);
  ERROR_CHECK(hstmt);


  retcode = SQLFreeStmt(hstmt, SQL_DROP);
  SPRINTF(buffer," SQLFreeStmt retcode: %d\n", retcode);
  PRINTF(buffer);
  ERROR_CHECK(hstmt);

  retcode = SQLTransact(henv, hdbc, SQL_ROLLBACK);
  SPRINTF(buffer," SQLTransact retcode: %d\n", retcode);
  PRINTF(buffer);
  ERROR_CHECK(NULL);

  retcode = SQLDisconnect(hdbc);
  SPRINTF(buffer," SQLDisconnect retcode: %d\n", retcode);
  PRINTF(buffer);
  ERROR_CHECK(NULL);

  retcode = SQLFreeConnect(hdbc);
  SPRINTF(buffer," SQLFreeConnect retcode: %d\n", retcode);
  PRINTF(buffer);
  ERROR_CHECK(NULL);

  retcode = SQLFreeEnv(henv);
  SPRINTF(buffer," SQLFreeEnv retcode: %d\n", retcode);
  PRINTF(buffer);
  ERROR_CHECK(NULL);

  SPRINTF(buffer," %s ending\n", PROGNAME);
  PRINTF(buffer);

  return(0);
}

int fetchout (HSTMT hstmt)
{
  RETCODE retcode;
  SWORD i;
    for (i=0; i < MAXCOLS; i++) {
    retcode = SQLBindCol (hstmt, (UWORD)(i+1), SQL_C_SHORT, &sC[i],
       C_LEN, &cbC[i]);
  }
  while (retcode == SQL_SUCCESS) {
    retcode = SQLFetch (hstmt);
    ERROR_CHECK(hstmt);
    if (retcode == SQL_SUCCESS ){
      for (i=0; i < MAXCOLS; i++) {
         SPRINTF(buffer,"C%3d = %d\n", i, (int) sC[i]);
         PRINTF(buffer);
      }
    }
    else {
      SPRINTF(buffer," SQLFetch retcode: %d\n", retcode);
      PRINTF(buffer);
    }
  }
  return 1;
}
