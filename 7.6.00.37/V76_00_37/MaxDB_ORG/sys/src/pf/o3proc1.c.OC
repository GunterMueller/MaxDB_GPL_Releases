/*!**********************************************************************

  module: o3proc1.c

  -----------------------------------------------------------------------

  responsible:  Holger Bischoff (D027451 - Holger.Bischoff@SAP-AG.de)

  special area: ODBC-Tests

  description:  Check SQLDescribParam and Execution for simple
                DB-Procedure 'SUMME'
  
  -----------------------------------------------------------------------

                         Copyright (c) 1999-2005 SAP AG




    ========== licence begin  GPL
    Copyright (c) 1999-2005 SAP AG

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
    ========== licence end




************************************************************************/

#define PROGNAME "o3proc1"

#define ODBCVER 0x0350

#include "o3util.c"

SQLRETURN ProcTest( HDBC hdbc );
SQLRETURN CreateDbProc( HDBC hdbc );
SQLRETURN DropDbProc( HDBC hdbc );

int MAIN(int argc, char **argv) {
    RETCODE retcode;
    UCHAR   textBuffer[O3UTIL_TEXT_BUFFER_LEN];
    HENV    henv  = SQL_NULL_HENV;
    HDBC    hdbc  = SQL_NULL_HDBC;

    StartTest( PROGNAME );

    retcode = FullConnect( &henv, &hdbc );
    if (retcode != SQL_SUCCESS) {
        return 0;
    }; /* if */
    
    retcode = SQLSetConnectAttr( hdbc, 1001 /* PASSTHROUGH */,
                                 (SQLPOINTER) 1, 0 );
    SPRINTF( textBuffer,
             "main \t\t -- SQLSetConnectAttr \t\t retcode: %s"CRLF,
             cnvret( retcode ));
    PRINTF( textBuffer );
    ErrorCheck( SQL_HANDLE_DBC, hdbc );

    retcode = CreateDbProc( hdbc );
    if (retcode != SQL_SUCCESS) {
        goto exit;
    }; /* if */
    
    retcode = ProcTest( hdbc );
    if (retcode != SQL_SUCCESS) {
        goto exit;
    }; /* if */

exit:
    retcode = DropDbProc( hdbc );
    FullDisconnect( &henv, &hdbc );

    EndTest( PROGNAME );
    return 0;
}; /* main */


SQLRETURN CreateDbProc( HDBC hdbc )
{
    RETCODE retcode;
    HSTMT   hstmt = SQL_NULL_HSTMT;
    UCHAR   textBuffer[O3UTIL_TEXT_BUFFER_LEN];
    UCHAR   stmtStr[O3UTIL_STMT_LEN];

    retcode = SQLAllocHandle( SQL_HANDLE_STMT, hdbc, &hstmt );
    SPRINTF( textBuffer,
             "CreateDbProc \t -- SQLAllocHandle(STMT) \t retcode: %s"CRLF,
             cnvret( retcode ));
    PRINTF( textBuffer );
    ErrorCheck( SQL_HANDLE_STMT, hstmt );
    if (retcode != SQL_SUCCESS) {
        return retcode;
    }; /* if */

    SPRINTF( stmtStr, "CREATE PACKAGE SUMME AS 'livecache.summe'" );
    PRINTF( stmtStr ); PRINTF( CRLF );
    retcode = SQLExecDirect( hstmt, stmtStr, SQL_NTS );
    SPRINTF( textBuffer,
             "CreateDbProc \t -- SQLExecDirect \t\t retcode: %s"CRLF,
             cnvret( retcode ));
    PRINTF( textBuffer );
    ErrorCheck( SQL_HANDLE_STMT, hstmt );

    SPRINTF( stmtStr, "CREATE DBPROC SUMME IN SUMME" );
    PRINTF( stmtStr ); PRINTF( CRLF );
    retcode = SQLExecDirect( hstmt, stmtStr, SQL_NTS );
    SPRINTF( textBuffer,
             "CreateDbProc \t -- SQLExecDirect \t\t retcode: %s"CRLF,
             cnvret( retcode ));
    PRINTF( textBuffer );
    ErrorCheck( SQL_HANDLE_STMT, hstmt );
    
    return retcode;
}; /* CreateDbProc */


SQLRETURN DropDbProc( HDBC hdbc )
{
    RETCODE retcode;
    HSTMT   hstmt = SQL_NULL_HSTMT;
    UCHAR   textBuffer[O3UTIL_TEXT_BUFFER_LEN];
    UCHAR   stmtStr[O3UTIL_STMT_LEN];

    retcode = SQLAllocHandle( SQL_HANDLE_STMT, hdbc, &hstmt );
    SPRINTF( textBuffer,
             "DropDbProc \t -- SQLAllocHandle(STMT) \t retcode: %s"CRLF,
             cnvret( retcode ));
    PRINTF( textBuffer );
    ErrorCheck( SQL_HANDLE_STMT, hstmt );
    if (retcode != SQL_SUCCESS) {
        return retcode;
    }; /* if */

    SPRINTF( stmtStr, "DROP DBPROC SUMME" );
    PRINTF( stmtStr ); PRINTF( CRLF );
    retcode = SQLExecDirect( hstmt, stmtStr, SQL_NTS );    
    SPRINTF( textBuffer,
             "DropDbProc \t -- SQLExecDirect \t\t retcode: %s"CRLF,
             cnvret( retcode ));
    PRINTF( textBuffer );
    ErrorCheck( SQL_HANDLE_STMT, hstmt );

    return retcode;
}; /* DropDbProc */


SQLRETURN DescribeParam( HSTMT   hstmt,
                         UWORD   icol,
                         SWORD  *typePtr,
                         UDWORD *sizePtr,
                         SWORD  *digitsPtr,
                         SWORD  *nullablePtr )
{
    SQLRETURN retcode;
    UCHAR   textBuffer[O3UTIL_TEXT_BUFFER_LEN];

    retcode = SQLDescribeParam( hstmt, icol, typePtr, sizePtr, digitsPtr,
                                nullablePtr );
    SPRINTF( textBuffer,
             "DescribeParam\t -- SQLDescribeParam \t\t retcode: %s"CRLF,
             cnvret( retcode ));
    PRINTF( textBuffer );
    ErrorCheck( SQL_HANDLE_STMT, hstmt );

    if (retcode == SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO) {
        SPRINTF( textBuffer,
                 "type = %d, size = %d, digits = %d, nullable = %d"CRLF,
                 *typePtr, *sizePtr, *digitsPtr, *nullablePtr );
        PRINTF( textBuffer );
    }; /* if */

    return retcode;
}; /* DescribeParam */


SQLRETURN ProcTest( HDBC hdbc )
{
    RETCODE retcode;
    HSTMT   hstmt = SQL_NULL_HSTMT;
    UCHAR   textBuffer[O3UTIL_TEXT_BUFFER_LEN];
    UCHAR   stmtStr[O3UTIL_STMT_LEN];
    UWORD   i;
    
    SWORD   type[3]     = { 0, 0, 0 };
    UDWORD  size[3]     = { 0, 0, 0 };
    SWORD   digits[3]   = { 0, 0, 0 };
    SWORD   nullable[3] = { 0, 0, 0 };

    SDWORD  value[3]    = { 1, 17, 3 };
    SDWORD  len[3]      = { 0, 0, 0 };
    SWORD   inOut[3]    = { SQL_PARAM_INPUT,
                            SQL_PARAM_INPUT_OUTPUT,
                            SQL_PARAM_OUTPUT };
    
    retcode = SQLAllocHandle( SQL_HANDLE_STMT, hdbc, &hstmt );
    SPRINTF( textBuffer,
             "ProcTest \t -- SQLAllocHandle(STMT) \t retcode: %s"CRLF,
             cnvret( retcode ));
    PRINTF( textBuffer );
    ErrorCheck( SQL_HANDLE_STMT, hstmt );
    if (retcode != SQL_SUCCESS) {
        goto exit;
    }; /* if */

    SPRINTF( stmtStr, "{ CALL SUMME (?,?,?) }" );
    PRINTF( stmtStr ); PRINTF( CRLF );
    retcode = SQLPrepare( hstmt, stmtStr, SQL_NTS );
    SPRINTF( textBuffer,
             "ProcTest \t -- SQLPrepare \t\t\t retcode: %s"CRLF,
             cnvret( retcode ));
    PRINTF( textBuffer );
    ErrorCheck( SQL_HANDLE_STMT, hstmt );
    if (retcode != SQL_SUCCESS) {
        goto exit;
    }; /* if */    

    for ( i=0; i<3; i++) {
        retcode = DescribeParam( hstmt, i+1,
                                 &type[i],
                                 &size[i],
                                 &digits[i],
                                 &nullable[i] );
        if (retcode != SQL_SUCCESS) {
            goto exit;
        }; /* if */
    }; /* for */

    for ( i=0; i<3; i++) {
        retcode = SQLBindParameter( hstmt, i+1,
                                    inOut[i], SQL_C_SLONG, SQL_INTEGER,
                                    size[i], digits[i],
                                    &value[i], 4, &len[i] );
        SPRINTF( textBuffer,
                 "ProcTest \t -- SQLBindParameter \t \t retcode: %s"CRLF,
                 cnvret( retcode ));
        PRINTF( textBuffer );
        ErrorCheck( SQL_HANDLE_STMT, hstmt );
        if (retcode != SQL_SUCCESS) {
            goto exit;
        }; /* if */    
    }; /* for */

    SPRINTF( textBuffer,
             "val1=%d, val2=%d, val3=%d \n val2=val1, val3=val1+val2\n",
             value[0], value[1], value[2] );
    PRINTF( textBuffer );
    retcode = SQLExecute( hstmt );
    SPRINTF( textBuffer,
             "ProcTest \t -- SQLExecute \t\t\t retcode: %s"CRLF,
             cnvret( retcode ));
    PRINTF( textBuffer );
    ErrorCheck( SQL_HANDLE_STMT, hstmt );
    if (retcode != SQL_SUCCESS) {
        goto exit;
    }; /* if */    
    for ( i=0; i<3; i++) {
        SPRINTF( textBuffer, "val%d = %d, len%d = %d"CRLF,
                 i, value[i], i, len[i] );
        PRINTF( textBuffer );
    }; /* for */

exit:    
    retcode = SQLFreeHandle( SQL_HANDLE_STMT, hstmt );

    return retcode;
}; /* ProcTest */
