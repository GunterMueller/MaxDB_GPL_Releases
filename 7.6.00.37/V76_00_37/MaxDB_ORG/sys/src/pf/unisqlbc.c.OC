/*!***************************************************************************

  module:        unisqlbc.c

  -------------------------------------------------------------------------

  responsible:   Anton Arsenov

  special area:  Test of SQL<...>W functions

  description: 
  
  [optional tags]:

  -------------------------------------------------------------------------

  copyright:    Copyright (c) 2001-2005 SAP AG

\if EMIT_LICENCE


    ========== licence begin  GPL
    Copyright (c) 2001-2005 SAP AG

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
    ========== licence end


\endif
*****************************************************************************/

#define _UNICODE
#define _ODBC
/*===========================================================================*
 *  INCLUDES                                                                 *
 *===========================================================================*/
#include "uniutil.c"

/*===========================================================================*
 *  MACROS                                                                   *
 *===========================================================================*/
#define CHECK_ENV(fname) \
	if (rc != SQL_NEED_DATA) \
		SPRINTF(buffer, " %s, return code: %d\n", fname, rc); \
	else \
		SPRINTF(buffer, " %s, return code: SQL_NEED_DATA\n", fname); \
	PRINTF(buffer); \
	if ((rc != SQL_SUCCESS)&&(rc != SQL_NEED_DATA)) { \
		SQLGetDiagRec(SQL_HANDLE_ENV, henv, 1, sqlstate, &native_error, message_text, 256, &text_len); \
		SPRINTF(buffer, "SQLSTATE:\t%s\n", sqlstate); \
		PRINTF(buffer); \
		SPRINTF(buffer, "NATIVE ERROR:\t%d\n", native_error); \
		PRINTF(buffer); \
		SPRINTF(buffer, "MESSAGE TEXT:\t%s\n", message_text); \
		PRINTF(buffer); \
		if (rc != 100) \
			exit(1); \
	}

#define CHECK_DBC(fname) \
	if (rc != SQL_NEED_DATA) \
		SPRINTF(buffer, " %s, return code: %d\n", fname, rc); \
	else \
		SPRINTF(buffer, " %s, return code: SQL_NEED_DATA\n", fname); \
	PRINTF(buffer); \
	if ((rc != SQL_SUCCESS)&&(rc != SQL_NEED_DATA)) { \
		SQLGetDiagRec(SQL_HANDLE_DBC, hdbc, 1, sqlstate, &native_error, message_text, 256, &text_len); \
		SPRINTF(buffer, "SQLSTATE:\t%s\n", sqlstate); \
		PRINTF(buffer); \
		SPRINTF(buffer, "NATIVE ERROR:\t%d\n", native_error); \
		PRINTF(buffer); \
		SPRINTF(buffer, "MESSAGE TEXT:\t%s\n", message_text); \
		PRINTF(buffer); \
		if (rc != 100) \
			exit(1); \
	}

#define CHECK_STMT(fname) \
	if (rc != SQL_NEED_DATA) \
		SPRINTF(buffer, " %s, return code: %d\n", fname, rc); \
	else \
		SPRINTF(buffer, " %s, return code: SQL_NEED_DATA\n", fname); \
	PRINTF(buffer); \
	if ((rc != SQL_SUCCESS)&&(rc != SQL_NEED_DATA)) { \
		SQLGetDiagRec(SQL_HANDLE_STMT, hstmt, 1, sqlstate, &native_error, message_text, 256, &text_len); \
		SPRINTF(buffer, "SQLSTATE:\t%s\n", sqlstate); \
		PRINTF(buffer); \
		SPRINTF(buffer, "NATIVE ERROR:\t%d\n", native_error); \
		PRINTF(buffer); \
		SPRINTF(buffer, "MESSAGE TEXT:\t%s\n", message_text); \
		PRINTF(buffer); \
		if (rc != 100) \
			exit(1); \
	}

/*===========================================================================*
 *  FUNCTIONS                                                                *
 *===========================================================================*/

void writeConnectString (char *connStr)
{
  char buf1[100], buf2[100], *newpos, *oldpos = connStr;

  while (NULL != (newpos = strchr (oldpos, ';'))) {
    char *p;

    p = strchr (oldpos, '=');
    if (p != NULL) {
      strncpy (buf1, oldpos, p-oldpos);
      buf1[p-oldpos] = '\0';
    }

    /* don't print serverdb since this is continously changing */
    if (strcmp (buf1, "SERVERDB") != 0) {
      strncpy (buf1, oldpos, newpos-oldpos);
      buf1[newpos-oldpos] = '\0';
    }
    printf (buf1);
    printf ("\n");

    oldpos = newpos+1;
  }
}

int main(int argc, char **argv) {
	HENV henv   = SQL_NULL_HENV;
	HDBC hdbc   = SQL_NULL_HDBC;
	HSTMT hstmt = SQL_NULL_HSTMT;
	RETCODE rc;
	
	SQLCHAR sqlstate[6];
	SQLINTEGER native_error;
	SQLCHAR message_text[256];
	SQLSMALLINT text_len;

	SQLCHAR buffer[1024];

	SQLWCHAR ubuf1[256];
	SQLWCHAR ubuf2[256];
	SQLWCHAR ubuf3[256];
	
	/* Allocating handle */
	rc = SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &henv);
	CHECK_ENV("SQLAllocHandle (HENV)");
	rc = SQLSetEnvAttr(henv, SQL_ATTR_ODBC_VERSION, (void *)SQL_OV_ODBC3, 0);
	CHECK_ENV("SQLSetEnvAtt");
	rc = SQLAllocHandle(SQL_HANDLE_DBC, henv, &hdbc);
	CHECK_ENV("SQLAllocHandle (HDBC)");
	PRINTF("\n");

	STRCPY(buffer, "SERVERNODE=localhost;DSN=");
	STRCAT(buffer, DBNODE);
	STRCAT(buffer, ";UID=");
	STRCAT(buffer, ODBCUSER);
	STRCAT(buffer, ";PWD=");
	STRCAT(buffer, ODBCPASSW);
	STRCAT(buffer, ";");
	StringToWString(ubuf1, 256, NULL, TRUE, buffer, 256, NULL);
	PRINTF(" Conection string: ");
	PRINTF(buffer);
	PRINTF("\n");
	rc = SQLBrowseConnectW(hdbc, ubuf1, (SQLSMALLINT)WStrLen(ubuf1, 256), ubuf2, 256, &text_len);
	CHECK_DBC("SQLBrowseConnectW");
	WStringToString(buffer, 256, NULL, TRUE, ubuf2, 256, NULL);
	PRINTF(" Return string: ");
	PRINTF(buffer);
	STRCPY(buffer, "SERVERNODE=localhost;");
	PRINTF("\n Conection string: ");
	PRINTF(buffer);
	PRINTF("\n");
	StringToWString(ubuf3, 256, NULL, TRUE, buffer, 256, NULL);
	rc = SQLBrowseConnectW(hdbc, ubuf3, (SQLSMALLINT)WStrLen(ubuf3, 256), ubuf2, 256, &text_len);
	CHECK_DBC("SQLBrowseConnectW");
	WStringToString(buffer, 256, NULL, TRUE, ubuf2, 256, NULL);
	PRINTF(" Return string: \n");
        writeConnectString (buffer);
	PRINTF("\n\n");

	/* Disconnect from DB */
	rc = SQLDisconnect(hdbc);
	CHECK_DBC("SQLDisconnect");
	rc = SQLFreeHandle(SQL_HANDLE_DBC, hdbc);
	CHECK_ENV("SQLFreeHandle (HDBC)");
	rc = SQLFreeHandle(SQL_HANDLE_ENV, henv);
	CHECK_ENV("SQLFreeHandle (HENV)");

	return 0;
}
