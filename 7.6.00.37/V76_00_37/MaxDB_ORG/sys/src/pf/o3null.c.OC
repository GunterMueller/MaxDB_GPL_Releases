/*!**********************************************************************

  module: o3null.c

  -----------------------------------------------------------------------

  responsible:  Holger Bischoff (D027451 - Holger.Bischoff@SAP-AG.de)

  special area: ODBC-Tests

  description:  Generate error 22002
                'Indicator variable required but not supplied' by NULL
                data without indicator variable (PTS 1104009)

  -----------------------------------------------------------------------

                         Copyright (c) 1999-2005 SAP AG




    ========== licence begin  GPL
    Copyright (c) 1999-2005 SAP AG

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
    ========== licence end




************************************************************************/

#define PROGNAME "O3NULL"

#define ODBCVER 0x0350

#include "o3util.c"

int MAIN(int argc, char **argv) {
    RETCODE retcode;
    HDBC    hdbc  = SQL_NULL_HDBC;
    HENV    henv  = SQL_NULL_HENV;
    HSTMT   hstmt = SQL_NULL_HSTMT;
    UCHAR   textBuffer[O3UTIL_TEXT_BUFFER_LEN];
    SWORD   intVal;
    char    byteVal;
    
    StartTest( PROGNAME );

    retcode = FullConnect( &henv, &hdbc );
    if (retcode != SQL_SUCCESS) {
        return 0;
    }; /* if */

    retcode = CreateTable( hdbc, PROGNAME, "( a int, b long byte )" );
    if (retcode != SQL_SUCCESS) {
        goto exit;
    }; /* if */

    retcode = SQLAllocHandle( SQL_HANDLE_STMT, hdbc, &hstmt );
    SPRINTF( textBuffer,
             "Main  \t\t -- SQLAllocHandle(STMT) \t retcode: %s"CRLF,
             cnvret( retcode ));
    PRINTF( textBuffer );
    ErrorCheck( SQL_HANDLE_STMT, hstmt );
    if (retcode != SQL_SUCCESS) {
        goto exit;
    }; /* if */

    retcode = SQLExecDirect( hstmt,
                             "INSERT INTO "PROGNAME" VALUES (NULL,NULL)",
                             SQL_NTS );
    SPRINTF( textBuffer,
             "Main  \t\t -- SQLExecDirect(INSERT) \t retcode: %s"CRLF,
             cnvret( retcode ));
    PRINTF( textBuffer );
    ErrorCheck( SQL_HANDLE_STMT, hstmt );
    if (retcode != SQL_SUCCESS) {
        goto exit;
    }; /* if */

    retcode = SQLExecDirect( hstmt, "SELECT * FROM "PROGNAME, SQL_NTS );
    SPRINTF( textBuffer,
             "Main  \t\t -- SQLExecDirect(SELECT) \t retcode: %s"CRLF,
             cnvret( retcode ));
    PRINTF( textBuffer );
    ErrorCheck( SQL_HANDLE_STMT, hstmt );
    if (retcode != SQL_SUCCESS) {
        goto exit;
    }; /* if */

    retcode = SQLFetch( hstmt );
    SPRINTF( textBuffer,
             "Main  \t\t -- SQLFetch \t\t\t retcode: %s"CRLF,
             cnvret( retcode ));
    PRINTF( textBuffer );
    ErrorCheck( SQL_HANDLE_STMT, hstmt );
    
    if (retcode == SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO) {
        /* should return SQLSTATE 22002 because indi == NULL */
        retcode = SQLGetData( hstmt, 1, SQL_C_SHORT, &intVal, 0, NULL );
        SPRINTF( textBuffer,
                 "Main  \t\t -- SQLGetData \t\t\t retcode: %s"CRLF,
                 cnvret( retcode ));
        PRINTF( textBuffer );
        ErrorCheck( SQL_HANDLE_STMT, hstmt );
        /* should return SQLSTATE 22002 because indi == NULL */
        retcode = SQLGetData( hstmt, 2, SQL_C_BINARY, &byteVal, 1, NULL );
        SPRINTF( textBuffer,
                 "Main  \t\t -- SQLGetData \t\t\t retcode: %s"CRLF,
                 cnvret( retcode ));
        PRINTF( textBuffer );
        ErrorCheck( SQL_HANDLE_STMT, hstmt );        
    }; /* if */
    
    retcode = SQLFreeHandle( SQL_HANDLE_STMT, hstmt );
exit:
    retcode = DropTable( hdbc, PROGNAME );
    FullDisconnect( &henv, &hdbc );

    EndTest( PROGNAME );
    return 0;
}; /* main */
