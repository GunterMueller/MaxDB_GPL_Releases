/*


    ========== licence begin  GPL
    Copyright (c) 2000-2005 SAP AG

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
    ========== licence end



*/

/* Program shall demonstrate failure on insert of long unicode string
   via ODBC "sqlod32w.dll", version 7.5.00.18, into "long unicode"
   column.
*/

#define PROGNAME "unilongchar2"
#define TABLE    PROGNAME
#include "winhead.h"
#define MAX_LONG_STR 25000

#define ERROR_CHECK(hstmtx)      if (retcode != SQL_SUCCESS) {\
			   SQLError(henv, hdbc, hstmtx,\
			      sqlstate, &esq_sql_code, error_txt,\
				    len_error_txt, &used_error_txt);\
			   SPRINTF(buffer, " sqlstate: %s"CRLF, sqlstate);\
			 PRINTF(buffer);\
		  SPRINTF(buffer, " esq_sql_code: %ld"CRLF, esq_sql_code);\
			 PRINTF(buffer);\
		  SPRINTF(buffer, " error_txt: %s"CRLF, error_txt);\
			 PRINTF(buffer);\
                  switch (retcode) {\
		  case(100) :\
			  break;\
                  case(SQL_ERROR) : \
		     if (!STRCMP(sqlstate,"22005") &&\
			!STRCMP(sqlstate,"22003") &&\
			   !STRCMP(sqlstate,"22008") &&\
			      !STRCMP(sqlstate,"07006"))\
			      { return(16); }\
		     break;\
                  case(SQL_SUCCESS_WITH_INFO) : \
		       if (STRCMP(sqlstate,"01004"))\
		          if (STRCMP(sqlstate,"22001"))\
			{ return(16); }\
		     break;\
		  default   :\
			  return(16);\
			  break; } }

int main(int argc, char* argv[])
{
  SQLRETURN rc = SQL_SUCCESS;

  SQLHENV henv = 0;
  SQLHDBC hdbc = 0;
  SQLHSTMT hstmt;
  SQLLEN MAX_LONG_STR_BUF = (MAX_LONG_STR+1)*sizeof(SQLWCHAR);
  unsigned int nWorkingStrLen = 5000;
  unsigned int nFailingStrLen = MAX_LONG_STR;
  SQLWCHAR sValue[MAX_LONG_STR+1];
  SQLLEN nIndIn = SQL_NTS;
  unsigned int i;

  UCHAR sqlstate  [ 10 ];
  SDWORD esq_sql_code;
  UCHAR error_txt  [ 101 ] ;
  SWORD len_error_txt = 100;
  SWORD used_error_txt;
  RETCODE retcode;
  UCHAR buffer [1024];


  retcode = SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &henv);

  retcode = SQLSetEnvAttr(henv, SQL_ATTR_ODBC_VERSION, (void*)SQL_OV_ODBC3, 0);

  retcode = SQLAllocHandle(SQL_HANDLE_DBC, henv, &hdbc);

  retcode = SQLConnect(hdbc, DBNODE, (SWORD) SQL_NTS, ODBCUSER,
		       (SWORD) SQL_NTS, ODBCPASSW, (SWORD) SQL_NTS );

  SPRINTF(buffer, " SQLConnect retcode: %d"CRLF, retcode);
  PRINTF(buffer);
  ERROR_CHECK(NULL);

  retcode = SQLAllocHandle(SQL_HANDLE_STMT, hdbc, &hstmt);

  /*   Write two unicode values (UCS-2 format) into "long unicode"
       column of unicode enabled MaxDB database,
       First value has working length, second value has
       failing length.
   */

  /* working length */
  retcode = SQLExecDirect (hstmt, "CREATE TABLE "TABLE" (val long unicode)", SQL_NTS);
  SPRINTF(buffer," SQLExecDirect: retcode: %d"CRLF, retcode);
  PRINTF(buffer);
  ERROR_CHECK(hstmt);
  /* failing length */


  retcode = SQLPrepare (hstmt, "INSERT INTO "TABLE" (val)  VALUES (?)", SQL_NTS);
  SPRINTF(buffer," SQLPrepare: retcode: %d"CRLF, retcode);
  PRINTF(buffer);
  ERROR_CHECK(hstmt);

  retcode = SQLBindParameter (hstmt,
                         1,
                         SQL_PARAM_INPUT,
                         SQL_C_WCHAR,
                         SQL_WLONGVARCHAR,
                         MAX_LONG_STR_BUF,
                         0,
                         sValue,
                         MAX_LONG_STR_BUF,
                         &nIndIn);
  SPRINTF(buffer," SQLBindParameter: retcode: %d"CRLF, retcode);
  PRINTF(buffer);
  ERROR_CHECK(hstmt);

  for (i = 0; i < nWorkingStrLen; ++i)
  {
    sValue[i] = 'a';
  }
  sValue[nWorkingStrLen] = 0; /* terminate string */

  /* execute works fine with unicode-string of this length */
  retcode = SQLExecute( hstmt) ;
  SPRINTF(buffer," SQLExecute: retcode: %d"CRLF, retcode);
  PRINTF(buffer);
  ERROR_CHECK(hstmt);


  for (i = 0; i < nFailingStrLen; ++i)
  {
    sValue[i] = 'a';
  }
  sValue[nFailingStrLen] = 0; /* terminate string */

  /* program hangs when executing next line with unicode-string
     of "nFailingStrLen". Function does not return, data volume
     of database is written until it is full...
   */
  retcode = SQLExecute( hstmt) ;
  SPRINTF(buffer," SQLExecute: retcode: %d"CRLF, retcode);
  PRINTF(buffer);
  ERROR_CHECK(hstmt);


  retcode = SQLFreeHandle(SQL_HANDLE_STMT, hstmt);
  SPRINTF(buffer," SQLFreeHandle: retcode: %d"CRLF, retcode);
  PRINTF(buffer);
  ERROR_CHECK(hstmt);

  retcode = SQLDisconnect(hdbc);
  SPRINTF(buffer," SQLDisconnect: retcode: %d"CRLF, retcode);
  PRINTF(buffer);

  retcode = SQLFreeHandle(SQL_HANDLE_DBC, hdbc);

  retcode = SQLFreeHandle(SQL_HANDLE_ENV, henv);

  return rc;
}
