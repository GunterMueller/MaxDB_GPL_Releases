/*



    ========== licence begin  GPL
    Copyright (c) 2000-2005 SAP AG

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
    ========== licence end





*/
#define PROGNAME "envloop"
#include "winhead.h"

#ifndef DEFAULTS
#define USERNAME "SUPERDBA"
#define PASSWORD "ADMIN"
#define DBNODE   "sqlprec:D"
#endif

#define MAXLOOP 1

#define ODBCUSER  "ODBC"
#define ODBCPASSW  "ODBC"

#define USER2   ODBCUSER
#define PASSW2  ODBCPASSW

#define ERROR_CHECK(henvx, hdbcx, hstmtx) if (retcode != SQL_SUCCESS) {\
			   SQLError(henvx,\
				    hdbcx,\
				    hstmtx,\
				    sqlstate,\
				    &esq_sql_code,\
				    error_txt,\
				    len_error_txt,\
				    &used_error_txt);\
			   SPRINTF(buffer, " sqlstate: %s"CRLF, sqlstate);\
			   PRINTF(buffer);\
		  SPRINTF(buffer, " esq_sql_code: %ld"CRLF, esq_sql_code);\
		  PRINTF(buffer);\
                  switch (retcode) {\
		  case(100) :\
			  break;\
		  default   :\
		     if (esq_sql_code != -6000)\
			  return(16);\
			  break; } }

#define F1_LEN 101
UCHAR szConnStrOut[F1_LEN]; SWORD cbConnStrOut;
UCHAR buffer [1024];
HENV henv   = SQL_NULL_HENV;
HENV henv2  = SQL_NULL_HENV;
HDBC hdbc   = SQL_NULL_HDBC;
HDBC hdbc2   = SQL_NULL_HDBC;
HSTMT hstmt = SQL_NULL_HSTMT;
HSTMT hstmt2 = SQL_NULL_HSTMT;
UCHAR sqlstate  [ 10 ];
SDWORD esq_sql_code;
UCHAR error_txt  [ ERROR_TEXT_LEN + 1 ] ;
SWORD len_error_txt = ERROR_TEXT_LEN;
SWORD used_error_txt;
RETCODE retcode;
UDWORD i;

#define TESTMALLINFO

void PrintMemoryInfo(UCHAR FAR *szTestName);
void MallInfoInit(void);
int TestMallInfo();
int EnvironmentTest();
int AllocStmtTest();
int ExecDirectTest();

#ifdef MALLINFO
struct mallinfo mold;
#endif

MAIN()
{
   SPRINTF(buffer, " %s running."CRLF, PROGNAME);
   PRINTF(buffer);
   szConnStrOut[0] = '\0';
   MallInfoInit();

#ifdef TESTMALLINFO
   entersection();
   TestMallInfo("TESTMALLINFO");
   leavesection();
#endif

   EnvironmentTest();

   AllocStmtTest();

   ExecDirectTest();

   SPRINTF(buffer, " %s ending"CRLF, PROGNAME);
   PRINTF(buffer);

   return(0);
}

int TestMallInfo()
{
   for(i=0;i < 10;i++) {
      char *p = malloc(1000);
      char *p1;
      entersection();
      p1 = malloc(100);
      free(p1);
      leavesection();
      free(p);
      PrintMemoryInfo("TestMallInfo");
   }
   return(0);
}

int EnvironmentTest()
{
   entersection();
   for(i=0;i < MAXLOOP;i++) {
      retcode = SQLAllocEnv(&henv);
      SPRINTF(buffer, "SQLAllocEnv(%ld) '%s'"CRLF, i, cnvret(retcode));
      PRINTF(buffer);
      ERROR_CHECK(henv, SQL_NULL_HDBC, SQL_NULL_HSTMT);

      retcode = SQLAllocConnect(henv, &hdbc);
      SPRINTF(buffer, "SQLAllocConnect '%s'"CRLF, cnvret(retcode));
      PRINTF(buffer);
      ERROR_CHECK(henv, hdbc, SQL_NULL_HSTMT);

#ifdef WIN
      retcode = SQLDriverConnect (hdbc, hWnd, szConnStrOut, SQL_NTS,
	 szConnStrOut, sizeof(szConnStrOut), &cbConnStrOut, SQL_DRIVER_COMPLETE);
      SPRINTF(buffer," SQLDriverConnect retcode: %d"CRLF, retcode);
#else
      retcode = SQLConnect(hdbc, DBNODE, (SWORD) SQL_NTS,
	 ODBCUSER,  (SWORD) SQL_NTS, ODBCPASSW, (SWORD) SQL_NTS );
      SPRINTF(buffer, "SQLConnect '%s'"CRLF, cnvret(retcode));
      PRINTF(buffer);
      ERROR_CHECK(henv, hdbc, SQL_NULL_HSTMT);
#endif

      retcode = SQLDisconnect(hdbc);
      SPRINTF(buffer, "SQLDisconnect '%s'"CRLF, cnvret(retcode));
      PRINTF(buffer);
      ERROR_CHECK(henv, hdbc, SQL_NULL_HSTMT);

      retcode = SQLFreeConnect(hdbc);
      SPRINTF(buffer, "SQLFreeConnect '%s'"CRLF, cnvret(retcode));
      PRINTF(buffer);
      ERROR_CHECK(henv, hdbc, SQL_NULL_HSTMT);

      retcode = SQLFreeEnv(henv);
      SPRINTF(buffer, "SQLFreeEnv '%s'"CRLF, cnvret(retcode));
      PRINTF(buffer);
      ERROR_CHECK(henv, SQL_NULL_HDBC, SQL_NULL_HSTMT);
   }
   leavesection();
}

int AllocStmtTest()
{
   entersection();
   retcode = SQLAllocEnv(&henv);
   SPRINTF(buffer, "SQLAllocEnv(%ld) '%s'"CRLF, i, cnvret(retcode));
   PRINTF(buffer);
   ERROR_CHECK(henv, SQL_NULL_HDBC, SQL_NULL_HSTMT);

   retcode = SQLAllocConnect(henv, &hdbc);
   SPRINTF(buffer, "SQLAllocConnect '%s'"CRLF, cnvret(retcode));
   PRINTF(buffer);
   ERROR_CHECK(henv, hdbc, SQL_NULL_HSTMT);

#ifdef WIN
   retcode = SQLDriverConnect (hdbc, hWnd, szConnStrOut, SQL_NTS,
      szConnStrOut, sizeof(szConnStrOut), &cbConnStrOut, SQL_DRIVER_COMPLETE);
   SPRINTF(buffer," SQLDriverConnect retcode: %d"CRLF, retcode);
#else
   retcode = SQLConnect(hdbc, DBNODE, (SWORD) SQL_NTS,
      ODBCUSER,  (SWORD) SQL_NTS, ODBCPASSW, (SWORD) SQL_NTS );
   SPRINTF(buffer, "SQLConnect '%s'"CRLF, cnvret(retcode));
   PRINTF(buffer);
   ERROR_CHECK(henv, hdbc, SQL_NULL_HSTMT);
#endif

   for(i=0;i < MAXLOOP;i++) {
      retcode = SQLAllocStmt (hdbc, &hstmt);
      SPRINTF(buffer," SQLAllocStmt '%s'"CRLF, cnvret(retcode));
      PRINTF(buffer);

      retcode = SQLExecDirect (hstmt, "select * from columns where owner = 'DOMAIN' and tablename = 'TABLES'", SQL_NTS);
      SPRINTF(buffer," SQLExecDirect '%s'"CRLF, cnvret(retcode));
      PRINTF(buffer);
      ERROR_CHECK(SQL_NULL_HENV, SQL_NULL_HDBC, hstmt);
      
      while (retcode == SQL_SUCCESS) {
	 retcode = SQLFetch(hstmt);
	 SPRINTF(buffer," SQLFetch '%s'"CRLF, cnvret(retcode));
	 PRINTF(buffer);
	 ERROR_CHECK(SQL_NULL_HENV, SQL_NULL_HDBC, hstmt);
      }

      retcode = SQLFreeStmt(hstmt, SQL_DROP);
      SPRINTF(buffer," SQLFreeStmt '%s'"CRLF, cnvret(retcode));
      PRINTF(buffer);

   }

   retcode = SQLDisconnect(hdbc);
   SPRINTF(buffer, "SQLDisconnect '%s'"CRLF, cnvret(retcode));
   PRINTF(buffer);
   ERROR_CHECK(henv, hdbc, SQL_NULL_HSTMT);

   retcode = SQLFreeConnect(hdbc);
   SPRINTF(buffer, "SQLFreeConnect '%s'"CRLF, cnvret(retcode));
   PRINTF(buffer);
   ERROR_CHECK(henv, hdbc, SQL_NULL_HSTMT);

   retcode = SQLFreeEnv(henv);
   SPRINTF(buffer, "SQLFreeEnv '%s'"CRLF, cnvret(retcode));
   PRINTF(buffer);
   ERROR_CHECK(henv, SQL_NULL_HDBC, SQL_NULL_HSTMT);
   leavesection();
}

int ExecDirectTest()
{
   entersection();
   retcode = SQLAllocEnv(&henv);
   SPRINTF(buffer, "SQLAllocEnv(%ld) '%s'"CRLF, i, cnvret(retcode));
   PRINTF(buffer);
   ERROR_CHECK(henv, SQL_NULL_HDBC, SQL_NULL_HSTMT);

   retcode = SQLAllocConnect(henv, &hdbc);
   SPRINTF(buffer, "SQLAllocConnect '%s'"CRLF, cnvret(retcode));
   PRINTF(buffer);
   ERROR_CHECK(henv, hdbc, SQL_NULL_HSTMT);

#ifdef WIN
   retcode = SQLDriverConnect (hdbc, hWnd, szConnStrOut, SQL_NTS,
      szConnStrOut, sizeof(szConnStrOut), &cbConnStrOut, SQL_DRIVER_COMPLETE);
   SPRINTF(buffer," SQLDriverConnect retcode: %d"CRLF, retcode);
#else
   retcode = SQLConnect(hdbc, DBNODE, (SWORD) SQL_NTS,
      ODBCUSER,  (SWORD) SQL_NTS, ODBCPASSW, (SWORD) SQL_NTS );
   SPRINTF(buffer, "SQLConnect '%s'"CRLF, cnvret(retcode));
   PRINTF(buffer);
   ERROR_CHECK(henv, hdbc, SQL_NULL_HSTMT);
#endif

   retcode = SQLAllocStmt (hdbc, &hstmt);
   SPRINTF(buffer," SQLAllocStmt '%s'"CRLF, cnvret(retcode));
   PRINTF(buffer);

   for(i=0;i < MAXLOOP;i++) {
      retcode = SQLExecDirect (hstmt, "select * from columns where owner = 'DOMAIN' and tablename = 'TABLES'", SQL_NTS);
      SPRINTF(buffer," SQLExecDirect '%s'"CRLF, cnvret(retcode));
      PRINTF(buffer);
      ERROR_CHECK(SQL_NULL_HENV, SQL_NULL_HDBC, hstmt);
      while (retcode == SQL_SUCCESS) {
	 retcode = SQLFetch(hstmt);
	 SPRINTF(buffer," SQLFetch '%s'"CRLF, cnvret(retcode));
	 PRINTF(buffer);
	 ERROR_CHECK(SQL_NULL_HENV, SQL_NULL_HDBC, hstmt);
      }
      retcode = SQLFreeStmt(hstmt, SQL_CLOSE);
      SPRINTF(buffer," SQLFreeStmt '%s'"CRLF, cnvret(retcode));
      PRINTF(buffer);
   }   
   retcode = SQLFreeStmt(hstmt, SQL_DROP);
   SPRINTF(buffer," SQLFreeStmt '%s'"CRLF, cnvret(retcode));
   PRINTF(buffer);

   retcode = SQLDisconnect(hdbc);
   SPRINTF(buffer, "SQLDisconnect '%s'"CRLF, cnvret(retcode));
   PRINTF(buffer);
   ERROR_CHECK(henv, hdbc, SQL_NULL_HSTMT);

   retcode = SQLFreeConnect(hdbc);
   SPRINTF(buffer, "SQLFreeConnect '%s'"CRLF, cnvret(retcode));
   PRINTF(buffer);
   ERROR_CHECK(henv, hdbc, SQL_NULL_HSTMT);

   retcode = SQLFreeEnv(henv);
   SPRINTF(buffer, "SQLFreeEnv '%s'"CRLF, cnvret(retcode));
   PRINTF(buffer);
   ERROR_CHECK(henv, SQL_NULL_HDBC, SQL_NULL_HSTMT);
   leavesection();
}

void PrintMemoryInfo(UCHAR FAR *szTestName)
{
#ifdef MALLINFO   
   struct mallinfo m = mallinfo();
   int nblks = m.ordblks - mold.ordblks; /* -1; */
   int nbytes = (m.uordblks-mold.uordblks); /* -nblks*4; */
   if (nblks || nbytes) {
      SPRINTF(buffer, "%s failed."CRLF, szTestName);
      PRINTF(buffer);
      SPRINTF(buffer, "ordblks=%d, uordblks=%d"CRLF, m.ordblks, m.uordblks);
      PRINTF(buffer);
      SPRINTF(buffer, "%d Bytes are allocated from %d Blocks but not freed."CRLF,
	 nbytes, nblks);
      PRINTF(buffer);
   }
#else
   (szTestName);
#endif   
}

void MallInfoInit(void) {   
#ifdef MALLINFO   
mold = mallinfo();
#endif
}
