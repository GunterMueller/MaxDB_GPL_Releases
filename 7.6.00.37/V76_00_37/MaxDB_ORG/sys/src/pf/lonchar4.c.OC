/*



    ========== licence begin  GPL
    Copyright (c) 2000-2005 SAP AG

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
    ========== licence end





*/

/* Test of SQLPutData implicit 0 length (binding as SQL_C_CHAR and first character is \0 */

#define PROGNAME "lonchar4"
#include "winhead.h"

#define TABLE PROGNAME
#define SELECT
#ifndef DEFAULTS
#define USERNAME "SUPERDBA"
#define PASSWORD "ADMIN"
#define DBNODE   "sqlprec:D"

#define ODBCUSER  "ODBC"
#define ODBCPASSW "ODBC"
#endif

#define BUFLEN 160000
#define ERROR_CHECK(hstmtx)      if (retcode != SQL_SUCCESS) {\
			   SQLError(henv, hdbc, hstmtx,\
			      sqlstate, &esq_sql_code, error_txt,\
				    len_error_txt, &used_error_txt);\
			   SPRINTF(buffer, " sqlstate: %s"CRLF, sqlstate);\
			 PRINTF(buffer);\
		  SPRINTF(buffer, " esq_sql_code: %ld"CRLF, esq_sql_code);\
			 PRINTF(buffer);\
		  SPRINTF(buffer, " error_txt: %s"CRLF, error_txt);\
			 PRINTF(buffer);\
                  switch (retcode) {\
		  case(100) :\
			  break;\
                  case(SQL_ERROR) : \
		     if (!STRCMP(sqlstate,"22005") &&\
			!STRCMP(sqlstate,"22003") &&\
			   !STRCMP(sqlstate,"22008") &&\
			      !STRCMP(sqlstate,"07006"))\
			      { return(16); }\
		     break;\
                  case(SQL_SUCCESS_WITH_INFO) : \
		       if (STRCMP(sqlstate,"01004"))\
		          if (STRCMP(sqlstate,"22001"))\
			{ return(16); }\
		     break;\
		  default   :\
			  return(16);\
			  break; } }

UCHAR driverver [ 11 ];
#define MAX_COL 30
UWORD col;
UCHAR szColName[MAX_COL][NAME_LEN+1];
SWORD pcbColName[MAX_COL], pfSqlType[MAX_COL],
pibScale[MAX_COL], pfNullable[MAX_COL];
SQLULEN pcbColDef[MAX_COL];

UCHAR buffer [BUFLEN];

#define CHAR_LEN 120
#define LONGVARCHAR_LEN 165000
UCHAR szCHAR[CHAR_LEN+1];
UCHAR szLONGVARCHAR[LONGVARCHAR_LEN+1];
UCHAR szLONGVARCHAR2[LONGVARCHAR_LEN+1];
double  sDOUBLE;
double  sDECIMAL;
SQLLEN cbDOUBLE, cbCHAR, cbLONG, cbLONGVARCHAR, *pcbLONGVARCHAR,
cbLONGVARCHAR2, *pcbLONGVARCHAR2, cbDECIMAL;
#define ENDLEN SQL_NULL_DATA-1

typedef struct {
   SQLLEN cbValue1;
   SDWORD len1;
   SQLLEN cbValue2;
   SDWORD len2;
} TestLenStruct;

#define MAXBLOCK 160000

static TestLenStruct TestLen[] = {
// {SQL_DATA_AT_EXEC, SQL_NULL_DATA, SQL_DATA_AT_EXEC, SQL_NULL_DATA},
// {SQL_DATA_AT_EXEC, SQL_NULL_DATA, SQL_DATA_AT_EXEC, 1500},
// {SQL_DATA_AT_EXEC, 1500, SQL_DATA_AT_EXEC, SQL_NULL_DATA},

// {SQL_DATA_AT_EXEC, 0, SQL_DATA_AT_EXEC, 0},
{SQL_DATA_AT_EXEC, 254, SQL_DATA_AT_EXEC, 254},
{SQL_NULL_DATA, 0, SQL_DATA_AT_EXEC, 254},
{SQL_DATA_AT_EXEC, 254, SQL_NULL_DATA, 0},
// {SQL_NULL_DATA, 0, SQL_NULL_DATA, 0},
{SQL_DATA_AT_EXEC, 1000, SQL_DATA_AT_EXEC, 1000},
{SQL_DATA_AT_EXEC, 100000, SQL_DATA_AT_EXEC, 150000},
{ENDLEN, ENDLEN, ENDLEN, ENDLEN}
};

void fetchout();

HENV henv   = SQL_NULL_HENV;
HENV FAR * phenv;
HDBC hdbc   = SQL_NULL_HDBC;
HDBC FAR * phdbc;
HSTMT hstmt = SQL_NULL_HSTMT;
HSTMT FAR * phstmt;

VOID FillLong(UCHAR FAR *ptr, SDWORD len, UCHAR x)
{
   UCHAR c, e, s;
   SDWORD j;
   s = isalpha(x) ? x : (UCHAR)'A';
   e = islower(s) ? (UCHAR)'z' : (UCHAR)'Z';
   c = s;
   for (j = 0; j < len; j++, ptr++) {
      if ((UCHAR)(c-1) == e)
         c = islower(s) ? (UCHAR)'a' : (UCHAR)'A';
      *ptr = c++;
   }
   *ptr = '\0';
   return;
}

int MAIN(int argc, char **argv)
{
  UCHAR sqlstate  [ 10 ];
  SDWORD esq_sql_code;
  UCHAR error_txt  [ 101 ] ;
  SWORD len_error_txt = 100;
  SWORD used_error_txt;
  UWORD ipar;
  SCHAR *ptr, c;
  SDWORD cNUM;

  UWORD icol;

  RETCODE retcode, ret;
  SWORD pccol;
  SQLLEN pToken;        /* must be as long as a pointer! */

  int j;
  UDWORD vAutoCommit;
  TestLenStruct *p;
  SPRINTF(buffer, PROGNAME" running."CRLF);
  PRINTF(buffer);

  phenv = (HENV FAR *) &henv;
  phdbc = (HDBC FAR *) &hdbc;
  phstmt = (HSTMT FAR *) &hstmt;

  retcode = SQLAllocEnv(phenv);
  SPRINTF(buffer, " SQLAllocEnv retcode: %d"CRLF, retcode);
  PRINTF(buffer);
  ERROR_CHECK(NULL);

  retcode = SQLAllocConnect(henv, phdbc);
  SPRINTF(buffer, " SQLAllocConnect retcode: %d"CRLF, retcode);
  PRINTF(buffer);
  ERROR_CHECK(NULL);

  retcode = SQLConnect(hdbc, DBNODE, (SWORD) SQL_NTS, ODBCUSER,
		       (SWORD) SQL_NTS, ODBCPASSW, (SWORD) SQL_NTS );
  SPRINTF(buffer, " SQLConnect retcode: %d"CRLF, retcode);
  PRINTF(buffer);
  ERROR_CHECK(NULL);

/*   vAutoCommit = 1; */
/*   retcode = SQLSetConnectOption (hdbc, SQL_AUTOCOMMIT, vAutoCommit); */
/*   SPRINTF(buffer," SQLSetConnectOption (SQL_AUTOCOMMIT=%d) retcode: %d"CRLF, vAutoCommit, retcode);  */
/*   PRINTF(buffer); */
/*   ERROR_CHECK(hstmt); */

  retcode = SQLAllocStmt (hdbc, phstmt);
  retcode = SQLExecDirect (hstmt, "drop table "TABLE, SQL_NTS);
  retcode = SQLExecDirect (hstmt, "create table "TABLE" (col1 integer, col2 long ascii, col3 long ascii)", SQL_NTS);
  SPRINTF(buffer, " SQLExecDirect(create table "TABLE") retcode: %d"CRLF, retcode);
  PRINTF(buffer);
  ERROR_CHECK(hstmt);

  retcode = SQLPrepare (hstmt, "insert "TABLE" values (?, ?, ?)", SQL_NTS);
  SPRINTF(buffer, " SQLPrepare retcode: %d"CRLF, retcode);
  PRINTF(buffer);
  ERROR_CHECK(hstmt);


  for (p = TestLen; p->len1 > ENDLEN; p++) {
     ipar = 1;
     cNUM=p->len1;
     retcode = SQLSetParam (hstmt, ipar, SQL_C_LONG, SQL_INTEGER, (UDWORD) 0, 0, &cNUM, NULL);
     SPRINTF(buffer," SQLSetParam (%d) retcode: %d"CRLF, ipar, retcode);
     PRINTF(buffer);
     ERROR_CHECK(hstmt);

     ipar = 2;
     retcode = SQLSetParam (hstmt, ipar, SQL_C_CHAR, SQL_LONGVARCHAR, (UDWORD) p->len1, 0, (PTR)ipar, &p->cbValue1);
     SPRINTF(buffer," SQLSetParam (%d) retcode: %d"CRLF, ipar, retcode);
     PRINTF(buffer);
     ERROR_CHECK(hstmt);

     ipar = 3;
     retcode = SQLSetParam (hstmt, ipar, SQL_C_CHAR, SQL_LONGVARCHAR, (UDWORD) p->len1, 0, (PTR)ipar, &p->cbValue2);
     SPRINTF(buffer," SQLSetParam (%d) retcode: %d"CRLF, ipar, retcode);
     PRINTF(buffer);
     ERROR_CHECK(hstmt);

     ret = retcode = SQLExecute (hstmt);
     SPRINTF(buffer, " SQLExecute retcode: %d"CRLF, retcode);
     PRINTF(buffer);

     while (ret == SQL_NEED_DATA) {
        retcode = SQLParamData(hstmt,  (PTR *)&pToken);
        ret = retcode;
        SPRINTF(buffer, " SQLParamData(%ld) retcode: '%s'"CRLF, pToken, cnvret(retcode));
        PRINTF(buffer);

        if (retcode == SQL_NEED_DATA) {
           switch(pToken) {
              SDWORD i;
              SDWORD j;
              case 1:{
                 break;
              }
              case 2: {}
              case 3:{
		 SDWORD len=p->len1;
                 UCHAR c='A';
		 if (pToken == 3) {
		    len = p->len2;
		    c = 'a';
		 }
                 j = len;
                 for (i=len; i >= 0 || len == SQL_NULL_DATA; i -= MAXBLOCK) {
                    j = len;
                    if (j != SQL_NULL_DATA) {
                       j = (i > MAXBLOCK) ? MAXBLOCK : i;
                       FillLong(szLONGVARCHAR, j, c);
                       c++;
                    }
                    cbLONGVARCHAR = j;
                    *szLONGVARCHAR = 0;
                    retcode = SQLPutData(hstmt, szLONGVARCHAR, cbLONGVARCHAR);
                    SPRINTF(buffer, " SQLPutData (%d) retcode: '%s'"CRLF, cbLONGVARCHAR, cnvret(retcode));
                    PRINTF(buffer);
                    ERROR_CHECK(hstmt);
		    if (retcode == SQL_ERROR || j == SQL_NULL_DATA) {
			if (retcode == SQL_ERROR)
				ret = retcode;
		       break;
		    }
		 }
                 break;
              }
           }
        }
     }
  }





  retcode = SQLPrepare (hstmt, "select * from "TABLE, SQL_NTS);
  SPRINTF(buffer, " SQLPrepare retcode: %d"CRLF, retcode);
  PRINTF(buffer);
  ERROR_CHECK(hstmt);

  retcode = SQLNumResultCols (hstmt, &pccol);
  SPRINTF(buffer, " SQLNumResultCols retcode: %d"CRLF, retcode);
  PRINTF(buffer);
  SPRINTF(buffer, " pccol : %d"CRLF, pccol);
  PRINTF(buffer);

  SPRINTF(buffer, " COLNAME LEN TYPE PRECISION SCALE NULLABLE"CRLF, szColName[col], pcbColName[col], pfSqlType[col], pcbColDef[col], pibScale[col], pfNullable[col]);
  PRINTF(buffer);
  for (col=1; col <= pccol; col++ ) {
    retcode = SQLDescribeCol (hstmt, col, szColName[col], NAME_LEN+1,
                              &pcbColName[col], &pfSqlType[col], &pcbColDef[col], &pibScale[col], &pfNullable[col]);
    SPRINTF(buffer, " % 7s %3d %4d %9d %5d %8d "CRLF, szColName[col], pcbColName[col], pfSqlType[col], pcbColDef[col], pibScale[col], pfNullable[col]);
    PRINTF(buffer);
  }

  /*
  ipar = 1;
  retcode = SQLSetParam (hstmt, ipar, SQL_C_LONG, SQL_INTEGER, (UDWORD) 0, 0, &cNUM, NULL);
  SPRINTF(buffer," SQLSetParam (%d) retcode: %d"CRLF, ipar, retcode);
  PRINTF(buffer);
  ERROR_CHECK(hstmt);
  */

  cbLONGVARCHAR = 0;
  retcode = SQLBindCol (hstmt, 1, SQL_C_CHAR, szCHAR, sizeof(szCHAR), &cbCHAR);
  retcode = SQLBindCol (hstmt, 2, SQL_C_CHAR, szLONGVARCHAR, sizeof(szLONGVARCHAR), &cbLONGVARCHAR);
  retcode = SQLBindCol (hstmt, 3, SQL_C_CHAR, szLONGVARCHAR2, sizeof(szLONGVARCHAR2), &cbLONGVARCHAR2);
  retcode = SQLExecute (hstmt);
  SPRINTF(buffer, " SQLExecute retcode: %d"CRLF, retcode);
  PRINTF(buffer);
  ERROR_CHECK(hstmt);

  fetchout();

  retcode = SQLFreeStmt (hstmt, SQL_CLOSE);
  SPRINTF(buffer, " SQLFreeStmt retcode: %d"CRLF, retcode);
  PRINTF(buffer);
  ERROR_CHECK(hstmt);

  retcode = SQLDisconnect(hdbc);
  SPRINTF(buffer, " SQLDisconnect retcode: %d"CRLF, retcode);
  PRINTF(buffer);
  ERROR_CHECK(NULL);

  retcode = SQLFreeConnect(hdbc);
  SPRINTF(buffer, " SQLFreeConnect retcode: %d"CRLF, retcode);
  PRINTF(buffer);
  ERROR_CHECK(NULL);

  retcode = SQLFreeEnv(henv);
  SPRINTF(buffer, " SQLFreeEnv retcode: %d"CRLF, retcode);
  PRINTF(buffer);
  ERROR_CHECK(NULL);
  SPRINTF(buffer, " %s ending"CRLF, PROGNAME);
  PRINTF(buffer);

  return(0);
}

void fetchout()
{
  RETCODE retcode=SQL_SUCCESS;
  UDWORD len;

  long line = 0;

  while (retcode == SQL_SUCCESS) {
     cbCHAR=0;
     cbLONGVARCHAR=0;
     MEMSET(szLONGVARCHAR, 'X', sizeof(szLONGVARCHAR));
     MEMSET(szLONGVARCHAR2, 'x', sizeof(szLONGVARCHAR2));
     retcode = SQLFetch (hstmt);
     if ( retcode != SQL_NO_DATA_FOUND ) {
        line++;
	SPRINTF(buffer, " SQLFetch retcode: '%d'"CRLF, retcode);
	PRINTF(buffer);
	SPRINTF(buffer, "col1(%ld) = '%s'"CRLF, cbCHAR, szCHAR);
	PRINTF(buffer);
	SPRINTF(buffer, "len1 = %d"CRLF, cbLONGVARCHAR);
	PRINTF(buffer);
	len = STRLEN(szLONGVARCHAR);
	if (len < BUFLEN)
	   SPRINTF(buffer, "'%s'"CRLF, szLONGVARCHAR);
	else
	   SPRINTF(buffer, "'%.*s"CRLF"........"CRLF"%s'"CRLF,
	      BUFLEN/3, szLONGVARCHAR, ((char *)szLONGVARCHAR+len-BUFLEN/3));
	PRINTF(buffer);

	SPRINTF(buffer, "len2 = %d"CRLF, cbLONGVARCHAR2);
	PRINTF(buffer);
	len = STRLEN(szLONGVARCHAR2);
	if (len < BUFLEN)
	   SPRINTF(buffer, "'%s'"CRLF, szLONGVARCHAR2);
	else
	   SPRINTF(buffer, "'%.*s"CRLF"........"CRLF"%s'"CRLF,
	      BUFLEN/3, szLONGVARCHAR2, ((char *)szLONGVARCHAR2+len-BUFLEN/3));
	PRINTF(buffer);
     }
  }
  SPRINTF(buffer, "\nfetched rows: %d\n", line);
  PRINTF(buffer);
}
