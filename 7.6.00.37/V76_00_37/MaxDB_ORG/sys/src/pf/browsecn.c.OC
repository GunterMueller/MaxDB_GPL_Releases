/*
*****************************************************************************
** SQL Datenbanksysteme GmbH
**
** Autor        : Harun Eren 
**
** Program      : browsecn.c.OC
**
** Usage        : --
** Option       : --
**
** Purpose      : Auto Test DLL, Test von SQLBROWSECONNECT
**
** Date         : 02.12.94
** l.aenderung  : 14:37pm 06-02-1997 Harun)
****************************************************************************



    ========== licence begin  GPL
    Copyright (c) 2000-2005 SAP AG

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
    ========== licence end




*/
#include "winhead.h"

/* ---------------------------------------------------------------------- */
#define PROGNAME "browsecn"
#ifndef DEFAULTS
#define USERNAME "SUPERDBA"
#define PASSWORD "ADMIN"
#define DBNODE   "sqlprec:D"

#define ODBCUSER  "ODBC"
#define ODBCPASSW "ODBC"
#endif

#define ODBCUSER1  "ODBC1"
#define ODBCPASSW1 "ODBC1"
#define ODBCTABLE  "ODBCTEST"
#define ODBCSCRIPT "proc2inst"
#define DBPROC1	   "INSERT_TEST"
#define DBPROC2	   "SELECT_TEST"

#define ERRTXT1	   "-> SQLBrowseConnect failed !"
#define ERRTXT2	   "-> SQLBrowseConnect (SQL_NEED_DATA)  failed !"
#define ERR1	   -709
#define ERR2	   -813

#define ERROR_CHECK(hstmtx)  \
    if (rc != SQL_SUCCESS) {\
	   SQLError(henv, hdbc, hstmtx, sqlstate, &esq_sql_code, error_txt,\
		    len_error_txt, &used_error_txt);\
	   SPRINTF(buffer," sqlstate: %s"CRLF, sqlstate);\
           PRINTF(buffer);\
	   SPRINTF(buffer," esq_sql_code:%ld - %s"CRLF,esq_sql_code,error_txt);\
           PRINTF(buffer);\
           switch (rc) {\
		  case(1) :\ 
			  break;\
		  case(-1) :\ 
			  switch (esq_sql_code) { \
 			    case (ERR1): \
 			    case (ERR2): \
				SPRINTF(buffer,"%s"CRLF, ERRTXT1); \
 				PRINTF(buffer); \
				exit(-1); \
			  } \
			  break;\
		  case(100) :\ 
			  break;\
		  default   :\ 
			  exit(16); \
			  break; } \
	}

 UCHAR sqlstate  [ 10 ];
 SDWORD esq_sql_code;
 UCHAR error_txt  [ 101 ] ;
 SWORD len_error_txt = 100;
 SWORD used_error_txt;
 UCHAR buffer[1024];
 UCHAR szDBNode[256];
 UCHAR szDBName[256];
/* ----------------------------------------------------------------------- */
/* Create DataSource [SQL_BROWSE] */
#define DSN_DIRP "/usr/spool/sql/config/"
#define DSN_FILE "odbc.ini"
#define DSN_STR0 " "
#define DSN_STR1 "[SQL-BROWSE]"                             
#define DSN_STR2 "Driver="
#define DSN_STR3 "/odbclib.so"                    
#define DSN_STR4 "ServerDB=MYDB,DBS,Z,"                    
#define DSN_STR5 "ServerNode=tool2,all2,"           

#define WRITE_DSN() \
  ptr = (char*)getpwuid(getuid()); \	
  ptr = ((struct passwd*)ptr)->pw_dir; \ 
  SPRINTF(szFileName, "%s/.%s", ptr, DSN_FILE); \
  file_ptr = fopen(szFileName, "r"); \
  fclose(file_ptr); \
  file_ptr=NULL; \
  if (!file_ptr) SPRINTF(szFileName, "%s%s", DSN_DIRP, DSN_FILE); \
  if (!file_ptr) file_ptr = fopen(szFileName, "r"); \
  fclose(file_ptr); \
  SPRINTF(buffer,"-> write DataSource [SQL-BROWSE] to %s\n",szFileName);\
  PRINTF(buffer);\
  SPRINTF(buffer,"mv %s %s.old",szFileName,szFileName); \
  system(buffer); \
  SPRINTF(buffer,"copy -m %s.old %s",szFileName,szFileName); \
  system(buffer); \
  SPRINTF(buffer,"echo %s >> %s",DSN_STR0,szFileName); \
  system(buffer); \
  SPRINTF(buffer,"echo %s >> %s",DSN_STR1,szFileName); \
  system(buffer); \
  SPRINTF(buffer,"echo %s%s%s >> %s",DSN_STR2,getenv("DBROOT"),DSN_STR3,szFileName); \
  system(buffer); \
  SPRINTF(buffer,"echo %s%s >> %s",DSN_STR4,szDBName,szFileName); \
  system(buffer); \ 
  SPRINTF(buffer,"echo %s%s >> %s",DSN_STR5,szDBNode,szFileName); \
  system(buffer);  

#define REMOVE_DSN() \  
  SPRINTF(buffer,"-> remove DataSource [SQL-BROWSE] from %s\n",szFileName);\
  PRINTF(buffer);\
  SPRINTF(buffer,"rm %s",szFileName); \
  system(buffer); \
  SPRINTF(buffer,"mv %s.old %s",szFileName,szFileName); \
  system(buffer); \
/* ----------------------------------------------------------------------- */
#define TESTNAME "SQLBrowseConnect"
#define TABLE ""

#define CONN_DSN 	"DSN=SQL-BROWSE"
#define CONN_UID 	"UID="
#define CONN_PWD 	"PWD="
#define CONN_SERVERNODE	"SERVERNODE="
#define CONN_SERVERDB	"SERVERDB="
#define CONN_STR	"successful connection !"

#define MAX_LEN  512
#define MAX_NEED 5
#define MAX_FILE 64
/*
 -------------------------------------------------------------------------
| DoSQLBrowseConnect:
|             
|
| Returns:
|     Number of Errors or TEST_ABORTED
 -------------------------------------------------------------------------
*/
MAIN()
{
	RETCODE                 rc;
	SWORD                   sErr=0;
/* ------------------------------------------------------------------------- */
	HENV henv   = SQL_NULL_HENV;
	HENV FAR * phenv;
	HDBC hdbc   = SQL_NULL_HDBC;
	HDBC FAR * phdbc;
	HSTMT hstmt = SQL_NULL_HSTMT;
	HSTMT FAR * phstmt;
/* ------------------------------------------------------------------------- */
	FILE * 			file_ptr;
	UCHAR FAR 		szFileName[MAX_FILE];
	UCHAR *			ptr;

	UCHAR 			szConnStrIn[MAX_LEN];
	SWORD			cbConnStrIn;
	UCHAR			szConnStrOut[MAX_LEN];
	SWORD			cbConnStrOutMax;
	SWORD 			pcbConnStrOut;

	SWORD                   cAbort=0;
	SWORD			count;
	SWORD			cn_need;
/* ---------------------------------------------------------------------har- */
 SPRINTF(buffer, " %s running.\n", PROGNAME);
 PRINTF(buffer);

 phenv = (HENV FAR *) &henv;
 phdbc = (HDBC FAR *) &hdbc;
 phstmt = (HSTMT FAR *) &hstmt;

 rc = SQLAllocEnv(phenv);
 SPRINTF(buffer," SQLAllocEnv retcode: %d"CRLF, rc);
 PRINTF(buffer);
 ERROR_CHECK(NULL);
	
/* ------------------------------------------------------------------------- */
 /* get ServerNode and ServerDB */
 rc = SQLAllocConnect(henv, phdbc);
 SPRINTF(buffer," SQLAllocConnect retcode: %d"CRLF, rc);
 PRINTF(buffer);
 ERROR_CHECK(NULL);

 rc = SQLConnect(hdbc,DBNODE,SQL_NTS,ODBCUSER,SQL_NTS,ODBCPASSW,SQL_NTS );
 SPRINTF(buffer," SQLConnect retcode: %d"CRLF, rc);
 PRINTF(buffer);
 ERROR_CHECK(NULL);
 
 rc = SQLGetInfo(hdbc, SQL_SERVER_NAME, szDBNode, sizeof(szDBNode), NULL);
 SPRINTF(buffer," ServerNode: %s"CRLF, szDBNode);
 PRINTF(buffer);

 rc = SQLGetInfo(hdbc, SQL_DATABASE_NAME, szDBName, sizeof(szDBName), NULL);
 SPRINTF(buffer," ServerDB: %s"CRLF, szDBName);
 PRINTF(buffer);
 
 rc = SQLDisconnect(hdbc);
 SPRINTF(buffer," SQLDisconnect retcode: %d"CRLF, rc);
 PRINTF(buffer);
 ERROR_CHECK(NULL);

 rc = SQLFreeConnect(hdbc);
 SPRINTF(buffer," SQLFreeConnect retcode: %d"CRLF, rc);
 PRINTF(buffer);
 ERROR_CHECK(NULL);
/* ------------------------------------------------------------------------- */
 rc = SQLAllocConnect(henv, phdbc);
 SPRINTF(buffer," SQLAllocConnect retcode: %d"CRLF, rc);
 PRINTF(buffer);
 ERROR_CHECK(NULL);

 /* write DataSource [SQL_BROWSE] to odbc.ini */
 WRITE_DSN(); 

	count=1;
	do {
	  switch (count) {
		case (1) :
			/* ***** 1. Set DSN parameter */
			cn_need=0;
			STRCPY(szConnStrIn,CONN_DSN); cbConnStrIn=SQL_NTS;
			STRCPY(szConnStrOut,""); cbConnStrOutMax=MAX_LEN;
			break;
		case (2) :
			/* ***** 2. Set UID parameter */
			cn_need=0;
			STRCPY(szConnStrIn,CONN_UID); cbConnStrIn=SQL_NTS;
			/* Login UserID */
			STRCAT(szConnStrIn, ODBCUSER);
			STRCPY(szConnStrOut,""); cbConnStrOutMax=MAX_LEN;
			break;
		case (3) :
			/* ***** 3. Set PWD parameter */
			cn_need=0;
			STRCPY(szConnStrIn,CONN_PWD); cbConnStrIn=SQL_NTS;
			/* Login Password */
			STRCAT(szConnStrIn, ODBCPASSW);
			STRCPY(szConnStrOut,""); cbConnStrOutMax=MAX_LEN;
			break;
		case (4) :
			/* ***** 4. Set SERVERNODE parameter */
			cn_need=0;
			STRCPY(szConnStrIn,CONN_SERVERNODE); 
			STRCAT(szConnStrIn,szDBNode); 
			cbConnStrIn=SQL_NTS;
			STRCPY(szConnStrOut,""); cbConnStrOutMax=MAX_LEN;
			break;
		case (5) :
			/* ***** 5. Set SERVERDB parameter */
			cn_need=0;
			STRCPY(szConnStrIn,CONN_SERVERDB); 
			STRCAT(szConnStrIn,szDBName); 
			cbConnStrIn=SQL_NTS;
			STRCPY(szConnStrOut,""); cbConnStrOutMax=MAX_LEN;
			break;
	  }
	
	SPRINTF(buffer,"IN  -> szConnStrIn  = '%s'"CRLF, szConnStrIn);
	PRINTF(buffer);

	rc = SQLBrowseConnect(hdbc, szConnStrIn, cbConnStrIn,	szConnStrOut, 
				cbConnStrOutMax, &pcbConnStrOut);
	if (rc != SQL_NEED_DATA) {
		SPRINTF(buffer," SQLBrowseConnect retcode: %d"CRLF, rc);
		PRINTF(buffer);
		ERROR_CHECK(hstmt);
	} else {
		SPRINTF(buffer,
	             "SQLBrowseConnect -> retcode: %d (SQL_NEED_DATA)"CRLF,rc);
	        PRINTF(buffer);

		cn_need++;
		if (cn_need == MAX_NEED) {
			/* remove DataSource [SQL_BROWSE] from odbc.ini */
			REMOVE_DSN();
			SPRINTF(buffer,"%s"CRLF, ERRTXT2); \
 			PRINTF(buffer); \
			exit(-1); \
		}
	}
	SPRINTF(buffer,"OUT -> szConnStrOut = '%s'"CRLF, szConnStrOut);
	PRINTF(buffer);
	
	count ++;
	} while (rc == SQL_NEED_DATA);

	if (rc == SQL_SUCCESS || rc == SQL_SUCCESS_WITH_INFO) {
		SPRINTF(buffer,"SQLBrowseConnect -> %s"CRLF,CONN_STR);
		PRINTF(buffer);		
	}
	
  /* remove DataSource [SQL_BROWSE] from odbc.ini */
  REMOVE_DSN();
/* ------------------------------------------------------------------------- */
  rc = SQLDisconnect(hdbc);
  SPRINTF(buffer," SQLDisconnect retcode: %d"CRLF, rc);
  PRINTF(buffer);
  ERROR_CHECK(NULL);
	
  rc = SQLFreeConnect(hdbc);
  SPRINTF(buffer," SQLFreeConnect retcode: %d"CRLF, rc);
  PRINTF(buffer);
  ERROR_CHECK(NULL);
	
  rc = SQLFreeEnv(henv);
  SPRINTF(buffer," SQLFreeEnv retcode: %d"CRLF, rc);
  PRINTF(buffer);
  ERROR_CHECK(NULL);

  SPRINTF(buffer,""CRLF);
  PRINTF(buffer);
  SPRINTF(buffer," %s ending"CRLF, PROGNAME);
  PRINTF(buffer);

  return(0);	
}
/* ------------------------------------------------------------------------- */
