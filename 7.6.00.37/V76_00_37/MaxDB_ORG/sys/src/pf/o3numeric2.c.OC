/*!**********************************************************************

  module: o3numeric2.c

  -----------------------------------------------------------------------

  responsible:  Holger Bischoff (D027451 - Holger.Bischoff@SAP-AG.de)

  special area: ODBC-Tests

  description: Conversion to and from sql for SQL_C_NUMERIC

  -----------------------------------------------------------------------

                         Copyright (c) 1999-2005 SAP AG




    ========== licence begin  GPL
    Copyright (c) 1999-2005 SAP AG

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
    ========== licence end




************************************************************************/

#define PROGNAME "o3numeric"

#define ODBCVER 0x0350

#include "o3util.c"
#include "o3cnvtab.h"

SQLLEN lenIndiNumeric = 0;
SQLLEN lenIndiChar    = 0;
SQLLEN lenIndiShort   = 0;
SQLLEN lenIndiFloat   = 0;

static SQL_NUMERIC_STRUCT numeric1 = {
    0, 0, 1, { 0xff, 0xff, 0xff, 0xff, 0x3f, 0x22, 0x8a, 0x09,
               0x7a, 0xc4, 0x86, 0x5a, 0xa8, 0x4c, 0x3b, 0x4b }};
static SQL_NUMERIC_STRUCT numeric2 = {
    0, 0, 0, { 0xff, 0xff, 0xff, 0xff, 0x3f, 0x22, 0x8a, 0x09,
               0x7a, 0xc4, 0x86, 0x5a, 0xa8, 0x4c, 0x3b, 0x4b }};
static SQL_NUMERIC_STRUCT numeric3 = {
    0, 0, 0, { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
               0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff }};
static SQL_NUMERIC_STRUCT numeric4 = {
    0, 13, 1, { 0xff, 0xff, 0xff, 0xff, 0x3f, 0x22, 0x8a, 0x09,
               0x7a, 0xc4, 0x86, 0x5a, 0xa8, 0x4c, 0x3b, 0x4b }};
static SQL_NUMERIC_STRUCT numeric5 = {
    0, 13, 0, { 0xff, 0xff, 0xff, 0xff, 0x3f, 0x22, 0x8a, 0x09,
               0x7a, 0xc4, 0x86, 0x5a, 0xa8, 0x4c, 0x3b, 0x4b }};

static valueStruct numericValues[] = {
    { &numeric1, SQL_C_NUMERIC, &lenIndiNumeric, sizeof(SQL_NUMERIC_STRUCT) },
    { &numeric2, SQL_C_NUMERIC, &lenIndiNumeric, sizeof(SQL_NUMERIC_STRUCT) },
    { &numeric3, SQL_C_NUMERIC, &lenIndiNumeric, sizeof(SQL_NUMERIC_STRUCT) },
    { &numeric4, SQL_C_NUMERIC, &lenIndiNumeric, sizeof(SQL_NUMERIC_STRUCT) },
    { &numeric5, SQL_C_NUMERIC, &lenIndiNumeric, sizeof(SQL_NUMERIC_STRUCT) },
    { NULL, 0, NULL, 0 }
}; /* numericValues */

static char charval1[] = "99999999999999999999999999999999999999";

static valueStruct charValues[] = {
    { charval1, SQL_C_CHAR, &lenIndiChar, SQL_NTS },
    { NULL, 0, NULL, 0 }
}; /* charValues */


SQL_NUMERIC_STRUCT  numericVal;
UCHAR               charVal[1024];

static testTypesStruct testTypeNumeric[] = {
    { SQL_C_NUMERIC,
      &numericVal, sizeof(SQL_NUMERIC_STRUCT), &lenIndiNumeric },

    { SQL_C_CHAR,
      &charVal, sizeof(charVal), &lenIndiChar },

    { 0, 0 }
}; /* TestTypeNumeric */


static testTabStruct testTab[] = {
            
    { SQL_SMALLINT,
      "SQL_SMALLINT",
      "(n integer, col smallint)",
      numericValues,
      testTypeNumeric},
    
    { SQL_INTEGER,
      "SQL_INTEGER",
      "(n integer, col integer)",
      numericValues,
      testTypeNumeric},
    
    { SQL_REAL, "SQL_REAL",
      "(n integer, col real(7))",
      numericValues,
      testTypeNumeric},
    
    { SQL_FLOAT, "SQL_FLOAT",
      "(n integer, col float)",
      numericValues,
      testTypeNumeric},
    
    { SQL_DOUBLE, "SQL_DOUBLE",
      "(n integer, col double precision)",
      numericValues,
      testTypeNumeric},

    { SQL_CHAR, "SQL_CHAR",
      "(n integer, col CHAR(100))",
      numericValues,
      testTypeNumeric},

    { SQL_CHAR, "SQL_CHAR (VARCHAR)",
      "(n integer, col VARCHAR(100))",
      numericValues,
      testTypeNumeric},
    
    { SQL_NUMERIC, "FIXED(18,0)",
      "(n integer, col FIXED(18,0))",
      numericValues,
      testTypeNumeric},
    
    { SQL_NUMERIC, "FIXED(38,0)",
      "(n integer, col FIXED(38,0))",
      charValues,
      testTypeNumeric},
    
    { SQL_NUMERIC, "FIXED(38,0)",
      "(n integer, col FIXED(38,0))",
      numericValues,
      testTypeNumeric},
    
    { SQL_NUMERIC, "FIXED(38,13)",
      "(n integer, col FIXED(38,13))",
      numericValues,
      testTypeNumeric},

    { 0, "", "", NULL, NULL}
}; /* TestTab */


int MAIN(int argc, char **argv) {
    RETCODE retcode;
    HENV    henv  = SQL_NULL_HENV;
    HDBC    hdbc  = SQL_NULL_HDBC;
    HSTMT   hstmt = SQL_NULL_HSTMT;
    UCHAR   textBuffer[O3UTIL_TEXT_BUFFER_LEN];

    StartTest( PROGNAME );

    retcode = FullConnect( &henv, &hdbc );
    if (retcode != SQL_SUCCESS) {
        return 0;
    }; /* if */

    ConversionTest( hdbc, testTab );
    
    FullDisconnect( &henv, &hdbc );

    EndTest( PROGNAME );
    return 0;
}; /* main */
