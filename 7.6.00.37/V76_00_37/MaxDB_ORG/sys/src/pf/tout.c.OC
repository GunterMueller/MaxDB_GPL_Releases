/*



    ========== licence begin  GPL
    Copyright (c) 2000-2005 SAP AG

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
    ========== licence end





*/
#define PROGNAME "tout"
#include "winhead.h"
extern unsigned sleep(unsigned);
#ifndef DEFAULTS
#define USERNAME "SUPERDBA"
#define PASSWORD "ADMIN"
#define DBNODE   "sqlprec:D"
#endif

#define USER1  "TOUT"
#define PASSW1  "TOUT"

#define ERROR_CHECK(hstmtx)	 if (retcode != SQL_SUCCESS) {\
			   SQLError(henv,\
				    hdbc,\
				    hstmtx,\
				    sqlstate,\
				    &esq_sql_code,\
				    error_txt,\
				    len_error_txt,\
				    &used_error_txt);\
			   SPRINTF(buffer, " sqlstate: %s"CRLF, sqlstate);\
			   PRINTF(buffer);\
		  SPRINTF(buffer, " esq_sql_code: %ld"CRLF, esq_sql_code);\
		  PRINTF(buffer);\
                  switch (retcode) {\
		  case(100) :\
			  break;\
		  case (SQL_ERROR):\
		     if (esq_sql_code != -4008 &&\
		        esq_sql_code != -711 &&\
		        esq_sql_code != -715)\
			exit(16);\
			   else\
			      break;\
		  default   :\
			  exit(16);\
			  break; } }

UCHAR driverver [ 11 ];
UCHAR buffer [1024];

#define QUALIFIER_LEN 19
#define OWNER_LEN 19
#define TABLENAME_LEN 19
#define NON_UNIQUE_LEN 0
#define INDEX_QUALIFIER_LEN 19
#define INDEX_NAME_LEN 19
#define TYPE_LEN 0
#define SEQ_IN_INDEX_LEN 0
#define COLUMNNAME_LEN 19
#define COLLATION_LEN 2
#define CARDINALITY_LEN 0
#define PAGES_LEN 0

UCHAR szQUALIFIER[QUALIFIER_LEN];
UCHAR szOWNER[OWNER_LEN];
UCHAR szTABLENAME[TABLENAME_LEN];
SWORD sNON_UNIQUE;
UCHAR szINDEX_QUALIFIER[INDEX_QUALIFIER_LEN];
UCHAR szINDEX_NAME[INDEX_NAME_LEN];
SWORD sTYPE;
SWORD sSEQ_IN_INDEX;
UCHAR szCOLUMNNAME[COLUMNNAME_LEN];
UCHAR szCOLLATION[COLLATION_LEN];
SWORD sCARDINALITY;
SWORD sPAGES;

SDWORD cbQUALIFIER, cbOWNER, cbTABLENAME, cbNON_UNIQUE, cbINDEX_QUALIFIER,
       cbINDEX_NAME, cbTYPE, cbSEQ_IN_INDEX, cbCOLUMNNAME, cbCOLLATION,
       cbCARDINALITY, cbPAGES;


int MAIN()
{
  HENV henv;
  HDBC hdbc;
  HSTMT hstmt;
  UCHAR sqlstate  [ 10 ];
  DWORD esq_sql_code;
  UCHAR error_txt  [ ERROR_TEXT_LEN + 1 ] ;
  SWORD len_error_txt = ERROR_TEXT_LEN;
  SWORD used_error_txt;
  int ws;
  RETCODE retcode;

  SPRINTF(buffer, " %s running."CRLF, PROGNAME);
  PRINTF(buffer);

  retcode = SQLAllocEnv(&henv);
  SPRINTF(buffer, " SQLAllocEnv retcode: %d"CRLF, retcode);
  PRINTF(buffer);
  ERROR_CHECK(NULL);

  retcode = SQLAllocConnect(henv, &hdbc);
  SPRINTF(buffer, " SQLAllocConnect retcode: %d"CRLF, retcode);
  PRINTF(buffer);
  ERROR_CHECK(NULL);

  retcode = SQLConnect(hdbc, DBNODE, SQL_NTS, ODBCUSER, (SWORD) SQL_NTS,
     ODBCPASSW, (SWORD) SQL_NTS );
  SPRINTF(buffer," SQLConnect retcode: %d"CRLF, retcode);
  PRINTF(buffer);
  ERROR_CHECK(NULL);

  retcode = SQLAllocStmt (hdbc, &hstmt);
  SPRINTF(buffer," SQLAllocStmt retcode: %d"CRLF, retcode);
  PRINTF(buffer);

  retcode = SQLExecDirect (hstmt, "CREATE USER "USER1" PASSWORD "PASSW1" TIMEOUT 60", SQL_NTS);
  SPRINTF(buffer," SQLExecDirect retcode: %d"CRLF, retcode);
  PRINTF(buffer);

  retcode = SQLDisconnect(hdbc);
  SPRINTF(buffer," SQLDisconnect retcode: %d"CRLF, retcode);
  PRINTF(buffer);
  ERROR_CHECK(NULL);

  retcode = SQLConnect(hdbc, DBNODE, SQL_NTS, USER1, (SWORD) SQL_NTS,
     PASSW1, (SWORD) SQL_NTS );
  SPRINTF(buffer," SQLConnect retcode: %d"CRLF, retcode);
  PRINTF(buffer);
  ERROR_CHECK(NULL);

  retcode = SQLAllocStmt (hdbc, &hstmt);
  SPRINTF(buffer," SQLAllocStmt %#08lx retcode: %d"CRLF, hstmt, retcode);
  PRINTF(buffer);
  ws = 80;
  SPRINTF(buffer," sleep %ds"CRLF, ws);
  PRINTF(buffer);
  sleep(ws);
  SPRINTF(buffer," continue"CRLF);
  PRINTF(buffer);

  retcode = SQLExecDirect (hstmt, "SELECT * FROM DUAL", SQL_NTS);
  SPRINTF(buffer," SQLExecDirect retcode: %d"CRLF, retcode);
  PRINTF(buffer);
  ERROR_CHECK(hstmt);

  retcode = SQLDisconnect(hdbc);
  SPRINTF(buffer," SQLDisconnect retcode: %d"CRLF, retcode);
  PRINTF(buffer);
  ERROR_CHECK(NULL);

  retcode = SQLFreeConnect(hdbc);
  SPRINTF(buffer, " SQLFreeConnect retcode: %d"CRLF, retcode);
  PRINTF(buffer);
  ERROR_CHECK(NULL);

  retcode = SQLFreeEnv(henv);
  SPRINTF(buffer, " SQLFreeEnv retcode: %d"CRLF, retcode);
  PRINTF(buffer);
  ERROR_CHECK(NULL);

  SPRINTF(buffer, " %s ending"CRLF, PROGNAME);
  PRINTF(buffer);

  return(0);
}
