/*!**********************************************************************

  module: unicode1.c

  -----------------------------------------------------------------------

  responsible:  Thomas Koetter (D024584 - Thomas.Theodor.Koetter@sap.com)

  special area: ODBC-Tests

  description:  Test of several unicode features:

		- SQLDescribeCol

  -----------------------------------------------------------------------

                         Copyright (c) 2000-2005 SAP AG




    ========== licence begin  GPL
    Copyright (c) 2000-2005 SAP AG

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
    ========== licence end




************************************************************************/

#define PROGNAME "unicode1"

#define ODBCVER 0x0350

#include "o3util.c"

#define CHAR_LEN 200
#define NUM_VALUES 7
#define PARAMSET_SIZE 5


struct valueStruct
{
    SDWORD  id;
    SDWORD  idLen;
    UCHAR   val[CHAR_LEN];
    SDWORD  valLen;
};

VOID InitGlobals();
RETCODE InsertValues();
RETCODE ReadValues();

/* globals */
HDBC    hdbc  = SQL_NULL_HDBC;

struct valueStruct values[PARAMSET_SIZE];

SQLUSMALLINT paramStatusArray[PARAMSET_SIZE];
SQLUSMALLINT paramsProcessed;


int MAIN( int argc, char **argv) {
    char    buffer[1024];
    RETCODE retcode;
    HENV    henv  = SQL_NULL_HENV;
    HSTMT   hstmt = SQL_NULL_HSTMT;
    char    textBuffer[O3UTIL_TEXT_BUFFER_LEN];
	int     i;

    SQLCHAR     szColName[100];
    SQLSMALLINT bufLen, nameLen, dataType, decDigits, nullable;
    SQLULEN     colSize;

    StartTest( PROGNAME );

    retcode = FullConnect( &henv, &hdbc );
    if (retcode != SQL_SUCCESS) {
        return 0;
    }; /* if */

    retcode = CreateTable( hdbc,
                           PROGNAME,
						   "( id int, ch char (5), uch char(5) unicode, uvch varchar(5) unicode)" );
    if (retcode != SQL_SUCCESS) {
        goto exit;
    }; /* if */

  retcode = SQLAllocStmt (hdbc, &hstmt);
  SPRINTF(buffer," SQLAllocStmt retcode: %d\n", retcode);
  PRINTF(buffer);

  retcode = SQLPrepare (hstmt, "select * from unicode1", SQL_NTS);
  SPRINTF(buffer," SQLPrepare retcode: %d\n", retcode);
  PRINTF(buffer);
/*  ERROR_CHECK(hstmt); */

  for (i=1; i<=4; i++)
  {
    retcode = SQLDescribeCol (hstmt, i, szColName, 100, &nameLen, &dataType,
                              &colSize, &decDigits, &nullable);

    SPRINTF(buffer," SQL data type: %s\n", SqlTypeToString (dataType));
    PRINTF(buffer);
  }


exit:
    retcode = DropTable( hdbc, PROGNAME );
    FullDisconnect( &henv, &hdbc );

    EndTest( PROGNAME );
    return 0;
}; /* MAIN */






