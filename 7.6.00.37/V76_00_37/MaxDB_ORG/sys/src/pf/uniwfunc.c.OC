/*!***************************************************************************

  module:        uniwfunc.c

  -------------------------------------------------------------------------

  responsible:   Anton Arsenov

  special area:  Test of SQL<...>W functions

  description: 
  
  [optional tags]:

  -------------------------------------------------------------------------

  copyright:    Copyright (c) 2001-2005 SAP AG

*****************************************************************************/

#define _UNICODE
#define _ODBC
/*===========================================================================*
 *  INCLUDES                                                                 *
 *===========================================================================*/
#include "uniutil.c"

/*===========================================================================*
 *  DEFINES                                                                  *
 *===========================================================================*/

/*!
  Chapter: Defines
 */

/*!
  Decleration: TRACEFILE1
  Description: Name of trace file for test SQLConnectionAttrW
 */
#define TRACEFILE1 "uniwtr1.log"

/*!
  Decleration: TRACEFILE2
  Description: Name of trace file for test SQLConnectionOptionsW
 */
#define TRACEFILE2 "uniwtr2.log"

#define BADSTMT "CREATE TABLE()"
#define TESTTAB "UNIWFUNCTAB"
#define TESTCOL "UNIWFUNCCOL"

/*!
  Endchapter: Defines
 */

/*===========================================================================*
 *  MACROS                                                                   *
 *===========================================================================*/
#define CHECK_ENV(fname) \
	if (rc != SQL_NEED_DATA) \
		SPRINTF(buffer, " %s, return code: %d\n", fname, rc); \
	else \
		SPRINTF(buffer, " %s, return code: SQL_NEED_DATA\n", fname); \
	PRINTF(buffer); \
	if ((rc != SQL_SUCCESS)&&(rc != SQL_NEED_DATA)) { \
		SQLGetDiagRec(SQL_HANDLE_ENV, henv, 1, sqlstate, &native_error, message_text, 256, &text_len); \
		SPRINTF(buffer, "SQLSTATE:\t%s\n", sqlstate); \
		PRINTF(buffer); \
		SPRINTF(buffer, "NATIVE ERROR:\t%d\n", native_error); \
		PRINTF(buffer); \
		SPRINTF(buffer, "MESSAGE TEXT:\t%s\n", message_text); \
		PRINTF(buffer); \
		if (rc != 100) \
			exit(1); \
	}

#define CHECK_DBC(fname) \
	if (rc != SQL_NEED_DATA) \
		SPRINTF(buffer, " %s, return code: %d\n", fname, rc); \
	else \
		SPRINTF(buffer, " %s, return code: SQL_NEED_DATA\n", fname); \
	PRINTF(buffer); \
	if ((rc != SQL_SUCCESS)&&(rc != SQL_NEED_DATA)) { \
		SQLGetDiagRec(SQL_HANDLE_DBC, hdbc, 1, sqlstate, &native_error, message_text, 256, &text_len); \
		SPRINTF(buffer, "SQLSTATE:\t%s\n", sqlstate); \
		PRINTF(buffer); \
		SPRINTF(buffer, "NATIVE ERROR:\t%d\n", native_error); \
		PRINTF(buffer); \
		SPRINTF(buffer, "MESSAGE TEXT:\t%s\n", message_text); \
		PRINTF(buffer); \
		if (rc != 100) \
			exit(1); \
	}

#define CHECK_STMT(fname) \
	if (rc != SQL_NEED_DATA) \
		SPRINTF(buffer, " %s, return code: %d\n", fname, rc); \
	else \
		SPRINTF(buffer, " %s, return code: SQL_NEED_DATA\n", fname); \
	PRINTF(buffer); \
	if ((rc != SQL_SUCCESS)&&(rc != SQL_NEED_DATA)) { \
		SQLGetDiagRec(SQL_HANDLE_STMT, hstmt, 1, sqlstate, &native_error, message_text, 256, &text_len); \
		SPRINTF(buffer, "SQLSTATE:\t%s\n", sqlstate); \
		PRINTF(buffer); \
		SPRINTF(buffer, "NATIVE ERROR:\t%d\n", native_error); \
		PRINTF(buffer); \
		SPRINTF(buffer, "MESSAGE TEXT:\t%s\n", message_text); \
		PRINTF(buffer); \
		if (rc != 100) \
			exit(1); \
	}

/*===========================================================================*
 *  FUNCTIONS                                                                *
 *===========================================================================*/

int WStrCmp(SQLWCHAR *dst, SQLWCHAR *src) {
	int i = 0;
	while(TRUE) {
		if (dst[i] < src[i])
			return -1;
		if (dst[i] > src[i])
			return 1;
		if (dst[i] == 0)
			return 0;
		i++;
	}
}

int main(int argc, char **argv) {
	HENV henv   = SQL_NULL_HENV;
	HDBC hdbc   = SQL_NULL_HDBC;
	HSTMT hstmt = SQL_NULL_HSTMT;
	RETCODE rc;
	
	SQLCHAR sqlstate[6];
	SQLINTEGER native_error;
	SQLCHAR message_text[256];
	SQLSMALLINT text_len;
	SQLINTEGER texti_len;
	SQLLEN tlen;

	SQLCHAR buffer[1024];

	SQLWCHAR ubuf1[256];
	SQLWCHAR ubuf2[256];
	SQLWCHAR ubuf3[256];
	
	/* Allocating handle */
	rc = SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &henv);
	CHECK_ENV("SQLAllocHandle (HENV)");
	rc = SQLSetEnvAttr(henv, SQL_ATTR_ODBC_VERSION, (void *)SQL_OV_ODBC3, 0);
	CHECK_ENV("SQLSetEnvAtt");
	rc = SQLAllocHandle(SQL_HANDLE_DBC, henv, &hdbc);
	CHECK_ENV("SQLAllocHandle (HDBC)");
	PRINTF("\n");

#ifdef _DO_NOT_COMPILE_FOLLOWING_BLOCK
        not fully implemented for non-Windows
	/* Test of SQLDriversW, SQLDataSourcesW */
	PRINTF("------------------TEST of SQLDriversW and SQLDataSourcesW--------------------\n");
	rc = SQLDriversW(henv, SQL_FETCH_FIRST, ubuf1, 256, &text_len, ubuf2, 256, &text_len);
	CHECK_ENV("SQLDriversW");
	/* printf("b1: %S b2: %S\n", ubuf1, ubuf2); */
	rc = SQLDataSourcesW(henv, SQL_FETCH_FIRST_USER, ubuf1, 256, &text_len, ubuf2, 256, &text_len);
	CHECK_ENV("SQLDataSourcesW");
	/* printf("b1: %S b2: %S\n", ubuf1, ubuf2); */
	PRINTF("\n");
#endif
	/* Test of SQLConnectW */
	PRINTF("--------TEST of SQLConnectW, SQLBrowseConnect and SQLDriverConnectW----------\n");
	StringToWString(ubuf1, 256, NULL, TRUE, DBNODE, STRLEN(DBNODE), NULL);
	StringToWString(ubuf2, 256, NULL, TRUE, ODBCUSER, STRLEN(ODBCUSER), NULL);
	StringToWString(ubuf3, 256, NULL, TRUE, ODBCPASSW, STRLEN(ODBCPASSW), NULL);
	rc = SQLConnectW(hdbc, ubuf1, SQL_NTS, ubuf2, SQL_NTS, ubuf3, SQL_NTS); 
	CHECK_DBC("SQLConnectW");
	rc = SQLDisconnect(hdbc);
	CHECK_DBC("SQLDisconnect");

	STRCPY(buffer, "DSN=");
	STRCAT(buffer, DBNODE);
	STRCAT(buffer, ";UID=");
	STRCAT(buffer, ODBCUSER);
	STRCAT(buffer, ";PWD=");
	STRCAT(buffer, ODBCPASSW);
	STRCAT(buffer, ";");
	StringToWString(ubuf1, 256, NULL, TRUE, buffer, 256, NULL);
	PRINTF(" Conection string: ");
	PRINTF(buffer);
	PRINTF("\n");
	rc = SQLDriverConnectW(hdbc, NULL, ubuf1, (SQLSMALLINT)WStrLen(ubuf1, 256), ubuf2, 256, &text_len, SQL_DRIVER_NOPROMPT); 
	CHECK_DBC("SQLDriverConnectW");
	rc = SQLDisconnect(hdbc);
	CHECK_DBC("SQLDisconnect");

	PRINTF(" Conection string: ");
	WStringToString(buffer, 256, NULL, TRUE, ubuf1, 256, NULL);
	PRINTF(buffer);
	PRINTF("\n");

#ifdef _DO_NOT_COMPILE_FOLLOWING_BLOCK
	rc = SQLBrowseConnectW(hdbc, ubuf1, (SQLSMALLINT)WStrLen(ubuf1, 256), ubuf2, 256, &text_len);
	CHECK_DBC("SQLBrowseConnectW");
	STRCPY(buffer, "SERVERNODE=localhost;");
	PRINTF(" Conection string: ");
	PRINTF(buffer);
	PRINTF("\n");
	StringToWString(ubuf3, 256, NULL, TRUE, buffer, 256, NULL);
	rc = SQLBrowseConnectW(hdbc, ubuf3, (SQLSMALLINT)WStrLen(ubuf3, 256), ubuf2, 256, &text_len);
	CHECK_DBC("SQLBrowseConnectW");
	PRINTF("\n");

	/* Test of SQLSetConnectAttrW, SQLGetConnectAttrW */
	PRINTF("--------TEST of SQLSetConnectAttrW, SQLGetConnectAttrW-----------------------\n");
	SPRINTF(buffer, " Trace file: %s\n", TRACEFILE1);
	PRINTF(buffer);
	StringToWString(ubuf1, 256, NULL, TRUE, TRACEFILE1, 256, NULL);
	rc = SQLSetConnectAttrW(hdbc, SQL_ATTR_TRACEFILE, ubuf1, SQL_NTS);
	CHECK_DBC("SQLSetConnectAttrW");
	rc = SQLSetConnectAttrW(hdbc, SQL_ATTR_TRACE, (void *)SQL_OPT_TRACE_ON, 0);
	CHECK_DBC("SQLSetConnectAttrW");
	if (fopen(TRACEFILE1, "r") == NULL) {
		PRINTF("Error: Trace file wasn't created!");
		return 0;
	}
	PRINTF(" Trace file was created!\n");
	rc = SQLGetConnectAttrW(hdbc, SQL_ATTR_TRACEFILE, ubuf2, 256, &texti_len);
        text_len = (SQLSMALLINT) texti_len;
	CHECK_DBC("SQLGetConnectAttrW");
	if (WStrCmp(ubuf1, ubuf2) != 0) {
		PRINTF("Error: Wrong trace file name!");
		return 0;
	}
	rc = SQLSetConnectAttrW(hdbc, SQL_ATTR_TRACE, (void *)SQL_OPT_TRACE_OFF, 0);
	CHECK_DBC("SQLSetConnectAttrW");
	PRINTF("\n");

	/* Test of SQLSetConnectOptionW, SQLGetConnectOptionW */
	PRINTF("--------TEST of SQLSetConnectOptionW, SQLGetConnectOptionW-------------------\n");
	SPRINTF(buffer, " Trace file: %s\n", TRACEFILE2);
	PRINTF(buffer);
	StringToWString(ubuf1, 256, NULL, TRUE, TRACEFILE2, 256, NULL);
	rc = SQLSetConnectOptionW(hdbc, SQL_ATTR_TRACEFILE, (SQLINTEGER)ubuf1);
	CHECK_DBC("SQLSetConnectOptionW");
	rc = SQLSetConnectOptionW(hdbc, SQL_ATTR_TRACE, SQL_OPT_TRACE_ON);
	CHECK_DBC("SQLSetConnectOptionW");
	if (fopen(TRACEFILE2, "r") == NULL) {
		PRINTF("Error: Trace file wasn't created!");
		return 0;
	}
	PRINTF(" Trace file was created!\n");
	rc = SQLGetConnectOptionW(hdbc, SQL_ATTR_TRACEFILE, ubuf2);
	CHECK_DBC("SQLGetConnectOptionW");
	if (WStrCmp(ubuf1, ubuf2) != 0) {
		PRINTF("Error: Wrong trace file name!");
		return 0;
	}
	rc = SQLSetConnectOptionW(hdbc, SQL_ATTR_TRACE, SQL_OPT_TRACE_OFF);
	CHECK_DBC("SQLSetConnectOptionW");
	PRINTF("\n");
#else
	/* Test of SQLConnectW */
	PRINTF("--------TEST of SQLConnectW, SQLBrowseConnect and SQLDriverConnectW----------\n");
	StringToWString(ubuf1, 256, NULL, TRUE, DBNODE, STRLEN(DBNODE), NULL);
	StringToWString(ubuf2, 256, NULL, TRUE, ODBCUSER, STRLEN(ODBCUSER), NULL);
	StringToWString(ubuf3, 256, NULL, TRUE, ODBCPASSW, STRLEN(ODBCPASSW), NULL);
	rc = SQLConnectW(hdbc, ubuf1, SQL_NTS, ubuf2, SQL_NTS, ubuf3, SQL_NTS); 
	CHECK_DBC("SQLConnectW");

#endif


	/* Test of SQLGetDiagRecW */
	PRINTF("--------------TEST of SQLGetDiagRecW and SQLGetDiagFieldW--------------------\n");
	rc = SQLAllocStmt(hdbc, &hstmt);
	CHECK_DBC("SQLAllocStmt");
	SPRINTF(buffer, " Execution bad statement: %s\n", BADSTMT);
	PRINTF(buffer);
	SQLExecDirect(hstmt, BADSTMT, SQL_NTS);
	rc = SQLGetDiagRecW(SQL_HANDLE_STMT, hstmt, 1, ubuf1, &native_error, ubuf2, 256, &text_len); 
	CHECK_STMT("SQLGetDiagRecW");
	WStringToString(sqlstate, 6, NULL, TRUE, ubuf1, 256, NULL);
	WStringToString(message_text, 256, NULL, TRUE, ubuf2, 256, NULL);
	SPRINTF(buffer, " Diag Record:\n SQLSTATE:\t%s\n", sqlstate);
	PRINTF(buffer);
	SPRINTF(buffer, " MESSAGE TEXT:\t%s\n", message_text);
	PRINTF(buffer);
	rc = SQLGetDiagFieldW(SQL_HANDLE_STMT, hstmt, 1, SQL_DIAG_MESSAGE_TEXT, ubuf1, 256, &text_len); 
	CHECK_STMT("SQLGetDiagFieldW");
	WStringToString(message_text, 256, NULL, TRUE, ubuf1, 256, NULL);
	SPRINTF(buffer, " Diag field (SQL_DIAG_MESSAGE_TEXT):\n %s\n", message_text);
	PRINTF(buffer);
	rc = SQLGetDiagFieldW(SQL_HANDLE_STMT, hstmt, 1, SQL_DIAG_SQLSTATE, ubuf1, 256, &text_len); 
	CHECK_STMT("SQLGetDiagFieldW");
	WStringToString(sqlstate, 256, NULL, TRUE, ubuf1, 256, NULL);
	SPRINTF(buffer, " Diag field (SQL_DIAG_SQLSTATE):\n %s\n", sqlstate);
	PRINTF(buffer);
	PRINTF("\n");

	/* Test of SQLNativeSql */
	PRINTF("----------------------------TEST of SQLNativeSqlW----------------------------\n");
	StringToWString(ubuf1, 256, NULL, TRUE, "SELECT to_number (empid) FROM employee", 256, NULL);
	rc = SQLNativeSqlW(hdbc, ubuf1, SQL_NTS, ubuf2, 256, &texti_len);
        text_len = (SQLSMALLINT) texti_len;
	CHECK_DBC("SQLNativeSqlW");
	WStringToString(buffer, 256, NULL, TRUE, ubuf2, 256, NULL);
	PRINTF(" Translated SQL string:\n ");
	PRINTF(buffer);
	PRINTF("\n\n");

	PRINTF("---------TEST of SQLTablePrivelegesW and SQLColumnPrivelegesW----------------\n");
	SPRINTF(buffer, "CREATE TABLE %s (%s VARCHAR)", TESTTAB, TESTCOL);
	rc = SQLExecDirect(hstmt, buffer, STRLEN(buffer));
	CHECK_STMT("SQLExecDirect");
	StringToWString(ubuf1, 256, NULL, TRUE, TESTTAB, 256, NULL);
	StringToWString(ubuf2, 256, NULL, TRUE, TESTCOL, 256, NULL);
	rc = SQLTablePrivilegesW(hstmt, NULL, 0, NULL, 0, ubuf1, SQL_NTS);
	CHECK_STMT("SQLTablePrivilegesW");

	rc = SQLBindCol(hstmt, 6, SQL_C_CHAR, buffer, 256, &tlen);
	text_len = (SQLSMALLINT) tlen;
	CHECK_STMT("SQLBindColW");
	PRINTF(" Table priveleges:\n ");
	while ((rc = SQLFetch(hstmt)) == SQL_SUCCESS) {
		PRINTF(buffer);
		PRINTF("\n ");
	}
	PRINTF("\n");
	rc = SQLCloseCursor(hstmt);
	CHECK_STMT("SQCloseCursorW");
	rc = SQLColumnPrivilegesW(hstmt, NULL, 0, NULL, 0, ubuf1, SQL_NTS, ubuf2, SQL_NTS);
	CHECK_STMT("SQLColumnPrivilegesW");
	rc = SQLBindCol(hstmt, 7, SQL_C_CHAR, buffer, 256, &tlen);
	text_len = (SQLSMALLINT) tlen;
	CHECK_STMT("SQLBindColW");
	PRINTF(" Column priveleges:\n ");
	while ((rc = SQLFetch(hstmt)) == SQL_SUCCESS) {
		PRINTF(buffer);
		PRINTF("\n ");
	}
	PRINTF("\n");
	rc = SQLCloseCursor(hstmt);
	CHECK_STMT("SQCloseCursorW");
	PRINTF("\n");

/*
	rc = SQLFreeStmt(hstmt, SQL_CLOSE);
	CHECK_STMT("SQLFreeStmt");
	rc = SQLAllocStmt(hdbc, &hstmt);
	CHECK_DBC("SQLAllocStmt");
*/

	PRINTF("------------------------TEST of SQLGetTypeInfoW---------------------------\n");
	rc = SQLGetTypeInfoW(hstmt, SQL_LONGVARCHAR);
	CHECK_STMT("SQLGetTypeInfoW");
	rc = SQLBindCol(hstmt, 1, SQL_C_CHAR, buffer, 256, &tlen);
	text_len = (SQLSMALLINT) tlen;
	CHECK_STMT("SQLBindColW");
	PRINTF(" Data source dependent data-type name of SQL_VARCHAR:\n ");
	while ((rc = SQLFetch(hstmt)) == SQL_SUCCESS) {
		PRINTF(buffer);
		PRINTF("\n ");
	}
	PRINTF("\n");
	rc = SQLCloseCursor(hstmt);
	CHECK_STMT("SQCloseCursorW");


	/*
	PRINTF("------------------------TEST of SQLSpecialColumnsW---------------------------\n");
	StringToWString(ubuf1, 256, NULL, TRUE, TESTTAB, 256, NULL);
	rc = SQLSpecialColumnsW(hstmt, SQL_BEST_ROWID, NULL, 0, NULL, 0, ubuf1, SQL_NTS, SQL_SCOPE_SESSION, SQL_NULLABLE);

	CHECK_STMT("SQLSpecialColumnsW");
	rc = SQLBindCol(hstmt, 2, SQL_C_CHAR, buffer, 256, (SQLINTEGER *)&text_len);
	CHECK_STMT("SQLBindColW");
	PRINTF(" Columns:\n ");
	while ((rc = SQLFetch(hstmt)) == SQL_SUCCESS) {
		PRINTF(buffer);
		PRINTF("\n ");
	}
	PRINTF("\n");
	rc = SQLCloseCursor(hstmt);
	CHECK_STMT("SQCloseCursorW");
	*/

	/* Dropping tables */
	SPRINTF(buffer, "DROP TABLE %s", TESTTAB);
	rc = SQLExecDirect(hstmt, buffer, STRLEN(buffer));
	CHECK_STMT("SQLExecDirect");

	/* Disconnect from DB */
	rc = SQLDisconnect(hdbc);
	CHECK_DBC("SQLDisconnect");
	rc = SQLFreeHandle(SQL_HANDLE_DBC, hdbc);
	CHECK_ENV("SQLFreeHandle (HDBC)");
	rc = SQLFreeHandle(SQL_HANDLE_ENV, henv);
	CHECK_ENV("SQLFreeHandle (HENV)");

	return 0;
}

/*===========================================================================*
 *  END OF CODE                                                              *
 *===========================================================================*/
/*


    ========== licence begin  GPL
    Copyright (c) 2001-2005 SAP AG

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
    ========== licence end




*/
