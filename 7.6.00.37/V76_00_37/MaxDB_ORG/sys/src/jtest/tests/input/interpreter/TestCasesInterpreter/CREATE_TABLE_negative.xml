<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Tests SYSTEM "TestCases.dtd">
<Tests>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="1" Responsible="Oleg Luzginov" TestType="negative">
<Comment>primary key, missing column name in the table constraint</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB1 (
                                        COL1     CHAR(18) NOT NULL,
                                        COL2    VARCHAR(18) NOT NULL,
                                        COL3 NUMBER(*,20),
                                        COL4 LONG,
                                        COL5 RAW(2000),
                                        COL6 RAW,
                                        COL7 DATE,
                                        COL8 ROWID,
                                        COL9 DATE,
                                        CONSTRAINT CONSTR1
                                        PRIMARY KEY (COL1, COL2, COL7, COL9, COL8, COL4, )
                                        )
				</CallString>
<Error>
<ErrorCode>-5006</ErrorCode>
<ErrorMessage>Missing identifier.</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB1
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="2" Responsible="Oleg Luzginov" TestType="negative">
<Comment>primary key, not correct COL1 column name</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB2 (
                                        COL1    DATE  NOT NULL,
                                        COL2    VARCHAR(18) NOT NULL,
                                        COL3 NUMBER(*,20),
                                        COL4 INTEGER,
                                        COL5 CHAR(255),
                                        COL6 DATE,
                                        CONSTRAINT CONSTR1
                                        PRIMARY KEY (COL6, COL1, COL4, COL5, COL1_)
                                        )
				</CallString>
<Error>
<ErrorCode>-4005</ErrorCode>
<ErrorMessage>Unknown column name:COL1_</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB2
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="3" Responsible="Oleg Luzginov" TestType="negative">
<Comment>primary key, not correct declaration of the PRIMARY KEY keyword</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB2 (
                                        COL1    DATE  NOT NULL,
                                        COL2    VARCHAR(76) NOT NULL,
                                        COL3 NUMBER(*,12),
                                        COL4 INTEGER,
                                        COL5 CHAR(55),
                                        COL6 DATE,
                                        COL7 FLOAT,
                                        CONSTRAINT CONSTR1
                                        PRIMARYKEY (COL6, COL1)
                                        )
				</CallString>
<Error>
<ErrorCode>-3002</ErrorCode>
<ErrorMessage>Invalid datatype.</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB3
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="4" Responsible="Oleg Luzginov" TestType="negative">
<Comment>evaluate a critical size of the complex primary key in table constarint;
                key columns have the different data types with different data length; number of columns = 37</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB4 (
                                        COL1 INT,
                                        COL2 RAW(58),
                                        COL3 CHAR(40),
                                        COL4 CHARACTER(45),
                                        COL5 VARCHAR2(21),
                                        COL6 DATE,
                                        COL7 NUMBER(15, 8),
                                        COL8 NUMBER(36),
                                        COL9 CHAR(57),
                                        COL10 FLOAT(36),
                                        COL11 VARCHAR(14),
                                        COL12 VARCHAR2(19),
                                        COL13 INT,
                                        COL14 FLOAT(25),
                                        COL15 DATE,
                                        COL16 RAW(40),
                                        COL17 CHAR(2),
                                        COL18 INT,
                                        COL19 FLOAT(35),
                                        COL20 CHAR(49),
                                        COL21 CHAR(50),
                                        COL22 CHARACTER(15),
                                        COL23 CHARACTER(31),
                                        COL24 FLOAT(12),
                                        COL25 VARCHAR(51),
                                        COL26 NUMBER(23),
                                        COL27 CHAR(27),
                                        COL28 CHAR(54),
                                        COL29 VARCHAR(55),
                                        COL30 CHAR(31),
                                        COL31 INTEGER,
                                        COL32 CHAR(62),
                                        COL33 INTEGER,
                                        COL34 INTEGER,
                                        COL35 DATE,
                                        COL36 CHARACTER(57),
                                        COL37 INTEGER,
                                        COL38 VARCHAR2(558),
                                        COL39 ROWID,
                                        COL40 ROWID,
                                        COL41 VARCHAR(6194),
                                        COL42 DATE,
                                        COL43 FLOAT(37),
                                        COL44 INTEGER,
                                        COL45 ROWID,
                                        COL46 CHARACTER(4382),
                                        COL47 CHARACTER(254),
                                        COL48 CHAR(1244),
                                        COL49 RAW(7126),
                                        COL50 VARCHAR2(6086),
                                        COL51 NUMBER(32, 4),
                                        COL52 DATE,
                                        COL53 LONG,
                                        COL54 INTEGER,
                                        COL55 VARCHAR2(7362),
                                        COL56 CHAR(1510),
                                        COL57 CHAR(3620),
                                        CONSTRAINT pk PRIMARY  KEY (
                                                COL1, COL2, COL3, COL4, COL5, COL6, COL7,
                                                COL8, COL9, COL10, COL11, COL12, COL13, COL14, COL15,
                                                COL16, COL17, COL18, COL19, COL20, COL21, COL22, COL23,
                                                COL24, COL25, COL26, COL27, COL28, COL29, COL30, COL31,
                                                COL32, COL33, COL34, COL35, COL36, COL37 ) )
				</CallString>
<Error>
<ErrorCode>-2001</ErrorCode>
<ErrorMessage>Key too long:COL36</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB4
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="5" Responsible="Oleg Luzginov" TestType="negative">
<Comment>unique constraint with incorrect field name of the COL2 column.</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB5 (
                                        COL1 INTEGER,
                                        COL2 INTEGER,
                                        COL3 CHAR(4000),
                                        COL4 FLOAT(34),
                                        COL5 CHARACTER(1209),
                                        COL6 INT,
                                        COL7 ROWID,
                                       constraint TWO_COL_CONST  unique (COL1, COL2_, COL6) )
				</CallString>
<Error>
<ErrorCode>-4005</ErrorCode>
<ErrorMessage>Unknown column name:COL2_</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB5
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="6" Responsible="Oleg Luzginov" TestType="negative">
<Comment>unique constraint with a missing keyword: UNIQUE; see CONSTR1</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB6 (
                                        COL1 VARCHAR2(5369),
                                        COL2 VARCHAR2(7813),
                                        COL3 DATE,
                                        COL4 FLOAT(31),
                                        COL5 DATE,
                                        constraint CONSTR1  (COL4))
				</CallString>
<Error>
<ErrorCode>-3002</ErrorCode>
<ErrorMessage>Invalid datatype</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB6
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="7" Responsible="Oleg Luzginov" TestType="negative">
<Comment>unique constraint with missing keyword: CONSTRAINT; see CONSTR1</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB7 (
                                        COL1 DATE,
                                        COL2 INT,
                                        COL3 RAW(3893),
                                        COL4 RAW(4341),
                                        COL5 VARCHAR(1365),
                                        COL6 ROWID,
                                        COL7 NUMBER(35),
                                        COL8 INTEGER,
                                        COL9 INTEGER,
                                        COL10 NUMBER(35),
                                        CONSTR1 unique (COL1, COL2, COL7, COL10))
				</CallString>
<Error>
<ErrorCode>-3002</ErrorCode>
<ErrorMessage>Invalid datatype</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB7
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="8" Responsible="Oleg Luzginov" TestType="negative">
<Comment>incorrect table constraint name</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB8 (
                                        COL1 FLOAT(35),
                                        COL2 RAW(4992),
                                        COL3 VARCHAR(6611),
                                        COL4 LONG,
                                        COL5 ROWID,
                                        COL6 ROWID,
                                        COL7 VARCHAR(7611),
                                        COL8 LONG,
                                        COL9 CHARACTER(6255),
                                        COL10 CHARACTER(494),
                                        COL11 DATE,
                                        COL12 RAW(7948),
                                        COL13 RAW(1332),
                                        COL14 RAW(1461),
                                        COL15 NUMBER(6),
                                        constraint TW%%%O_COL_CONST  unique (COL1,  COL11, COL15))
				</CallString>
<Error>
<ErrorCode>-3002</ErrorCode>
<ErrorMessage>Invalid datatype.</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB8
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="9" Responsible="Oleg Luzginov" TestType="negative">
<Comment>the missing delimiter "," for the constraint</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB9 (
                                        COL1 INT,
                                        COL2 ROWID,
                                        COL3 ROWID,
                                        COL4 RAW(2552),
                                        COL5 ROWID,
                                        COL6 DATE,
                                        COL7 LONG,
                                        COL8 NUMBER(25),
                                        constraint TWO_COL_CONST  unique (COL1  COL6, COL8)
				</CallString>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>Missing delimiter: )</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB9
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="10" Responsible="Oleg Luzginov" TestType="negative">
<Comment>no table name</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE  (
                                        COL1 FLOAT(28),
                                        COL2 INTEGER,
                                        COL3 CHAR(836),
                                        COL4 ROWID,
                                        COL5 CHARACTER(1493),
                                        COL6 INT,
                                        COL7 CHAR(5582),
                                        COL8 CHARACTER(5758),
                                        COL9 VARCHAR2(4618),
                                        COL10 VARCHAR(6617),
                                        COL11 FLOAT(1),
                                        COL12 CHARACTER(4481),
                                        COL13 VARCHAR(5592) )
				</CallString>
<Error>
<ErrorCode>-3009</ErrorCode>
<ErrorMessage>Invalid table name</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB10
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="11" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>a keyword instead of the table name</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TABLE (
                                        COL1 FLOAT(1),
                                        COL2 RAW(1157),
                                        COL3 VARCHAR2(7636),
                                        COL4 ROWID,
                                        COL5 VARCHAR(3326),
                                        COL6 DATE,
                                        COL7 CHARACTER(32),
                                        COL8 RAW(3990),
                                        COL9 INT,
                                        COL10 VARCHAR2(6953),
                                        COL11 RAW(7157) )
				</CallString>
<Error>
<ErrorCode>-7006</ErrorCode>
<ErrorMessage>Reserved identifier not allowed:TABLE</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE ADD (
                                        COL1 FLOAT(1),
                                        COL2 RAW(1157),
                                        COL3 VARCHAR2(7636),
                                        COL4 ROWID,
                                        COL5 VARCHAR(3326),
                                        COL6 DATE,
                                        COL7 CHARACTER(32),
                                        COL8 RAW(3990),
                                        COL9 INT,
                                        COL10 VARCHAR2(6953),
                                        COL11 RAW(7157) )</CallString>
<Error>
<ErrorCode>-7006</ErrorCode>
<ErrorMessage>[-7006] (at 18): Reserved identifier not allowed:ADD</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE CHAR (
                                        COL1 FLOAT(1),
                                        COL2 RAW(1157),
                                        COL3 VARCHAR2(7636),
                                        COL4 ROWID,
                                        COL5 VARCHAR(3326),
                                        COL6 DATE,
                                        COL7 CHARACTER(32),
                                        COL8 RAW(3990),
                                        COL9 INT,
                                        COL10 VARCHAR2(6953),
                                        COL11 RAW(7157) )</CallString>
<Error>
<ErrorCode>-7006</ErrorCode>
<ErrorMessage>[-7006] (at 18): Reserved identifier not allowed:CHAR</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE DECIMAL (
                                        COL1 FLOAT(1),
                                        COL2 RAW(1157),
                                        COL3 VARCHAR2(7636),
                                        COL4 ROWID,
                                        COL5 VARCHAR(3326),
                                        COL6 DATE,
                                        COL7 CHARACTER(32),
                                        COL8 RAW(3990),
                                        COL9 INT,
                                        COL10 VARCHAR2(6953),
                                        COL11 RAW(7157) )</CallString>
<Error>
<ErrorCode>-7006</ErrorCode>
<ErrorMessage>[-7006] (at 18): Reserved identifier not allowed:DECIMAL</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE FROM (
                                        COL1 FLOAT(1),
                                        COL2 RAW(1157),
                                        COL3 VARCHAR2(7636),
                                        COL4 ROWID,
                                        COL5 VARCHAR(3326),
                                        COL6 DATE,
                                        COL7 CHARACTER(32),
                                        COL8 RAW(3990),
                                        COL9 INT,
                                        COL10 VARCHAR2(6953),
                                        COL11 RAW(7157) )</CallString>
<Error>
<ErrorCode>-7006</ErrorCode>
<ErrorMessage>[-7006] (at 18): Reserved identifier not allowed:FROM</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE SYSDATE (
                                        COL1 FLOAT(1),
                                        COL2 RAW(1157),
                                        COL3 VARCHAR2(7636),
                                        COL4 ROWID,
                                        COL5 VARCHAR(3326),
                                        COL6 DATE,
                                        COL7 CHARACTER(32),
                                        COL8 RAW(3990),
                                        COL9 INT,
                                        COL10 VARCHAR2(6953),
                                        COL11 RAW(7157) )</CallString>
<Error>
<ErrorCode>-7006</ErrorCode>
<ErrorMessage>[-7006] (at 18): Reserved identifier not allowed:SYSDATE</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE VIEW (
                                        COL1 FLOAT(1),
                                        COL2 RAW(1157),
                                        COL3 VARCHAR2(7636),
                                        COL4 ROWID,
                                        COL5 VARCHAR(3326),
                                        COL6 DATE,
                                        COL7 CHARACTER(32),
                                        COL8 RAW(3990),
                                        COL9 INT,
                                        COL10 VARCHAR2(6953),
                                        COL11 RAW(7157) )</CallString>
<Error>
<ErrorCode>-7006</ErrorCode>
<ErrorMessage>[-7006] (at 18): Reserved identifier not allowed:VIEW</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE WHERE (
                                        COL1 FLOAT(1),
                                        COL2 RAW(1157),
                                        COL3 VARCHAR2(7636),
                                        COL4 ROWID,
                                        COL5 VARCHAR(3326),
                                        COL6 DATE,
                                        COL7 CHARACTER(32),
                                        COL8 RAW(3990),
                                        COL9 INT,
                                        COL10 VARCHAR2(6953),
                                        COL11 RAW(7157) )</CallString>
<Error>
<ErrorCode>-7006</ErrorCode>
<ErrorMessage>[-7006] (at 18): Reserved identifier not allowed:WHERE</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE ROWID (
                                        COL1 FLOAT(1),
                                        COL2 RAW(1157),
                                        COL3 VARCHAR2(7636),
                                        COL4 ROWID,
                                        COL5 VARCHAR(3326),
                                        COL6 DATE,
                                        COL7 CHARACTER(32),
                                        COL8 RAW(3990),
                                        COL9 INT,
                                        COL10 VARCHAR2(6953),
                                        COL11 RAW(7157) )</CallString>
<Error>
<ErrorCode>-7006</ErrorCode>
<ErrorMessage>[-7006] (at 18): Reserved identifier not allowed:ROWID</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE INSERT (
                                        COL1 FLOAT(1),
                                        COL2 RAW(1157),
                                        COL3 VARCHAR2(7636),
                                        COL4 ROWID,
                                        COL5 VARCHAR(3326),
                                        COL6 DATE,
                                        COL7 CHARACTER(32),
                                        COL8 RAW(3990),
                                        COL9 INT,
                                        COL10 VARCHAR2(6953),
                                        COL11 RAW(7157) )</CallString>
<Error>
<ErrorCode>-7006</ErrorCode>
<ErrorMessage>[-7006] (at 18): Reserved identifier not allowed:INSERT</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB11
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="12" Responsible="Oleg Luzginov" TestType="negative">
<Comment>a string  instead of the size of the data type; see column COL5</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB12 (
                                        COL1 INTEGER,
                                        COL2 FLOAT(35),
                                        COL3 ROWID,
                                        COL4 INT,
                                        COL5 RAW(sljdflk;asjdfl;kajsdlk;fjaskldfj9iiojfsd),
                                        COL6 NUMBER(37),
                                        COL7 CHAR(7893),
                                        COL8 RAW(3281),
                                        COL9 FLOAT(1),
                                        COL10 INTEGER,
                                        COL11 NUMBER(10),
                                        COL12 INTEGER,
                                        COL13 CHARACTER(3204),
                                        COL14 NUMBER(16),
                                        COL15 CHAR(1162),
                                        COL16 VARCHAR(5973) )
				</CallString>
<Error>
<ErrorCode>-5009</ErrorCode>
<ErrorMessage>Missing integer</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB12
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="13" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>invalid table names</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE *TAB13 (
                                        COL1 FLOAT(5),
                                        COL2 VARCHAR2(2106),
                                        COL3 CHAR(157),
                                        COL4 FLOAT(1),
                                        COL5 INTEGER,
                                        COL6 CHARACTER(2772),
                                        COL7 DATE )
				</CallString>
<Error>
<ErrorCode>-3009</ErrorCode>
<ErrorMessage>Invalid table name</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE 13TAB (
                                        COL1 FLOAT(5),
                                        COL2 VARCHAR2(2106),
                                        COL3 CHAR(157),
                                        COL4 FLOAT(1),
                                        COL5 INTEGER,
                                        COL6 CHARACTER(2772),
                                        COL7 DATE )
				</CallString>
<Error>
<ErrorCode>-3009</ErrorCode>
<ErrorMessage>[-3009] (at 18): Invalid table name</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE "TAB13 (
                                        COL1 FLOAT(5),
                                        COL2 VARCHAR2(2106),
                                        COL3 CHAR(157),
                                        COL4 FLOAT(1),
                                        COL5 INTEGER,
                                        COL6 CHARACTER(2772),
                                        COL7 DATE )
				</CallString>
<Error>
<ErrorCode>-3014</ErrorCode>
<ErrorMessage>[-3014] (at 19): Invalid end of SQL statement</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE T"AB13 (
                                        COL1 FLOAT(5),
                                        COL2 VARCHAR2(2106),
                                        COL3 CHAR(157),
                                        COL4 FLOAT(1),
                                        COL5 INTEGER,
                                        COL6 CHARACTER(2772),
                                        COL7 DATE )
				</CallString>
<Error>
<ErrorCode>-3014</ErrorCode>
<ErrorMessage>[-3014] (at 20): Invalid end of SQL statement</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB-13 (
                                        COL1 FLOAT(5),
                                        COL2 VARCHAR2(2106),
                                        COL3 CHAR(157),
                                        COL4 FLOAT(1),
                                        COL5 INTEGER,
                                        COL6 CHARACTER(2772),
                                        COL7 DATE )
				</CallString>
<Error>
<ErrorCode>-3008</ErrorCode>
<ErrorMessage>[-3008] (at 21): Invalid keyword or missing delimiter</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB13
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="14" Responsible="Oleg Luzginov" TestType="negative">
<Comment>missing a bracket before a columns definition</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB14
                                        COL1 CHAR(7425),
                                        COL2 FLOAT(35),
                                        COL3 NUMBER(28),
                                        COL4 VARCHAR2(5307),
                                        COL5 VARCHAR(1256),
                                        COL6 VARCHAR(3163) )
				</CallString>
<Error>
<ErrorCode>-3008</ErrorCode>
<ErrorMessage>Invalid keyword or missing delimiter</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB14
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="15" Responsible="Oleg Luzginov" TestType="negative">
<Comment>an identifier instead of the column name; see next COL4 column</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB15 (
                                        COL1 CHAR(4441),
                                        COL2 LONG,
                                        COL3 VARCHAR(1683),
                                        COL4 RAW(4774),
                                        CHAR FLOAT(31),
                                        COL6 RAW(4424),
                                        COL7 INT,
                                        COL8 VARCHAR2(4921),
                                        COL9 FLOAT(23),
                                        COL10 DATE )
				</CallString>
<Error>
<ErrorCode>-7006</ErrorCode>
<ErrorMessage>Reserved identifier not allowed</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB15
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="16" Responsible="Oleg Luzginov" TestType="negative">
<Comment>no datatype definition for the coumn COL3</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB16 (
                                        COL1 CHARACTER(5991),
                                        COL2 NUMBER(34),
                                        COL3 ,
                                        COL4 CHAR(6),
                                        COL5 ROWID,
                                        COL6 CHARACTER(6321) )
				</CallString>
<Error>
<ErrorCode>-3002</ErrorCode>
<ErrorMessage>Invalid datatype</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB16
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="17" Responsible="Oleg Luzginov" TestType="negative">
<Comment>no data type length in the create table; see column COL2</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB17 (
                                COL1 INTEGER,
                                COL2 FLOAT(),
                                COL3 ROWID,
                                COL4 CHARACTER(1443),
                                COL5 VARCHAR2(7683),
                                COL6 ROWID,
                                COL7 ROWID,
                                COL8 DATE,
                                COL9 CHAR(2855),
                                COL10 INT,
                                COL11 INTEGER,
                                COL12 DATE )
				</CallString>
<Error>
<ErrorCode>-5009</ErrorCode>
<ErrorMessage>Missing integer</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB17
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="18" Responsible="Oleg Luzginov" TestType="negative">
<Comment>an invalid length of the data type; see COL6</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB18 (
                                        COL1 DATE,
                                        COL2 ROWID,
                                        COL3 INT,
                                        COL4 FLOAT(4),
                                        COL5 FLOAT(10),
                                        COL6 VARCHAR(8001),
                                        COL7 LONG,
                                        COL8 INT,
                                        COL9 VARCHAR(4035),
                                        COL10 VARCHAR2(3427),
                                        COL11 VARCHAR2(6732),
                                        COL12 INT,
                                        COL13 DATE )
				</CallString>
<Error>
<ErrorCode>-3020</ErrorCode>
<ErrorMessage>Invalid length for this data type:COL6</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB18
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="19" Responsible="Oleg Luzginov" TestType="negative">
<Comment>an incorrect data type in ORACLE SQL mode;  see column COL2</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>CREATE TABLE TAB19 (
                                        COL1 CHARACTER(7625),
                                        COL2 FIXED,
                                        COL3 VARCHAR2(3147),
                                        COL4 VARCHAR2(3060),
                                        COL5 CHARACTER(1872),
                                        COL6 VARCHAR2(1616),
                                        COL7 CHAR(982),
                                        COL8 ROWID,
                                        COL9 FLOAT(32),
                                        COL10 INTEGER,
                                        COL11 FLOAT(36),
                                        COL12 INTEGER,
                                        COL13 CHARACTER(3647),
                                        COL14 INT,
                                        COL15 FLOAT(7) )</CallString>
<Error>
<ErrorCode>-3002</ErrorCode>
<ErrorMessage>Invalid datatype</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>DROP TABLE TAB19</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="20" Responsible="Oleg Luzginov" TestType="negative">
<Comment>no delimiter in the end of the create table statement</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>CREATE TABLE TAB20 (
                                        COL1 CHAR(652),
                                        COL2 CHAR(5777),
                                        COL3 FLOAT(21),
                                        COL4 NUMBER(20),
                                        COL5 CHAR(6558),
                                        COL6 LONG,
                                        COL7 NUMBER(15),
                                        COL8 LONG,
                                        COL9 VARCHAR2(7391),
                                        COL10 CHARACTER(3299),
                                        COL11 INT,
                                        COL12 VARCHAR2(6096),
                                        COL13 LONG,
                                        COL14 RAW(2691),
                                        COL15 FLOAT(16),
                                        COL16 CHAR(2145),
                                        COL17 VARCHAR(7443),
                                        COL18 NUMBER(4),
                                        COL19 CHAR(6127)
				</CallString>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>Missing delimiter: )</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB20
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="21" Responsible="Vladimir Sobol" TestType="negative">
<Comment>default declare; incorrect DEFAULT key word; see COL2 column</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB21 (
                                        COL0 NUMERIC(32) PRIMARY KEY,
                                        COL1 VARCHAR(2000),
                                        COL2 CHAR   default_  '0'  not null ,
                                        COL3 CHAR(20) default  'AA' not null,
                                        COL4 NUMERIC(54),
                                        COL5 NUMERIC(38),
                                        COL6 NUMERIC(28,28),
                                        COL7 NUMERIC(*),
                                        COL8 NUMERIC(*,20),
                                        COL9 LONG,
                                        COL12 DATE
                                )


                           </CallString>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage> Missing delimiter: ).</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB21
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="22" Responsible="Vladimir Sobol" TestType="negative">
<Comment>default declare; incorrect DEFAULT value; see COL2 column</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB22 (
                                        COL0 NUMBER(32) PRIMARY KEY,
                                        COL1 CHAR,
                                        COL2 CHAR(2000)  default  AA not null,
                                        COL3 NUMBER(64),
                                        COL4 NUMBER(38) default  12 not null,
                                        COL5 NUMBER(*,20),
                                        COL6 RAW,
                                        COL7 ROWID,
                                        COL8 DATE
                                 )

                           </CallString>
<Error>
<ErrorCode>-5004</ErrorCode>
<ErrorMessage>Missing constant.</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB22
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="23" Responsible="Vladimir Sobol" TestType="negative">
<Comment>default declare; incompatible types  for "default" and "column" attributes; see COL4 column</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB23 (
                                        COL0 NUMBER(32) PRIMARY KEY,
                                        COL1 VARCHAR2(4000),
                                        COL2 CHAR,
                                        COL3 CHAR(2000),
                                        COL4 NUMBER(64)   default  'AA' not null,
                                        COL5 NUMBER(38,38),
                                        COL6 NUMBER(*,20),
                                        COL7 LONG,
                                        COL8 RAW(2000),
                                        COL9 RAW
                                )
                           </CallString>
<Error>
<ErrorCode>-3016</ErrorCode>
<ErrorMessage>Error in assignment; Invalid numeric constant.</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB23
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="24" Responsible="Vladimir Sobol" TestType="negative">
<Comment>default declare; a numeric default value out of range  for "default" attribute; see COL5 column</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
  				CREATE TABLE TAB24 (
                                        COL0 NUMBER(32) PRIMARY KEY,
                                        COL1 VARCHAR2(4000),
                                        COL3 CHAR(2000),
                                        COL4 NUMBER(64) default 555  not null,
                                        COL5 NUMBER(2)  default 12345  not null,
                                        COL6 LONG,
                                        COL7 RAW,
                                        COL8 DATE,
                                        COL9 ROWID
                                     )
                           </CallString>
<Error>
<ErrorCode>-3019</ErrorCode>
<ErrorMessage>Numeric value out of range; Invalid exponent:12345.</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB24
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="25" Responsible="Vladimir Sobol" TestType="negative">
<Comment>default declare; a char default value out of range  for "default" attribute; see COL5 column</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB25 (
                                        COL0 NUMBER(32) PRIMARY KEY,
                                        COL1 VARCHAR2(3000),
                                        COL2 CHAR  default  '12345' not null ,
                                        COL3 CHAR(2000),
                                        COL4 NUMBER(50) default 345 not null ,
                                        COL5 NUMBER(*),
                                        COL6 NUMBER(*,20),
                                        COL7 LONG,
                                        COL8 DATE,
                                        COL9 ROWID
                                )
                           </CallString>
<Error>
<ErrorCode>-8004</ErrorCode>
<ErrorMessage> Constant must be compatible with column type and length.</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB25
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="26" Responsible="Vladimir Sobol" TestType="negative">
<Comment>incorrect types  for "default" and "column" attributes; see COL7 column</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB26 (
                                        COL0 NUMBER(32) PRIMARY KEY,
                                        COL1 VARCHAR2(2000) default  'DDDDD'  not null,
                                        COL2 NUMBER(18,18),
                                        COL3 NUMBER(*,10),
                                        COL4 LONG,
                                        COL5 RAW(1000),
                                        COL6 RAW,
                                        COL7 DATE   default  1234.65 not null
                                )
                           </CallString>
<Error>
<ErrorCode>-8004</ErrorCode>
<ErrorMessage>Constant must be compatible with column type and length.</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB26
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="27" Responsible="Vladimir Sobol" TestType="negative">
<Comment>default declare; incorrect decimal separator for the default value; see COL5 column</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB27 (
                                        COL0 NUMBER(32) PRIMARY KEY,
                                        COL1 CHAR(2000),
                                        COL2 NUMBER(64) default 12  not null,
                                        COL3 NUMBER(38,2),
                                        COL4 NUMBER(*),
                                        COL5 LONG default  1234,65 not null,
                                        COL6 RAW,
                                        COL7 DATE
                                )
                                </CallString>
<Error>
<ErrorCode>-5006</ErrorCode>
<ErrorMessage>General error; Missing identifier.</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB27
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="28" Responsible="Oleg Luzginov" TestType="negative">
<Comment>unique constraint; duplicate keyword "unique"; see COL4</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB28 (
                                        COL1 DATE PRIMARY KEY,
                                        COL2 LONG,
                                        COL3 INTEGER,
                                        COL4 NUMBER(8) NOT NULL  constraint ONE_COL_CONST  unique unique,
                                        COL5 LONG,
                                        COL6 INT,
                                        COL7 VARCHAR2(3612),
                                        COL8 RAW(1479),
                                        COL9 ROWID UNIQUE,
                                        COL10 CHAR(2286),
                                        COL11 VARCHAR(2763),
                                        COL12 FLOAT(1),
                                        COL13 LONG,
                                        COL14 INTEGER )
				</CallString>
<Error>
<ErrorCode>-3008</ErrorCode>
<ErrorMessage>Invalid keyword or missing delimiter</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB28
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="29" Responsible="Oleg Luzginov" TestType="negative">
<Comment>unique constraint create of missing keyword: UNIQUE; see COL6</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB29 (
                                        COL1 INTEGER,
                                        COL2 NUMERIC(8),
                                        COL3 VARCHAR(4721),
                                        COL4 FLOAT(35),
                                        COL5 NUMERIC(33),
                                        COL6 CHAR(868) NOT NULL constraint ONE_COL_CONST ONE_COL_CONST  unique )
				</CallString>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>[-5016] (at 401): Missing delimiter: )</ErrorMessage>
</Error>
<Error>
<ErrorCode>-3008</ErrorCode>
<ErrorMessage>[-3008] (at 401): Invalid keyword or missing delimiter</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB29
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="30" Responsible="Oleg Luzginov" TestType="negative">
<Comment>unique constraint create of missing keyword: CONSTRAINT; see COL6</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB30 (
                                        COL1 FLOAT(23),
                                        COL2 ROWID,
                                        COL3 VARCHAR(5430),
                                        COL4 VARCHAR(3694),
                                        COL5 DATE,
                                        COL6 ROWID  NOT NULL  ONE_COL_CONST  unique,
                                        COL7 CHARACTER(7296),
                                        COL8 CHARACTER(4036),
                                        COL9 CHARACTER(5122),
                                        COL10 NUMBER(27),
                                        COL11 FLOAT(10),
                                        COL12 NUMBER(29) )
				</CallString>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>Missing delimiter: )</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB30
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="31" Responsible="Oleg Luzginov" TestType="negative">
<Comment>the constraint name beginning with number; see COL4</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB31 (
                                        COL1 NUMBER(4),
                                        COL2 DATE,
                                        COL3 FLOAT(30),
                                        COL4 INT  NOT NULL constraint 1ONE_COL_CONST  unique,
                                        COL5 LONG,
                                        COL6 CHARACTER(6819),
                                        COL7 NUMBER(35),
                                        COL8 DATE,
                                        COL9 VARCHAR2(542),
                                        COL10 CHAR(4563) )
				</CallString>
<Error>
<ErrorCode>-5006</ErrorCode>
<ErrorMessage>Missing identifier</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB31
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="32" Responsible="Oleg Luzginov" TestType="negative">
<Comment>incorrect key word "unique"; see COL14</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB32 (
                                        COL1 LONG,
                                        COL2 CHARACTER(6299),
                                        COL3 CHAR(4071),
                                        COL5 VARCHAR(5390),
                                        COL6 LONG,
                                        COL7 FLOAT(23),
                                        COL9 CHARACTER(3212),
                                         COL11 CHAR(4911),
                                        COL12 VARCHAR(7744),
                                        COL13 CHAR(4412),
                                        COL14 INTEGER NOT NULL constraint ONE_COL_CONST  uniqu_,
                                        COL16 CHARACTER(7359),
                                        COL17 DATE,
                                        COL18 NUMERIC(23)
   )
				</CallString>
<Error>
<ErrorCode>-3008</ErrorCode>
<ErrorMessage>[-3008] (at 693): Invalid keyword or missing delimiter</ErrorMessage>
</Error>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>[-5016] (at 693): Missing delimiter: )</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB32
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="33" Responsible="Oleg Luzginov" TestType="negative">
<Comment>unique constraint; erroneous declare column name; see COL1</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB33 (
                                        COL1 FLOAT(7) NOT NULL constraint ONE_COL_CONST  unique (COL1),
                                        COL3 CHAR(585),
                                        COL5 LONG,

                                        COL8 DATE,

                                        COL10 CHARACTER(4964),
                                        COL11 NUMERIC(31),
                                        COL12 LONG,
                                        COL13 CHAR(7624),
                                        COL14 INT,
                                        COL15 CHAR(7496),
                                        COL16 NUMERIC(21),
                                        COL17 LONG,
                                        COL18 CHARACTER(641),
                                        COL19 VARCHAR(3889) )
				</CallString>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>Missing delimiter: )</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB33
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="34" Responsible="Oleg Luzginov" TestType="negative">
<Comment>primary key constraint; duplicate keywords "PRIMARY KEY"; see COL7</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB34 (
                                        COL1 INTEGER,
                                        COL2 CHARACTER(5842),
                                        COL3 ROWID,
                                        COL4 INT,
                                        COL5 INT,
                                        COL6 FLOAT(6),
                                        COL7 INT NOT NULL  PRIMARY KEY  PRIMARY KEY,
                                        COL8 ROWID,
                                        COL9 VARCHAR2(2664) )
				</CallString>
<Error>
<ErrorCode>-3008</ErrorCode>
<ErrorMessage>Invalid keyword or missing delimiter</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB34
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="35" Responsible="Oleg Luzginov" TestType="negative">
<Comment>primary key constraint; erroneous declare column name; see COL9</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB35 (
                                        COL1 INTEGER,
                                        COL2 VARCHAR(6997),
                                        COL3 FLOAT(*),
                                        COL4 LONG,
                                        COL5 INTEGER,
                                        COL6 LONG,
                                        COL7 DATE,
                                        COL8 INT,
                                        COL9 RAW(1000) NOT NULL PRIMARY KEY (COL9),
                                        COL10 ROWID,
                                        COL11 DATE,
                                        COL12 VARCHAR2(7566),
                                        COL13 FLOAT(37),
                                        COL14 CHARACTER(2264),
                                        COL15 ROWID,
                                        COL16 CHAR(4422),
                                        COL17 LONG,
                                        COL18 LONG )
				</CallString>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>Missing delimiter: )</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB35
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="36" Responsible="Oleg Luzginov" TestType="negative">
<Comment>incorrect declaration primary key; see COL7</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB36 (
                                        COL1 CHAR(2614),
                                        COL2 CHARACTER(1869),
                                        COL3 VARCHAR(1530),
                                        COL5 CHAR(1618),
                                        COL6 CHARACTER(3481),
                                        COL7 VARCHAR(1023) NOT NULL PRIMARYKEY,
                                        COL8 VARCHAR(5919),
                                        COL9 LONG,
                                        COL10 CHAR(2906),
                                        COL11 LONG,
                                        COL12 INTEGER,
                                        COL13 FLOAT(17),
                                        COL15 VARCHAR(2142) )
				</CallString>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>Missing delimiter: )</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB36
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="37" Responsible="Oleg Luzginov" TestType="negative">
<Comment>LONG column cannot be a primary key; see COL1</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
                                CREATE TABLE TAB37 (
                                        COL1 LONG NOT NULL PRIMARY KEY,
                                        COL2 LONG,
                                        COL3 DATE,
                                        COL4 FLOAT(1),
                                        COL5 LONG,
                                        COL6 VARCHAR2(4096),
                                        COL7 DATE,
                                        COL8 CHARACTER(7205),
                                        COL9 CHAR(6937),
                                        COL10 LONG,
                                        COL11 RAW(1732),
                                        COL12 INT,
                                        COL13 ROWID,
                                        COL14 NUMBER(19),
                                        COL15 CHARACTER(6728) )
				</CallString>
<Error>
<ErrorCode>-7002</ErrorCode>
<ErrorMessage>KEY not allowed</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB37
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="38" Responsible="Oleg Luzginov" TestType="negative">
<Comment>NOTNULL instead of NOT NULL; see COL12</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB38 (
                                        COL1 CHARACTER(7399),
                                        COL2 ROWID,
                                        COL3 RAW(2119),
                                        COL4 ROWID,
                                        COL5 RAW(1021),
                                        COL6 FLOAT(1),
                                        COL7 VARCHAR2(5815),
                                        COL8 DATE,
                                        COL9 LONG,
                                        COL10 VARCHAR2(3657),
                                        COL11 FLOAT(20) NOT NULL,
                                        COL12 CHAR(4250) NOTNULL)
				</CallString>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>Missing delimiter: )</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB38
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="39" Responsible="Oleg Luzginov" TestType="negative">
<Comment>there is a mistake in "NOT"; see COL7</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB39 (
                                        COL1 NUMERIC(37) PRIMARY KEY,
                                        COL2 FLOAT(28),
                                        COL4 INT NOT NULL,
                                        COL5 VARCHAR(4421),
                                        COL6 CHAR(479),
                                        COL7 CHAR(1652) NO_  NULL,
                                        COL8 VARCHAR(6475),
                                        COL9 CHARACTER(2689),
                                        COL10 VARCHAR(2658),
                                        COL11 CHAR(3985),
                                        COL12 LONG,
                                        COL13 CHARACTER(7108),
                                        COL14 VARCHAR(1643),
                                        COL15 CHARACTER(6737),
                                        COL16 LONG )
				</CallString>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>Missing delimiter: )</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB39
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="40" Responsible="Oleg Luzginov" TestType="negative">
<Comment>duplicate NOT instead of one; see COL12</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB40 (
                                        COL1 CHARACTER(1525) NOT NULL,
                                        COL2 VARCHAR2(648),
                                        COL3 INT PRIMARY KEY,
                                        COL4 NUMBER(17),
                                        COL5 NUMBER(34),
                                        COL6 VARCHAR2(7323),
                                        COL7 ROWID,
                                        COL8 VARCHAR2(3324),
                                        COL9 ROWID,
                                        COL10 LONG,
                                        COL11 INT,
                                        COL12 LONG NOT  NOT  NULL,
                                        COL13 ROWID,
                                        COL14 VARCHAR(1364) )
				</CallString>
<Error>
<ErrorCode>-5015</ErrorCode>
<ErrorMessage>Missing keyword:NULL</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB40
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="41" Responsible="Oleg Luzginov" TestType="negative">
<Comment>needless CHAR keyword; see COL6</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB41 (
                                        COL1 FLOAT(33) NOT NULL,
                                        COL2 CHAR(7497),
                                        COL3 LONG,
                                        COL4 RAW(6461),
                                        COL5 FLOAT(36),
                                        COL6 ROWID NOT NULL CHAR,
                                        COL7 FLOAT(1),
                                        COL8 NUMERIC(10),
                                        COL9 INT,
                                        COL10 LONG,
                                        COL11 DATE,
                                        COL12 CHARACTER(225),
                                        COL13 FLOAT(25) PRIMARY KEY)
				</CallString>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>Missing delimiter: )</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB41
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="42" Responsible="Oleg Luzginov" TestType="negative">
<Comment>duplicate NULL instead of one; see COL8</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB42 (
                                        COL1 CHARACTER(1687),
                                        COL2 NUMBER(24),
                                        COL3 LONG,
                                        COL4 RAW(7409),
                                        COL5 ROWID,
                                        COL6 FLOAT(36),
                                        COL7 CHARACTER(2899) NOT NULL,
                                        COL8 VARCHAR2(7007) NOT NULL NULL,
                                        COL9 INTEGER,
                                        COL10 INT,
                                        COL11 FLOAT(28) )
				</CallString>
<Error>
<ErrorCode>-3008</ErrorCode>
<ErrorMessage>Invalid keyword or missing delimiter</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				drop table TAB42
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="43" Responsible="Oleg Luzginov" TestType="negative">
<Comment>a lot of NULL instead of one; see COL18</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB43 (
                                        COL1 VARCHAR2(1023) PRIMARY KEY,
                                        COL2 CHARACTER(4445),
                                        COL3 INT,
                                        COL4 ROWID,
                                        COL5 FLOAT(28),
                                        COL6 LONG,
                                        COL7 LONG,
                                        COL8 VARCHAR2(3935),
                                        COL9 LONG,
                                        COL10 RAW(1319),
                                        COL11 INT,
                                        COL12 FLOAT(*),
                                        COL13 ROWID NOT NULL,
                                        COL14 CHARACTER(6594),
                                        COL15 DATE,
                                        COL16 DATE,
                                        COL17 RAW(5270),
                                        COL18 INTEGER NOT NULL NULL NULL)
				</CallString>
<Error>
<ErrorCode>-3008</ErrorCode>
<ErrorMessage>Invalid keyword or missing delimiter</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB43
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="44" Responsible="Vladimir Sobol" TestType="negative">
<Comment>column check; incorrect a column name for the check declaration, see COL2 column</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB44 (
                                        COL0 NUMBER(32) PRIMARY KEY,
                                        COL1 VARCHAR2(4000),
                                        COL2 CHAR(18) CHECK (COL2_  in ('BLA-BLA', 'BLA-BLA-BLA')),
                                        COL3 VARCHAR2(2000),
                                        COL4 NUMBER(64),
                                        COL5 NUMBER(38) CHECK (COL5 &gt; 300),
                                        COL6 NUMBER(12,12) CHECK (COL6 BETWEEN 0.0002 AND 0.888 ),
                                        COL7 DATE  CHECK (COL7 NOT IN ( TO_DATE('27-01-1818', 'DD-MM-YYYY'),
                                                                        TO_DATE('27-01-1819', 'DD-MM-YYYY'),
                                                                        TO_DATE('27-01-1820', 'DD-MM-YYYY') ))
                                   )
                        </CallString>
<Error>
<ErrorCode>-4005</ErrorCode>
<ErrorMessage>Column not found;Unknown column name:COL2_.</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB44
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="45" Responsible="Vladimir Sobol" TestType="negative">
<Comment>column check; incorrect a check value for the check declaration, see COL2 column</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB45 (
                                        COL0 NUMBER(32) PRIMARY KEY,
                                        COL1 DATE,
                                        COL2 CHAR(18) NOT NULL
                                           CONSTRAINT CONSTR1
                                                 CHECK (COL2 not in ("BLA-BLA", "BLA-BLA-BLA") ),
                                        COL3 VARCHAR2(2000)
                                            CONSTRAINT CONSTR2
                                                 CHECK (COL3 IS NOT NULL AND
                                                        COL3 &gt; 'rrrrrrrr'),
                                        COL4 NUMBER(38),
                                           CONSTRAINT CONSTR3
                                                CHECK (COL4 BETWEEN 233 AND 533)
                                )
                        </CallString>
<Error>
<ErrorCode>-4005</ErrorCode>
<ErrorMessage>Column not found;Unknown column name:BLA-BLA.</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB45
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="46" Responsible="Vladimir Sobol" TestType="negative">
<Comment>column check; incorrect a check value for the check declaration; see COL3 column</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
    				CREATE TABLE TAB46 (
                                        COL0 NUMBER(32) PRIMARY KEY,
                                        COL1 CHAR,
                                        COL2 NUMBER(15) CHECK ((60000 &gt; COL2 * 55) or (COL2 IS NOT NULL and COL2 &gt; 15)),
                                        COL3 VARCHAR2(1500) CHECK (COL3  in (BLA-BLA, BLA-BLA-BLA)),
                                        COL4 LONG
                                )
                        </CallString>
<Error>
<ErrorCode>-4005</ErrorCode>
<ErrorMessage>Column not found;Unknown column name:BLA.</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB46
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="47" Responsible="Vladimir Sobol" TestType="negative">
<Comment>column check; incorrect check value length for CHAR datatype; see COL1 column</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB47 (
                                        COL0 NUMBER(32) PRIMARY KEY,
                                        COL1 CHAR CHECK  (COL1  in ('BLA-BLA', 'BLA-BLA-BLA')),
                                        COL2 NUMBER(38),
                                        COL3 NUMBER(18,18)  CHECK (COL3 BETWEEN 0.14 AND 0.19 ),
                                        COL4 NUMBER(*),
                                        COL5 DATE
                                                CHECK ( COL5 BETWEEN TO_DATE('01-01-1999', 'DD-MM-YYYY')
                                                        AND TO_DATE('12-12-2001', 'DD-MM-YYYY') ),
                                        COL6 ROWID
                                )

                        </CallString>
<Error>
<ErrorCode>-8004</ErrorCode>
<ErrorMessage>Constant must be compatible with column type and length.</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB47
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="48" Responsible="Vladimir Sobol" TestType="negative">
<Comment>column check; incorrect check value type, numeric instead of char; see COL1 column

This testcase is valid in oracle. No error will be thrown.</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB48 (
                                        COL0 NUMBER(32) PRIMARY KEY,
                                        COL1 VARCHAR2(4000) CHECK  (COL1  in (111, 'BLA-BLA-BLA')),
                                        COL2 NUMBER(32) CHECK (COL2 * 25  &gt; 8000),
                                        COL3 LONG,
                                        COL4 RAW,
                                        COL5 ROWID
                                )
                        </CallString>
<Error>
<ErrorCode>-8006</ErrorCode>
<ErrorMessage>Data types must be compatible.</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB48
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="49" Responsible="Vladimir Sobol" TestType="negative">
<Comment>column check; incorrect check value length for NUMBer datatype;see COL2 column</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB49 (
                                        COL0 NUMBER(32) PRIMARY KEY,
                                        COL1 CHAR ,
                                        COL2 NUMBER(3) CHECK  (COL2  in (33333333333, 444444444444444)),
                                        COL3 NUMBER(18)  CHECK (COL3 &gt; 555),
                                        COL4 NUMBER(*),
                                        COL5 DATE
                                                CHECK ( COL5 BETWEEN TO_DATE('12-12-1900', 'DD-MM-YYYY')
                                                        AND TO_DATE('02-12-2011', 'DD-MM-YYYY') )
                                )                        </CallString>
<Error>
<ErrorCode>-3019</ErrorCode>
<ErrorMessage> Invalid exponent:33333333333.</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB49
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="50" Responsible="Vladimir Sobol" TestType="negative">
<Comment>column check; incorrect check value type, char instead of numeric; see CONSTR2 constraint</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>CREATE TABLE TAB50 (
                                        COL0 NUMBER(32) PRIMARY KEY,
                                        COL1 VARCHAR2(4000),
                                        COL2 CHAR CONSTRAINT CONSTR1
                                                CHECK (COL2 IS NOT NULL AND
                                                       COL2 NOT IN ('W', 'x', '4')),
                                        COL3 CHAR(2000),
                                        COL4 NUMBER(54) CONSTRAINT CONSTR2
                                                 CHECK  (COL4  in (111, 'BLA-BLA-BLA')),
                                        COL5 NUMBER(39) CONSTRAINT CONSTR3
                                                CHECK (COL5 &gt; 2000)
                                )</CallString>
<Error>
<ErrorCode>-3016</ErrorCode>
<ErrorMessage>SAP DBTech SQL: [-3016] (at 587) Invalid numeric constant</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>DROP TABLE TAB50</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="51" Responsible="Vladimir Sobol" TestType="negative">
<Comment>column check; incorrect declare CHECK; see COL6 column</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
 				CREATE TABLE TAB51 (
                                        COL0 NUMERIC(32) PRIMARY KEY,
                                        COL1 VARCHAR(4000),
                                        COL2 NUMERIC(64),
                                        COL3 NUMERIC(15) CHECK (COL3 &gt; 6000),
                                        COL4 NUMERIC(15,15) CHECK_ (COL4 BETWEEN 0.02 AND 0.455555 ),
                                        COL5 LONG,
                                        COL6 DATE
                                                CHECK (COL6 NOT IN (TO_DATE('17-12-1117', 'DD-MM-YYYY'),
                                                       TO_DATE('17-12-1997', 'DD-MM-YYYY')))
                                )
                        </CallString>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>Missing delimiter:).</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB51
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="52" Responsible="Vladimir Sobol" TestType="negative">
<Comment>default declare; incorrect declare for the default value; see COL1 column</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>

				CREATE TABLE TAB52 (
                                        COL0 NUMBER(32) PRIMARY KEY,
                                        COL1 VARCHAR2(400)  default  "AA"  not  null ,
                                        COL2 CHAR default  'e'  not  null,
                                        COL3 NUMBER(64) default  124  not  null,
                                        COL4 NUMBER(*),
                                        COL5 RAW(2000),
                                        COL6 DATE
                                )



                           </CallString>
<Error>
<ErrorCode>-5004</ErrorCode>
<ErrorMessage>General error; Missing constant.</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB52
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="53" Responsible="Vladimir Sobol" TestType="negative">
<Comment>double default declare; see COL3 column</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB53 (
                                        COL0 NUMBER(32) PRIMARY KEY,
                                        COL1 CHAR(20) default  'ee'  not  null,
                                        COL2 NUMBER(38) ,
                                        COL3 NUMBER(38,38) default   default  0.22  not  null,
                                        COL4 NUMBER(*),
                                        COL5 RAW(2000),
                                        COL6 ROWID
                                )
				</CallString>
<Error>
<ErrorCode>-5004</ErrorCode>
<ErrorMessage>Missing constant</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB53
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="54" Responsible="Vladimir Sobol" TestType="negative">
<Comment>default declare; double default value declare; see COL2 column</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>CREATE TABLE TAB54 (
                                        COL0 NUMERIC(32) PRIMARY KEY,
                                        COL1 CHAR default 'f' not  null,
                                        COL2 NUMERIC(38)   default   22 11  not  null,
                                        COL3 LONG,
                                        COL6 DATE
                                )

                           </CallString>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>Missing delimiter: ).</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB54
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="55" Responsible="Vladimir Sobol" TestType="negative">
<Comment>default declare; default value out of range; see COL2 column</Comment>
<Prepare>
<Statement callable="false" ignore="true" verify="false">
<CallString>drop table tab55</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB55 (
                                        COL0 NUMBER(32) PRIMARY KEY,
                                        COL1 VARCHAR2(2000),
                                        COL2  INTEGER      default   1111111111111111111111111111  not  null,
                                        COL3 CHAR(2000),
                                        COL4 NUMBER(38)  default  56  not  null,
                                        COL5 NUMBER(28,8),
                                        COL6 ROWID
                                )
                           </CallString>
<Error>
<ErrorCode>-3019</ErrorCode>
<ErrorMessage>Invalid exponent:1111111111111111111111111111.</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB55
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="56" Responsible="Vladimir Sobol" TestType="negative">
<Comment>table check; incorrect column name; see CHECK number 3</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
                                CREATE TABLE TAB56 (
                                        COL0 NUMBER(16)     NOT NULL,
                                        COL1 CHAR(18)       NOT NULL,
                                        COL2 NUMBER(32)     NULL,
                                        COL3 VARCHAR2(1500) NULL,
                                        COL4 CHAR           NULL,
                                        COL5 DATE           NULL,
                                        COL6 NUMBER(35,15)  NULL,
                                        COL7 NUMBER(*)      NULL,
                                        CHECK (COL2  in (12, 23, 24) AND
                                               COL7  in (2, 4, 6)),
                                        CHECK (COL3 IS NOT NULL AND
                                               COL5 IS NOT NULL),
                                        CHECK (COL2_ + 200 &gt; 300),
                                        CHECK ((COL5 BETWEEN TO_DATE('25-01-1917', 'DD-MM-YYYY')
                                                      AND TO_DATE('15-MAY-2002', 'DD-MON-YYYY'))),
                                        CHECK (COL6 NOT IN (100, 200, 300))
                                )
                                </CallString>
<Error>
<ErrorCode>-4005</ErrorCode>
<ErrorMessage>Column not found;Unknown column name:COL2_.</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB56
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="57" Responsible="Vladimir Sobol" TestType="negative">
<Comment>table check; incorrect a check value for the check declaration, see CONSTR1 CONSTRAINT</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB57 (
                                        COL0 NUMBER(32) PRIMARY KEY,
                                        COL1 CHAR(2),
                                        COL2 VARCHAR2(18)  NOT NULL,
                                        COL3 VARCHAR(2000),
                                        COL4 NUMBER(38),
                                        COL5 NUMBER(28,28) NOT NULL,
                                        COL6 NUMBER(*,10),
                                        COL7 LONG,
                                        COL8 RAW(2000),
                                        COL9 ROWID,
                                        COL10 DATE,
                                        CONSTRAINT CONSTR1
                                                CHECK (COL2  in ("BLA-BLA", "BLA-BLA-BLA")
                                                        and COL1  in ("B1", "A1")),
                                        CONSTRAINT CONSTR2
                                                CHECK (COL4 &gt;= 5000),
                                        CONSTRAINT CONSTR3
                                                CHECK (COL5 BETWEEN 0.05 AND 0.50 ),
                                        CONSTRAINT CONSTR4
                                                CHECK (COL10 in (TO_DATE('17-OCT-1917', 'DD-MON-YYYY'),
                                                                 TO_DATE('15-01-1999', 'DD-MM-YYYY') ) )
                                )
                        </CallString>
<Error>
<ErrorCode>-4005</ErrorCode>
<ErrorMessage>Column not found;Unknown column name:BLA-BLA.</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB57
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="58" Responsible="Vladimir Sobol" TestType="negative">
<Comment>table check; incorrect check values for the check declaration, see CONSTR2 CONSTRAINT</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
                                CREATE TABLE TAB58 (
                                        COL0 NUMBER(32) PRIMARY KEY,
                                        COL1 VARCHAR2(4000),
                                        COL2 RAW(2000),
                                        COL3 VARCHAR2(2000),
                                        COL4 NUMBER(64),
                                        COL5 DATE,
                                        COL6 NUMBER(38,38),
                                        COL7 NUMBER(*),
                                        COL8 NUMBER(*,20),
                                        COL9 LONG,
                                        CONSTRAINT CONSTR1
                                                CHECK (COL3 IS NOT NULL AND
                                                        COL5 IS NOT NULL),
                                        CONSTRAINT CONSTR2
                                                CHECK (COL3 in (BLU-BLU, BLU-BLU-BLU)),
                                        CONSTRAINT CONSTR3
                                                CHECK (COL6 &gt;=  0.62 ),
                                        CONSTRAINT CONSTR4
                                                CHECK (COL5 NOT IN (TO_DATE('25-OCT-1917', 'DD-MON-YYYY'),
                                                       TO_DATE('27-08-1999', 'DD-MM-YYYY'),
                                                       TO_DATE('04-12-1997', 'DD-MM-YYYY'))),
                                        CONSTRAINT CONSTR5
                                                CHECK ((350 &gt; COL7 * COL4) and (COL4 &gt; 5))
                                )

                                </CallString>
<Error>
<ErrorCode>-4005</ErrorCode>
<ErrorMessage>Unknown column name:BLU.</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB58
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="59" Responsible="Vladimir Sobol" TestType="negative">
<Comment>table check; incorrect check value lenghts; see CONSTR1 CONSTRAINT</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB59 (
                                        COL0 NUMBER(32) PRIMARY KEY,
                                        COL1 CHAR(3),
                                        COL2 CHAR,
                                        COL3 VARCHAR2(2000),
                                        COL4 NUMBER(64),
                                        COL5 NUMBER(*,20),
                                        COL6 LONG,
                                        COL7 DATE,
                                        CONSTRAINT CONSTR1
                                                CHECK (COL1  in ('BLU-BLU', 'BLU-BLU-BLU')
                                                        and COL2  in ('B', 'A')),
                                        CONSTRAINT CONSTR2
                                                CHECK (COL3 IS NOT NULL AND
                                                        COL4 IS NOT NULL),
                                        CONSTRAINT CONSTR4
                                                CHECK (COL5 BETWEEN 0.12 AND 0.45 ),
                                        CONSTRAINT CONSTR5
                                                CHECK (COL7 IN (TO_DATE('15-OCT-1222', 'DD-MON-YYYY'),
                                                       TO_DATE('11-09-1997', 'DD-MM-YYYY')))
                                )

                                </CallString>
<Error>
<ErrorCode>-8004</ErrorCode>
<ErrorMessage>Constant must be compatible with column type and length.</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB59
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="60" Responsible="Vladimir Sobol" TestType="negative">
<Comment>table check; incorrect check value type, char instead of date; see CONSTR1 CONSTRAINT</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>CREATE TABLE TAB60 (
                                        COL0 NUMBER(32) PRIMARY KEY,
                                        COL1 DATE,
                                        COL2 CHAR,
                                        COL3 NUMBER(15),
                                        COL4 NUMBER(28),
                                        COL5 NUMBER(38,38),
                                        COL6 DATE,
                                        CONSTRAINT CONSTR1
                                                CHECK (COL1  in ('23-11-2001', '22-12-2001')),
                                        CONSTRAINT CONSTR2
                                                CHECK (COL4 + COL5 &gt; 23400),
                                        CONSTRAINT CONSTR3
                                                CHECK (100 &gt; COL3 * COL4)
                                )</CallString>
<Error>
<ErrorCode>-3050</ErrorCode>
<ErrorMessage>Invalid timestamp format:ISO</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>DROP TABLE TAB60</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="61" Responsible="Vladimir Sobol" TestType="negative">
<Comment>table check; incorrect check value lengths; see CONSTR1 CONSTRAINT</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB61 (
                                        COL0 NUMBER(32) PRIMARY KEY,
                                        COL1 NUMBER(3),
                                        COL2 NUMBER(3),
                                        COL3 NUMBER(15,15),
                                        COL4 NUMBER(*,20),
                                        COL5 LONG,
                                        COL6 DATE,
                                        CONSTRAINT CONSTR1
                                               CHECK (COL1  IN (1111, 333333333)
                                                       and COL2 IN (1112, 44444444444)),
                                        CONSTRAINT CONSTR2
                                                CHECK (COL6 IS NOT NULL
                                                        AND COL6 NOT IN (TO_DATE('25-OCT-1917', 'DD-MON-YYYY'))),
                                        CONSTRAINT CONSTR3
                                                CHECK (COL3 BETWEEN 0.11 AND 0.55 )
                                )

                                </CallString>
<Error>
<ErrorCode>-3019</ErrorCode>
<ErrorMessage>Numeric value out ouf range;Invalid exponent:1111.</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB61
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="62" Responsible="Vladimir Sobol" TestType="negative">
<Comment>table check; incorrect check value type, date insteaf of char; see CONSTR1 CONSTRAINT</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
   				CREATE TABLE TAB62 (
                                        COL0 NUMBER(32) PRIMARY KEY,
                                        COL1 VARCHAR2(14),
                                        COL2 NUMBER(3),
                                        COL3 VARCHAR2(2000),
                                        COL4 NUMBER(24),
                                        COL5 NUMBER(*,12),
                                        COL6 LONG,
                                        COL7 RAW,
                                        CONSTRAINT CONSTR1
                                                CHECK (COL1  in ('112', 'BLU-BLU-BLU')
                                                   and COL2  in (TO_DATE('23-01-1967', 'DD-MM-YYYY'),
                                                   'BLA-BLA-BLA')),
                                         CONSTRAINT CONSTR2
                                                CHECK (COL4 + COL5 &gt; 300),
                                        CONSTRAINT CONSTR3
                                                CHECK (COL5 BETWEEN 0.421 AND 0.935 )
                                )
                                </CallString>
<Error>
<ErrorCode>-8006</ErrorCode>
<ErrorMessage>Data types must be compatible.</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB62
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="63" Responsible="Vladimir Sobol" TestType="negative">
<Comment>table check; incorrect keyword check; see CONSTR2 CONSTRAINT</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB63 (
                                        COL0 NUMBER(32) PRIMARY KEY,
                                        COL1 CHAR(2000),
                                        COL2 NUMBER(38),
                                        COL3 NUMBER(*),
                                        COL4 NUMBER(*,20),
                                        COL5 LONG,
                                        COL6 DATE,
                                        COL7 ROWID,
                                        CONSTRAINT CONSTR1
                                                CHECK (COL3 IS NOT NULL AND
                                                        COL4 IS NOT NULL AND
                                                        COL5 IS NOT NULL ),
                                        CONSTRAINT CONSTR2
                                                CHECK_ (COL2 + COL3 &gt; 5000),
                                        CONSTRAINT CONSTR3
                                                CHECK (COL4 &gt; 0.13 )
                                )
                                </CallString>
<Error>
<ErrorCode>-3002</ErrorCode>
<ErrorMessage>Invalid datatype.</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB63
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="64" Responsible="Vladimir Sobol" TestType="negative">
<Comment>table check; duplicate key word "CHECK"; see CONSTR2 CONSTRAINT</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>CREATE TABLE TAB64 (
                                        COL0 NUMERIC(32) PRIMARY KEY,
                                        COL1 VARCHAR(4000),
                                        COL2 CHAR(2000),
                                        COL3 NUMERIC(38),
                                        COL4 NUMERIC(10,20),
                                        COL5 LONG,
                                        COL6 DATE,
                                        CONSTRAINT CONSTR1
                                                CHECK (COL5 IS NOT NULL AND
                                                        COL6 IS NOT NULL),
                                        CONSTRAINT CONSTR2
                                                 CHECK CHECK  (COL3 + COL4 &gt; 3000),
                                        CONSTRAINT CONSTR3
                                                CHECK (COL6 NOT IN (TO_DATE('17-OCT-1997', 'DD-MON-YYYY'),
                                                       TO_DATE('17-12-2557', 'DD-MM-YYYY')))
                                )

                                </CallString>
<Error>
<ErrorCode>-5015</ErrorCode>
<ErrorMessage>[-5015] (at 748): Missing keyword:YEARS,YEAR,WRITER,WRITE,WORK,WITH,WHILE,WHERE,WHENEVER,WHEN,WEEKOFYEAR,WEEK,WAIT,VTRACE,VSIZE,VOLUME,VIEW,VERSION,VERIFY,VARIANCE,VARGRAPHIC,VARCHAR2,VARCHAR,VALUES,VALUE,VALIDPROC,UTCDIFF,UTCDATE,USING,USERID,USERGROUP,USER</ErrorMessage>
</Error>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>[-5016] (at 754): Missing delimiter: (</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB64
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="65" Responsible="Vladimir Sobol" TestType="negative">
<Comment>table check; duplicate column name; see CONSTR2 CONSTRAINT</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB65 (
                                        COL0 NUMERIC(32) PRIMARY KEY,
                                        COL1 VARCHAR(250),
                                        COL2 NUMERIC(64),
                                        COL3 NUMERIC(22,22),
                                        COL4 DATE,
                                        COL5 LONG,
                                        COL7 DATE,
                                        CONSTRAINT CONSTR1
                                                CHECK (COL1  in ('BLU-BLU', 'BLU-BLU-BLU')
                                                        and COL2 in (22, 33, 66, 77)),
                                        CONSTRAINT CONSTR2
                                                CHECK (COL4 COL4 IS NOT NULL AND
                                                        COL7 IS NOT NULL),
                                        CONSTRAINT CONSTR3
                                                CHECK (COL3 BETWEEN 0.1211 AND 0.4552 )
                                )
                                </CallString>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>Missing delimiter: ).</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB65
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="66" Responsible="Vladimir Sobol" TestType="negative">
<Comment>column check; duplicate column name; see COL2 column</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>CREATE TABLE TAB66 (
                                        COL0 NUMERIC(32) PRIMARY KEY,
                                        COL1 VARCHAR(4000),
                                        COL2 CHAR(20)
                                              CHECK (COL2 COL2  IS NOT NULL AND
                                                        COL2 != '555'),
                                        COL3 NUMERIC(12,12)
                                              CHECK (COL3 BETWEEN 0.02 AND 0.225 ),
                                        COL4 LONG,
                                        COL6 DATE
                                )
                                </CallString>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>Missing delimiter:).</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB66
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="67" Responsible="Vladimir Sobol" TestType="negative">
<Comment>column check; duplicate key word "CHECK"; see COL5 column</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB67 (
                                        COL0 NUMERIC(32) PRIMARY KEY,
                                        COL1 CHAR CHECK (COL1 IS NOT NULL),
                                        COL2 VARCHAR(3000),
                                        COL3 NUMERIC(38) CHECK (COL3 &gt; 6000),
                                        COL5 DATE
                                               CHECK  CHECK (COL5 NOT IN ( TO_DATE('17-12-1317', 'DD-MM-YYYY'),
                                                                           TO_DATE('27-08-1397', 'DD-MM-YYYY'),
                                                                           TO_DATE('17-09-1497', 'DD-MM-YYYY'),
                                                                           TO_DATE('28-10-1897', 'DD-MM-YYYY'))),
                                )
                                </CallString>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>Missing delimiter: (.</ErrorMessage>
</Error>
<Error>
<ErrorCode>-5015</ErrorCode>
<ErrorMessage>[-5015] (at 415): Missing keyword:NOT,YEARS,YEAR,WEEKOFYEAR,WEEK,VSIZE,VARIANCE,VARCHAR2,VALUE,VALIDPROC,UPPER,UNUSED,UCASE,TRUNCATE,TRUNC,TRIM,TRANSLATE,TO_NUMBER,TO_DATE,TO_CHAR,TOIDENTIFIER,TIMESTAMP,TIMEDIFF,TIME,TANH,TAN,TABLESPACE,SYSDATE,SUM,SUBTIME,SUBSTRING,SUBSTR</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB67
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="69" Responsible="Oleg Luzginov" TestType="negative">
<Comment>"NUL_" instead of NULL; see COL11</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB69 (
                                        COL1 INTEGER PRIMARY KEY,
                                        COL2 FLOAT(1),
                                        COL3 ROWID,
                                        COL4 RAW(6687) NOT NULL,
                                        COL5 FLOAT(5) UNIQUE,
                                        COL6 CHAR(3661),
                                        COL7 RAW(7110),
                                        COL8 INT,
                                        COL9 INT,
                                        COL10 VARCHAR2(5506),
                                        COL11 DATE NOT NUL_)
				</CallString>
<Error>
<ErrorCode>-5015</ErrorCode>
<ErrorMessage>Missing keyword:NULL</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB69
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="70" Responsible="Vladimir Sobol" TestType="negative">
<Comment>default declare; missing default value; see COL5 column</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB70 (
                                        COL0 NUMBER(32) PRIMARY KEY,
                                        COL1 VARCHAR2(4500)  default  'wewewewe'  not  null,
                                        COL2 CHAR default  '1'  not  null ,
                                        COL5 NUMBER(38)  default   not  null ,
                                        COL7 NUMBER(*),
                                        COL8 NUMBER(*,20),
                                        COL9 LONG,
                                        COL11 RAW
                                     )
                           </CallString>
<Error>
<ErrorCode>-5004</ErrorCode>
<ErrorMessage>Missing constant.</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB70
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="71" Responsible="Vladimir Sobol" TestType="negative">
<Comment>default declare; position default value and "default" key word; see COL3 column</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB71 (
                                        COL0 NUMERIC(32) PRIMARY KEY,
                                        COL1 VARCHAR(4000),
                                        COL2 CHAR,
                                        COL3 CHAR(2000)   'AA'  default      not  null,
                                        COL5 NUMERIC(38)    default 1  not  null ,
                                        COL14 DATE
                                    )

                           </CallString>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>Missing delimiter: ).</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB71
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="75" Responsible="Oleg Luzginov" TestType="negative">
<Comment>the referenced table does not exist</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB75 (
                                        COL1 NUMBER(35),
                                        COL2 INTEGER,
                                        COL3 CHARACTER(3648),
                                        COL4 VARCHAR(650),
                                        COL5 INT,
                                        COL6 NUMBER(12),
                                        COL7 CHARACTER(3072),
                                        COL8 ROWID,
                                        COL9 NUMBER(37),
                                        COL10 INT,
                                        COL11 FLOAT(16) PRIMARY KEY,
                                        CONSTRAINT fk_bad
                                                FOREIGN  KEY (COL1, COL5, COL9)
                                                REFERENCES  TAB75_BASE(COL1_BASE, COL2_BASE, COL3_BASE) )
				</CallString>
<Error>
<ErrorCode>-942</ErrorCode>
<ErrorMessage>Unknown table name:TAB75_BASE</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB75
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="76" Responsible="Oleg Luzginov" TestType="negative">
<Comment>the referenced table does not have key and has no index; see CONSTRAINT fk_bad</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB76_BASE (
                                        COL1_BASE RAW(1626),
                                        COL2_BASE VARCHAR(26),
                                        COL3_BASE INTEGER PRIMARY KEY,
                                        COL4_BASE NUMBER(19),
                                        COL5_BASE INT,
                                        COL6_BASE VARCHAR2(4000),
                                        COL7_BASE FLOAT(37),
                                        COL8_BASE NUMBER(8),
                                        COL9_BASE DATE )
				</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB76 (
                                        COL1 VARCHAR(4000),
                                        COL2 RAW(4000),
                                        COL3 CHAR(1750),
                                        COL4 LONG,
                                        COL5 CHARACTER(4000),
                                        COL6 INT PRIMARY KEY,
                                        COL7 CHAR(4000),
                                        COL8 VARCHAR(26),
                                        COL9 INTEGER,








                                        COL10 LONG,
                                        CONSTRAINT  fk_good
                                                FOREIGN  KEY (COL6)
                                                REFERENCES  TAB76_BASE(COL3_BASE),
                                        CONSTRAINT  fk_bad
                                                FOREIGN  KEY (COL6, COL8)
                                                REFERENCES  TAB76_BASE(COL3_BASE, COL2_BASE) )
				</CallString>
<Error>
<ErrorCode>-8030</ErrorCode>
<ErrorMessage>Column must be indexed</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB76_BASE
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="77" Responsible="Oleg Luzginov" TestType="negative">
<Comment>key with too few columns as explicitly specified; see CONSTRAINT fk_bad</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB77_BASE (
                                        COL1_BASE INT,
                                        COL2_BASE LONG,
                                        COL3_BASE ROWID,
                                        COL4_BASE CHAR(32),
                                        COL5_BASE CHAR(4000),
                                        CONSTRAINT pk_BASE PRIMARY  KEY (COL1_BASE, COL4_BASE) )
				</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB77 (
                                        COL1 NUMBER(11) PRIMARY KEY,
                                        COL2 INT,
                                        COL3 NUMBER(25),
                                        COL4 CHARACTER(36),
                                        COL5 CHAR(32),
                                        COL6 LONG,
                                        CONSTRAINT  fk_bad FOREIGN  KEY (COL2)
                                                REFERENCES  TAB77_BASE(COL1_BASE, COL4_BASE) )
				</CallString>
<Error>
<ErrorCode>-1201</ErrorCode>
<ErrorMessage>Too few columns</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB77_BASE
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="78" Responsible="Oleg Luzginov" TestType="negative">
<Comment>key with too many columns as explicitly specified; see CONSTRAINT fk_bad</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB78_BASE (
                                        COL1_BASE CHAR(38),
                                        COL2_BASE INTEGER,
                                        COL3_BASE RAW(3409),
                                        COL4_BASE DATE,
                                        CONSTRAINT pk_BASE PRIMARY  KEY (COL1_BASE, COL2_BASE, COL4_BASE) )
				</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB78 (
                                        COL1 VARCHAR(4000),
                                        COL2 INTEGER,
                                        COL3 CHARACTER(38),
                                        COL4 DATE,
                                        COL5 INTEGER,
                                        COL6 LONG,
                                        COL7 LONG,
                                        COL8 LONG,
                                        COL9 FLOAT(3),
                                        COL10 ROWID,
                                        CONSTRAINT fk_good
                                                FOREIGN  KEY (COL3, COL5, COL4)
                                                REFERENCES  TAB78_BASE(COL1_BASE, COL2_BASE, COL4_BASE),
                                        CONSTRAINT fk_bad
                                                FOREIGN  KEY (COL3, COL5, COL4, COL9)
                                                REFERENCES  TAB78_BASE(COL1_BASE, COL2_BASE, COL4_BASE) )
				</CallString>
<Error>
<ErrorCode>-1002</ErrorCode>
<ErrorMessage>Too many columns</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB78_BASE
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="79" Responsible="Oleg Luzginov" TestType="negative">
<Comment>keycolumn-sequence different to specified one; see CONSTRAINT fk_bad</Comment>
<Prepare>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB79
				</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB79_BASE
				</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB79_BASE (
                                        COL1_BASE VARCHAR2(21),
                                        COL2_BASE VARCHAR2(51),
                                        COL3_BASE DATE,
                                        COL4_BASE INTEGER,
                                        COL5_BASE FLOAT(24) ,
                                        CONSTRAINT pk_BASE
                                        PRIMARY  KEY (COL1_BASE, COL2_BASE,
                                        COL3_BASE, COL4_BASE, COL5_BASE) )
				</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB79 (
                                        COL1 VARCHAR(51),
                                        COL2 DATE,
                                        COL3 LONG,
                                        COL4 NUMBER(2),
                                        COL5 VARCHAR(21),
                                        COL6 INTEGER,
                                        COL7 ROWID,
                                        COL8 FLOAT(24),
                                        CONSTRAINT fk_good
                                                FOREIGN  KEY (COL5, COL1, COL2, COL6, COL8)
                                                REFERENCES  TAB79_BASE(COL1_BASE, COL2_BASE,
                                                COL3_BASE, COL4_BASE, COL5_BASE),
                                        CONSTRAINT fk_bad
                                                FOREIGN  KEY (COL1, COL5, COL2, COL6, COL8)
                                                REFERENCES  TAB79_BASE(COL2_BASE, COL1_BASE,
                                                COL3_BASE, COL4_BASE, COL5_BASE) )
				</CallString>
<Error>
<ErrorCode>-8030</ErrorCode>
<ErrorMessage>Column must be indexed</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB79_BASE
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="80" Responsible="Oleg Luzginov" TestType="negative">
<Comment>key with too few columns as implicitly specified; see CONSTRAINT fk_bad</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB80_BASE (
                                        COL1_BASE FLOAT(8),
                                        COL2_BASE INTEGER,
                                        COL3_BASE CHARACTER(4000),
                                        COL4_BASE ROWID,
                                        COL5_BASE CHAR(384),
                                        COL6_BASE DATE,
                                        COL7_BASE NUMBER(4),
                                        COL8_BASE CHAR(2206),
                                        COL9_BASE VARCHAR2(1893),
                                        COL10_BASE VARCHAR2(4000),
                                        COL11_BASE INT,
                                        CONSTRAINT pk_BASE
                                        PRIMARY KEY (COL1_BASE, COL2_BASE, COL6_BASE,
                                        COL7_BASE, COL11_BASE ) )
				</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB80 (
                                        COL1 FLOAT(8),
                                        COL2 INTEGER,
                                        COL3 DATE,
                                        COL4 NUMBER(4),
                                        COL5 INT,
                                        COL6 LONG,
                                        COL7 LONG,
                                        COL8 CHAR(3720),
                                        CONSTRAINT fk_good
                                                FOREIGN  KEY ( COL1, COL2, COL3,
                                                COL4, COL5 )
                                                REFERENCES  TAB80_BASE,
                                        CONSTRAINT fk_bad
                                                FOREIGN  KEY ( COL1, COL2, COL3,
                                                COL4 )
                                                REFERENCES  TAB80_BASE )
				</CallString>
<Error>
<ErrorCode>-1201</ErrorCode>
<ErrorMessage>Too few columns</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB80_BASE
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="81" Responsible="Oleg Luzginov" TestType="negative">
<Comment>key with too many columns as implicitly specified; see CONSTRAINT fk_bad</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB81_BASE (
                                        COL1_BASE DATE,
                                        COL2_BASE VARCHAR2(644),
                                        COL3_BASE DATE,
                                        COL4_BASE DATE,
                                        COL5_BASE NUMBER(19),
                                        CONSTRAINT pk_BASE
                                                PRIMARY  KEY (COL1_BASE, COL3_BASE, COL4_BASE) )
				</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB81 (
                                        COL1 DATE PRIMARY KEY,
                                        COL2 DATE,
                                        COL3 CHAR(650),
                                        COL4 VARCHAR2(4000),
                                        COL5 CHAR(2151),
                                        COL6 DATE ,
                                        CONSTRAINT fk_good
                                                FOREIGN  KEY ( COL1, COL2, COL6 )
                                                REFERENCES  TAB81_BASE,
                                        CONSTRAINT fk_bad
                                                FOREIGN  KEY ( COL1, COL2, COL6, COL3 )
                                                REFERENCES  TAB81_BASE )
				</CallString>
<Error>
<ErrorCode>-1002</ErrorCode>
<ErrorMessage>Too many columns</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB81_BASE
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="82" Responsible="Oleg Luzginov" TestType="negative">
<Comment>key with column whose datatypes differ to referencing columns; see CONSTRAINT fk_bad</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB82_BASE (
                                        COL1_BASE INT,
                                        COL2_BASE VARCHAR2(73),
                                        COL3_BASE DATE,
                                        COL4_BASE LONG,
                                        CONSTRAINT pk_BASE
                                                PRIMARY  KEY (COL1_BASE, COL2_BASE, COL3_BASE) )
				</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB82 (
                                        COL1 VARCHAR2(28) PRIMARY KEY,
                                        COL2 VARCHAR2(76),
                                        COL3 VARCHAR2(55),
                                        COL4 INT,
                                        COL5 VARCHAR2(73),
                                        COL6 DATE,
                                        CONSTRAINT fk_good
                                                FOREIGN  KEY ( COL4, COL5, COL6 )
                                                REFERENCES  TAB82_BASE,
                                        CONSTRAINT fk_bad
                                                FOREIGN  KEY ( COL2, COL5, COL6 )
                                                REFERENCES  TAB82_BASE )
				</CallString>
<Error>
<ErrorCode>-8006</ErrorCode>
<ErrorMessage>Data types must be compatible</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB82_BASE
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="83" Responsible="Oleg Luzginov" TestType="negative">
<Comment>referenced key column length differs to referencing column (too small); see CONSTRAINT fk_bad</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB83_BASE (
                                        COL1_BASE INTEGER,
                                        COL2_BASE INT,
                                        COL3_BASE RAW(4000),
                                        COL4_BASE NUMBER(28),
                                        COL5_BASE ROWID,
                                        COL6_BASE LONG,
                                        COL7_BASE RAW(4000),
                                        COL8_BASE LONG,
                                        CONSTRAINT pk_BASE
                                                PRIMARY  KEY (COL1_BASE, COL4_BASE) )
				</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB83 (
                                        COL1 INT,
                                        COL2 ROWID,
                                        COL3 CHARACTER(1270),
                                        COL4 VARCHAR(4000),
                                        COL5 NUMBER(28),
                                        COL6 DATE,
                                        COL7 RAW(6833),
                                        COL8 VARCHAR(721),
                                        COL9 CHAR(4000),
                                        COL10 NUMBER(38),
                                        CONSTRAINT fk_good
                                                FOREIGN  KEY ( COL1, COL5 )
                                                REFERENCES  TAB83_BASE,
                                        CONSTRAINT fk_bad
                                                FOREIGN  KEY ( COL1, COL10 )
                                                REFERENCES  TAB83_BASE )
				</CallString>
<Error>
<ErrorCode>-8006</ErrorCode>
<ErrorMessage>Data types must be compatible</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB83_BASE
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="84" Responsible="Oleg Luzginov" TestType="negative">
<Comment>key column length differs to referencing column (too big); see CONSTRAINT fk_bad</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB84_BASE (
                                        COL1_BASE VARCHAR2(2337),
                                        COL2_BASE CHARACTER(4000),
                                        COL3_BASE RAW(48),
                                        COL4_BASE INT,
                                        COL5_BASE CHARACTER(4000),
                                        COL6_BASE NUMBER(13),
                                        COL7_BASE INT,
                                        COL8_BASE DATE,
                                        COL9_BASE VARCHAR(2487),
                                        CONSTRAINT pk_BASE
                                                PRIMARY  KEY (COL3_BASE, COL7_BASE, COL8_BASE ) )
				</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB84 (
                                        COL1 INT,
                                        COL2 RAW(48),
                                        COL3 NUMBER(8),
                                        COL4 FLOAT(4),
                                        COL5 DATE,
                                        COL6 CHAR(262),
                                        COL7 INT,
                                        COL8 VARCHAR2(100),
                                        COL9 ROWID,
                                        CONSTRAINT fk_good
                                                FOREIGN  KEY ( COL2, COL7, COL5 )
                                                REFERENCES  TAB84_BASE,
                                        CONSTRAINT fk_bad
                                                FOREIGN  KEY ( COL8, COL7, COL5 )
                                                REFERENCES  TAB84_BASE )
				</CallString>
<Error>
<ErrorCode>-8006</ErrorCode>
<ErrorMessage>Data types must be compatible</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB84_BASE
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="85" Responsible="Oleg Luzginov" TestType="negative">
<Comment>it is a NON-unique index with fitting columns; see CONSTRAINT fk</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB85_BASE (
                                        COL1_BASE CHARACTER(32),
                                        COL2_BASE RAW(64),
                                        COL3_BASE NUMBER(23),
                                        COL4_BASE NUMBER(30),
                                        COL5_BASE LONG,
                                        COL6_BASE CHARACTER(4000) )
				</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE INDEX IND_BASE85
                                ON TAB85_BASE(COL1_BASE, COL2_BASE, COL4_BASE)
				</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB85 (
                                        COL1 RAW(64),
                                        COL2 RAW(4000),
                                        COL3 RAW(4000),
                                        COL4 RAW(4000),
                                        COL5 LONG,
                                        COL6 NUMBER,
                                        COL7 NUMBER(30),
                                        COL8 VARCHAR2(21),
                                        COL9 LONG,
                                        COL10 RAW(5626),
                                        COL11 ROWID,
                                        COL12 INTEGER,
                                        COL13 VARCHAR(32),
                                        CONSTRAINT fk
                                                FOREIGN  KEY ( COL13, COL1, COL7 )
                                                REFERENCES
                                                TAB85_BASE (COL1_BASE, COL2_BASE, COL4_BASE) )
				</CallString>
<Error>
<ErrorCode>-8030</ErrorCode>
<ErrorMessage>Column must be indexed</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB85_BASE
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="86" Responsible="Oleg Luzginov" TestType="negative">
<Comment>unique index with too few columns; see CONSTRAINT fk_bad</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB86_BASE (
                                        COL1_BASE ROWID,
                                        COL2_BASE VARCHAR(1524),
                                        COL3_BASE INTEGER,
                                        COL4_BASE INT,
                                        COL5_BASE CHARACTER(4000),
                                        COL6_BASE NUMBER(20),
                                        COL7_BASE NUMBER(33) )
				</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE UNIQUE INDEX IND_BASE86
                                ON TAB86_BASE(COL3_BASE, COL4_BASE, COL6_BASE, COL7_BASE)
				</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB86 (
                                        COL1 INTEGER,
                                        COL2 INT,
                                        COL3 LONG,
                                        COL4 ROWID,
                                        COL5 CHARACTER(125),
                                        COL6 VARCHAR(962),
                                        COL7 INTEGER,
                                        COL8 NUMBER(20),
                                        COL9 NUMBER(33),
                                        COL10 VARCHAR2(2561),
                                        CONSTRAINT fk_good
                                                FOREIGN  KEY ( COL1, COL2, COL8, COL9)
                                                REFERENCES  TAB86_BASE(COL3_BASE, COL4_BASE,
                                                COL6_BASE, COL7_BASE),
                                        CONSTRAINT fk_bad
                                                FOREIGN  KEY ( COL1, COL2, COL8, COL9, COL7)
                                                REFERENCES  TAB86_BASE(COL3_BASE, COL4_BASE, COL6_BASE, COL7_BASE)
                                )
				</CallString>
<Error>
<ErrorCode>-1002</ErrorCode>
<ErrorMessage>Too many columns</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB86_BASE
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="87" Responsible="Oleg Luzginov" TestType="negative">
<Comment>unique index with too many columns; see CONSTRAINT fk_bad</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB87_BASE (
                                        COL1_BASE INTEGER,
                                        COL2_BASE VARCHAR2(75),
                                        COL3_BASE ROWID,
                                        COL4_BASE LONG,
                                        COL5_BASE INT,
                                        COL6_BASE LONG,
                                        COL7_BASE DATE,
                                        COL8_BASE INT,
                                        COL9_BASE VARCHAR(4000),
                                        COL10_BASE INT,
                                        COL11_BASE RAW(24) )
				</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE UNIQUE INDEX IND_BASE87
                                ON TAB87_BASE(COL1_BASE, COL2_BASE, COL8_BASE, COL10_BASE, COL11_BASE )
				</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB87 (
                                        COL1 NUMBER(9),
                                        COL2 ROWID,
                                        COL3 VARCHAR(3180),
                                        COL4 FLOAT(6),
                                        COL5 INT,
                                        COL6 VARCHAR2(75),
                                        COL7 VARCHAR2(4000),
                                        COL8 INT,
                                        COL9 RAW(24),
                                        COL10 CHARACTER(4000),
                                        COL11 ROWID,
                                        COL12 VARCHAR2(389),
                                        COL13 LONG,
                                        COL14 VARCHAR2(797),
                                        COL15 ROWID,
                                        COL16 INT,
                                        COL17 LONG,
                                        CONSTRAINT fk_good
                                                FOREIGN  KEY ( COL5, COL6, COL16, COL8, COL9)
                                                REFERENCES  TAB87_BASE(COL1_BASE, COL2_BASE,
                                                COL8_BASE, COL10_BASE, COL11_BASE ),
                                        CONSTRAINT fk_bad
                                                FOREIGN  KEY ( COL5, COL6, COL16, COL8)
                                                REFERENCES  TAB87_BASE(COL1_BASE, COL2_BASE,
                                                COL8_BASE, COL10_BASE, COL11_BASE )
                                )
				</CallString>
<Error>
<ErrorCode>-1201</ErrorCode>
<ErrorMessage>Too few columns</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB87_BASE
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="88" Responsible="Oleg Luzginov" TestType="negative">
<Comment>unique indexcolumn-sequence different to specified one; see CONSTRAINT fk_bad</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB88_BASE (
                                        COL1_BASE NUMBER(3),
                                        COL2_BASE LONG,
                                        COL3_BASE CHAR(49),
                                        COL4_BASE RAW(2157),
                                        COL5_BASE RAW(4000),
                                        COL6_BASE VARCHAR2(4000),
                                        COL7_BASE INT,
                                        COL8_BASE CHARACTER(4000),
                                        COL9_BASE VARCHAR2(186),
                                        COL10_BASE NUMBER(13),
                                        COL11_BASE FLOAT(*),
                                        COL12_BASE LONG,
                                        COL13_BASE FLOAT(22),
                                        COL14_BASE INTEGER,
                                        COL15_BASE VARCHAR2(4000),
                                        COL16_BASE FLOAT(26),
                                        COL17_BASE DATE,
                                        COL18_BASE DATE )
				</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE UNIQUE INDEX IND_BASE88
                                ON TAB88_BASE (COL1_BASE, COL3_BASE, COL7_BASE,
                                COL17_BASE, COL18_BASE )
				</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB88 (
                                        COL1 INTEGER,
                                        COL2 VARCHAR(3573),
                                        COL3 INT,
                                        COL4 CHAR(49),
                                        COL5 CHAR(3238),
                                        COL6 NUMBER(36),
                                        COL7 NUMBER(3),
                                        COL8 INT,
                                        COL9 DATE,
                                        COL10 DATE,
                                        COL11 RAW(5470),
                                        CONSTRAINT fk_good
                                                FOREIGN  KEY ( COL7, COL4, COL8, COL9, COL10)
                                                REFERENCES  TAB88_BASE (COL1_BASE, COL3_BASE,
                                                COL7_BASE, COL17_BASE, COL18_BASE ),
                                        CONSTRAINT fk_bad
                                                FOREIGN  KEY ( COL10, COL4, COL8, COL9, COL7)
                                                REFERENCES  TAB88_BASE (COL1_BASE, COL3_BASE,
                                                COL7_BASE, COL17_BASE, COL18_BASE )
                                )
				</CallString>
<Error>
<ErrorCode>-8006</ErrorCode>
<ErrorMessage>Data types must be compatible</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB88_BASE
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="89" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>CREATE-Statements do not contain all required keywords </Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>

		CREATE TABLE TAB89N_1 ( 
			     COL1 INT unique, 
		   	     COL2 CHAR(32),
		             COL3 LONG,
		   	     COL4 LONG,
			     COL5 VARCHAR unique,
			     COL6 CHAR,
                             COL7 INT,
			     PRIMARY KEY (COL1, COL7))</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>

	    CREATE TABLE TAB89N_2 ( 
			     COL1 CHAR, 
		   	     COL2 CHAR(32),
		             COL3 LONG,
		   	     COL4 LONG,
			     COL5 CHAR,
			     COL6 CHAR CONSTRAINT CONSTR29P_2 REFERENCES TAB89N_1 (COL5) ON DELETE SET,
                             PRIMARY KEY (COL2))</CallString>
<Error>
<ErrorCode>-5015</ErrorCode>
<ErrorMessage>[-5015] (at 225): Missing keyword</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

	    CREATE TABLE TAB89N_3 ( 
			     COL1 CHAR, 
		   	     COL2 CHAR(32),
		             COL3 LONG,
		   	     COL4 LONG,
			     COL5 CHAR,
			     COL6 CHAR CONSTRAINT CONSTR29P_3 REFERENCES TAB89N_1 (COL5) ON DELETE,
                             PRIMARY KEY (COL2))</CallString>
<Error>
<ErrorCode>-5015</ErrorCode>
<ErrorMessage>[-5015] (at 221): Missing keyword</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

	    CREATE TABLE TAB89N_4 ( 
			     COL1 CHAR, 
		   	     COL2 CHAR(32),
		             COL3 LONG,
		   	     COL4 LONG,
			     COL5 CHAR,
			     COL6 CHAR CONSTRAINT CONSTR29P_4 REFERENCES TAB89N_1 (COL5) ON,
                             PRIMARY KEY (COL2))</CallString>
<Error>
<ErrorCode>-5015</ErrorCode>
<ErrorMessage>[-5015] (at 214): Missing keyword:DELETE</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

	    CREATE TABLE TAB89N_5 ( 
			     COL1 CHAR, 
		   	     COL2 CHAR(32),
		             COL3 LONG,
		   	     COL4 LONG,
			     COL5 CHAR,
			     COL6 CHAR CONSTRAINT CONSTR29P_5 REFERENCES TAB89N_1 (COL5) CASCADE,
                             PRIMARY KEY (COL2))</CallString>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>[-5016] (at 212): Missing delimiter: )</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>

	DROP TABLE TAB89N_1</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="91" Responsible="Oleg Luzginov" TestType="negative">
<Comment>unique index with column whose datatypes differ to referencing columns; see CONSTRAINT fk_bad</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB91_BASE (
                                        COL1_BASE CHARACTER(64),
                                        COL2_BASE FLOAT(25),
                                        COL3_BASE NUMBER(33),
                                        COL4_BASE INT,
                                        COL5_BASE FLOAT(18),
                                        COL6_BASE RAW(7237),
                                        COL7_BASE ROWID,
                                        COL8_BASE DATE,
                                        COL9_BASE NUMBER(28),
                                        COL10_BASE VARCHAR2(2591),
                                        COL11_BASE VARCHAR2(4000),
                                        COL12_BASE DATE,
                                        COL13_BASE INTEGER,
                                        COL14_BASE FLOAT(7),
                                        COL15_BASE DATE,
                                        COL16_BASE INT,
                                        COL17_BASE DATE,
                                        COL18_BASE ROWID )
				</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE UNIQUE INDEX IND_BASE91
                                ON TAB91_BASE(COL1_BASE, COL2_BASE, COL3_BASE, COL4_BASE)
				</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB91 (
                                        COL1 CHAR(64),
                                        COL2 INT  PRIMARY KEY,
                                        COL3 RAW(10),
                                        COL4 ROWID,
                                        COL5 RAW(6219),
                                        COL6 FLOAT(25),
                                        COL7 CHAR(474),
                                        COL8 FLOAT(12),
                                        COL9 DATE,
                                        COL10 ROWID,
                                        COL11 NUMBER(33),
                                        COL12 VARCHAR(1757),
                                        COL13 VARCHAR(4000),
                                        COL14 VARCHAR(4000),
                                        CONSTRAINT fk_good
                                                FOREIGN  KEY ( COL1, COL6, COL11, COL2 )
                                                REFERENCES  TAB91_BASE(COL1_BASE, COL2_BASE,
                                                COL3_BASE, COL4_BASE),
                                        CONSTRAINT fk_bad
                                                FOREIGN  KEY ( COL3, COL6, COL11, COL2 )
                                                REFERENCES  TAB91_BASE(COL1_BASE, COL2_BASE,
                                                COL3_BASE, COL4_BASE)
                                )
				</CallString>
<Error>
<ErrorCode>-8006</ErrorCode>
<ErrorMessage>Data types must be compatible</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB91_BASE
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="92" Responsible="Oleg Luzginov" TestType="negative">
<Comment>unique index column length differs to referencing column (too small); see CONSTRAINT fk_bad</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB92_BASE (
                                        COL1_BASE CHARACTER(7),
                                        COL2_BASE LONG,
                                        COL3_BASE CHAR(4000),
                                        COL4_BASE DATE,
                                        COL5_BASE FLOAT(27),
                                        COL6_BASE INTEGER,
                                        COL7_BASE DATE,
                                        COL8_BASE VARCHAR2(4000),
                                        COL9_BASE VARCHAR2(1394),
                                        COL10_BASE INT,
                                        COL11_BASE NUMBER(14),
                                        COL12_BASE DATE,
                                        COL13_BASE LONG,
                                        COL14_BASE FLOAT(1),
                                        COL15_BASE DATE,
                                        COL16_BASE RAW(92),
                                        COL17_BASE FLOAT(24) )
				</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE UNIQUE INDEX IND_BASE92
                                ON TAB92_BASE ( COL4_BASE, COL12_BASE, COL16_BASE )
				</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB92 (
                                        COL1 RAW(58) PRIMARY KEY,
                                        COL2 DATE,
                                        COL3 DATE,
                                        COL4 RAW(92),
                                        CONSTRAINT fk_good
                                                FOREIGN  KEY ( COL2, COL3, COL4 )
                                                REFERENCES  TAB92_BASE ( COL4_BASE, COL12_BASE, COL16_BASE ),
                                        CONSTRAINT fk_bad
                                                FOREIGN  KEY ( COL1, COL3, COL4 )
                                                REFERENCES  TAB92_BASE ( COL4_BASE, COL12_BASE, COL16_BASE )
                                )
				</CallString>
<Error>
<ErrorCode>-8006</ErrorCode>
<ErrorMessage>Data types must be compatible</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB92_BASE
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="93" Responsible="Oleg Luzginov" TestType="negative">
<Comment>unique index column length differs to referencing column (too big); see CONSTRAINT fk_bad</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB93_BASE (
                                        COL1_BASE ROWID,
                                        COL2_BASE LONG,
                                        COL3_BASE RAW(3323),
                                        COL4_BASE INT,
                                        COL5_BASE VARCHAR2(289),
                                        COL6_BASE RAW(4000),
                                        COL7_BASE DATE,
                                        COL8_BASE VARCHAR2(394),
                                        COL9_BASE FLOAT(7),
                                        COL10_BASE NUMBER(33),
                                        COL11_BASE INTEGER,
                                        COL12_BASE NUMBER(16),
                                        COL13_BASE ROWID,
                                        COL14_BASE NUMBER(6),
                                        COL15_BASE DATE,
                                        COL16_BASE INTEGER,
                                        COL17_BASE VARCHAR(22),
                                        COL18_BASE INTEGER )
				</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE UNIQUE INDEX IND_BASE93
                                ON TAB93_BASE(COL4_BASE, COL7_BASE, COL15_BASE, COL17_BASE)
				</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB93 (
                                        COL1 LONG,
                                        COL2 VARCHAR2(21),
                                        COL3 VARCHAR2(4000),
                                        COL4 INT,
                                        COL5 VARCHAR2(3161),
                                        COL6 INT,
                                        COL7 NUMBER(14),
                                        COL8 CHARACTER(4000),
                                        COL9 VARCHAR2(630),
                                        COL10 CHAR(4000),
                                        COL11 CHARACTER(198),
                                        COL12 ROWID,
                                        COL13 ROWID,
                                        COL14 DATE,
                                        COL15 RAW(4000),
                                        COL16 DATE,
                                        COL17 RAW(4000),
                                        COL18 NUMBER(24),
                                        COL19 VARCHAR(22),
                                        CONSTRAINT fk_good
                                                FOREIGN  KEY ( COL4, COL16, COL14, COL19 )
                                                REFERENCES  TAB93_BASE(COL4_BASE, COL7_BASE,
                                                 COL15_BASE, COL17_BASE),
                                        CONSTRAINT fk_bad
                                                FOREIGN  KEY ( COL4, COL16, COL14, COL2 )
                                                REFERENCES  TAB93_BASE(COL4_BASE, COL7_BASE,
                                                 COL15_BASE, COL17_BASE)
                                )
				</CallString>
<Error>
<ErrorCode>-8006</ErrorCode>
<ErrorMessage>Data types must be compatible</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB93_BASE
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="94" Responsible="Oleg Luzginov" TestType="negative">
<Comment>index column length differs to referencing column, only decimal places differ; see CONSTRAINT fk_bad</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB94_BASE (
                                        COL1_BASE DATE,
                                        COL2_BASE NUMBER(15,7),
                                        COL3_BASE LONG,
                                        COL4_BASE ROWID,
                                        COL5_BASE VARCHAR(1512),
                                        COL6_BASE ROWID,
                                        COL7_BASE VARCHAR2(4000) )
				</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE UNIQUE INDEX IND_BASE94
                                ON TAB94_BASE(COL2_BASE)
				</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB94 (
                                        COL1 INTEGER,
                                        COL2 CHAR(559),
                                        COL3 DATE,
                                        COL4 CHAR(4000),
                                        COL5 CHAR(1964),
                                        COL6 VARCHAR2(152),
                                        COL7 NUMBER(15,7),
                                        COL8 CHARACTER(4000),
                                        COL9 LONG,
                                        COL10 CHAR(3464),
                                        COL11 VARCHAR(2339),
                                        COL12 ROWID,
                                        COL13 NUMBER(15,8),
                                        COL14 VARCHAR(4000),
                                        COL15 RAW(4000),
                                        CONSTRAINT fk_good
                                                FOREIGN  KEY ( COL7 )
                                                REFERENCES  TAB94_BASE(COL2_BASE),
                                        CONSTRAINT fk_bad
                                                FOREIGN  KEY ( COL13 )
                                                REFERENCES  TAB94_BASE(COL2_BASE)
                                )
				</CallString>
<Error>
<ErrorCode>-8006</ErrorCode>
<ErrorMessage>Data types must be compatible</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB94_BASE
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="95" Responsible="Oleg Luzginov" TestType="negative">
<Comment>ON DELETE with another keyword; see CONSTRAINT fk_selfREF</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB95 (
                                        COL1 INT,
                                        COL2 NUMBER(5),
                                        COL3 FLOAT(31),
                                        COL4 LONG,
                                        COL5 ROWID,
                                        CONSTRAINT pk
                                                PRIMARY  KEY (COL1),
                                        CONSTRAINT fk_selfREF
                                                FOREIGN  KEY (COL2)
                                                REFERENCES  TAB95(COL1)
                                                ON DELETE INDEX )
				</CallString>
<Error>
<ErrorCode>-5015</ErrorCode>
<ErrorMessage>Missing keyword:CASCADE,SET</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB95
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="96" Responsible="Oleg Luzginov" TestType="negative">
<Comment>ON DELETE with non-keyword; see CONSTRAINT fk_selfREF</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB96 (
                                        COL1 RAW(5854),
                                        COL2 NUMBER(5),
                                        COL3 INT,
                                        COL4 CHARACTER(2956),
                                        COL5 CHARACTER(1926),
                                        COL6 NUMBER(5),
                                        COL7 INT,
                                        CONSTRAINT pk
                                                PRIMARY  KEY (COL2, COL3),
                                        CONSTRAINT fk_selfREF
                                                FOREIGN  KEY (COL6, COL7)
                                                REFERENCES  TAB96 (COL2, COL3)
                                                ON DELETE Unsinn )
				</CallString>
<Error>
<ErrorCode>-5015</ErrorCode>
<ErrorMessage>Missing keyword:CASCADE,SET</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB96
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="97" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>Statements contain correct keywords two times</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>

		CREATE TABLE TAB97N_1 ( 
			     COL1 INT UNIQUE, 
		   	     COL2 CHAR(32),
		             COL3 LONG,
		   	     COL4 LONG,
			     COL5 VARCHAR,
			     COL6 CHAR,
                             COL7 INT,
			     PRIMARY KEY (COL5, COL6))</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>

		CREATE TABLE TAB97N_2 ( 
			     COL1 INT, 
		   	     COL2 CHAR(32),
		             COL3 LONG,
		   	     COL4 LONG,
			     COL5 INT CONSTRAINT CONSTR97N REFERENCES TAB97N_1 (COL1) ON DELETE CASCADE CASCADE,
			     COL6 CHAR,
                             COL7 INT,
			     PRIMARY KEY (COL5, COL6))</CallString>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>[-5016] (at 204): Missing delimiter: )</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>

	DROP TABLE TAB97N_1</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="99" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>TABLE_NAMEs

verifying case sensitive table_names,
try to reference a table named "TaB_99" with TaB_99 </Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
	
	CREATE TABLE "TaB_99" (	COL1 INT,
				COL2 CHAR(230),
				COL3 INT PRIMARY KEY)</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

	INSERT INTO "TaB_99" VALUES (1, 'playing with a ball', 173)</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="true">
<CallString>

	SELECT * FROM TaB_99</CallString>
<Error>
<ErrorCode>-942</ErrorCode>
<ErrorMessage>[-942] (at 18): Unknown table name:TAB_99</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

	DROP TABLE TaB_99</CallString>
<Error>
<ErrorCode>-942</ErrorCode>
<ErrorMessage>[-942] (at 15): Unknown table name:TAB_99</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

	DROP TABLE "TaB_99"</CallString>
</Statement>
</Run>
</Test>
<Test ErrorType="syntax" Exclude="" Number="101" Responsible="Oleg Luzginov" TestType="negative">
<Comment>statement with a keywords as a column identifier; see next COL1 column</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB101 (
                                        COL1 CHAR(2685),
                                        SELECT INTEGER,
                                        COL3 VARCHAR(1477),
                                        COL4 FLOAT(8),
                                        COL5 CHARACTER(7771),
                                        COL6 CHAR(1415),
                                        COL7 DATE )
				</CallString>
<Error>
<ErrorCode>-7006</ErrorCode>
<ErrorMessage>Reserved identifier not allowed</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB101
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="102" Responsible="Oleg Luzginov" TestType="negative">
<Comment>illegal begin of the column name; see COL1</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB102 (
                                        -COL1 INTEGER,
                                        COL2 DATE,
                                        COL3 LONG )
				</CallString>
<Error>
<ErrorCode>-5006</ErrorCode>
<ErrorMessage>Missing identifier</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB102
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(7.3.32.*;;)(;;internal)(;unicode;)(7.6.0.9-;;)" Number="103" Responsible="Oleg Luzginov" TestType="negative">
<Comment>evaluate a critical number of columns which have the different data types
                with different data length; number of columns = 932

(7.3.32 is excluded because page size is 32 kByte instead of 8 kByte)</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>	CREATE TABLE TAB103 (
                        COL1 FLOAT(20), COL2 CHARACTER(56),
                        COL3 VARCHAR(60), COL4 CHARACTER(50), COL5 FLOAT(1),
                        COL6 CHARACTER(62), COL7 CHAR(37), COL8 INTEGER,
                        COL9 DATE, COL10 CHARACTER(5), COL11 DATE,
                        COL12 VARCHAR2(2581), COL13 RAW(2612), COL14 VARCHAR2(3631),
                        COL15 CHARACTER(3447), COL16 LONG, COL17 RAW(4915),
                        COL18 CHARACTER(5480), COL19 VARCHAR2(4757), COL20 RAW(4674),
                        COL21 CHARACTER(5121), COL22 ROWID, COL23 ROWID,
                        COL24 INTEGER, COL25 LONG, COL26 INTEGER,
                        COL27 VARCHAR(5324), COL28 FLOAT(1), COL29 VARCHAR(422),
                        COL30 INTEGER, COL31 VARCHAR(5983), COL32 DATE,
                        COL33 VARCHAR2(1006), COL34 VARCHAR2(4639), COL35 LONG,
                        COL36 VARCHAR2(344), COL37 INTEGER, COL38 VARCHAR2(1188),
                        COL39 INT, COL40 VARCHAR2(7043), COL41 CHAR(4632),
                        COL42 ROWID, COL43 CHAR(4495), COL44 VARCHAR(4703),
                        COL45 ROWID, COL46 CHAR(2374), COL47 INTEGER,
                        COL48 VARCHAR(7618), COL49 INTEGER, COL50 INT,
                        COL51 CHARACTER(2325), COL52 ROWID, COL53 NUMBER(14),
                        COL54 CHARACTER(5910), COL55 FLOAT(33), COL56 FLOAT(17),
                        COL57 CHARACTER(549), COL58 VARCHAR(1651), COL59 LONG,
                        COL60 ROWID, COL61 ROWID, COL62 FLOAT(11),
                        COL63 RAW(7062), COL64 ROWID, COL65 NUMBER(35, 18),
                        COL66 CHARACTER(7900), COL67 CHAR(2003), COL68 LONG,
                        COL69 CHARACTER(461), COL70 INT, COL71 FLOAT,
                        COL72 CHAR(4621), COL73 FLOAT(19), COL74 RAW(5029),
                        COL75 DATE, COL76 VARCHAR2(5284), COL77 VARCHAR2(5789),
                        COL78 LONG, COL79 RAW(5661), COL80 VARCHAR(6132),
                        COL81 VARCHAR(4871), COL82 VARCHAR2(6768), COL83 CHAR(6254),
                        COL84 INT, COL85 VARCHAR(1159), COL86 ROWID,
                        COL87 RAW(3053), COL88 DATE, COL89 LONG,
                        COL90 CHARACTER(4843), COL91 LONG, COL92 VARCHAR(2177),
                        COL93 FLOAT(17), COL94 VARCHAR(52), COL95 LONG,
                        COL96 INTEGER, COL97 INT, COL98 INT,
                        COL99 CHARACTER(4178), COL100 RAW(7156), COL101 INT,
                        COL102 LONG, COL103 LONG, COL104 FLOAT(2),
                        COL105 LONG, COL106 VARCHAR2(3768), COL107 INT,
                        COL108 LONG, COL109 RAW(3084), COL110 RAW(3047),
                        COL111 NUMBER(51, 28), COL112 VARCHAR(5533), COL113 INTEGER,
                        COL114 VARCHAR2(1432), COL115 VARCHAR(7896), COL116 ROWID,
                        COL117 CHARACTER(5632), COL118 CHARACTER(2530), COL119 LONG,
                        COL120 ROWID, COL121 INTEGER, COL122 DATE,
                        COL123 ROWID, COL124 DATE, COL125 DATE,
                        COL126 INT, COL127 FLOAT(28), COL128 INT,
                        COL129 NUMBER(10), COL130 RAW(3132), COL131 VARCHAR2(584),
                        COL132 VARCHAR(3653), COL133 NUMBER(14), COL134 DATE,
                        COL135 LONG, COL136 INTEGER, COL137 ROWID,
                        COL138 INTEGER, COL139 DATE, COL140 CHARACTER(7641),
                        COL141 VARCHAR2(5930), COL142 CHAR(4737), COL143 CHARACTER(7886),
                        COL144 VARCHAR2(3917), COL145 ROWID, COL146 NUMBER(6, 5),
                        COL147 INT, COL148 FLOAT(17), COL149 LONG,
                        COL150 FLOAT(18), COL151 INTEGER, COL152 VARCHAR(6585),
                        COL153 LONG, COL154 DATE, COL155 NUMBER(5, 4),
                        COL156 RAW(5507), COL157 NUMBER(39), COL158 INT,
                        COL159 DATE, COL160 FLOAT(25), COL161 NUMBER(45),
                        COL162 RAW(6345), COL163 INT, COL164 INT,
                        COL165 ROWID, COL166 CHAR(2531), COL167 FLOAT(20),
                        COL168 NUMBER(25, 12), COL169 DATE, COL170 CHAR(6235),
                        COL171 CHAR(1988), COL172 RAW(3193), COL173 FLOAT(25),
                        COL174 RAW(4523), COL175 NUMBER(34, 4), COL176 INTEGER,
                        COL177 CHAR(7463), COL178 RAW(7859), COL179 INTEGER,
                        COL180 NUMBER(59, 15), COL181 RAW(109), COL182 FLOAT(32),
                        COL183 ROWID, COL184 NUMBER(4), COL185 INT,
                        COL186 VARCHAR2(7173), COL187 VARCHAR(3875), COL188 ROWID,
                        COL189 NUMBER(50, 24), COL190 ROWID, COL191 VARCHAR(4759),
                        COL192 LONG, COL193 VARCHAR2(6503), COL194 VARCHAR(6964),
                        COL195 FLOAT(28), COL196 CHAR(524), COL197 VARCHAR(5406),
                        COL198 NUMBER(23), COL199 RAW(1456), COL200 INTEGER,
                        COL201 FLOAT(8), COL202 VARCHAR(2095), COL203 VARCHAR2(7300),
                        COL204 NUMBER(17), COL205 DATE, COL206 VARCHAR2(4391),
                        COL207 CHARACTER(4016), COL208 DATE, COL209 DATE,
                        COL210 ROWID, COL211 NUMBER(54, 21), COL212 FLOAT(25),
                        COL213 VARCHAR2(6376), COL214 LONG, COL215 LONG,
                        COL216 RAW(7637), COL217 RAW(5074), COL218 VARCHAR(3891),
                        COL219 VARCHAR2(7472), COL220 FLOAT(35), COL221 NUMBER(*),
                        COL222 CHAR(1680), COL223 VARCHAR2(136), COL224 FLOAT,
                        COL225 LONG, COL226 LONG, COL227 FLOAT(23),
                        COL228 FLOAT(28), COL229 DATE, COL230 DATE,
                        COL231 DATE, COL232 CHAR(6078), COL233 NUMBER(59, 28),
                        COL234 VARCHAR2(3944), COL235 ROWID, COL236 ROWID,
                        COL237 LONG, COL238 NUMBER(38), COL239 ROWID,
                        COL240 RAW(7273), COL241 LONG, COL242 INTEGER,
                        COL243 CHARACTER(7302), COL244 LONG, COL245 ROWID,
                        COL246 VARCHAR2(4199), COL247 NUMBER(38, 9), COL248 CHAR(1854),
                        COL249 RAW(1316), COL250 FLOAT(32), COL251 LONG,
                        COL252 NUMBER(16), COL253 ROWID, COL254 INT,
                        COL255 LONG, COL256 VARCHAR(3098), COL257 CHARACTER(6459),
                        COL258 VARCHAR2(7871), COL259 ROWID, COL260 CHAR(6130),
                        COL261 RAW(4523), COL262 DATE, COL263 CHAR(4540),
                        COL264 VARCHAR2(3474), COL265 DATE, COL266 LONG,
                        COL267 ROWID, COL268 VARCHAR2(7869), COL269 FLOAT(22),
                        COL270 VARCHAR(2625), COL271 DATE, COL272 NUMBER(7),
                        COL273 NUMBER(55), COL274 FLOAT(7), COL275 VARCHAR2(7320),
                        COL276 FLOAT(30), COL277 INTEGER, COL278 LONG,
                        COL279 ROWID, COL280 FLOAT(36), COL281 LONG,
                        COL282 ROWID, COL283 FLOAT(24), COL284 CHARACTER(3965),
                        COL285 CHARACTER(2328), COL286 ROWID, COL287 FLOAT(2),
                        COL288 NUMBER(19, 13), COL289 INT, COL290 INTEGER,
                        COL291 INT, COL292 NUMBER(41), COL293 INT,
                        COL294 LONG, COL295 RAW(5731), COL296 NUMBER(8),
                        COL297 INTEGER, COL298 INT, COL299 VARCHAR2(3044),
                        COL300 RAW(6515), COL301 VARCHAR(3067), COL302 FLOAT(25),
                        COL303 CHAR(7024), COL304 VARCHAR2(3410), COL305 RAW(6014),
                        COL306 LONG, COL307 INT, COL308 VARCHAR(7799),
                        COL309 DATE, COL310 CHARACTER(4347), COL311 CHARACTER(6720),
                        COL312 FLOAT(9), COL313 CHARACTER(4750), COL314 RAW(7255),
                        COL315 NUMBER(12), COL316 INTEGER, COL317 NUMBER(39),
                        COL318 VARCHAR(366), COL319 FLOAT(20), COL320 INTEGER,
                        COL321 FLOAT(23), COL322 DATE, COL323 NUMBER(51, 29),
                        COL324 INT, COL325 NUMBER(6), COL326 INTEGER,
                        COL327 DATE, COL328 FLOAT(11), COL329 CHARACTER(2662),
                        COL330 CHARACTER(50), COL331 FLOAT(24), COL332 INT,
                        COL333 ROWID, COL334 LONG, COL335 FLOAT(31),
                        COL336 VARCHAR(4523), COL337 INT, COL338 INT,
                        COL339 CHARACTER(2713), COL340 INTEGER, COL341 INT,
                        COL342 VARCHAR2(7923), COL343 VARCHAR(6861), COL344 FLOAT(17),
                        COL345 CHARACTER(2907), COL346 INTEGER, COL347 INTEGER,
                        COL348 CHAR(3617), COL349 VARCHAR2(6943), COL350 RAW(6566),
                        COL351 INTEGER, COL352 RAW(6292), COL353 INTEGER,
                        COL354 INT, COL355 VARCHAR(615), COL356 INTEGER,
                        COL357 NUMBER(57), COL358 INTEGER, COL359 FLOAT(24),
                        COL360 VARCHAR2(7743), COL361 RAW(7203), COL362 VARCHAR2(7515),
                        COL363 RAW(3011), COL364 INTEGER, COL365 DATE,
                        COL366 CHAR(7349), COL367 NUMBER(50, 17), COL368 VARCHAR2(2589),
                        COL369 INT, COL370 VARCHAR(4766), COL371 VARCHAR(1267),
                        COL372 FLOAT(31), COL373 VARCHAR2(3978), COL374 ROWID,
                        COL375 ROWID, COL376 RAW(246), COL377 INT,
                        COL378 VARCHAR(323), COL379 RAW(865), COL380 FLOAT(34),
                        COL381 NUMBER(50), COL382 ROWID, COL383 FLOAT(12),
                        COL384 CHAR(4857), COL385 ROWID, COL386 CHARACTER(1546),
                        COL387 CHARACTER(7161), COL388 NUMBER(37, 21), COL389 VARCHAR2(7442),
                        COL390 ROWID, COL391 LONG, COL392 INTEGER,
                        COL393 VARCHAR(7957), COL394 INT, COL395 RAW(4085),
                        COL396 FLOAT(14), COL397 CHAR(120), COL398 ROWID,
                        COL399 VARCHAR2(7177), COL400 NUMBER(12, 4), COL401 INT,
                        COL402 LONG, COL403 NUMBER(6, 2), COL404 FLOAT(3),
                        COL405 NUMBER(50, 17), COL406 RAW(1327), COL407 CHAR(272),
                        COL408 INT, COL409 VARCHAR2(6788), COL410 CHARACTER(2593),
                        COL411 ROWID, COL412 DATE, COL413 INTEGER,
                        COL414 INT, COL415 INT, COL416 VARCHAR2(1706),
                        COL417 NUMBER(53, 23), COL418 CHAR(1328), COL419 RAW(7849),
                        COL420 CHAR(643), COL421 CHAR(1385), COL422 FLOAT(22),
                        COL423 ROWID, COL424 NUMBER(42), COL425 VARCHAR(1156),
                        COL426 NUMBER(61, 23), COL427 CHARACTER(5381), COL428 NUMBER(61, 14),
                        COL429 CHAR(7638), COL430 FLOAT(15), COL431 RAW(933),
                        COL432 RAW(249), COL433 VARCHAR(5058), COL434 ROWID,
                        COL435 FLOAT(2), COL436 INT, COL437 VARCHAR2(4604),
                        COL438 LONG, COL439 CHARACTER(761), COL440 NUMBER(24, 4),
                        COL441 CHAR(5041), COL442 CHARACTER(240), COL443 INT,
                        COL444 CHAR(6620), COL445 NUMBER(29), COL446 DATE,
                        COL447 DATE, COL448 NUMBER(15, 10), COL449 VARCHAR2(6392),
                        COL450 INT, COL451 NUMBER(5, 1), COL452 VARCHAR(3900),
                        COL453 CHAR(7637), COL454 ROWID, COL455 DATE,
                        COL456 LONG, COL457 CHAR(1090), COL458 CHAR(3862),
                        COL459 FLOAT(9), COL460 INT, COL461 FLOAT(2),
                        COL462 INTEGER, COL463 CHARACTER(815), COL464 INTEGER,
                        COL465 ROWID, COL466 LONG, COL467 LONG,
                        COL468 LONG, COL469 RAW(7285), COL470 ROWID,
                        COL471 CHAR(3891), COL472 INTEGER, COL473 CHARACTER(2067),
                        COL474 FLOAT(10), COL475 CHAR(2427), COL476 ROWID,
                        COL477 VARCHAR(6429), COL478 VARCHAR2(1146), COL479 INTEGER,
                        COL480 INT, COL481 NUMBER(37), COL482 VARCHAR2(2092),
                        COL483 ROWID, COL484 NUMBER(62), COL485 CHARACTER(4996),
                        COL486 LONG, COL487 ROWID, COL488 INT,
                        COL489 VARCHAR(216), COL490 INTEGER, COL491 LONG,
                        COL492 INTEGER, COL493 FLOAT(37), COL494 NUMBER(10),
                        COL495 FLOAT(34), COL496 ROWID, COL497 FLOAT(5),
                        COL498 DATE, COL499 VARCHAR(3503), COL500 DATE,
                        COL501 VARCHAR2(4756), COL502 RAW(6032), COL503 INTEGER,
                        COL504 CHAR(3790), COL505 CHAR(6523), COL506 LONG,
                        COL507 CHAR(1694), COL508 CHAR(2410), COL509 RAW(498),
                        COL510 CHAR(7096), COL511 INTEGER, COL512 DATE,
                        COL513 CHARACTER(1122), COL514 INT, COL515 ROWID,
                        COL516 INT, COL517 RAW(1920), COL518 LONG,
                        COL519 VARCHAR(3109), COL520 NUMBER(47), COL521 CHAR(3057),
                        COL522 FLOAT(25), COL523 FLOAT(25), COL524 CHARACTER(3898),
                        COL525 ROWID, COL526 ROWID, COL527 FLOAT(29),
                        COL528 RAW(1308), COL529 FLOAT(21), COL530 VARCHAR2(5359),
                        COL531 INTEGER, COL532 INTEGER, COL533 VARCHAR(5761),
                        COL534 LONG, COL535 INT, COL536 FLOAT(21),
                        COL537 CHARACTER(3), COL538 INTEGER, COL539 FLOAT(11),
                        COL540 DATE, COL541 ROWID, COL542 LONG,
                        COL543 VARCHAR2(5610), COL544 LONG, COL545 RAW(4015),
                        COL546 DATE, COL547 DATE, COL548 DATE,
                        COL549 INT, COL550 NUMBER(28, 3), COL551 INT,
                        COL552 DATE, COL553 INT, COL554 INT,
                        COL555 VARCHAR2(1891), COL556 CHAR(5033), COL557 INT,
                        COL558 FLOAT(25), COL559 FLOAT(10), COL560 VARCHAR(4429),
                        COL561 INTEGER, COL562 VARCHAR(7444), COL563 VARCHAR2(2013),
                        COL564 CHAR(7916), COL565 INTEGER, COL566 DATE,
                        COL567 CHARACTER(5250), COL568 ROWID, COL569 FLOAT(1),
                        COL570 INTEGER, COL571 INT, COL572 NUMBER(60),
                        COL573 FLOAT(33), COL574 CHAR(3011), COL575 ROWID,
                        COL576 CHARACTER(4870), COL577 RAW(6491), COL578 FLOAT(16),
                        COL579 ROWID, COL580 DATE, COL581 LONG,
                        COL582 VARCHAR2(7555), COL583 LONG, COL584 INT,
                        COL585 CHARACTER(5801), COL586 INTEGER, COL587 INT,
                        COL588 VARCHAR2(590), COL589 CHARACTER(3581), COL590 INTEGER,
                        COL591 RAW(3114), COL592 INTEGER, COL593 VARCHAR(2716),
                        COL594 INT, COL595 CHAR(3495), COL596 CHARACTER(4066),
                        COL597 RAW(4788), COL598 VARCHAR(861), COL599 CHARACTER(1997),
                        COL600 VARCHAR(1382), COL601 DATE, COL602 VARCHAR2(274),
                        COL603 NUMBER(41), COL604 ROWID, COL605 CHAR(7640),
                        COL606 FLOAT(18), COL607 LONG, COL608 NUMBER(14),
                        COL609 ROWID, COL610 INT, COL611 VARCHAR(6398),
                        COL612 RAW(6319), COL613 RAW(1718), COL614 VARCHAR(4370),
                        COL615 RAW(3827), COL616 VARCHAR(3354), COL617 ROWID,
                        COL618 FLOAT(21), COL619 CHAR(1829), COL620 CHARACTER(3783),
                        COL621 RAW(7183), COL622 FLOAT(28), COL623 CHARACTER(1774),
                        COL624 INT, COL625 INTEGER, COL626 DATE,
                        COL627 RAW(2232), COL628 ROWID, COL629 LONG,
                        COL630 CHAR(5209), COL631 VARCHAR2(5151), COL632 INTEGER,
                        COL633 INTEGER, COL634 VARCHAR(4807), COL635 FLOAT,
                        COL636 FLOAT(5), COL637 VARCHAR2(1529), COL638 INTEGER,
                        COL639 INT, COL640 DATE, COL641 FLOAT(11),
                        COL642 FLOAT(6), COL643 RAW(5541), COL644 VARCHAR2(2301),
                        COL645 INT, COL646 RAW(7825), COL647 INTEGER,
                        COL648 RAW(1905), COL649 INT, COL650 VARCHAR(3161),
                        COL651 FLOAT(30), COL652 FLOAT(18), COL653 CHARACTER(4734),
                        COL654 NUMBER(11, 9), COL655 CHAR(6085), COL656 NUMBER(43, 14),
                        COL657 NUMBER(27, 4), COL658 VARCHAR2(5620), COL659 NUMBER(15, 12),
                        COL660 FLOAT(33), COL661 LONG, COL662 FLOAT(11),
                        COL663 LONG, COL664 LONG, COL665 FLOAT(15),
                        COL666 LONG, COL667 VARCHAR(3149), COL668 VARCHAR(972),
                        COL669 INTEGER, COL670 CHAR(2479), COL671 INT,
                        COL672 ROWID, COL673 ROWID, COL674 FLOAT(15),
                        COL675 DATE, COL676 VARCHAR(2567), COL677 ROWID,
                        COL678 VARCHAR(3189), COL679 CHAR(5510), COL680 CHARACTER(3740),
                        COL681 INT, COL682 ROWID, COL683 INT,
                        COL684 VARCHAR(6351), COL685 DATE, COL686 NUMBER(47, 31),
                        COL687 VARCHAR2(1039), COL688 ROWID, COL689 LONG,
                        COL690 FLOAT(8), COL691 VARCHAR2(1814), COL692 INTEGER,
                        COL693 FLOAT(13), COL694 CHAR(5785), COL695 VARCHAR(569),
                        COL696 FLOAT(33), COL697 VARCHAR(5178), COL698 VARCHAR2(1171),
                        COL699 VARCHAR(5463), COL700 CHARACTER(6152), COL701 INTEGER,
                        COL702 VARCHAR2(671), COL703 DATE, COL704 DATE,
                        COL705 NUMBER(16, 0), COL706 LONG, COL707 CHARACTER(3627),
                        COL708 LONG, COL709 CHAR(6857), COL710 VARCHAR2(4007),
                        COL711 LONG, COL712 CHARACTER(2979), COL713 ROWID,
                        COL714 INTEGER, COL715 ROWID, COL716 INT,
                        COL717 DATE, COL718 CHARACTER(5384), COL719 INTEGER,
                        COL720 RAW(3105), COL721 CHARACTER(3765), COL722 VARCHAR(5028),
                        COL723 LONG, COL724 NUMBER(4, 1), COL725 INT,
                        COL726 CHAR(3566), COL727 LONG, COL728 INT,
                        COL729 NUMBER(51, 11), COL730 LONG, COL731 NUMBER(43, 28),
                        COL732 NUMBER(55), COL733 LONG, COL734 ROWID,
                        COL735 VARCHAR2(7286), COL736 RAW(4934), COL737 INT,
                        COL738 CHARACTER(4196), COL739 VARCHAR2(2147), COL740 CHAR(1667),
                        COL741 ROWID, COL742 DATE, COL743 LONG,
                        COL744 VARCHAR2(785), COL745 NUMBER(56), COL746 ROWID,
                        COL747 VARCHAR2(1513), COL748 CHARACTER(7735), COL749 DATE,
                        COL750 DATE, COL751 CHAR(5328), COL752 INTEGER,
                        COL753 NUMBER(37, 23), COL754 INT, COL755 NUMBER(44),
                        COL756 NUMBER(54), COL757 LONG, COL758 VARCHAR2(3531),
                        COL759 VARCHAR2(3301), COL760 FLOAT(30), COL761 NUMBER(32),
                        COL762 DATE, COL763 LONG, COL764 CHARACTER(1095),
                        COL765 CHARACTER(281), COL766 FLOAT(28), COL767 FLOAT(31),
                        COL768 RAW(2315), COL769 FLOAT, COL770 INT,
                        COL771 CHAR(4985), COL772 DATE, COL773 INT,
                        COL774 RAW(254), COL775 LONG, COL776 INT,
                        COL777 FLOAT(35), COL778 NUMBER(40), COL779 VARCHAR(7483),
                        COL780 NUMBER(1), COL781 INTEGER, COL782 LONG,
                        COL783 DATE, COL784 VARCHAR2(1422), COL785 FLOAT(28),
                        COL786 NUMBER(1, 0), COL787 CHARACTER(1421), COL788 ROWID,
                        COL789 FLOAT(19), COL790 VARCHAR(1486), COL791 RAW(7951),
                        COL792 ROWID, COL793 CHARACTER(3488), COL794 VARCHAR2(6774),
                        COL795 INTEGER, COL796 CHAR(2642), COL797 RAW(7947),
                        COL798 RAW(1800), COL799 NUMBER(*), COL800 CHARACTER(4631),
                        COL801 CHARACTER(4855), COL802 INT, COL803 INTEGER,
                        COL804 CHARACTER(3069), COL805 RAW(3825), COL806 LONG,
                        COL807 CHAR(3352), COL808 FLOAT(25), COL809 CHAR(3436),
                        COL810 RAW(2807), COL811 NUMBER(48), COL812 NUMBER(56),
                        COL813 DATE, COL814 INT, COL815 LONG,
                        COL816 INT, COL817 FLOAT(3), COL818 VARCHAR2(1607),
                        COL819 FLOAT(16), COL820 VARCHAR2(1283), COL821 DATE,
                        COL822 DATE, COL823 RAW(6955), COL824 ROWID,
                        COL825 NUMBER(2, 1), COL826 FLOAT(4), COL827 NUMBER(17),
                        COL828 NUMBER(3, 2), COL829 CHAR(7715), COL830 FLOAT(34),
                        COL831 RAW(967), COL832 CHAR(1316), COL833 INT,
                        COL834 VARCHAR2(3169), COL835 VARCHAR2(1392), COL836 LONG,
                        COL837 CHAR(3401), COL838 INT, COL839 CHARACTER(2946),
                        COL840 FLOAT(24), COL841 INTEGER, COL842 FLOAT(27),
                        COL843 INTEGER, COL844 NUMBER(28, 0), COL845 CHAR(7510),
                        COL846 CHAR(6264), COL847 CHARACTER(7390), COL848 RAW(5655),
                        COL849 DATE, COL850 CHAR(7554), COL851 CHAR(6394),
                        COL852 RAW(916), COL853 INTEGER, COL854 CHARACTER(1515),
                        COL855 CHARACTER(2071), COL856 RAW(2809), COL857 VARCHAR2(2422),
                        COL858 CHARACTER(5120), COL859 CHARACTER(2350), COL860 ROWID,
                        COL861 FLOAT(25), COL862 VARCHAR(3676), COL863 CHAR(3548),
                        COL864 FLOAT(25), COL865 VARCHAR2(3812), COL866 INTEGER,
                        COL867 DATE, COL868 CHAR(2694), COL869 RAW(7644),
                        COL870 ROWID, COL871 CHARACTER(1928), COL872 INT,
                        COL873 ROWID, COL874 DATE, COL875 CHARACTER(5166),
                        COL876 VARCHAR2(1851), COL877 RAW(228), COL878 DATE,
                        COL879 RAW(280), COL880 VARCHAR2(586), COL881 DATE,
                        COL882 DATE, COL883 LONG, COL884 LONG,
                        COL885 VARCHAR(7922), COL886 DATE, COL887 LONG,
                        COL888 DATE, COL889 NUMBER(41, 29), COL890 VARCHAR(5923),
                        COL891 INT, COL892 CHAR(6589), COL893 LONG,
                        COL894 FLOAT(19), COL895 CHARACTER(2820), COL896 INTEGER,
                        COL897 VARCHAR2(5212), COL898 FLOAT(21), COL899 LONG,
                        COL900 LONG, COL901 LONG, COL902 FLOAT(18),
                        COL903 CHARACTER(98), COL904 DATE, COL905 INTEGER,
                        COL906 DATE, COL907 DATE, COL908 ROWID,
                        COL909 VARCHAR(3833), COL910 FLOAT, COL911 FLOAT(19),
                        COL912 CHARACTER(1710), COL913 VARCHAR(7613), COL914 RAW(4011),
                        COL915 CHAR(5508), COL916 RAW(116), COL917 NUMBER(59, 33),
                        COL918 ROWID, COL919 VARCHAR(4161), COL920 DATE,
                        COL921 INT, COL922 VARCHAR(7928), COL923 ROWID,
                        COL924 RAW(4594), COL925 ROWID, COL926 FLOAT(21),
                        COL927 DATE, COL928 CHARACTER(1935), COL929 INTEGER,
                        COL930 VARCHAR(5253), COL931 CHARACTER(5045), COL932 ROWID,
                        CONSTRAINT pk PRIMARY  KEY (
                                COL1, COL2, COL3, COL4, COL5, COL6, COL7,
                                COL8, COL9, COL10 ) )</CallString>
<Error>
<ErrorCode>-2000</ErrorCode>
<ErrorMessage>Row too long</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB103
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="104" Responsible="Oleg Luzginov" TestType="negative">
<Comment>duplicate column names; see COL2</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB104 (
                                        COL1 DATE,
                                        COL2 VARCHAR(1514),
                                        COL2 VARCHAR(1311),
                                        COL4 VARCHAR(3544),
                                        COL5 VARCHAR2(1838),
                                        COL6 FLOAT(36),
                                        COL7 INTEGER,
                                        COL8 INTEGER,
                                        COL9 RAW(3634),
                                        COL10 ROWID,
                                        COL11 DATE,
                                        COL12 RAW(316),
                                        COL13 LONG,
                                        COL14 VARCHAR2(531),
                                        COL15 VARCHAR2(4000),
                                        COL16 INT,
                                        COL17 FLOAT(35) )
				</CallString>
<Error>
<ErrorCode>-6001</ErrorCode>
<ErrorMessage>Duplicate column name:COL2</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB104
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="105" Responsible="Oleg Luzginov" TestType="negative">
<Comment>wrong delimeter between the columns; see COL2</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB105 (
                                        COL1 CHARACTER(991),
                                        COL2 CHAR(6162) _
                                        COL3 VARCHAR(6135),
                                        COL4 FLOAT(12) )
				</CallString>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>Missing delimiter: )</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB105
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="106" Responsible="Oleg Luzginov" TestType="negative">
<Comment>missing delimeter; see COL6 and COL7</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB106 (
                                        COL1 CHAR(679),
                                        COL2 LONG,
                                        COL3 VARCHAR(3497),
                                        COL5 INTEGER,
                                        COL6 INT
                                        COL7 CHARACTER(1961),
                                        COL9 LONG,
                                        COL10 DATE,
                                        COL11 INTEGER,
                                        COL12 VARCHAR(3130),
                                        COL13 NUMERIC(24),
                                        COL14 INTEGER,
                                        COL15 CHAR(6055),
                                        COL16 CHARACTER(3562),
                                        COL17 DATE,
                                        COL18 CHAR(4395) )
				</CallString>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>Missing delimiter: )</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB106
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="107" Responsible="Oleg Luzginov" TestType="negative">
<Comment>column identifier without one double quota; see COL8</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB107 (
                                        COL1 RAW(3543),
                                        COL2 ROWID,
                                        COL3 INT,
                                        COL4 RAW(7165),
                                        COL5 DATE,
                                        COL6 LONG,
                                        COL7 NUMBER(20),
                                        COL8 " CHAR(1312),
                                        COL9 ROWID,
                                        COL10 ROWID,
                                        COL11 RAW(469),
                                        COL12 VARCHAR(168),
                                        COL13 INT,
                                        COL14 LONG,
                                        COL15 LONG,
                                        COL16 CHARACTER(6761),
                                        COL17 NUMBER(25) )
				</CallString>
<Error>
<ErrorCode>-3014</ErrorCode>
<ErrorMessage>Invalid end of SQL statement</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB107
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="108" Responsible="Oleg Luzginov" TestType="negative">
<Comment>without delimiter between the column name and type; see COL1</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB108 (
                                        COL1CHAR(4603),
                                        COL2 CHAR(11),
                                        COL3 CHAR(6416),
                                        COL4 NUMBER(32) )
				</CallString>
<Error>
<ErrorCode>-3002</ErrorCode>
<ErrorMessage>Invalid datatype</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB108
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="109" Responsible="Oleg Luzginov" TestType="negative">
<Comment>too long column indentifier; see COL3</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB109 (
                                        COL1 VARCHAR2(4102),
                                        COL2 CHARACTER(8000),
                                        COL3 NUMBER(65) )
				</CallString>
<Error>
<ErrorCode>-3020</ErrorCode>
<ErrorMessage>Invalid length for this data type:COL3</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB109
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="119" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>table_name too long or starting with a character which is not allowed at the first position
oracle-mode: only 30 digits are allowed</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>

	CREATE TABLE asdf_asdf_asdf_asdf_asdf_asdf_asd (COL1 INT)</CallString>
<Error>
<ErrorCode>-2014</ErrorCode>
<ErrorMessage>[-2014] (at 17): Identifier too long</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

	CREATE TABLE 2TAB (COL1 INT)</CallString>
<Error>
<ErrorCode>-3009</ErrorCode>
<ErrorMessage>[-3009] (at 17): Invalid table name</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

	CREATE TABLE _TAB119 (COL1 CHAR)</CallString>
<Error>
<ErrorCode>-3009</ErrorCode>
<ErrorMessage>[-3009] (at 17): Invalid table name</ErrorMessage>
</Error>
</Statement>
</Run>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="120" Responsible="Oleg Luzginov" TestType="negative">
<Comment>illegal datatype; see COL4</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB120 (
                                        COL1 FLOAT(3),
                                        COL2 VARCHAR2(5205),
                                        COL3 INT,
                                        COL4 CHAR__(653),
                                        COL5 VARCHAR(2220),
                                        COL6 INTEGER,
                                        COL7 DATE,
                                        COL8 CHARACTER(6479),
                                        COL9 DATE,
                                        COL10 CHAR(3985),
                                        COL11 ROWID,
                                        COL12 NUMBER(30),
                                        COL13 NUMBER(17),
                                        COL14 DATE,
                                        COL15 DATE,
                                        COL16 VARCHAR2(4505),
                                        COL17 INTEGER )
				</CallString>
<Error>
<ErrorCode>-3002</ErrorCode>
<ErrorMessage>Invalid datatype</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB120
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="121" Responsible="Oleg Luzginov" TestType="negative">
<Comment>datatype without delimeter before size; see COL2</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB121 (
                                        COL1 ROWID,
                                        COL2 CHARACTER 7252),
                                        COL3 LONG )
				</CallString>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>Missing delimiter: )</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB121
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="122" Responsible="Oleg Luzginov" TestType="negative">
<Comment>the datatype FLOAT is always represented with 20 significant digits in SAP DB,
                but there are no errors with illegal size of the datatype FLOAT; see column COL9</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB122 (
                                        COL1 VARCHAR2(10),
                                        COL2 ROWID,
                                        COL3 INTEGER,
                                        COL4 RAW(1949),
                                        COL5 RAW(3005),
                                        COL6 CHARACTER(6026),
                                        COL7 ROWID,
                                        COL8 ROWID,
                                        COL9 FLOAT(2346782363453453421339),
                                        COL10 ROWID,
                                        COL11 VARCHAR2(7666),
                                        COL12 INT,
                                        COL13 ROWID,
                                        COL14 DATE,
                                        COL15 INT,
                                        COL16 RAW(3890),
                                        COL17 VARCHAR2(1770) )
				</CallString>
<Error>
<ErrorCode>-3020</ErrorCode>
<ErrorMessage>Invalid length for this data type:COL9</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB122
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="123" Responsible="Oleg Luzginov" TestType="negative">
<Comment>illegal size, negative integer; see COL4</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB123 (
                                        COL1 LONG,
                                        COL2 CHAR(2868),
                                        COL3 DATE,
                                        COL4 NUMBER(-3),
                                        COL5 CHAR(4371),
                                        COL6 INTEGER )
				</CallString>
<Error>
<ErrorCode>-5009</ErrorCode>
<ErrorMessage>Missing integer</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB123
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="124" Responsible="Oleg Luzginov" TestType="negative">
<Comment>illegal size, too long RAW; see COL9</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB124 (
                                        COL1 LONG,
                                        COL2 LONG,
                                        COL3 DATE,
                                        COL4 ROWID,
                                        COL5 INTEGER,
                                        COL6 CHAR(3643),
                                        COL7 NUMBER(4),
                                        COL8 VARCHAR(3342),
                                        COL9 RAW(8001),
                                        COL10 VARCHAR(6622),
                                        COL11 INTEGER,
                                        COL12 INT,
                                        COL13 CHAR(2246),
                                        COL14 INTEGER,
                                        COL15 VARCHAR2(3792),
                                        COL16 VARCHAR(2926),
                                        COL17 CHARACTER(4268) )
				</CallString>
<Error>
<ErrorCode>-3020</ErrorCode>
<ErrorMessage>Invalid length for this data type:COL9</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB124
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="127" Responsible="Oleg Luzginov" TestType="negative">
<Comment>illegal length of the number datatype; see COL15</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB127 (
                                        COL1 ROWID,
                                        COL2 VARCHAR(1235),
                                        COL3 FLOAT(*),
                                        COL4 INTEGER,
                                        COL5 LONG,
                                        COL6 FLOAT(4),
                                        COL7 VARCHAR2(2306),
                                        COL8 CHAR(3498),
                                        COL9 NUMBER(3),
                                        COL10 INTEGER,
                                        COL11 RAW(1862),
                                        COL12 CHARACTER(224),
                                        COL13 INT,
                                        COL14 CHARACTER(2026),
                                        COL15 NUMBER(1,65),
                                        COL16 RAW(5215),
                                        COL17 FLOAT(28),
                                        COL18 LONG,
                                        COL19 VARCHAR2(5159) )
				</CallString>
<Error>
<ErrorCode>-3020</ErrorCode>
<ErrorMessage>Invalid length for this data type:COL15</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB127
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="128" Responsible="Oleg Luzginov" TestType="negative">
<Comment>illegal definition of the float; see COL1</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB128 (
                                        COL1 FLOAT(2,1),
                                        COL2 CHAR(2582),
                                        COL3 CHARACTER(4090),
                                        COL5 LONG )
				</CallString>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>Missing delimiter: ).</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB128
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="129" Responsible="Oleg Luzginov" TestType="negative">
<Comment>illegal name of datatype; see COL4</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB129 (
                                        COL1 RAW(4305),
                                        COL2 DATE,
                                        COL3 ROWID,
                                        COL4 -NUMBER(27),
                                        COL5 LONG,
                                        COL6 VARCHAR2(7741),
                                        COL7 LONG,
                                        COL8 FLOAT(35),
                                        COL9 RAW(2195),
                                        COL10 FLOAT(28),
                                        COL11 INTEGER,
                                        COL12 INTEGER,
                                        COL13 INT,

                                        COL14 CHARACTER(2878),
                                        COL15 FLOAT(10),
                                        COL16 CHAR(7975),
                                        COL17 INT,
                                        COL18 CHARACTER(6840),
                                        COL19 LONG )
				</CallString>
<Error>
<ErrorCode>-3002</ErrorCode>
<ErrorMessage>Invalid datatype</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB129
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="139" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>trying to define a default value for a column 
when creating the column´s table with as_select</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
create table tab139n_1 (s1 int, s2 char (10), s3 long, s4 float default   0.25) 
    </CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
    insert into tab139n_1 values (5, 'morning', NULL, 10) 
    </CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
        insert into tab139n_1 values (7, 'noon', NULL, 10) 
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
   insert into tab139n_1 values (29, 'afternoon', NULL, 100)
    </CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
    create table tab139n_2 (s4 default   0.25  not  null ) as select * from tab139n_1
    </CallString>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>[-5016] (at 33): Missing delimiter: )</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="true">
<CallString>
    
select * from tab139n_2
</CallString>
<Error>
<ErrorCode>-942</ErrorCode>
<ErrorMessage>[-942] (at 21): Unknown table name:TAB139N_2</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
drop table tab139n_1
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
drop table tab139n_2</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="140" Responsible="" TestType="negative">
<Comment/>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString/>
</Statement>
</Run>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="141" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>trying to define columns and further on to add columns with create_table_as_select</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
create table tab141n_1 (s1 int, s2 char (10), s3 long, s4 float) 
    </CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
    insert into tab141n_1 values (5, 'morning', NULL, 10) 
    </CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
        insert into tab141n_1 values (7, 'noon', NULL, 10) 
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
   insert into tab141n_1 values (29, 'afternoon', NULL, 100)
    </CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
    create table tab141n_2 (s5 int) as select * from tab141n_1
    </CallString>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>[-5016] (at 33): Missing delimiter: )</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="true">
<CallString>
    
select * from tab141n_2
</CallString>
<Error>
<ErrorCode>-942</ErrorCode>
<ErrorMessage>[-942] (at 21): Unknown table name:TAB141N_2</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
drop table tab141n_1
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
drop table tab141n_2</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="142" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>keyword typed incorrectly</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
			
				CREATE TABLE tab142n_1 (
                                        COL1 VARCHAR2(25) NOT NULL,
                                        COL2 CHAR,
                                        COL3 CHAR(2000),
                                        COL4 NUMBER(24),
                                        COL5 NUMBER(38),
                                        COL6 NUMBER(38,38),
                                        COL7 NUMBER(*),
                                        COL8 NUMBER(*,20),
                                        COL9 INT,
                                        COL10 DATE,
                                        CONSTRAINT CONSTR1
                                                PRIMARY KEY (COL1))
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString> 
	insert into tab142n_1 (col1, col2, col3, col6) values ('number1', 'a', 'toys', null)

</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

	insert into tab142n_1 (col1, col2, col3, col6) values ('number2', 'a', 'toys', null)



</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>	select COUNT(*) COUNT1 FROM tab142n_1</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>COUNT1</ColumnName>
<ColumnType>INT</ColumnType>
</ColumnDefinition>
<Row>
<Value>2</Value>
</Row>
</ResultSet>
</Statement>
<Statement callable="false" ignore="false" verify="true">
<CallString>

	 create table tab142n_2 as select distincts col2, col3, col6, col10 from tab142n_1


</CallString>
<Error>
<ErrorCode>-4005</ErrorCode>
<ErrorMessage>[-4005] (at 38): Unknown column name:DISTINCTS</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>

	DROP TABLE tab142n_1
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>

	DROP TABLE tab142n_2</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="143" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>datatypes of referenced and referencing columns do not match</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>

		CREATE TABLE TAB143N_1 ( 
			     COL1 INT unique, 
		   	     COL2 CHAR(32),
		             COL3 LONG,
		   	     COL4 LONG,
			     COL5 VARCHAR unique,
			     COL6 CHAR,
                             COL7 INT )</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>

		CREATE TABLE TAB143N_2 ( 
			     COL1 INT, 
		   	     COL2 CHAR(32),
		             COL3 NUMBER,
		   	     COL4 LONG,
			     COL5 DATE,
			     COL6 CHAR,
                             COL7 INT,
			     PRIMARY KEY (COL3))</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

		CREATE TABLE TAB143N_3 ( 
			     COL1 INT, 
		   	     COL2 CHAR(32),
		             COL3 DATE CONSTRAINT CONSTR143N REFERENCES TAB143N_2,
			     PRIMARY KEY (COL1))</CallString>
<Error>
<ErrorCode>-8006</ErrorCode>
<ErrorMessage>[-8006] (at 89): Data types must be compatible</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
	
	DROP TABLE TAB143N_1</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
	
	DROP TABLE TAB143N_2</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="144" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>typing each of the keywords unique, distinct in one statement</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
			
				CREATE TABLE tab144n_1 (
                                        COL1 VARCHAR2(25) NOT NULL,
                                        COL2 CHAR,
                                        COL3 CHAR(2000),
                                        COL4 NUMBER(24),
                                        COL5 NUMBER(38),
                                        COL6 NUMBER(38,38),
                                        COL7 NUMBER(*),
                                        COL8 NUMBER(*,20),
                                        COL9 INT,
                                        COL10 DATE,
                                        CONSTRAINT CONSTR1
                                                PRIMARY KEY (COL1))
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString> 
	insert into tab144n_1 (col1, col2, col3, col6) values ('number1', 'a', 'toys', null)

</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

	insert into tab144n_1 (col1, col2, col3, col6) values ('number2', 'a', 'toys', null)

</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
	select COUNT(*) COUNT1 FROM tab144n_1
</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>COUNT1</ColumnName>
<ColumnType>INT</ColumnType>
</ColumnDefinition>
<Row>
<Value>2</Value>
</Row>
</ResultSet>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>

	 create table tab144n_2 as select distinct unique col2, col3, col6, col10 from tab144n_1
  </CallString>
<Error>
<ErrorCode>-4005</ErrorCode>
<ErrorMessage>[-4005] (at 47): Unknown column name:UNIQUE</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
 create table tab144n_2 as select  unique distinct col2, col3, col6, col10 from tab144n_1

</CallString>
<Error>
<ErrorCode>-4005</ErrorCode>
<ErrorMessage>[-4005] (at 44): Unknown column name:DISTINCT</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>

	DROP TABLE tab144n_1
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>

	DROP TABLE tab144n_2</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="145" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>default value is outside of specification in check_constraint</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
		CREATE TABLE tab145n_1 (
                                        COL0 NUMBER(32) PRIMARY KEY,
                                        COL1 VARCHAR2(4000),
                                        COL2 CHAR default 'e'
                                              CHECK (COL2 IS NOT NULL
                                                   AND  COL2  NOT IN ('F', 'R', '5')) ,
                                        COL3 CHAR(2000),
                                        COL4 NUMBER(64) default 4003
                                              CHECK (COL4 &gt; 5000),
                                        COL5 NUMBER(32))</CallString>
<Error>
<ErrorCode>-8009</ErrorCode>
<ErrorMessage>[-8009] (at 569): DEFAULT value must be in constraint specification:COL4</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>drop table tab145n_1</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="150" Responsible="Oleg Luzginov" TestType="negative">
<Comment>the referenced table does not exist</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB150 (
                                COL1     FLOAT,
                                COL2      NUMBER(38),
                                COL3  LONG,
                                COL4  LONG,
                                COL5  NUMBER(38,38)
                                   CONSTRAINT fk_BASE
                                      REFERENCES  TAB150_BASE(COL1_BASE) )
				</CallString>
<Error>
<ErrorCode>-942</ErrorCode>
<ErrorMessage>Unknown table name:TAB150_BASE</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB150
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="151" Responsible="Oleg Luzginov" TestType="negative">
<Comment>the referenced table does not have key and has no index</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB151_BASE (
                                        COL1_BASE  CHAR(4),
                                        COL2_BASE RAW(1000),
                                        COL3_BASE  LONG,
                                        COL4_BASE  LONG,
                                        COL5_BASE NUMBER(38,38),
                                        COL6_BASE DATE
                                )
				</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB151 (
                                        COL1     NUMBER(4),
                                        COL2  CHAR(4)
                                                CONSTRAINT fk_BASE
                                                REFERENCES  TAB151_BASE(COL1_BASE),
                                        COL3 RAW(1000),
                                        COL4  LONG,
                                        COL5  LONG,
                                        COL6      NUMBER(*)
                                    )
				</CallString>
<Error>
<ErrorCode>-8030</ErrorCode>
<ErrorMessage>Column must be indexed</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB151_BASE
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="152" Responsible="Oleg Luzginov" TestType="negative">
<Comment>key with too few columns as explicitly specified; see constraint fk_BASE</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB152_BASE
                                ( COL1_BASE  DATE,
                                  COL2_BASE  VARCHAR(100),
                                  COL3_BASE  FLOAT,
                                  COL4_BASE  NUMBER(38),
                                  COL5_BASE  LONG,
                                  CONSTRAINT pk_BASE
                                      PRIMARY  KEY (COL1_BASE, COL2_BASE) )
				</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB152
                                ( COL1  VARCHAR(100),
                                  COL2  DATE
                                  CONSTRAINT fk_BASE
                                      REFERENCES  TAB152_BASE (COL1_BASE, COL2_BASE),
                                  COL3 RAW(1000),
                                  COL4  LONG,
                                  COL5  LONG,
                                  COL6 NUMBER(38,38)
                                  )
				</CallString>
<Error>
<ErrorCode>-1201</ErrorCode>
<ErrorMessage>Too few columns</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB152_BASE
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="153" Responsible="Oleg Luzginov" TestType="negative">
<Comment>key with too few columns as implicitly specified</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB153_BASE
                                ( COL1_BASE  NUMBER(10,10),
                                  COL2_BASE  NUMBER(38),
                                  COL3_BASE  VARCHAR(50),
                                  COL4_BASE  FLOAT,
                                  COL5_BASE  NUMBER(4),
                                  CONSTRAINT pk_BASE
                                      PRIMARY  KEY (COL1_BASE, COL2_BASE) )
				</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB153
                                ( COL1  LONG,
                                  COL2  NUMBER(10,10)
                                  CONSTRAINT fk_BASE
                                      REFERENCES  TAB153_BASE,
                                  COL3 DATE,
                                  COL4 CHAR(255) )
				</CallString>
<Error>
<ErrorCode>-1201</ErrorCode>
<ErrorMessage>Too few columns</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB153_BASE
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="154" Responsible="Oleg Luzginov" TestType="negative">
<Comment>key with column whose datatypes differ to referencing columns; see constraint fk_BASE</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB154_BASE
                                ( COL1_BASE  NUMBER(38,38),
                                  COL2_BASE  CHAR(100),
                                  COL3_BASE RAW,
                                  COL4_BASE  LONG,
                                  COL5_BASE NUMBER(38),
                                  COL6_BASE DATE,
                                  CONSTRAINT pk_BASE
                                      PRIMARY  KEY (COL2_BASE) )
				</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB154
                                ( COL1  NUMBER(32),
                                  COL2  FLOAT
                                  CONSTRAINT fk_BASE
                                      REFERENCES  TAB154_BASE(COL2_BASE),
                                  COL3  DATE,
                                  COL4  LONG    )
				</CallString>
<Error>
<ErrorCode>-8006</ErrorCode>
<ErrorMessage>Data types must be compatible</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB154_BASE
				</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB154
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="155" Responsible="Oleg Luzginov" TestType="negative">
<Comment>key column length differs to referencing column (too small); see constraint fk_BASE</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB155_BASE
                                ( COL1_BASE  DATE,
                                  COL2_BASE  CHAR
                                  CONSTRAINT pk_BASE
                                      PRIMARY  KEY,
                                  COL3_BASE  NUMBER(38),
                                  COL4_BASE  DATE,
                                  COL5_BASE  FLOAT  )
				</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB155
                                ( COL1  NUMBER(4),
                                  COL2  CHAR(100)
                                  CONSTRAINT fk_BASE
                                      REFERENCES  TAB155_BASE(COL2_BASE),
                                  COL3  VARCHAR(2000),
                                  COL4  DATE,
                                  COL5  RAW    )
				</CallString>
<Error>
<ErrorCode>-8006</ErrorCode>
<ErrorMessage>Data types must be compatible</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB155_BASE
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="156" Responsible="Oleg Luzginov" TestType="negative">
<Comment>key column length differs to referencing column (too big); see constraint fk_BASE</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB156_BASE
                                ( COL1_BASE  FLOAT,
                                  COL2_BASE  NUMBER(38),
                                  COL3_BASE  FLOAT,
                                  COL4_BASE  NUMBER,
                                  CONSTRAINT pk_BASE
                                      PRIMARY  KEY (COL2_BASE) )
				</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB156
                                ( COL1  VARCHAR(4000),
                                  COL2  NUMBER
                                  CONSTRAINT fk_BASE
                                      REFERENCES  TAB156_BASE(COL2_BASE),
                                  COL3 DATE,
                                  COL4 CHAR(2000))
				</CallString>
<Error>
<ErrorCode>-8006</ErrorCode>
<ErrorMessage>Data types must be compatible</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB156_BASE
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="157" Responsible="Oleg Luzginov" TestType="negative">
<Comment>it is a NON-unique index with fitting column; see constraint fk_BASE</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB157_BASE
                                ( COL1_BASE  FLOAT,
                                  COL2_BASE  NUMBER(32),
                                  COL3_BASE  CHAR(2000),
                                  COL4_BASE  DATE )
				</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE INDEX IND_BASE157
                                ON TAB157_BASE(COL2_BASE)
				</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB157
                                ( COL1  NUMBER(32),
                                  COL2  NUMBER(32)
                                  CONSTRAINT fk_BASE
                                      REFERENCES  TAB157_BASE(COL2_BASE),
                                  COL3  DATE,
                                  COL4  LONG     )
				</CallString>
<Error>
<ErrorCode>-8030</ErrorCode>
<ErrorMessage>Column must be indexed</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB157_BASE
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="158" Responsible="Oleg Luzginov" TestType="negative">
<Comment>unique index with too few columns as explicitly specified; see constraint fk_BASE</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB158_BASE
                                ( COL1_BASE  VARCHAR(1000),
                                  COL2_BASE  NUMBER(*),
                                  COL3_BASE  LONG,
                                  COL4_BASE  DATE,
                                  COL5_BASE  FLOAT )
				</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE UNIQUE INDEX IND_BASE158
                                ON TAB158_BASE(COL4_BASE, COL2_BASE)
				</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB158
                                ( COL1  NUMBER(38),
                                  COL2  DATE
                                  CONSTRAINT fk_BASE
                                      REFERENCES  TAB158_BASE(COL4_BASE),
                                  COL3  CHAR(2000),
                                  COL4  LONG     )
				</CallString>
<Error>
<ErrorCode>-8030</ErrorCode>
<ErrorMessage>Column must be indexed</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB158_BASE
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="160" Responsible="Oleg Luzginov" TestType="negative">
<Comment>unique index with column whose datatypes differ to referencing columns; see constraint fk_BASE</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB160_BASE
                                ( COL1_BASE  NUMBER(38),
                                  COL2_BASE  VARCHAR(100),
                                  COL3_BASE  DATE )
				</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE UNIQUE INDEX IND_BASE160
                                ON TAB160_BASE(COL2_BASE)
				</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB160
                                ( COL1  FLOAT,
                                  COL2  NUMBER(38)
                                  CONSTRAINT fk_BASE
                                      REFERENCES  TAB160_BASE(COL2_BASE),
                                  COL3  DATE,
                                  COL4  LONG   )
				</CallString>
<Error>
<ErrorCode>-8006</ErrorCode>
<ErrorMessage>Data types must be compatible</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB160_BASE
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="161" Responsible="Oleg Luzginov" TestType="negative">
<Comment>unique index column length differs to referencing column (too small); see constraint fk_BASE</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB161_BASE
                                ( COL1_BASE  NUMBER(4),
                                  COL2_BASE  VARCHAR(40),
                                  COL3_BASE DATE,
                                  COL4_BASE FLOAT)
				</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE UNIQUE INDEX IND_BASE161
                                ON TAB161_BASE(COL2_BASE)
				</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB161
                                ( COL1  FLOAT,
                                  COL2  VARCHAR(100)
                                  CONSTRAINT fk_BASE
                                      REFERENCES  TAB161_BASE(COL2_BASE),
                                  COL3 DATE,
                                  COL4 RAW,
                                  COL5 ROWID )
				</CallString>
<Error>
<ErrorCode>-8006</ErrorCode>
<ErrorMessage>Data types must be compatible</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB161_BASE
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="162" Responsible="Oleg Luzginov" TestType="negative">
<Comment>unique index column length differs to referencing column (too big); see constraint fk_BASE</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB162_BASE
                                ( COL1_BASE  CHAR(2000),
                                  COL2_BASE  NUMBER(38),
                                  COL3_BASE DATE,
                                  COL4_BASE LONG)
				</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE UNIQUE INDEX IND_BASE162
                                ON TAB162_BASE(COL2_BASE)
				</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB162
                                ( COL1  LONG,
                                  COL2  NUMBER(4)
                                  CONSTRAINT fk_BASE
                                      REFERENCES  TAB162_BASE(COL2_BASE),
                                  COL3 DATE,
                                  COL4 FLOAT )
				</CallString>
<Error>
<ErrorCode>-8006</ErrorCode>
<ErrorMessage>Data types must be compatible</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB162_BASE
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="163" Responsible="Oleg Luzginov" TestType="negative">
<Comment>index column length differs to referencing column,
                only decimal places differ; see constraint fk_BASE</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB163_BASE
                                ( COL1_BASE  NUMBER(4,1),
                                  COL2_BASE  NUMBER(38,38),
                                  COL3_BASE  VARCHAR(41),
                                  COL4_BASE  DATE )
				</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE UNIQUE INDEX IND_BASE163
                                ON TAB163_BASE(COL1_BASE)
				</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB163
                                ( COL1  NUMBER(4,2) CONSTRAINT fk_BASE
                                      REFERENCES  TAB163_BASE(COL2_BASE) ,
                                  COL2  NUMBER(38),
                                  COL3 FLOAT,
                                  COL4 LONG,
                                  COL5 DATE
                                  )
				</CallString>
<Error>
<ErrorCode>-8006</ErrorCode>
<ErrorMessage>Data types must be compatible</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB163_BASE
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="164" Responsible="Oleg Luzginov" TestType="negative">
<Comment>ON DELETE with another keyword; see constraint fk_selfREF</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB164
                                ( COL1  NUMBER(55),
                                COL2 RAW,
                                COL3 DATE,
                                COL4 ROWID,
                                COL5 DATE,
                                COL6  NUMBER(55) CONSTRAINT fk_selfREF
                                REFERENCES  TAB164(COL1)
                                ON DELETE INDEX,
                                CONSTRAINT pk
                                PRIMARY  KEY (COL1) )
				</CallString>
<Error>
<ErrorCode>-5015</ErrorCode>
<ErrorMessage>Missing keyword:CASCADE,SET</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB164
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="165" Responsible="Oleg Luzginov" TestType="negative">
<Comment>ON DELETE with non-keyword; see constraint fk_selfREF</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB165
                                ( COL1  CHAR(4),
                                COL2  CHAR(2000),
                                COL3 VARCHAR2(4000),
                                COL4 CHAR(4)  CONSTRAINT fk_selfREF
                                REFERENCES  TAB165(COL1)
                                ON DELETE Unsinn,,
                                COL5 LONG,
                                COL6 FLOAT,
                                CONSTRAINT pk
                                PRIMARY  KEY (COL1) )
				</CallString>
<Error>
<ErrorCode>-5015</ErrorCode>
<ErrorMessage>Missing keyword:CASCADE,SET</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB165
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="166" Responsible="Oleg Luzginov" TestType="negative">
<Comment>create  reference without referenced table  (syntax); see constraint fk_BASE</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB166
                                  (COL1     NUMBER(38),
                                   COL2      NUMBER(*)
                                   CONSTRAINT fk_BASE
                                      REFERENCES,
                                   COL3 DATE,
                                   COL4 LONG   )
				</CallString>
<Error>
<ErrorCode>-3009</ErrorCode>
<ErrorMessage>Invalid table name</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB166
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="167" Responsible="Oleg Luzginov" TestType="negative">
<Comment>create  reference with keyword instead of table name (syntax); see constraint fk_BASE</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB167
                                  (COL1     NUMBER(4),
                                   COL2      NUMBER(4)
                                   CONSTRAINT fk_BASE
                                      REFERENCES  INDEX,
                                   COL3 VARCHAR(2000)   )
				</CallString>
<Error>
<ErrorCode>-942</ErrorCode>
<ErrorMessage>Unknown table name:INDEX</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB167
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="168" Responsible="Oleg Luzginov" TestType="negative">
<Comment>ON DELETE with duplicate ON DELETE; see constraint fk_selfREF</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB168
                                ( COL1  NUMERIC(4),
                                COL2  NUMERIC(4)
                                CONSTRAINT fk_selfREF
                                REFERENCES  TAB168(COL1)
                                ON DELETE CASCADE ON DELETE CASCADE,
                                COL3 VARCHAR(4000),
                                COL4 DATE,
                                COL5 CHAR(2000),
                                COL6 NUMERIC(38),
                                COL7 NUMERIC(*,20),
                                COL8 LONG,

                                COL10 DATE,

                                COL12 DATE,
                                CONSTRAINT pk
                                PRIMARY  KEY (COL1) )
				</CallString>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>Missing delimiter: )</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB168
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="169" Responsible="Oleg Luzginov" TestType="negative">
<Comment>ON DELETE with CASCADE SET NULL for the table constraint; see constraint fk_self</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>CREATE TABLE TAB169 (
                                        COL1 FLOAT(23),
                                        COL3 LONG,
                                        COL4 DATE,
                                        COL5 VARCHAR(574),
                                         COL7 INTEGER,
                                        COL8 INT,
                                        COL9 DATE,
                                        CONSTRAINT pk
                                                PRIMARY  KEY (COL4, COL7),
                                        CONSTRAINT fk_self
                                                FOREIGN  KEY (COL8, COL9)
                                                REFERENCES  TAB169(COL4, COL7)
                                                ON DELETE CASCADE SET NULL )
				</CallString>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>Missing delimiter: )</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB169
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="" Number="170" Responsible="Oleg Luzginov" TestType="negative">
<Comment>a foreign key cannot be of type LONG; see COL2, constraint fk_selfREF</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB170
                              ( COL1  LONG,
                                COL2  LONG
                                CONSTRAINT fk_selfREF
                                    REFERENCES  TAB170(COL1),
                                COL3 DATE,
                                COL4 VARCHAR(2000),
                                CONSTRAINT pk
                                    PRIMARY  KEY (COL1))
				</CallString>
<Error>
<ErrorCode>-7002</ErrorCode>
<ErrorMessage>KEY not allowed</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB170
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="171" Responsible="Oleg Luzginov" TestType="negative">
<Comment>a foreign key cannot be of type LONG; see constraint fk_self</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB171 (
                                        COL1 VARCHAR2(3359),
                                        COL2 NUMBER(18),
                                        COL3 INT,
                                        COL4 NUMBER(27),
                                        COL5 LONG,
                                        COL6 INTEGER,
                                        COL7 VARCHAR(3841),
                                        COL8 NUMBER(35),
                                        COL9 CHAR(5838),
                                        COL10 CHAR(6450),
                                        COL11 ROWID,
                                        COL12 LONG,
                                        COL13 INT,
                                        COL14 CHAR(903),
                                        CONSTRAINT pk
                                                PRIMARY  KEY (COL5),
                                        CONSTRAINT fk_self
                                                FOREIGN  KEY (COL12)
                                                REFERENCES  TAB171(COL5) )
				</CallString>
<Error>
<ErrorCode>-7002</ErrorCode>
<ErrorMessage>KEY not allowed</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB171
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="172" Responsible="Oleg Luzginov" TestType="negative">
<Comment>incorrect key word "unique"</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB172 (
                                        COL1 INT,
                                        COL2 LONG,
                                        COL3 RAW(2794),
                                        COL4 VARCHAR2(114),
                                       constraint TWO_COL_CONST  uniqu_ (COL1, COL4))
				</CallString>
<Error>
<ErrorCode>-3002</ErrorCode>
<ErrorMessage>Invalid datatype</ErrorMessage>
</Error>
</Statement>
</Run>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="173" Responsible="Oleg Luzginov" TestType="negative">
<Comment>very long constraint name</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB173 (
                                        COL1 RAW(1116),
                                        COL2 ROWID,
                                        COL3 INT,
                                        COL4 RAW(3093),
                                        COL5 ROWID,
                                        COL6 VARCHAR2(2731),
                                        COL7 VARCHAR(1980),
                                        COL8 CHARACTER(1687),
                                        COL9 VARCHAR(4000),
                                        COL10 INTEGER,
                                        COL11 INT,
                                        COL12 DATE,
                                        COL13 FLOAT(9),
                                        COL14 LONG,
                                        COL15 LONG,
                                        COL16 RAW(1980),
                                        constraint TWO_COL_CONSTgggggggggggggggggggggggg  unique (COL3, COL11, COL13))
				</CallString>
<Error>
<ErrorCode>-2014</ErrorCode>
<ErrorMessage>Identifier too long</ErrorMessage>
</Error>
</Statement>
</Run>
</Test>
<Test ErrorType="semantic" Exclude="" Number="174" Responsible="Vladimir Sobol, Oleg Luzginov" TestType="negative">
<Comment>a critical number of CHAR columns: 1024</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB174 (
                                COL1 CHAR, COL2 CHAR, COL3 CHAR, COL4 CHAR, COL5 CHAR,
                                COL6 CHAR, COL7 CHAR, COL8 CHAR, COL9 CHAR, COL10 CHAR,
                                COL11 CHAR, COL12 CHAR, COL13 CHAR, COL14 CHAR, COL15 CHAR,
                                COL16 CHAR, COL17 CHAR, COL18 CHAR, COL19 CHAR, COL20 CHAR,
                                COL21 CHAR, COL22 CHAR, COL23 CHAR, COL24 CHAR, COL25 CHAR,
                                COL26 CHAR, COL27 CHAR, COL28 CHAR, COL29 CHAR, COL30 CHAR,
                                COL31 CHAR, COL32 CHAR, COL33 CHAR, COL34 CHAR, COL35 CHAR,
                                COL36 CHAR, COL37 CHAR, COL38 CHAR, COL39 CHAR, COL40 CHAR,
                                COL41 CHAR, COL42 CHAR, COL43 CHAR, COL44 CHAR, COL45 CHAR,
                                COL46 CHAR, COL47 CHAR, COL48 CHAR, COL49 CHAR, COL50 CHAR,
                                COL51 CHAR, COL52 CHAR, COL53 CHAR, COL54 CHAR, COL55 CHAR,
                                COL56 CHAR, COL57 CHAR, COL58 CHAR, COL59 CHAR, COL60 CHAR,
                                COL61 CHAR, COL62 CHAR, COL63 CHAR, COL64 CHAR, COL65 CHAR,
                                COL66 CHAR, COL67 CHAR, COL68 CHAR, COL69 CHAR, COL70 CHAR,
                                COL71 CHAR, COL72 CHAR, COL73 CHAR, COL74 CHAR, COL75 CHAR,
                                COL76 CHAR, COL77 CHAR, COL78 CHAR, COL79 CHAR, COL80 CHAR,
                                COL81 CHAR, COL82 CHAR, COL83 CHAR, COL84 CHAR, COL85 CHAR,
                                COL86 CHAR, COL87 CHAR, COL88 CHAR, COL89 CHAR, COL90 CHAR,
                                COL91 CHAR, COL92 CHAR, COL93 CHAR, COL94 CHAR, COL95 CHAR,
                                COL96 CHAR, COL97 CHAR, COL98 CHAR, COL99 CHAR, COL100 CHAR,
                                COL101 CHAR, COL102 CHAR, COL103 CHAR, COL104 CHAR, COL105 CHAR,
                                COL106 CHAR, COL107 CHAR, COL108 CHAR, COL109 CHAR, COL110 CHAR,
                                COL111 CHAR, COL112 CHAR, COL113 CHAR, COL114 CHAR, COL115 CHAR,
                                COL116 CHAR, COL117 CHAR, COL118 CHAR, COL119 CHAR, COL120 CHAR,
                                COL121 CHAR, COL122 CHAR, COL123 CHAR, COL124 CHAR, COL125 CHAR,
                                COL126 CHAR, COL127 CHAR, COL128 CHAR, COL129 CHAR, COL130 CHAR,
                                COL131 CHAR, COL132 CHAR, COL133 CHAR, COL134 CHAR, COL135 CHAR,
                                COL136 CHAR, COL137 CHAR, COL138 CHAR, COL139 CHAR, COL140 CHAR,
                                COL141 CHAR, COL142 CHAR, COL143 CHAR, COL144 CHAR, COL145 CHAR,
                                COL146 CHAR, COL147 CHAR, COL148 CHAR, COL149 CHAR, COL150 CHAR,
                                COL151 CHAR, COL152 CHAR, COL153 CHAR, COL154 CHAR, COL155 CHAR,
                                COL156 CHAR, COL157 CHAR, COL158 CHAR, COL159 CHAR, COL160 CHAR,
                                COL161 CHAR, COL162 CHAR, COL163 CHAR, COL164 CHAR, COL165 CHAR,
                                COL166 CHAR, COL167 CHAR, COL168 CHAR, COL169 CHAR, COL170 CHAR,
                                COL171 CHAR, COL172 CHAR, COL173 CHAR, COL174 CHAR, COL175 CHAR,
                                COL176 CHAR, COL177 CHAR, COL178 CHAR, COL179 CHAR, COL180 CHAR,
                                COL181 CHAR, COL182 CHAR, COL183 CHAR, COL184 CHAR, COL185 CHAR,
                                COL186 CHAR, COL187 CHAR, COL188 CHAR, COL189 CHAR, COL190 CHAR,
                                COL191 CHAR, COL192 CHAR, COL193 CHAR, COL194 CHAR, COL195 CHAR,
                                COL196 CHAR, COL197 CHAR, COL198 CHAR, COL199 CHAR, COL200 CHAR,
                                COL201 CHAR, COL202 CHAR, COL203 CHAR, COL204 CHAR, COL205 CHAR,
                                COL206 CHAR, COL207 CHAR, COL208 CHAR, COL209 CHAR, COL210 CHAR,
                                COL211 CHAR, COL212 CHAR, COL213 CHAR, COL214 CHAR, COL215 CHAR,
                                COL216 CHAR, COL217 CHAR, COL218 CHAR, COL219 CHAR, COL220 CHAR,
                                COL221 CHAR, COL222 CHAR, COL223 CHAR, COL224 CHAR, COL225 CHAR,
                                COL226 CHAR, COL227 CHAR, COL228 CHAR, COL229 CHAR, COL230 CHAR,
                                COL231 CHAR, COL232 CHAR, COL233 CHAR, COL234 CHAR, COL235 CHAR,
                                COL236 CHAR, COL237 CHAR, COL238 CHAR, COL239 CHAR, COL240 CHAR,
                                COL241 CHAR, COL242 CHAR, COL243 CHAR, COL244 CHAR, COL245 CHAR,
                                COL246 CHAR, COL247 CHAR, COL248 CHAR, COL249 CHAR, COL250 CHAR,
                                COL251 CHAR, COL252 CHAR, COL253 CHAR, COL254 CHAR, COL255 CHAR,
                                COL256 CHAR, COL257 CHAR, COL258 CHAR, COL259 CHAR, COL260 CHAR,
                                COL261 CHAR, COL262 CHAR, COL263 CHAR, COL264 CHAR, COL265 CHAR,
                                COL266 CHAR, COL267 CHAR, COL268 CHAR, COL269 CHAR, COL270 CHAR,
                                COL271 CHAR, COL272 CHAR, COL273 CHAR, COL274 CHAR, COL275 CHAR,
                                COL276 CHAR, COL277 CHAR, COL278 CHAR, COL279 CHAR, COL280 CHAR,
                                COL281 CHAR, COL282 CHAR, COL283 CHAR, COL284 CHAR, COL285 CHAR,
                                COL286 CHAR, COL287 CHAR, COL288 CHAR, COL289 CHAR, COL290 CHAR,
                                COL291 CHAR, COL292 CHAR, COL293 CHAR, COL294 CHAR, COL295 CHAR,
                                COL296 CHAR, COL297 CHAR, COL298 CHAR, COL299 CHAR, COL300 CHAR,
                                COL301 CHAR, COL302 CHAR, COL303 CHAR, COL304 CHAR, COL305 CHAR,
                                COL306 CHAR, COL307 CHAR, COL308 CHAR, COL309 CHAR, COL310 CHAR,
                                COL311 CHAR, COL312 CHAR, COL313 CHAR, COL314 CHAR, COL315 CHAR,
                                COL316 CHAR, COL317 CHAR, COL318 CHAR, COL319 CHAR, COL320 CHAR,
                                COL321 CHAR, COL322 CHAR, COL323 CHAR, COL324 CHAR, COL325 CHAR,
                                COL326 CHAR, COL327 CHAR, COL328 CHAR, COL329 CHAR, COL330 CHAR,
                                COL331 CHAR, COL332 CHAR, COL333 CHAR, COL334 CHAR, COL335 CHAR,
                                COL336 CHAR, COL337 CHAR, COL338 CHAR, COL339 CHAR, COL340 CHAR,
                                COL341 CHAR, COL342 CHAR, COL343 CHAR, COL344 CHAR, COL345 CHAR,
                                COL346 CHAR, COL347 CHAR, COL348 CHAR, COL349 CHAR, COL350 CHAR,
                                COL351 CHAR, COL352 CHAR, COL353 CHAR, COL354 CHAR, COL355 CHAR,
                                COL356 CHAR, COL357 CHAR, COL358 CHAR, COL359 CHAR, COL360 CHAR,
                                COL361 CHAR, COL362 CHAR, COL363 CHAR, COL364 CHAR, COL365 CHAR,
                                COL366 CHAR, COL367 CHAR, COL368 CHAR, COL369 CHAR, COL370 CHAR,
                                COL371 CHAR, COL372 CHAR, COL373 CHAR, COL374 CHAR, COL375 CHAR,
                                COL376 CHAR, COL377 CHAR, COL378 CHAR, COL379 CHAR, COL380 CHAR,
                                COL381 CHAR, COL382 CHAR, COL383 CHAR, COL384 CHAR, COL385 CHAR,
                                COL386 CHAR, COL387 CHAR, COL388 CHAR, COL389 CHAR, COL390 CHAR,
                                COL391 CHAR, COL392 CHAR, COL393 CHAR, COL394 CHAR, COL395 CHAR,
                                COL396 CHAR, COL397 CHAR, COL398 CHAR, COL399 CHAR, COL400 CHAR,
                                COL401 CHAR, COL402 CHAR, COL403 CHAR, COL404 CHAR, COL405 CHAR,
                                COL406 CHAR, COL407 CHAR, COL408 CHAR, COL409 CHAR, COL410 CHAR,
                                COL411 CHAR, COL412 CHAR, COL413 CHAR, COL414 CHAR, COL415 CHAR,
                                COL416 CHAR, COL417 CHAR, COL418 CHAR, COL419 CHAR, COL420 CHAR,
                                COL421 CHAR, COL422 CHAR, COL423 CHAR, COL424 CHAR, COL425 CHAR,
                                COL426 CHAR, COL427 CHAR, COL428 CHAR, COL429 CHAR, COL430 CHAR,
                                COL431 CHAR, COL432 CHAR, COL433 CHAR, COL434 CHAR, COL435 CHAR,
                                COL436 CHAR, COL437 CHAR, COL438 CHAR, COL439 CHAR, COL440 CHAR,
                                COL441 CHAR, COL442 CHAR, COL443 CHAR, COL444 CHAR, COL445 CHAR,
                                COL446 CHAR, COL447 CHAR, COL448 CHAR, COL449 CHAR, COL450 CHAR,
                                COL451 CHAR, COL452 CHAR, COL453 CHAR, COL454 CHAR, COL455 CHAR,
                                COL456 CHAR, COL457 CHAR, COL458 CHAR, COL459 CHAR, COL460 CHAR,
                                COL461 CHAR, COL462 CHAR, COL463 CHAR, COL464 CHAR, COL465 CHAR,
                                COL466 CHAR, COL467 CHAR, COL468 CHAR, COL469 CHAR, COL470 CHAR,
                                COL471 CHAR, COL472 CHAR, COL473 CHAR, COL474 CHAR, COL475 CHAR,
                                COL476 CHAR, COL477 CHAR, COL478 CHAR, COL479 CHAR, COL480 CHAR,
                                COL481 CHAR, COL482 CHAR, COL483 CHAR, COL484 CHAR, COL485 CHAR,
                                COL486 CHAR, COL487 CHAR, COL488 CHAR, COL489 CHAR, COL490 CHAR,
                                COL491 CHAR, COL492 CHAR, COL493 CHAR, COL494 CHAR, COL495 CHAR,
                                COL496 CHAR, COL497 CHAR, COL498 CHAR, COL499 CHAR, COL500 CHAR,
                                COL501 CHAR, COL502 CHAR, COL503 CHAR, COL504 CHAR, COL505 CHAR,
                                COL506 CHAR, COL507 CHAR, COL508 CHAR, COL509 CHAR, COL510 CHAR,
                                COL511 CHAR, COL512 CHAR, COL513 CHAR, COL514 CHAR, COL515 CHAR,
                                COL516 CHAR, COL517 CHAR, COL518 CHAR, COL519 CHAR, COL520 CHAR,
                                COL521 CHAR, COL522 CHAR, COL523 CHAR, COL524 CHAR, COL525 CHAR,
                                COL526 CHAR, COL527 CHAR, COL528 CHAR, COL529 CHAR, COL530 CHAR,
                                COL531 CHAR, COL532 CHAR, COL533 CHAR, COL534 CHAR, COL535 CHAR,
                                COL536 CHAR, COL537 CHAR, COL538 CHAR, COL539 CHAR, COL540 CHAR,
                                COL541 CHAR, COL542 CHAR, COL543 CHAR, COL544 CHAR, COL545 CHAR,
                                COL546 CHAR, COL547 CHAR, COL548 CHAR, COL549 CHAR, COL550 CHAR,
                                COL551 CHAR, COL552 CHAR, COL553 CHAR, COL554 CHAR, COL555 CHAR,
                                COL556 CHAR, COL557 CHAR, COL558 CHAR, COL559 CHAR, COL560 CHAR,
                                COL561 CHAR, COL562 CHAR, COL563 CHAR, COL564 CHAR, COL565 CHAR,
                                COL566 CHAR, COL567 CHAR, COL568 CHAR, COL569 CHAR, COL570 CHAR,
                                COL571 CHAR, COL572 CHAR, COL573 CHAR, COL574 CHAR, COL575 CHAR,
                                COL576 CHAR, COL577 CHAR, COL578 CHAR, COL579 CHAR, COL580 CHAR,
                                COL581 CHAR, COL582 CHAR, COL583 CHAR, COL584 CHAR, COL585 CHAR,
                                COL586 CHAR, COL587 CHAR, COL588 CHAR, COL589 CHAR, COL590 CHAR,
                                COL591 CHAR, COL592 CHAR, COL593 CHAR, COL594 CHAR, COL595 CHAR,
                                COL596 CHAR, COL597 CHAR, COL598 CHAR, COL599 CHAR, COL600 CHAR,
                                COL601 CHAR, COL602 CHAR, COL603 CHAR, COL604 CHAR, COL605 CHAR,
                                COL606 CHAR, COL607 CHAR, COL608 CHAR, COL609 CHAR, COL610 CHAR,
                                COL611 CHAR, COL612 CHAR, COL613 CHAR, COL614 CHAR, COL615 CHAR,
                                COL616 CHAR, COL617 CHAR, COL618 CHAR, COL619 CHAR, COL620 CHAR,
                                COL621 CHAR, COL622 CHAR, COL623 CHAR, COL624 CHAR, COL625 CHAR,
                                COL626 CHAR, COL627 CHAR, COL628 CHAR, COL629 CHAR, COL630 CHAR,
                                COL631 CHAR, COL632 CHAR, COL633 CHAR, COL634 CHAR, COL635 CHAR,
                                COL636 CHAR, COL637 CHAR, COL638 CHAR, COL639 CHAR, COL640 CHAR,
                                COL641 CHAR, COL642 CHAR, COL643 CHAR, COL644 CHAR, COL645 CHAR,
                                COL646 CHAR, COL647 CHAR, COL648 CHAR, COL649 CHAR, COL650 CHAR,
                                COL651 CHAR, COL652 CHAR, COL653 CHAR, COL654 CHAR, COL655 CHAR,
                                COL656 CHAR, COL657 CHAR, COL658 CHAR, COL659 CHAR, COL660 CHAR,
                                COL661 CHAR, COL662 CHAR, COL663 CHAR, COL664 CHAR, COL665 CHAR,
                                COL666 CHAR, COL667 CHAR, COL668 CHAR, COL669 CHAR, COL670 CHAR,
                                COL671 CHAR, COL672 CHAR, COL673 CHAR, COL674 CHAR, COL675 CHAR,
                                COL676 CHAR, COL677 CHAR, COL678 CHAR, COL679 CHAR, COL680 CHAR,
                                COL681 CHAR, COL682 CHAR, COL683 CHAR, COL684 CHAR, COL685 CHAR,
                                COL686 CHAR, COL687 CHAR, COL688 CHAR, COL689 CHAR, COL690 CHAR,
                                COL691 CHAR, COL692 CHAR, COL693 CHAR, COL694 CHAR, COL695 CHAR,
                                COL696 CHAR, COL697 CHAR, COL698 CHAR, COL699 CHAR, COL700 CHAR,
                                COL701 CHAR, COL702 CHAR, COL703 CHAR, COL704 CHAR, COL705 CHAR,
                                COL706 CHAR, COL707 CHAR, COL708 CHAR, COL709 CHAR, COL710 CHAR,
                                COL711 CHAR, COL712 CHAR, COL713 CHAR, COL714 CHAR, COL715 CHAR,
                                COL716 CHAR, COL717 CHAR, COL718 CHAR, COL719 CHAR, COL720 CHAR,
                                COL721 CHAR, COL722 CHAR, COL723 CHAR, COL724 CHAR, COL725 CHAR,
                                COL726 CHAR, COL727 CHAR, COL728 CHAR, COL729 CHAR, COL730 CHAR,
                                COL731 CHAR, COL732 CHAR, COL733 CHAR, COL734 CHAR, COL735 CHAR,
                                COL736 CHAR, COL737 CHAR, COL738 CHAR, COL739 CHAR, COL740 CHAR,
                                COL741 CHAR, COL742 CHAR, COL743 CHAR, COL744 CHAR, COL745 CHAR,
                                COL746 CHAR, COL747 CHAR, COL748 CHAR, COL749 CHAR, COL750 CHAR,
                                COL751 CHAR, COL752 CHAR, COL753 CHAR, COL754 CHAR, COL755 CHAR,
                                COL756 CHAR, COL757 CHAR, COL758 CHAR, COL759 CHAR, COL760 CHAR,
                                COL761 CHAR, COL762 CHAR, COL763 CHAR, COL764 CHAR, COL765 CHAR,
                                COL766 CHAR, COL767 CHAR, COL768 CHAR, COL769 CHAR, COL770 CHAR,
                                COL771 CHAR, COL772 CHAR, COL773 CHAR, COL774 CHAR, COL775 CHAR,
                                COL776 CHAR, COL777 CHAR, COL778 CHAR, COL779 CHAR, COL780 CHAR,
                                COL781 CHAR, COL782 CHAR, COL783 CHAR, COL784 CHAR, COL785 CHAR,
                                COL786 CHAR, COL787 CHAR, COL788 CHAR, COL789 CHAR, COL790 CHAR,
                                COL791 CHAR, COL792 CHAR, COL793 CHAR, COL794 CHAR, COL795 CHAR,
                                COL796 CHAR, COL797 CHAR, COL798 CHAR, COL799 CHAR, COL800 CHAR,
                                COL801 CHAR, COL802 CHAR, COL803 CHAR, COL804 CHAR, COL805 CHAR,
                                COL806 CHAR, COL807 CHAR, COL808 CHAR, COL809 CHAR, COL810 CHAR,
                                COL811 CHAR, COL812 CHAR, COL813 CHAR, COL814 CHAR, COL815 CHAR,
                                COL816 CHAR, COL817 CHAR, COL818 CHAR, COL819 CHAR, COL820 CHAR,
                                COL821 CHAR, COL822 CHAR, COL823 CHAR, COL824 CHAR, COL825 CHAR,
                                COL826 CHAR, COL827 CHAR, COL828 CHAR, COL829 CHAR, COL830 CHAR,
                                COL831 CHAR, COL832 CHAR, COL833 CHAR, COL834 CHAR, COL835 CHAR,
                                COL836 CHAR, COL837 CHAR, COL838 CHAR, COL839 CHAR, COL840 CHAR,
                                COL841 CHAR, COL842 CHAR, COL843 CHAR, COL844 CHAR, COL845 CHAR,
                                COL846 CHAR, COL847 CHAR, COL848 CHAR, COL849 CHAR, COL850 CHAR,
                                COL851 CHAR, COL852 CHAR, COL853 CHAR, COL854 CHAR, COL855 CHAR,
                                COL856 CHAR, COL857 CHAR, COL858 CHAR, COL859 CHAR, COL860 CHAR,
                                COL861 CHAR, COL862 CHAR, COL863 CHAR, COL864 CHAR, COL865 CHAR,
                                COL866 CHAR, COL867 CHAR, COL868 CHAR, COL869 CHAR, COL870 CHAR,
                                COL871 CHAR, COL872 CHAR, COL873 CHAR, COL874 CHAR, COL875 CHAR,
                                COL876 CHAR, COL877 CHAR, COL878 CHAR, COL879 CHAR, COL880 CHAR,
                                COL881 CHAR, COL882 CHAR, COL883 CHAR, COL884 CHAR, COL885 CHAR,
                                COL886 CHAR, COL887 CHAR, COL888 CHAR, COL889 CHAR, COL890 CHAR,
                                COL891 CHAR, COL892 CHAR, COL893 CHAR, COL894 CHAR, COL895 CHAR,
                                COL896 CHAR, COL897 CHAR, COL898 CHAR, COL899 CHAR, COL900 CHAR,
                                COL901 CHAR, COL902 CHAR, COL903 CHAR, COL904 CHAR, COL905 CHAR,
                                COL906 CHAR, COL907 CHAR, COL908 CHAR, COL909 CHAR, COL910 CHAR,
                                COL911 CHAR, COL912 CHAR, COL913 CHAR, COL914 CHAR, COL915 CHAR,
                                COL916 CHAR, COL917 CHAR, COL918 CHAR, COL919 CHAR, COL920 CHAR,
                                COL921 CHAR, COL922 CHAR, COL923 CHAR, COL924 CHAR, COL925 CHAR,
                                COL926 CHAR, COL927 CHAR, COL928 CHAR, COL929 CHAR, COL930 CHAR,
                                COL931 CHAR, COL932 CHAR, COL933 CHAR, COL934 CHAR, COL935 CHAR,
                                COL936 CHAR, COL937 CHAR, COL938 CHAR, COL939 CHAR, COL940 CHAR,
                                COL941 CHAR, COL942 CHAR, COL943 CHAR, COL944 CHAR, COL945 CHAR,
                                COL946 CHAR, COL947 CHAR, COL948 CHAR, COL949 CHAR, COL950 CHAR,
                                COL951 CHAR, COL952 CHAR, COL953 CHAR, COL954 CHAR, COL955 CHAR,
                                COL956 CHAR, COL957 CHAR, COL958 CHAR, COL959 CHAR, COL960 CHAR,
                                COL961 CHAR, COL962 CHAR, COL963 CHAR, COL964 CHAR, COL965 CHAR,
                                COL966 CHAR, COL967 CHAR, COL968 CHAR, COL969 CHAR, COL970 CHAR,
                                COL971 CHAR, COL972 CHAR, COL973 CHAR, COL974 CHAR, COL975 CHAR,
                                COL976 CHAR, COL977 CHAR, COL978 CHAR, COL979 CHAR, COL980 CHAR,
                                COL981 CHAR, COL982 CHAR, COL983 CHAR, COL984 CHAR, COL985 CHAR,
                                COL986 CHAR, COL987 CHAR, COL988 CHAR, COL989 CHAR, COL990 CHAR,
                                COL991 CHAR, COL992 CHAR, COL993 CHAR, COL994 CHAR, COL995 CHAR,
                                COL996 CHAR, COL997 CHAR, COL998 CHAR, COL999 CHAR, COL1000 CHAR,
                                COL1001 CHAR, COL1002 CHAR, COL1003 CHAR, COL1004 CHAR, COL1005 CHAR,
                                COL1006 CHAR, COL1007 CHAR, COL1008 CHAR, COL1009 CHAR, COL1010 CHAR,
                                COL1011 CHAR, COL1012 CHAR, COL1013 CHAR, COL1014 CHAR, COL1015 CHAR,
                                COL1016 CHAR, COL1017 CHAR, COL1018 CHAR, COL1019 CHAR, COL1020 CHAR,
                                COL1021 CHAR, COL1022 CHAR, COL1023 CHAR, COL1024 CHAR)
				</CallString>
<Error>
<ErrorCode>-1002</ErrorCode>
<ErrorMessage>Too many columns.</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				drop table TAB174
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="175" Responsible="Oleg Luzginov" TestType="negative">
<Comment>primary key table constraint with too long column data type</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB175 (
                                        COL1 VARCHAR2(2555) NOT NULL,
                                        COL2 CHAR NOT NULL,
                                        COL3 CHAR(2000),
                                        COL4 NUMBER(64),
                                        COL5 NUMBER(38) NOT NULL,
                                        COL6 NUMBER(38,38),
                                        COL7 NUMBER(*) NOT NULL,
                                        COL8 NUMBER(*,20),
                                        COL9 LONG,
                                        COL10 DATE,
                                        CONSTRAINT CONSTR1
                                                PRIMARY KEY (COL1, COL2, COL5, COL7))
				</CallString>
<Error>
<ErrorCode>-2001</ErrorCode>
<ErrorMessage>Key too long:COL1</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				drop table TAB175
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(7.3.32.*;;)(;;internal)(7.6.0.9-;;)" Number="176" Responsible="Oleg Luzginov" TestType="negative">
<Comment>a critical number of NUMBER(38) columns: 385

(7.3.32 is excluded because page size is 32 kByte instead of 8 kByte)</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB176 (
                                COL1 NUMBER(38), COL2 NUMBER(38), COL3 NUMBER(38), COL4 NUMBER(38), COL5 NUMBER(38),
                                COL6 NUMBER(38), COL7 NUMBER(38), COL8 NUMBER(38), COL9 NUMBER(38), COL10 NUMBER(38),
                                COL11 NUMBER(38), COL12 NUMBER(38), COL13 NUMBER(38), COL14 NUMBER(38), COL15 NUMBER(38),
                                COL16 NUMBER(38), COL17 NUMBER(38), COL18 NUMBER(38), COL19 NUMBER(38), COL20 NUMBER(38),
                                COL21 NUMBER(38), COL22 NUMBER(38), COL23 NUMBER(38), COL24 NUMBER(38), COL25 NUMBER(38),
                                COL26 NUMBER(38), COL27 NUMBER(38), COL28 NUMBER(38), COL29 NUMBER(38), COL30 NUMBER(38),
                                COL31 NUMBER(38), COL32 NUMBER(38), COL33 NUMBER(38), COL34 NUMBER(38), COL35 NUMBER(38),
                                COL36 NUMBER(38), COL37 NUMBER(38), COL38 NUMBER(38), COL39 NUMBER(38), COL40 NUMBER(38),
                                COL41 NUMBER(38), COL42 NUMBER(38), COL43 NUMBER(38), COL44 NUMBER(38), COL45 NUMBER(38),
                                COL46 NUMBER(38), COL47 NUMBER(38), COL48 NUMBER(38), COL49 NUMBER(38), COL50 NUMBER(38),
                                COL51 NUMBER(38), COL52 NUMBER(38), COL53 NUMBER(38), COL54 NUMBER(38), COL55 NUMBER(38),
                                COL56 NUMBER(38), COL57 NUMBER(38), COL58 NUMBER(38), COL59 NUMBER(38), COL60 NUMBER(38),
                                COL61 NUMBER(38), COL62 NUMBER(38), COL63 NUMBER(38), COL64 NUMBER(38), COL65 NUMBER(38),
                                COL66 NUMBER(38), COL67 NUMBER(38), COL68 NUMBER(38), COL69 NUMBER(38), COL70 NUMBER(38),
                                COL71 NUMBER(38), COL72 NUMBER(38), COL73 NUMBER(38), COL74 NUMBER(38), COL75 NUMBER(38),
                                COL76 NUMBER(38), COL77 NUMBER(38), COL78 NUMBER(38), COL79 NUMBER(38), COL80 NUMBER(38),
                                COL81 NUMBER(38), COL82 NUMBER(38), COL83 NUMBER(38), COL84 NUMBER(38), COL85 NUMBER(38),
                                COL86 NUMBER(38), COL87 NUMBER(38), COL88 NUMBER(38), COL89 NUMBER(38), COL90 NUMBER(38),
                                COL91 NUMBER(38), COL92 NUMBER(38), COL93 NUMBER(38), COL94 NUMBER(38), COL95 NUMBER(38),
                                COL96 NUMBER(38), COL97 NUMBER(38), COL98 NUMBER(38), COL99 NUMBER(38), COL100 NUMBER(38),
                                COL101 NUMBER(38), COL102 NUMBER(38), COL103 NUMBER(38), COL104 NUMBER(38), COL105 NUMBER(38),
                                COL106 NUMBER(38), COL107 NUMBER(38), COL108 NUMBER(38), COL109 NUMBER(38), COL110 NUMBER(38),
                                COL111 NUMBER(38), COL112 NUMBER(38), COL113 NUMBER(38), COL114 NUMBER(38), COL115 NUMBER(38),
                                COL116 NUMBER(38), COL117 NUMBER(38), COL118 NUMBER(38), COL119 NUMBER(38), COL120 NUMBER(38),
                                COL121 NUMBER(38), COL122 NUMBER(38), COL123 NUMBER(38), COL124 NUMBER(38), COL125 NUMBER(38),
                                COL126 NUMBER(38), COL127 NUMBER(38), COL128 NUMBER(38), COL129 NUMBER(38), COL130 NUMBER(38),
                                COL131 NUMBER(38), COL132 NUMBER(38), COL133 NUMBER(38), COL134 NUMBER(38), COL135 NUMBER(38),
                                COL136 NUMBER(38), COL137 NUMBER(38), COL138 NUMBER(38), COL139 NUMBER(38), COL140 NUMBER(38),
                                COL141 NUMBER(38), COL142 NUMBER(38), COL143 NUMBER(38), COL144 NUMBER(38), COL145 NUMBER(38),
                                COL146 NUMBER(38), COL147 NUMBER(38), COL148 NUMBER(38), COL149 NUMBER(38), COL150 NUMBER(38),
                                COL151 NUMBER(38), COL152 NUMBER(38), COL153 NUMBER(38), COL154 NUMBER(38), COL155 NUMBER(38),
                                COL156 NUMBER(38), COL157 NUMBER(38), COL158 NUMBER(38), COL159 NUMBER(38), COL160 NUMBER(38),
                                COL161 NUMBER(38), COL162 NUMBER(38), COL163 NUMBER(38), COL164 NUMBER(38), COL165 NUMBER(38),
                                COL166 NUMBER(38), COL167 NUMBER(38), COL168 NUMBER(38), COL169 NUMBER(38), COL170 NUMBER(38),
                                COL171 NUMBER(38), COL172 NUMBER(38), COL173 NUMBER(38), COL174 NUMBER(38), COL175 NUMBER(38),
                                COL176 NUMBER(38), COL177 NUMBER(38), COL178 NUMBER(38), COL179 NUMBER(38), COL180 NUMBER(38),
                                COL181 NUMBER(38), COL182 NUMBER(38), COL183 NUMBER(38), COL184 NUMBER(38), COL185 NUMBER(38),
                                COL186 NUMBER(38), COL187 NUMBER(38), COL188 NUMBER(38), COL189 NUMBER(38), COL190 NUMBER(38),
                                COL191 NUMBER(38), COL192 NUMBER(38), COL193 NUMBER(38), COL194 NUMBER(38), COL195 NUMBER(38),
                                COL196 NUMBER(38), COL197 NUMBER(38), COL198 NUMBER(38), COL199 NUMBER(38), COL200 NUMBER(38),
                                COL201 NUMBER(38), COL202 NUMBER(38), COL203 NUMBER(38), COL204 NUMBER(38), COL205 NUMBER(38),
                                COL206 NUMBER(38), COL207 NUMBER(38), COL208 NUMBER(38), COL209 NUMBER(38), COL210 NUMBER(38),
                                COL211 NUMBER(38), COL212 NUMBER(38), COL213 NUMBER(38), COL214 NUMBER(38), COL215 NUMBER(38),
                                COL216 NUMBER(38), COL217 NUMBER(38), COL218 NUMBER(38), COL219 NUMBER(38), COL220 NUMBER(38),
                                COL221 NUMBER(38), COL222 NUMBER(38), COL223 NUMBER(38), COL224 NUMBER(38), COL225 NUMBER(38),
                                COL226 NUMBER(38), COL227 NUMBER(38), COL228 NUMBER(38), COL229 NUMBER(38), COL230 NUMBER(38),
                                COL231 NUMBER(38), COL232 NUMBER(38), COL233 NUMBER(38), COL234 NUMBER(38), COL235 NUMBER(38),
                                COL236 NUMBER(38), COL237 NUMBER(38), COL238 NUMBER(38), COL239 NUMBER(38), COL240 NUMBER(38),
                                COL241 NUMBER(38), COL242 NUMBER(38), COL243 NUMBER(38), COL244 NUMBER(38), COL245 NUMBER(38),
                                COL246 NUMBER(38), COL247 NUMBER(38), COL248 NUMBER(38), COL249 NUMBER(38), COL250 NUMBER(38),
                                COL251 NUMBER(38), COL252 NUMBER(38), COL253 NUMBER(38), COL254 NUMBER(38), COL255 NUMBER(38),
                                COL256 NUMBER(38), COL257 NUMBER(38), COL258 NUMBER(38), COL259 NUMBER(38), COL260 NUMBER(38),
                                COL261 NUMBER(38), COL262 NUMBER(38), COL263 NUMBER(38), COL264 NUMBER(38), COL265 NUMBER(38),
                                COL266 NUMBER(38), COL267 NUMBER(38), COL268 NUMBER(38), COL269 NUMBER(38), COL270 NUMBER(38),
                                COL271 NUMBER(38), COL272 NUMBER(38), COL273 NUMBER(38), COL274 NUMBER(38), COL275 NUMBER(38),
                                COL276 NUMBER(38), COL277 NUMBER(38), COL278 NUMBER(38), COL279 NUMBER(38), COL280 NUMBER(38),
                                COL281 NUMBER(38), COL282 NUMBER(38), COL283 NUMBER(38), COL284 NUMBER(38), COL285 NUMBER(38),
                                COL286 NUMBER(38), COL287 NUMBER(38), COL288 NUMBER(38), COL289 NUMBER(38), COL290 NUMBER(38),
                                COL291 NUMBER(38), COL292 NUMBER(38), COL293 NUMBER(38), COL294 NUMBER(38), COL295 NUMBER(38),
                                COL296 NUMBER(38), COL297 NUMBER(38), COL298 NUMBER(38), COL299 NUMBER(38), COL300 NUMBER(38),
                                COL301 NUMBER(38), COL302 NUMBER(38), COL303 NUMBER(38), COL304 NUMBER(38), COL305 NUMBER(38),
                                COL306 NUMBER(38), COL307 NUMBER(38), COL308 NUMBER(38), COL309 NUMBER(38), COL310 NUMBER(38),
                                COL311 NUMBER(38), COL312 NUMBER(38), COL313 NUMBER(38), COL314 NUMBER(38), COL315 NUMBER(38),
                                COL316 NUMBER(38), COL317 NUMBER(38), COL318 NUMBER(38), COL319 NUMBER(38), COL320 NUMBER(38),
                                COL321 NUMBER(38), COL322 NUMBER(38), COL323 NUMBER(38), COL324 NUMBER(38), COL325 NUMBER(38),
                                COL326 NUMBER(38), COL327 NUMBER(38), COL328 NUMBER(38), COL329 NUMBER(38), COL330 NUMBER(38),
                                COL331 NUMBER(38), COL332 NUMBER(38), COL333 NUMBER(38), COL334 NUMBER(38), COL335 NUMBER(38),
                                COL336 NUMBER(38), COL337 NUMBER(38), COL338 NUMBER(38), COL339 NUMBER(38), COL340 NUMBER(38),
                                COL341 NUMBER(38), COL342 NUMBER(38), COL343 NUMBER(38), COL344 NUMBER(38), COL345 NUMBER(38),
                                COL346 NUMBER(38), COL347 NUMBER(38), COL348 NUMBER(38), COL349 NUMBER(38), COL350 NUMBER(38),
                                COL351 NUMBER(38), COL352 NUMBER(38), COL353 NUMBER(38), COL354 NUMBER(38), COL355 NUMBER(38),
                                COL356 NUMBER(38), COL357 NUMBER(38), COL358 NUMBER(38), COL359 NUMBER(38), COL360 NUMBER(38),
                                COL361 NUMBER(38), COL362 NUMBER(38), COL363 NUMBER(38), COL364 NUMBER(38), COL365 NUMBER(38),
                                COL366 NUMBER(38), COL367 NUMBER(38), COL368 NUMBER(38), COL369 NUMBER(38), COL370 NUMBER(38),
                                COL371 NUMBER(38), COL372 NUMBER(38), COL373 NUMBER(38), COL374 NUMBER(38), COL375 NUMBER(38),
                                COL376 NUMBER(38), COL377 NUMBER(38), COL378 NUMBER(38), COL379 NUMBER(38), COL380 NUMBER(38),
                                COL381 NUMBER(38), COL382 NUMBER(38), COL383 NUMBER(38), COL384 NUMBER(38), COL385 NUMBER(38))
				</CallString>
<Error>
<ErrorCode>-2000</ErrorCode>
<ErrorMessage>Row too long.</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				drop table TAB176
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="177" Responsible="Vladimir Sobol, Oleg Luzginov" TestType="negative">
<Comment>check a critical number of the columns in the primary key column constarint
                columns have the NUMBER data type and different data length
                critical number of the columns = 92</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB177 (
                                COL1 NUMBER(38), COL2 NUMBER(25), COL3 NUMBER(11), COL4 NUMBER(21), COL5 NUMBER(30),
                                COL6 NUMBER(6), COL7 NUMBER(8), COL8 NUMBER(24), COL9 NUMBER(28), COL10 NUMBER(2),
                                COL11 NUMBER(35), COL12 NUMBER(30), COL13 NUMBER(5), COL14 NUMBER(33), COL15 NUMBER(37),
                                COL16 NUMBER(31), COL17 NUMBER(28), COL18 NUMBER(5), COL19 NUMBER(14), COL20 NUMBER(3),
                                COL21 NUMBER(2), COL22 NUMBER(34), COL23 NUMBER(30), COL24 NUMBER(7), COL25 NUMBER(8),
                                COL26 NUMBER(9), COL27 NUMBER(4), COL28 NUMBER(19), COL29 NUMBER(23), COL30 NUMBER(20),
                                COL31 NUMBER(12), COL32 NUMBER(32), COL33 NUMBER(20), COL34 NUMBER(14), COL35 NUMBER(6),
                                COL36 NUMBER(23), COL37 NUMBER(11), COL38 NUMBER(2), COL39 NUMBER(11), COL40 NUMBER(29),
                                COL41 NUMBER(24), COL42 NUMBER(25), COL43 NUMBER(2), COL44 NUMBER(25), COL45 NUMBER(18),
                                COL46 NUMBER(16), COL47 NUMBER(32), COL48 NUMBER(6), COL49 NUMBER(22), COL50 NUMBER(27),
                                COL51 NUMBER(16), COL52 NUMBER(36), COL53 NUMBER(3), COL54 NUMBER(18), COL55 NUMBER(27),
                                COL56 NUMBER(19), COL57 NUMBER(29), COL58 NUMBER(14), COL59 NUMBER(23), COL60 NUMBER(2),
                                COL61 NUMBER(32), COL62 NUMBER(15), COL63 NUMBER(19), COL64 NUMBER(9), COL65 NUMBER(8),
                                COL66 NUMBER(4), COL67 NUMBER(16), COL68 NUMBER(15), COL69 NUMBER(26), COL70 NUMBER(22),
                                COL71 NUMBER(7), COL72 NUMBER(6), COL73 NUMBER(31), COL74 NUMBER(22), COL75 NUMBER(2),
                                COL76 NUMBER(19), COL77 NUMBER(4), COL78 NUMBER(8), COL79 NUMBER(36), COL80 NUMBER(12),
                                COL81 NUMBER(5), COL82 NUMBER(2), COL83 NUMBER(4), COL84 NUMBER(29), COL85 NUMBER(22),
                                COL86 NUMBER(17), COL87 NUMBER(21), COL88 NUMBER(13), COL89 NUMBER(35), COL90 NUMBER(23),
                                COL91 NUMBER(36), COL92 NUMBER(24), COL93 NUMBER(14), COL94 NUMBER(31), COL95 NUMBER(8),
                                COL96 NUMBER(26), COL97 NUMBER(5), COL98 NUMBER(2), COL99 NUMBER(24), COL100 NUMBER(31),
                                COL101 NUMBER(20), COL102 NUMBER(30), COL103 NUMBER(25), COL104 NUMBER(15), COL105 NUMBER(20),
                                COL106 NUMBER(28), COL107 NUMBER(12), COL108 NUMBER(7), COL109 NUMBER(19), COL110 NUMBER(23),
                                COL111 NUMBER(28), COL112 NUMBER(15), COL113 NUMBER(19), COL114 NUMBER(21), COL115 NUMBER(17),
                                COL116 NUMBER(16), COL117 NUMBER(26), COL118 NUMBER(18), COL119 NUMBER(18), COL120 NUMBER(36),
                                COL121 NUMBER(4), COL122 NUMBER(30), COL123 NUMBER(17), COL124 NUMBER(8), COL125 NUMBER(21),
                                COL126 NUMBER(37), COL127 NUMBER(18), COL128 NUMBER(8), COL129 NUMBER(34), COL130 NUMBER(4),
                                COL131 NUMBER(25), COL132 NUMBER(19), COL133 NUMBER(33), COL134 NUMBER(2), COL135 NUMBER(2),
                                COL136 NUMBER(27), COL137 NUMBER(14), COL138 NUMBER(23), COL139 NUMBER(33), COL140 NUMBER(34),
                                COL141 NUMBER(11), COL142 NUMBER(30), COL143 NUMBER(37), COL144 NUMBER(27), COL145 NUMBER(5),
                                COL146 NUMBER(15), COL147 NUMBER(28), COL148 NUMBER(12), COL149 NUMBER(17), COL150 NUMBER(21),
                                COL151 NUMBER(17), COL152 NUMBER(1), COL153 NUMBER(36), COL154 NUMBER(6), COL155 NUMBER(12),
                                COL156 NUMBER(36), COL157 NUMBER(4), COL158 NUMBER(8), COL159 NUMBER(24), COL160 NUMBER(28),
                                COL161 NUMBER(14), COL162 NUMBER(20), COL163 NUMBER(3), COL164 NUMBER(5), COL165 NUMBER(21),
                                COL166 NUMBER(8), COL167 NUMBER(11), COL168 NUMBER(4), COL169 NUMBER(36), COL170 NUMBER(3),
                                COL171 NUMBER(22), COL172 NUMBER(7), COL173 NUMBER(9), COL174 NUMBER(13), COL175 NUMBER(25),
                                COL176 NUMBER(1), COL177 NUMBER(16), COL178 NUMBER(13), COL179 NUMBER(16), COL180 NUMBER(25),
                                COL181 NUMBER(37), COL182 NUMBER(32), COL183 NUMBER(6), COL184 NUMBER(6), COL185 NUMBER(23),
                                COL186 NUMBER(7), COL187 NUMBER(12), COL188 NUMBER(32), COL189 NUMBER(31), COL190 NUMBER(30),
                                COL191 NUMBER(11), COL192 NUMBER(27), COL193 NUMBER(9), COL194 NUMBER(4), COL195 NUMBER(3),
                                COL196 NUMBER(6), COL197 NUMBER(10), COL198 NUMBER(24), COL199 NUMBER(22), COL200 NUMBER(15),
                                COL201 NUMBER(18), COL202 NUMBER(11), COL203 NUMBER(15), COL204 NUMBER(36), COL205 NUMBER(34),
                                COL206 NUMBER(20), COL207 NUMBER(3), COL208 NUMBER(16), COL209 NUMBER(6), COL210 NUMBER(9),
                                COL211 NUMBER(33), COL212 NUMBER(11), COL213 NUMBER(9), COL214 NUMBER(33), COL215 NUMBER(22),
                                COL216 NUMBER(13), COL217 NUMBER(22), COL218 NUMBER(37), COL219 NUMBER(14), COL220 NUMBER(3),
                                COL221 NUMBER(16), COL222 NUMBER(21), COL223 NUMBER(34), COL224 NUMBER(32), COL225 NUMBER(34),
                                COL226 NUMBER(24), COL227 NUMBER(35), COL228 NUMBER(34), COL229 NUMBER(13), COL230 NUMBER(4),
                                COL231 NUMBER(12), COL232 NUMBER(4), COL233 NUMBER(3), COL234 NUMBER(3), COL235 NUMBER(32),
                                COL236 NUMBER(25), COL237 NUMBER(6), COL238 NUMBER(21), COL239 NUMBER(1), COL240 NUMBER(30),
                                COL241 NUMBER(4), COL242 NUMBER(8), COL243 NUMBER(14), COL244 NUMBER(31), COL245 NUMBER(32),
                                COL246 NUMBER(23), COL247 NUMBER(12), COL248 NUMBER(36), COL249 NUMBER(33), COL250 NUMBER(5),
                                COL251 NUMBER(10), COL252 NUMBER(1), COL253 NUMBER(16), COL254 NUMBER(15), COL255 NUMBER(15),
                                COL256 NUMBER(12), COL257 NUMBER(30), COL258 NUMBER(29), COL259 NUMBER(16), COL260 NUMBER(4),
                                COL261 NUMBER(4), COL262 NUMBER(34), COL263 NUMBER(25), COL264 NUMBER(29), COL265 NUMBER(28),
                                COL266 NUMBER(15), COL267 NUMBER(36), COL268 NUMBER(31), COL269 NUMBER(17), COL270 NUMBER(23),
                                COL271 NUMBER(16), COL272 NUMBER(27), COL273 NUMBER(3), COL274 NUMBER(3), COL275 NUMBER(21),
                                COL276 NUMBER(19), COL277 NUMBER(23), COL278 NUMBER(35), COL279 NUMBER(23), COL280 NUMBER(18),
                                COL281 NUMBER(19), COL282 NUMBER(37), COL283 NUMBER(18), COL284 NUMBER(14), COL285 NUMBER(27),
                                COL286 NUMBER(9), COL287 NUMBER(34), COL288 NUMBER(10), COL289 NUMBER(11), COL290 NUMBER(21),
                                COL291 NUMBER(28), COL292 NUMBER(15), COL293 NUMBER(17), COL294 NUMBER(7), COL295 NUMBER(19),
                                COL296 NUMBER(9), COL297 NUMBER(33), COL298 NUMBER(24), COL299 NUMBER(24), COL300 NUMBER(26),
                                COL301 NUMBER(19), COL302 NUMBER(35), COL303 NUMBER(26), COL304 NUMBER(9), COL305 NUMBER(9),
                                COL306 NUMBER(27), COL307 NUMBER(4), COL308 NUMBER(28), COL309 NUMBER(27), COL310 NUMBER(32),
                                COL311 NUMBER(1), COL312 NUMBER(28), COL313 NUMBER(1), COL314 NUMBER(18), COL315 NUMBER(35),
                                COL316 NUMBER(7), COL317 NUMBER(25), COL318 NUMBER(28), COL319 NUMBER(25), COL320 NUMBER(1),
                                COL321 NUMBER(31), COL322 NUMBER(33), COL323 NUMBER(25), COL324 NUMBER(18), COL325 NUMBER(29),
                                COL326 NUMBER(10), COL327 NUMBER(22), COL328 NUMBER(35), COL329 NUMBER(21), COL330 NUMBER(33),
                                COL331 NUMBER(25), COL332 NUMBER(31), COL333 NUMBER(4), COL334 NUMBER(29), COL335 NUMBER(32),
                                COL336 NUMBER(35), COL337 NUMBER(15), COL338 NUMBER(2), COL339 NUMBER(1), COL340 NUMBER(34),
                                COL341 NUMBER(1), COL342 NUMBER(32), COL343 NUMBER(21), COL344 NUMBER(20), COL345 NUMBER(27),
                                COL346 NUMBER(10), COL347 NUMBER(33), COL348 NUMBER(10), COL349 NUMBER(33), COL350 NUMBER(15),
                                COL351 NUMBER(8), COL352 NUMBER(10), COL353 NUMBER(28), COL354 NUMBER(15), COL355 NUMBER(10),
                                COL356 NUMBER(25), COL357 NUMBER(27), COL358 NUMBER(15), COL359 NUMBER(11), COL360 NUMBER(12),
                                COL361 NUMBER(9), COL362 NUMBER(4), COL363 NUMBER(8), COL364 NUMBER(21), COL365 NUMBER(2),
                                COL366 NUMBER(31), COL367 NUMBER(5), COL368 NUMBER(16), COL369 NUMBER(16), COL370 NUMBER(27),
                                COL371 NUMBER(3), COL372 NUMBER(34), COL373 NUMBER(15), COL374 NUMBER(10), COL375 NUMBER(33),
                                COL376 NUMBER(30), COL377 NUMBER(20), COL378 NUMBER(25), COL379 NUMBER(1), COL380 NUMBER(27),
                                COL381 NUMBER(22), COL382 NUMBER(16), COL383 NUMBER(10), COL384 NUMBER(6), COL385 NUMBER(2),
                                COL386 NUMBER(11), COL387 NUMBER(32), COL388 NUMBER(3), COL389 NUMBER(23), COL390 NUMBER(11),
                                COL391 NUMBER(14), COL392 NUMBER(23), COL393 NUMBER(10), COL394 NUMBER(4), COL395 NUMBER(18),
                                COL396 NUMBER(10), COL397 NUMBER(4), COL398 NUMBER(21), COL399 NUMBER(8), COL400 NUMBER(20),
                                COL401 NUMBER(24), COL402 NUMBER(20), COL403 NUMBER(22), COL404 NUMBER(11), COL405 NUMBER(32),
                                COL406 NUMBER(31), COL407 NUMBER(31), COL408 NUMBER(2), COL409 NUMBER(3), COL410 NUMBER(8),
                                COL411 NUMBER(26), COL412 NUMBER(10), COL413 NUMBER(33), COL414 NUMBER(36), COL415 NUMBER(9),
                                COL416 NUMBER(3), COL417 NUMBER(12), COL418 NUMBER(13), COL419 NUMBER(32), COL420 NUMBER(18),
                                COL421 NUMBER(18), COL422 NUMBER(31), COL423 NUMBER(20), COL424 NUMBER(20), COL425 NUMBER(1),
                                COL426 NUMBER(18), COL427 NUMBER(33), COL428 NUMBER(8), COL429 NUMBER(12), COL430 NUMBER(32),
                                COL431 NUMBER(34), COL432 NUMBER(7), COL433 NUMBER(35), COL434 NUMBER(17), COL435 NUMBER(19),
                                COL436 NUMBER(25), COL437 NUMBER(33), COL438 NUMBER(30), COL439 NUMBER(31), COL440 NUMBER(37),
                                COL441 NUMBER(29), COL442 NUMBER(19), COL443 NUMBER(29), COL444 NUMBER(7), COL445 NUMBER(27),
                                COL446 NUMBER(3), COL447 NUMBER(1), COL448 NUMBER(15), COL449 NUMBER(35), COL450 NUMBER(18),
                                COL451 NUMBER(25), COL452 NUMBER(18), COL453 NUMBER(27), COL454 NUMBER(20), COL455 NUMBER(22),
                                COL456 NUMBER(24), COL457 NUMBER(4), COL458 NUMBER(8), COL459 NUMBER(34), COL460 NUMBER(20),
                                COL461 NUMBER(1), COL462 NUMBER(31), COL463 NUMBER(30), COL464 NUMBER(30), COL465 NUMBER(11),
                                COL466 NUMBER(26), COL467 NUMBER(33), COL468 NUMBER(15), COL469 NUMBER(36), COL470 NUMBER(15),
                                COL471 NUMBER(14), COL472 NUMBER(28), COL473 NUMBER(5), COL474 NUMBER(35), COL475 NUMBER(27),
                                COL476 NUMBER(37), COL477 NUMBER(12), COL478 NUMBER(22), COL479 NUMBER(8), COL480 NUMBER(16),
                                COL481 NUMBER(18), COL482 NUMBER(1), COL483 NUMBER(7), COL484 NUMBER(32), COL485 NUMBER(4),
                                COL486 NUMBER(13), COL487 NUMBER(30), COL488 NUMBER(24), COL489 NUMBER(17), COL490 NUMBER(23),
                                COL491 NUMBER(3), COL492 NUMBER(8), COL493 NUMBER(24), COL494 NUMBER(28), COL495 NUMBER(22),
                                COL496 NUMBER(33), COL497 NUMBER(17), COL498 NUMBER(34), COL499 NUMBER(10), COL500 NUMBER(14),
                                COL501 NUMBER(32), COL502 NUMBER(9), COL503 NUMBER(36), COL504 NUMBER(11), COL505 NUMBER(6),
                                COL506 NUMBER(21), COL507 NUMBER(11), COL508 NUMBER(31), COL509 NUMBER(4), COL510 NUMBER(25),
                                COL511 NUMBER(35), COL512 NUMBER(19), COL513 NUMBER(26), COL514 NUMBER(17), COL515 NUMBER(18),
                                COL516 NUMBER(36), COL517 NUMBER(1), COL518 NUMBER(31), COL519 NUMBER(6), COL520 NUMBER(31),
                                COL521 NUMBER(2), COL522 NUMBER(9), COL523 NUMBER(16), COL524 NUMBER(15), COL525 NUMBER(33),
                                COL526 NUMBER(11), COL527 NUMBER(2), COL528 NUMBER(29), COL529 NUMBER(12), COL530 NUMBER(12),
                                COL531 NUMBER(6), COL532 NUMBER(33), COL533 NUMBER(34), COL534 NUMBER(17), COL535 NUMBER(26),
                                COL536 NUMBER(24), COL537 NUMBER(29), COL538 NUMBER(1), COL539 NUMBER(15), COL540 NUMBER(20),
                                COL541 NUMBER(11), COL542 NUMBER(31), COL543 NUMBER(21), COL544 NUMBER(24), COL545 NUMBER(9),
                                COL546 NUMBER(16), COL547 NUMBER(21), COL548 NUMBER(1), COL549 NUMBER(31), COL550 NUMBER(10),
                                COL551 NUMBER(14), COL552 NUMBER(2), COL553 NUMBER(15), COL554 NUMBER(29), COL555 NUMBER(13),
                                COL556 NUMBER(4), COL557 NUMBER(15), COL558 NUMBER(14), COL559 NUMBER(1), COL560 NUMBER(9),
                                COL561 NUMBER(34), COL562 NUMBER(5), COL563 NUMBER(33), COL564 NUMBER(16), COL565 NUMBER(33),
                                COL566 NUMBER(9), COL567 NUMBER(28), COL568 NUMBER(37), COL569 NUMBER(33), COL570 NUMBER(2),
                                COL571 NUMBER(13), COL572 NUMBER(25), COL573 NUMBER(19), COL574 NUMBER(1), COL575 NUMBER(26),
                                COL576 NUMBER(21), COL577 NUMBER(3), COL578 NUMBER(21), COL579 NUMBER(19), COL580 NUMBER(6),
                                COL581 NUMBER(28), COL582 NUMBER(31), COL583 NUMBER(3), COL584 NUMBER(31), COL585 NUMBER(21),
                                COL586 NUMBER(22), COL587 NUMBER(20), COL588 NUMBER(36), COL589 NUMBER(8), COL590 NUMBER(20),
                                COL591 NUMBER(4), COL592 NUMBER(19), COL593 NUMBER(16), COL594 NUMBER(33), COL595 NUMBER(13),
                                COL596 NUMBER(19), COL597 NUMBER(26), COL598 NUMBER(15), COL599 NUMBER(14), COL600 NUMBER(31),
                                COL601 NUMBER(13), COL602 NUMBER(5), COL603 NUMBER(23), COL604 NUMBER(24), COL605 NUMBER(5),
                                COL606 NUMBER(32), COL607 NUMBER(17), COL608 NUMBER(25), COL609 NUMBER(5), COL610 NUMBER(8),
                                COL611 NUMBER(11), COL612 NUMBER(23), COL613 NUMBER(10), COL614 NUMBER(3), COL615 NUMBER(4),
                                COL616 NUMBER(13), COL617 NUMBER(11), COL618 NUMBER(37), COL619 NUMBER(4), COL620 NUMBER(25),
                                COL621 NUMBER(6), COL622 NUMBER(31), COL623 NUMBER(33), COL624 NUMBER(7), COL625 NUMBER(21),
                                COL626 NUMBER(18), COL627 NUMBER(7), COL628 NUMBER(16), COL629 NUMBER(24), COL630 NUMBER(20),
                                COL631 NUMBER(22), COL632 NUMBER(34), COL633 NUMBER(19), COL634 NUMBER(5), COL635 NUMBER(22),
                                COL636 NUMBER(30), COL637 NUMBER(19), COL638 NUMBER(31), COL639 NUMBER(9), COL640 NUMBER(13),
                                COL641 NUMBER(21), COL642 NUMBER(24), COL643 NUMBER(16), COL644 NUMBER(30), COL645 NUMBER(19),
                                COL646 NUMBER(18), COL647 NUMBER(17), COL648 NUMBER(18), COL649 NUMBER(9), COL650 NUMBER(35),
                                COL651 NUMBER(15), COL652 NUMBER(20), COL653 NUMBER(17), COL654 NUMBER(11), COL655 NUMBER(7),
                                COL656 NUMBER(23), COL657 NUMBER(29), COL658 NUMBER(11), COL659 NUMBER(26), COL660 NUMBER(31),
                                COL661 NUMBER(37), COL662 NUMBER(22), COL663 NUMBER(21), COL664 NUMBER(37), COL665 NUMBER(8),
                                COL666 NUMBER(1), COL667 NUMBER(33), COL668 NUMBER(24), COL669 NUMBER(15), COL670 NUMBER(35),
                                COL671 NUMBER(28), COL672 NUMBER(36), COL673 NUMBER(8), COL674 NUMBER(36), COL675 NUMBER(1),
                                COL676 NUMBER(36), COL677 NUMBER(11), COL678 NUMBER(5), COL679 NUMBER(22), COL680 NUMBER(35),
                                COL681 NUMBER(3), COL682 NUMBER(31), COL683 NUMBER(19), COL684 NUMBER(4), COL685 NUMBER(32),
                                COL686 NUMBER(18), COL687 NUMBER(17), COL688 NUMBER(19), COL689 NUMBER(10), COL690 NUMBER(17),
                                COL691 NUMBER(20), COL692 NUMBER(22), COL693 NUMBER(9), COL694 NUMBER(4), COL695 NUMBER(35)
                                ,
                                CONSTRAINT CONSTR1
                                PRIMARY KEY (COL1, COL2, COL3, COL4, COL5, COL6, COL7, COL8,
                                COL9, COL10, COL11, COL12, COL13, COL14, COL15, COL16,
                                COL17, COL18, COL19, COL20, COL21, COL22, COL23, COL24,
                                COL25, COL26, COL27, COL28, COL29, COL30, COL31, COL32,
                                COL33, COL34, COL35, COL36, COL37, COL38, COL39, COL40,
                                COL41, COL42, COL43, COL44, COL45, COL46, COL47, COL48,
                                COL49, COL50, COL51, COL52, COL53, COL54, COL55, COL56,
                                COL57, COL58, COL59, COL60, COL61, COL62, COL63, COL64,
                                COL65, COL66, COL67, COL68, COL69, COL70, COL71, COL72,
                                COL73, COL74, COL75, COL76, COL77, COL78, COL79, COL80,
                                COL81, COL82, COL83, COL84, COL85, COL86, COL87, COL88,
                                COL89, COL90, COL91, COL92) )
				</CallString>
<Error>
<ErrorCode>-2001</ErrorCode>
<ErrorMessage>Key too long:COL92.</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				drop table TAB177
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="178" Responsible="Oleg Luzginov" TestType="negative">
<Comment>incorrect column primary key constaraint with critical CHAR column length = 1024</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB178 (
                                        COL1 CHARACTER(1024) PRIMARY KEY,
                                        COL2 RAW(7455),
                                        COL3 CHAR(7698),
                                        COL4 INTEGER,
                                        COL5 RAW(3542),
                                        COL6 VARCHAR2(6351),
                                        COL7 CHARACTER(4370),
                                        COL8 VARCHAR(781),
                                        COL9 VARCHAR2(7307),
                                        COL10 ROWID )
				</CallString>
<Error>
<ErrorCode>-2001</ErrorCode>
<ErrorMessage>Key too long:COL1</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				drop table TAB178
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="179" Responsible="Oleg Luzginov" TestType="negative">
<Comment>column UNIQUE constaraints with critical CHAR column length = 1024
both on unicode and ascii databases (see also test #1179, same level)</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB179 (
                                        COL1 DATE,
                                        COL2 RAW(3021),
                                        COL3 INT,
                                        COL4 LONG,
                                        COL5 ROWID,
                                        COL6 FLOAT(*),
                                        COL7 CHAR(2728),
                                        COL8 FLOAT(22),
                                        COL9 NUMBER(34),
                                        COL10 VARCHAR(1024) UNIQUE,
                                        COL11 ROWID,
                                        COL12 RAW(3549),
                                        COL13 RAW(4000),
                                        COL14 CHAR(4000),
                                        COL15 NUMBER(35),
                                        COL16 ROWID,
                                        COL17 RAW(2879) )
				</CallString>
<Error>
<ErrorCode>-2001</ErrorCode>
<ErrorMessage>Key too long</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				drop table TAB179
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="180" Responsible="Oleg Luzginov" TestType="negative">
<Comment>column UNIQUE constaraints for LONG column; see COL3</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB180 (
                                        COL1 VARCHAR2(2221),
                                        COL2 RAW(7088),
                                        COL3 LONG UNIQUE,
                                        COL4 CHARACTER(4000),
                                        COL5 DATE )
				</CallString>
<Error>
<ErrorCode>-7032</ErrorCode>
<ErrorMessage>SQL statement not allowed for column of data type LONG</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				drop table TAB180
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="182" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>create_table_as_select 
invalid WHERE conditions</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>

			CREATE TABLE tab182n_1 (
                                        COL1 INT,
                                        COL2 CHAR(230),
                                        COL3 VARCHAR2 (800),
                                        COL4 RAW(237)
                                        )
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>


	  CREATE TABLE tab182n_2 (
                                        COL5 INTEGER,
                                        COL6 FLOAT(38),
                                        COL7 RAW(800),
                                        COL8 CHARACTER(132)
                                        )

</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>


	      insert into tab182n_1 (col1) values (1) 
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>


	insert into tab182n_1 (col1) values (2)
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>


	 insert into tab182n_2 (col5) values (1)
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

	 insert into tab182n_2 (col5) values (2)

</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>


	 insert into tab182n_2 (col5) values (2)
</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>


	      create table tab182n_3 as select distinct * from tab182n_1, tab182n_2 WHERE &gt; 'b'

</CallString>
<Error>
<ErrorCode>-5010</ErrorCode>
<ErrorMessage>[-5010] (at 87): Missing value specification</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
 create table tab182n_3 as select distinct * from tab182n_1, tab182n_2 WHERE col8 = 
 </CallString>
<Error>
<ErrorCode>-3014</ErrorCode>
<ErrorMessage>[-3014] (at 85): Invalid end of SQL statement</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
 create table tab182n_3 as select distinct * from tab182n_1, tab182n_2 WHERE to_char(col1) = col7
 </CallString>
<Error>
<ErrorCode>-8006</ErrorCode>
<ErrorMessage>[-8006] (at 95): Data types must be compatible</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
 create table tab182n_3 as select distinct * from tab182n_1, tab182n_2 WHERE col2 = col3 = col8
 </CallString>
<Error>
<ErrorCode>-3014</ErrorCode>
<ErrorMessage>[-3014] (at 91): Invalid end of SQL statement</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
	      select * from tab182n_3
</CallString>
<Error>
<ErrorCode>-942</ErrorCode>
<ErrorMessage>[-942] (at 23): Unknown table name:TAB182N_3</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
	    drop table tab182n_1
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
	    drop table tab182n_2
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
	    drop table tab182n_3</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="183" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>create_table_as_select 
HAVING ... is specified invalidly</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE TABLE tab183n_1 (
                                        "date" date,
                                        item char(30),
                                        amount int)

</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

 insert into tab183n_1 values (TO_DATE('23-01-2002', 'DD-MM-YYYY'), 'washing', 5) 
                                        
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
 insert into tab183n_1 values (TO_DATE('03-02-2002', 'DD-MM-YYYY'), 'spare parts', 20) 
                                        
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
 insert into tab183n_1 values (TO_DATE('15-02-2002', 'DD-MM-YYYY'), 'repairing', 200) 
                                       
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
  insert into tab183n_1 values (TO_DATE('23-03-2002', 'DD-MM-YYYY'), 'fuel', 13) 
                                     
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
    insert into tab183n_1 values (TO_DATE('17-05-2002', 'DD-MM-YYYY'), 'spare parts', 12) 
                                      
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
   insert into tab183n_1 values (TO_DATE('18-06-2002', 'DD-MM-YYYY'), 'washing', 7) 
                                        
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
 insert into tab183n_1 values (TO_DATE('23-07-2002', 'DD-MM-YYYY'), 'fuel', 14) 
                                        
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
 insert into tab183n_1 values (TO_DATE('24-07-2002', 'DD-MM-YYYY'), 'washing', 4)                                             
                                        
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
 insert into tab183n_1 values (TO_DATE('25-07-2002', 'DD-MM-YYYY'), 'fuel', 12)
                                         
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into tab183n_1 values (TO_DATE('13-08-2002', 'DD-MM-YYYY'), 'washing', 2)
                                         
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into tab183n_1 values (TO_DATE('14-08-2002', 'DD-MM-YYYY'), 'fuel', 14) 
                                         
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into tab183n_1 values (TO_DATE('23-11-2002', 'DD-MM-YYYY'), 'repairing', 67)
                                         
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into tab183n_1 values (TO_DATE('22-12-2002', 'DD-MM-YYYY'), 'washing', 6) 
</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
create table tab183n_2
	as select item, sum(amount) total, count(item) sum
	from tab183n_1
	group by item 
	having sum(amount) =
</CallString>
<Error>
<ErrorCode>-3014</ErrorCode>
<ErrorMessage>[-3014] (at 130): Invalid end of SQL statement</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
create table tab183n_2
	as select item, sum(amount) total, count(item) sum
	from tab183n_1
	group by item 
	having amount &lt; 4
 </CallString>
<Error>
<ErrorCode>-8017</ErrorCode>
<ErrorMessage>[-8017] (at 117): Column must be group column:AMOUNT</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
 create table tab183n_2
	as select item, sum(amount) total, count(item) sum
	from tab183n_1
	group by item 
	having sum(amount) = 'fr'
 </CallString>
<Error>
<ErrorCode>-3016</ErrorCode>
<ErrorMessage>[-3016]: Invalid numeric constant</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
 create table tab183n_2
	as select item, sum(amount) total, count(item) sum
	from tab183n_1
	group by item 
 having item	
 </CallString>
<Error>
<ErrorCode>-8006</ErrorCode>
<ErrorMessage>[-8006] (at 118): Data types must be compatible</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="true">
<CallString>
select * from tab183n_2 order by total
</CallString>
<Error>
<ErrorCode>-942</ErrorCode>
<ErrorMessage>[-942] (at 16): Unknown table name:TAB183N_2</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
drop table tab183n_1
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
drop table tab183n_2</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="184" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>create_table_as_select
and defining a FOREIGN KEY on the new table,
but referencing (and tying to import values from) 
columns of the parent_table containing data violating the foreign key</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>

create table tab184n_1 (
	lastname1 char (50),
	firstname1 char(40),
	l_name2 char (50),
	f_name2 char (40),
             city char(50),
	zip char(5), 
	constraint uniq1 unique (lastname1, firstname1))
	
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>	
insert into tab184n_1 (lastname1, firstname1, l_name2, f_name2,city, zip) values ('Mueller', 'Holger', 'Weber', 'Christian','Berlin', 10445)
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
	insert into tab184n_1 (lastname1, firstname1, l_name2, f_name2, city, zip) values ('Schmidt', 'Bernd', 'Holtz', 'Werner', 'Berlin', 10375)


</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
	create table tab184n_2 (constraint fk foreign key (lastn3, firstn3) 
				references tab184n_1 (lastname1, firstname1)) as select l_name2 lastn3, f_name2 firstn3, zip from tab184n_1

</CallString>
<Error>
<ErrorCode>-35</ErrorCode>
<ErrorMessage>[-35]: Referential integrity violated:FK,TESTUSR,TAB184N_2</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="true">
<CallString>
select * from tab184n_2
</CallString>
<Error>
<ErrorCode>-942</ErrorCode>
<ErrorMessage>[-942] (at 16): Unknown table name:TAB184N_2</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
 drop table tab184n_1
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
  drop table tab184n_2

</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="185" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>create_table_as_select with invalid specified GROUP BY</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
	
		
		CREATE TABLE tab185n_1 (
                                        COL1 INT,
                                        COL2 CHAR(230),
                                        COL3 CHAR (80),
                                        COL4 FLOAT
                                        )
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

	insert into tab185n_1 values (1, 'knife', 'camping', 7)
                                                  
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>


	    insert into tab185n_1 values (2, 'boat', 'camping', 9)
                                               
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>


	  insert into tab185n_1  values (1, 'chair', 'usage at home', 4)
                              
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>


	insert into tab185n_1  values (2, 'table', 'camping', 1)
                                           
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>


	insert into tab185n_1  values (3, 'fish and chips', 'hungry people...', 80)

</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>


	 create table tab185n_2 as select count(col3) "COUNT_1" from tab185n_1 group by count(col3)
  </CallString>
<Error>
<ErrorCode>-3021</ErrorCode>
<ErrorMessage>[-3021] (at 85): Invalid mixture of functions and columns</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
 create table tab185n_3 as select col2, col3 "for", count(col3) "COUNT_1" from tab185n_1 group by col3
  </CallString>
<Error>
<ErrorCode>-8017</ErrorCode>
<ErrorMessage>[-8017] (at 36): Column must be group column:COL2</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
 create table tab185n_4 as select col3 "for", count(col3) "COUNT_1", sum(col4) from tab185n_1 group by (sum(col4))
</CallString>
<Error>
<ErrorCode>-3021</ErrorCode>
<ErrorMessage>[-3021] (at 106): Invalid mixture of functions and columns</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
 create table tab185n_5 as select count(col3), avg(col4) from tab185n_1 group col4
 </CallString>
<Error>
<ErrorCode>-5015</ErrorCode>
<ErrorMessage>[-5015] (at 80): Missing keyword:BY</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
  create table tab185n_6 as select col1, count(col3) "COUNT_1", avg(col4) from tab185n_1 group by 
</CallString>
<Error>
<ErrorCode>-3014</ErrorCode>
<ErrorMessage>[-3014] (at 99): Invalid end of SQL statement</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
 create table tab185n_7 as select count(col3) "COUNT_1", avg(col4) from tab185n_1 group col3 by 
 
 </CallString>
<Error>
<ErrorCode>-5015</ErrorCode>
<ErrorMessage>[-5015] (at 90): Missing keyword:BY</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>SELECT count(tablename) FROM tables 
	where tablename in ('TAB185N_2','TAB185N_3','TAB185N_4','TAB185N_5','TAB185N_6','TAB185N_7') 
</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>EXPRESSION1</ColumnName>
<ColumnType>INT</ColumnType>
</ColumnDefinition>
<Row>
<Value>0</Value>
</Row>
</ResultSet>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>


	DROP TABLE tab185n_1</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="186" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>create_table_as_select 
with invalid defined UNIONs</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>

	CREATE TABLE TAB186N_1 (
                             name char(30),
                             col2 int,
                             col3 char(30),
			     col4 int)

</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
 insert into TAB186N_1 (name) values ('Helen') 

                                             
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into TAB186N_1 (name) values ('Andrew') 
                                           
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
 insert into TAB186N_1 (name) values ('Dick') 
                                          
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE TABLE TAB186N_2 (
                    	     name char(30),
                             col2 int,
                             col3 raw(80),
			     col4 int)
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into TAB186N_2 (name, col3) values ('Roland, Peter', 'CB') 
                                                  

</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into TAB186N_2 (name, col3) values ('Helen', '10') 
                                         
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into TAB186N_2 (name) values ('Dick') 
                                         
</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
   
      	create table TAB186N_3 as select name
                                         from TAB186N_1 
					 union 
					 select *
					 from TAB186N_2
      </CallString>
<Error>
<ErrorCode>-8028</ErrorCode>
<ErrorMessage>[-8028]: UNION columns must be compatible</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
	create table TAB186N_4 as select name
                                         from TAB186N_1 
					 unions 
					 select name
					 from TAB186N_2
      </CallString>
<Error>
<ErrorCode>-3014</ErrorCode>
<ErrorMessage>[-3014] (at 118): Invalid end of SQL statement</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
          	create table TAB186N_5 as select name
                                         from TAB186N_1 
					 "union"
					 select name
					 from TAB186N_2              
      </CallString>
<Error>
<ErrorCode>-3014</ErrorCode>
<ErrorMessage>[-3014] (at 128): Invalid end of SQL statement</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
      	create table TAB186N_6 as select name
                                         from TAB186N_1 
					 union 
					 select col3
					 from TAB186N_2
   
   
                     

</CallString>
<Error>
<ErrorCode>-8028</ErrorCode>
<ErrorMessage>[-8028]: UNION columns must be compatible:COL3</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="true">
<CallString>
  select count(tablename) from tables where tablename in ('TAB186N_3','TAB186N_4','TAB186N_5','TAB186N_6') 

</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>EXPRESSION1</ColumnName>
<ColumnType>INT</ColumnType>
</ColumnDefinition>
<Row>
<Value>0</Value>
</Row>
</ResultSet>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
drop table TAB186N_1
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
drop table TAB186N_2</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="187" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>create_table_as_select 
with invalid defined UNION ALLs</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>

	CREATE TABLE TAB187N_1 (
                             name char(30),
                             col2 int,
                             col3 raw(80),
			     col4 int)

</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
 insert into TAB187N_1 (name) values ('Helen') 

                                             
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into TAB187N_1 (name) values ('Andrew') 
                                           
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
 insert into TAB187N_1 (name) values ('Dick') 
                       

</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE TABLE TAB187N_2 (
                    	     name char(30),
                             col2 int,
                             col3 raw(80),
			     col4 int)
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into TAB187N_2 (name, col3) values ('Roland, Peter', 'CB') 
                                                  

</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into TAB187N_2 (name, col3) values ('Helen', '10') 
                                         
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into TAB187N_2 (name) values ('Dick') 

</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
   
      	create table TAB187N_3 as select name
                                         from TAB187N_1 
					 union all
					 select *
					 from TAB187N_2
      </CallString>
<Error>
<ErrorCode>-8028</ErrorCode>
<ErrorMessage>[-8028]: UNION columns must be compatible</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
	create table TAB187N_4 as select name
                                         from TAB187N_1 
					 unionall
					 select name
					 from TAB187N_2
      </CallString>
<Error>
<ErrorCode>-3014</ErrorCode>
<ErrorMessage>[-3014] (at 119): Invalid end of SQL statement</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
          	create table TAB187N_5 as select name
                                         from TAB187N_1 
					 union_all
					 select name
					 from TAB187N_2              
      </CallString>
<Error>
<ErrorCode>-3014</ErrorCode>
<ErrorMessage>[-3014] (at 130): Invalid end of SQL statement</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
      	create table TAB187N_6 as select *
                                         from TAB187N_1 
					 union all
					 select *
					 from TAB187N_4
   
   

</CallString>
<Error>
<ErrorCode>-942</ErrorCode>
<ErrorMessage>[-942] (at 143): Unknown table name:TAB187N_4</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="true">
<CallString>
  select count(tablename) from tables where tablename in ('TAB187N_3','TAB187N_4','TAB187N_5','TAB187N_6') 

</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>EXPRESSION1</ColumnName>
<ColumnType>INT</ColumnType>
</ColumnDefinition>
<Row>
<Value>0</Value>
</Row>
</ResultSet>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
drop table TAB187N_1
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
drop table TAB187N_2</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="188" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>create_table_as_select 
with invalid defined INTERSECTs</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>


	CREATE TABLE TAB188N_1 (
                             name char(30),
                             col2 int,
                             col3 char(30),
			     col4 int)


</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

 insert into TAB188N_1 (name) values ('Helen') 

                                             

</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

insert into TAB188N_1 (name) values ('Andrew') 
                                           

</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

 insert into TAB188N_1 (name) values ('Dick') 
                                          

</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

CREATE TABLE TAB188N_2 (
                    	     name char(30),
                             col2 int,
                             col3 raw(80),
			     col4 int)

</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

insert into TAB188N_2 (name, col3) values ('Roland, Peter', 'CB') 
                                                  


</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

insert into TAB188N_2 (name, col3) values ('Helen', '10') 
                                         

</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

insert into TAB188N_2 (name) values ('Dick') 
                                         

</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>

   
      	create table TAB188N_3 as select name
                                         from TAB188N_1 
					 intersect    
					 select *
					 from TAB188N_2
      
</CallString>
<Error>
<ErrorCode>-8028</ErrorCode>
<ErrorMessage>[-8028]: UNION columns must be compatible</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

	create table TAB188N_4 as select name
                                         from TAB188N_1 
					 intersectione
					 select name
					 from TAB188N_2
      
</CallString>
<Error>
<ErrorCode>-3014</ErrorCode>
<ErrorMessage>[-3014] (at 125): Invalid end of SQL statement</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

          	create table TAB188N_5 as select name
                                         from TAB188N_1 
					 "intersect"
					 select name
					 from TAB188N_2              
      
</CallString>
<Error>
<ErrorCode>-3014</ErrorCode>
<ErrorMessage>[-3014] (at 133): Invalid end of SQL statement</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

      	create table TAB188N_6 as select name
                                         from TAB188N_1 
					 intersect
					 select col3
					 from TAB188N_2
   
   
                     


</CallString>
<Error>
<ErrorCode>-8028</ErrorCode>
<ErrorMessage>[-8028]: UNION columns must be compatible:COL3</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="true">
<CallString>

  select count(tablename) from tables where tablename in ('TAB188N_3','TAB188N_4','TAB188N_5','TAB188N_6') 


</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>EXPRESSION1</ColumnName>
<ColumnType>INT</ColumnType>
</ColumnDefinition>
<Row>
<Value>0</Value>
</Row>
</ResultSet>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>

drop table TAB188N_1

</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>

drop table TAB188N_2</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="189" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>create_table_as_select 
with invalid defined MINUSes</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>

	CREATE TABLE TAB189N_1 (
                             name char(30),
                             col2 int,
                             col3 char(30),
			     col4 int)


                                          
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into TAB189N_1 (name) values ('Victoria') 
                                         
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into TAB189N_1 (name) values ('Mary') 
                                         
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into TAB189N_1 (name) values ('George')
                                         
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into TAB189N_1 (name) values ('Richard') 
                                         
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into TAB189N_1 (name) values ('Roland, Peter')  
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into TAB189N_1 (name) values ('11')
                                         
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into TAB189N_1 (name) values ('22') 
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE TABLE TAB189N_2 (
                    	     name char(30),
                             col2 int,
                             col3 char(30),
			     col4 raw(80))
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into TAB189N_2 (name) values ('Roland, Peter') 
                                                  

</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into TAB189N_2 (name) values ('Chris') 
                                         
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into TAB189N_2 (name) values ('Richard') 
                                         
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into TAB189N_2 (name) values ('Taylor') 
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into TAB189N_2 (col2) values (22) 
                                         
                                         
</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
	create table TAB189N_3 as select name
                                         from TAB189N_1 
					 minus
					 select *
					 from TAB189N_2
</CallString>
<Error>
<ErrorCode>-8028</ErrorCode>
<ErrorMessage>[-8028]: UNION columns must be compatible</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
	create table TAB189N_4 as select name, col2
                                         from TAB189N_1 
					 minus
					 select 
                                          from TAB189N_2                        
</CallString>
<Error>
<ErrorCode>-5015</ErrorCode>
<ErrorMessage>[-5015] (at 186): Missing keyword:FROM</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
	create table TAB189N_5 as select name, col2
                                         from TAB189N_1 
					 minus
					 select *
                                          from tab320x                         
                                          </CallString>
<Error>
<ErrorCode>-942</ErrorCode>
<ErrorMessage>[-942] (at 178): Unknown table name:TAB320X</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
	create table TAB189N_6 as select name
                                         from TAB189N_1 
					 minus
					 select col4
                                          from TAB189N_2                       
                                          

</CallString>
<Error>
<ErrorCode>-8028</ErrorCode>
<ErrorMessage>[-8028]: UNION columns must be compatible:COL4</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
 select count(tablename) from tables where tablename in ('TAB189N_3','TAB189N_4','TAB189N_5','TAB189N_6') 

</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>EXPRESSION1</ColumnName>
<ColumnType>INT</ColumnType>
</ColumnDefinition>
<Row>
<Value>0</Value>
</Row>
</ResultSet>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
drop table TAB189N_1
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
drop table TAB189N_2
</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="190" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>create_table_as_select 
with invalid defined t_aliases, not existing columns, tables</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
create table TAB190N_1 (nr int, 
                                            nm char (30) primary key,
                                            col3 int, 
                                            col4 long, 
                                            col5 varchar (45),
                                            col6 int)

</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

insert into TAB190N_1 (nr, nm) values (1, 'Dick')                                            

</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

insert into TAB190N_1 (nr, nm) values (2, 'Roland')                                              

</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

insert into TAB190N_1 (nr, nm) values (3, 'Peter')

</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

insert into TAB190N_1 (nr, nm) values (4, 'Victoria')

</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

insert into TAB190N_1 (nr, nm) values (5, 'Mary')

</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

create table TAB190N_2 (name char (30) primary key,
                                           profession char (50),
                                            col3 int, 
                                            col4 long, 
                                            col5 varchar (45),
                                            col6 int)

</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

insert into TAB190N_2 (name, profession) values ('Dick', 'driving')                                            

</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

insert into TAB190N_2 (name, profession) values ('Peter', 'programming') 

</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

insert into TAB190N_2 (name, profession) values ('Mary', 'repairing') 

</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

insert into TAB190N_2 (name, profession) values ('Andy', 'driving') 

</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

insert into TAB190N_2 (name, profession) values ('Cathrin', 'programming') 
</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
create table TAB190N_3 as select * from (select name, profession from TAB190N_1 a, TAB190N_2 b where a.nm (+) = b.name)
add where add.profession in ('driving', 'repairing')
</CallString>
<Error>
<ErrorCode>-3014</ErrorCode>
<ErrorMessage>[-3014] (at 122): Invalid end of SQL statement</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
create table TAB190N_4 as select * from (select name, profession from TAB190N_1 a, TAB190N_2 b where a.nm (+) = b.name)
new where old.profession in ('driving', 'repairing')
</CallString>
<Error>
<ErrorCode>-8010</ErrorCode>
<ErrorMessage>[-8010] (at 136): Table name must be in from list</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
create table TAB190N_5 as select * from (select name, profession from TAB190N_1 a, TAB190N_2 b where a.nm (+) = b.name)
alias where alias in ('driving', 'repairing')
</CallString>
<Error>
<ErrorCode>-4005</ErrorCode>
<ErrorMessage>[-4005] (at 134): Unknown column name:ALIAS</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
create table TAB190N_6 as select * from (select name, profession, b.col3 from TAB190N_1 a, TAB190N_2 b where a.nm (+) = b.name)
alias where alias.col3 in ('driving', 'repairing')


</CallString>
<Error>
<ErrorCode>-3016</ErrorCode>
<ErrorMessage>[-3016] (at 158): Invalid numeric constant</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="true">
<CallString>
 select count(tablename) from tables where tablename in ('TAB190N_3','TAB190N_4','TAB190N_5','TAB190N_6') 
</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>EXPRESSION1</ColumnName>
<ColumnType>INT</ColumnType>
</ColumnDefinition>
<Row>
<Value>0</Value>
</Row>
</ResultSet>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
drop table TAB190N_1

</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>

drop table TAB190N_2</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;oracle)" Number="193" Responsible="Oleg Luzginov" TestType="negative">
<Comment>no data type length in the create table; see column COL2</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>CREATE TABLE TAB17 (
                                COL1 INTEGER,
                                COL2 FLOAT(),
                                COL4 CHARACTER(1443),
                                COL5 VARCHAR(7683),
                                COL8 DATE,
                                COL9 CHAR(2855),
                                COL10 INT,
                                COL11 INTEGER,
                                COL12 DATE )
				</CallString>
<Error>
<ErrorCode>-5009</ErrorCode>
<ErrorMessage>Missing integer</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB17
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="200" Responsible="Vladimir Sobol" TestType="negative">
<Comment>table check; column name skip; see CONSTR2 CONSTRAINT</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB200 (
                                        COL0 NUMBER(32) PRIMARY KEY,
                                        COL1 NUMBER(15),
                                        COL2 NUMBER(15),
                                        COL3 NUMBER(15,15),
                                        COL4 DATE,
                                        CONSTRAINT CONSTR1
                                               CHECK (COL1  IN (1111, 333333333)),
                                        CONSTRAINT CONSTR2
                                                CHECK (COL4 IS NOT NULL
                                                        AND NOT IN (TO_DATE('11-11-1911', 'DD-MM-YYYY'))),
                                        CONSTRAINT CONSTR3
                                                CHECK (COL3 BETWEEN 0.01 AND 0.78 )
                                )
                                </CallString>
<Error>
<ErrorCode>-5015</ErrorCode>
<ErrorMessage>Missing keyword:YEARS,YEAR,WRITE,WORK,WITH,WHILE,WHERE,WHENEVER,WEEKO.</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
                            DROP TABLE TAB200
                            </CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;oracle)" Number="250" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>22.04.2003: currently the test is running without any errors -
	    but it should produce an error when executing the create_statement
	    (... not null default null ...)</Comment>
<Prepare>
<Statement callable="false" ignore="true" verify="false">
<CallString>DROP TABLE tab250</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table tab250 ( a int not null, b char not null default null, c char default null not null)
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>insert into tab250 (a,b) values (3, 3)
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into tab250 values (4,'d', 'd')
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
select * from tab250
</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>A</ColumnName>
<ColumnType>INTEGER</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>B</ColumnName>
<ColumnType>VARCHAR</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>C</ColumnName>
<ColumnType>VARCHAR</ColumnType>
</ColumnDefinition>
<Row>
<Value>3</Value>
<Value>'3'</Value>
<Value>'3'</Value>
</Row>
<Row>
<Value>4</Value>
<Value>'d'</Value>
<Value>'d'</Value>
</Row>
</ResultSet>
</Statement>
<Statement callable="false" ignore="false" verify="true">
<CallString>
select columnname, "DEFAULT", nullable from columns where tablename='TAB250'
</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>COLUMNNAME</ColumnName>
<ColumnType>VARCHAR</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>DEFAULT</ColumnName>
<ColumnType>VARCHAR</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>NULLABLE</ColumnName>
<ColumnType>VARCHAR</ColumnType>
</ColumnDefinition>
<Row>
<Value>'A'</Value>
<Value>NULL</Value>
<Value>'NO'</Value>
</Row>
<Row>
<Value>'B'</Value>
<Value>NULL</Value>
<Value>'NO'</Value>
</Row>
<Row>
<Value>'C'</Value>
<Value>NULL</Value>
<Value>'NO'</Value>
</Row>
</ResultSet>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>drop table tab250</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="251" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>22.04.2003: currently the test is running without any errors -
	    but it should produce an error when executing the create_statement
	    (... not null default null ...)</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table tab251 ( a int not null, b char default null constraint nn not null, c char default null not null )
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into tab251 values (3, 3, 3)
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into tab251 values (4,'a', 'd')
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
select * from tab251
</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>A</ColumnName>
<ColumnType>FIXED</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>B</ColumnName>
<ColumnType>VARCHAR</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>C</ColumnName>
<ColumnType>VARCHAR</ColumnType>
</ColumnDefinition>
<Row>
<Value>3</Value>
<Value>'3'</Value>
<Value>'3'</Value>
</Row>
<Row>
<Value>4</Value>
<Value>'a'</Value>
<Value>'d'</Value>
</Row>
</ResultSet>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
select columnname, "DEFAULT",  nullable from columns where tablename='TAB251'
</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>COLUMNNAME</ColumnName>
<ColumnType>VARCHAR</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>DEFAULT</ColumnName>
<ColumnType>VARCHAR</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>NULLABLE</ColumnName>
<ColumnType>VARCHAR</ColumnType>
</ColumnDefinition>
<Row>
<Value>'A'</Value>
<Value>NULL</Value>
<Value>'NO'</Value>
</Row>
<Row>
<Value>'B'</Value>
<Value>NULL</Value>
<Value>'NO'</Value>
</Row>
<Row>
<Value>'C'</Value>
<Value>NULL</Value>
<Value>'NO'</Value>
</Row>
</ResultSet>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
drop table tab251</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="300" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>some invalid statements,
missing one of the necessary keywords AS, SELECT, FROM 
</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB300N_1 (
                                        COL1 VARCHAR2(25) NOT NULL,
                                        COL2 CHAR NOT NULL,
                                        COL3 CHAR(2000),
                                        COL4 NUMBER(64),
                                        COL5 NUMBER(38) NOT NULL,
                                        COL6 NUMBER(38,38) CHECK (COL6 &gt; 0.04),
                                        COL7 NUMBER(*) NOT NULL,
                                        COL8 NUMBER(*,20),
                                        COL9 INT,
                                        COL10 DATE,
                                        CONSTRAINT CONSTR1
                                                PRIMARY KEY (COL1, COL2, COL5, COL7))</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>

	CREATE TABLE TAB300N_2 SELECT ALL * FROM TAB300N_1</CallString>
<Error>
<ErrorCode>-3008</ErrorCode>
<ErrorMessage>[-3008] (at 27): Invalid keyword or missing delimiter</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

	CREATE TABLE TAB300N_3 AS * FROM TAB300N_1
</CallString>
<Error>
<ErrorCode>-3008</ErrorCode>
<ErrorMessage>[-3008] (at 27): Invalid keyword or missing delimiter</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>

	CREATE TABLE TAB300N_4 AS SELECT ALL * TAB300N_1</CallString>
<Error>
<ErrorCode>-5015</ErrorCode>
<ErrorMessage>[-5015] (at 43): Missing keyword:FROM</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>

	DROP TABLE TAB300N_1</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="301" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>some invalid statements
the columns to be inserted in the new table 
are determined falsely
(e.g. col6 even if it does not exist)</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table tab301n_1 (col1 int, 
                                col2 number(34),
                                col3 char (34),
                                col4 varchar(17) primary key,
                                col5 int )</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
create table tab301n_2 as select from tab301n_1
</CallString>
<Error>
<ErrorCode>-5015</ErrorCode>
<ErrorMessage>[-5015] (at 49): Missing keyword:FROM</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
create table tab301n_3 as select col6 from tab301n_1
</CallString>
<Error>
<ErrorCode>-4005</ErrorCode>
<ErrorMessage>[-4005] (at 35): Unknown column name:COL6</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
create table tab301n_4 as select "CoL5" from tab301n_1
</CallString>
<Error>
<ErrorCode>-4005</ErrorCode>
<ErrorMessage>[-4005] (at 36): Unknown column name:CoL5</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
create table tab301n_5 as select col5.col6 from tab301n_1</CallString>
<Error>
<ErrorCode>-8010</ErrorCode>
<ErrorMessage>[-8010] (at 40): Table name must be in from list</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>

	drop table tab301n_1</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="303" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>trying to use reserved identifiers (see statements 2,3) or existing column_names (see 4) 
to specify them as expressions for columns in the new table</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table tab303n_1 (col1 int, 
                                col2 number(34),
                                col3 char (34),
                                col4 varchar(17) primary key,
                                col5 int )</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table tab303n_2 as select col4 as column, col5, col2, col1 from tab303n_1 </CallString>
<Error>
<ErrorCode>-7006</ErrorCode>
<ErrorMessage>[-7006] (at 42): Reserved identifier not allowed</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table tab303n_3 as select col4 as table, col5, col2, col1 from tab303n_1 </CallString>
<Error>
<ErrorCode>-7006</ErrorCode>
<ErrorMessage>[-7006] (at 42): Reserved identifier not allowed</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table tab303n_2 as select col4 as col5, col5, col2, col1 from tab303n_1 </CallString>
<Error>
<ErrorCode>-6001</ErrorCode>
<ErrorMessage>[-6001]: Duplicate column name</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>drop table tab303n_1</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="304" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>trying to use reserved identifiers (see statements 2,3) or existing column_names (see 4) 
to specify them as expressions for columns in the new table</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table tab304n_1 (col1 int, 
                                col2 number(34),
                                col3 char (34),
                                col4 varchar(17) primary key,
                                col5 int )</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table tab304n_2 as select col4 column, col5, col2, col1 from tab304n_1 </CallString>
<Error>
<ErrorCode>-7006</ErrorCode>
<ErrorMessage>[-7006] (at 39): Reserved identifier not allowed</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table tab304n_3 as select col4, col5 table, col2, col1 from tab304n_1 </CallString>
<Error>
<ErrorCode>-7006</ErrorCode>
<ErrorMessage>[-7006] (at 45): Reserved identifier not allowed</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table tab304n_2 as select col4 col5, col5, col2, col1 from tab304n_1 </CallString>
<Error>
<ErrorCode>-6001</ErrorCode>
<ErrorMessage>[-6001]: Duplicate column name</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>drop table tab304n_1</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="305" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>trying to use a reserved identifier as table_alias</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table tab305n_1 (col1 int, 
                                col2 number (34),
                                col3 char (34),
                                col4 varchar(17) primary key,
                                col5 varchar(17) references tab305n_1)
                                
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into tab305n_1 (col4, col5) values ('dyn', 'dyn')
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into tab305n_1 (col4, col5) values ('amic', 'amic')</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table  tab305n_2 as select col4, col5, col2, col1 
	from  tab305n_1 table where table.col4 = table.col5
</CallString>
<Error>
<ErrorCode>-3014</ErrorCode>
<ErrorMessage>[-3014] (at 73): Invalid end of SQL statement</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>drop table  tab305n_1
</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="306" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>trying to create a table of a subselect querying two tables
which have same column names (--&gt; "name" is column_2 in tab306n_1 and column_1 in tab306n_2)</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table tab306n_1 (nr int, 
                                            name char (30) primary key,
                                            col3 int, 
                                            col4 long, 
                                            col5 varchar (45),
                                            col6 int)</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table tab306n_2 (name char (30) primary key,
                                           profession char (50),
                                            col3 int, 
                                            col4 long, 
                                            col5 varchar (45),
                                            col6 int)</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table tab306n_3 as select  name, profession from tab306n_1, tab306n_2 </CallString>
<Error>
<ErrorCode>-5014</ErrorCode>
<ErrorMessage>[-5014] (at 35): Missing definite column name:NAME</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="true">
<CallString>select * from tab306n_3</CallString>
<Error>
<ErrorCode>-942</ErrorCode>
<ErrorMessage>[-942] (at 15): Unknown table name:TAB306N_3</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>drop table tab306n_1
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
drop table tab306n_2</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="307" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>specifying column_names which do not exist in the result of the subquery,
so that the columns cannot be found and be inserted in a new table</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>		create table tab307n_1 (    nr int, 
                                            name char (30) primary key,
                                            profession char(50), 
                                            project char(50), 
                                            col5 varchar (45),
                                            col6 int)</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table tab307n_2 as select "Nr", "Name", professione from tab307n_1</CallString>
<Error>
<ErrorCode>-4005</ErrorCode>
<ErrorMessage>[-4005] (at 35): Unknown column name:Nr</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table tab307n_2 as select "Name", professione from tab307n_1</CallString>
<Error>
<ErrorCode>-4005</ErrorCode>
<ErrorMessage>[-4005] (at 35): Unknown column name:Name</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table tab307n_2 as select professione from tab307n_1</CallString>
<Error>
<ErrorCode>-4005</ErrorCode>
<ErrorMessage>[-4005] (at 34): Unknown column name:PROFESSIONE</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>drop table tab307n_1
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
drop table tab307n_2</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)" Number="308" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>table referenced in the subquery 
does not exist (run_statement 1)
or reference is not correct (run_statement 3)</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table tab308N_1 (nr int, 
                                            name char (30) primary key,
                                            col3 int, 
                                            col4 long, 
                                            col5 varchar (45),
                                            col6 int)</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>insert into tab308N_1 (nr, name) values (1, 'Dick')                                            
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into tab308N_1 (nr, name) values (2, 'Roland')                                              
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
insert into tab308N_1 (nr, name) values (3, 'Peter')
</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table tab308N_3 as select  name from tab308N_1, tab308N_2 </CallString>
<Error>
<ErrorCode>-942</ErrorCode>
<ErrorMessage>[-942] (at 56): Unknown table name:TAB308N_2</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table tab308N_2 (name char (30) primary key,
                                           profession char (50),
                                            col3 int, 
                                            col4 long, 
                                            col5 varchar (45),
                                            col6 int)</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table tab308N_4 as select  name from tab308N_1, "TaB308N_2" </CallString>
<Error>
<ErrorCode>-942</ErrorCode>
<ErrorMessage>[-942] (at 57): Unknown table name:TaB308N_2</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>drop table tab308N_1
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
drop table tab308N_2
</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="311" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>create_table with AS SELECT
and UNIQUE_constraint,
parent_table contains duplicates in key columns (see first run statement)
trying to insert a duplicate in unique columns (see fourth run statement)</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
        create table tab311n_1 (lastname char (50),
        firstname char(40),
        street char (60),
        city char (60),
        zip char(5))
    	  </CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
                insert into tab311n_1 (lastname, firstname, city, zip) values ('Mueller', 'Holger', 'Berlin', 10445)
                	  </CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
                insert into tab311n_1 (lastname, firstname, city, zip) values ('Schmidt', 'Bernd', 'Berlin', 10375)
                	  </CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
                    insert into tab311n_1 (lastname, firstname, city, zip) values ('Schmidt', 'Bernd', 'Potsdam', 10135)
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
                insert into tab311n_1 (lastname, firstname, city, zip) values ('Weber', 'Christian', 'Berlin', 10253)
                	  </CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="true">
<CallString>
    create table tab311n_2 (constraint constr311_uniq unique ("LaSt_NaMe", "FiRsT_nAmE" )) as select lastname "LaSt_NaMe", firstname "FiRsT_nAmE", city, zip from tab311n_1
       </CallString>
<Error>
<ErrorCode>-1</ErrorCode>
<ErrorMessage>[-1]: Duplicate key in index</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString> 
       delete from tab311n_1 where lastname = 'Schmidt'
       </CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
    create table tab311n_2 (constraint constr311_uniq unique ("LaSt_NaMe", "FiRsT_nAmE" )) as select lastname "LaSt_NaMe", firstname "FiRsT_nAmE", city, zip from tab311n_1
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="true">
<CallString>
 insert into tab311n_2 ("LaSt_NaMe", "FiRsT_nAmE", city, zip) values ('Mueller', 'Holger', 'Potsdam', 10105)
</CallString>
<Error>
<ErrorCode>-1</ErrorCode>
<ErrorMessage>[-1] (at 110): Duplicate key in index:CONSTR311_UNIQ</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="true">
<CallString>
    select tablename, indexname, type  from indexes where tablename ='TAB311N_2'
       </CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>TABLENAME</ColumnName>
<ColumnType>CHAR</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>INDEXNAME</ColumnName>
<ColumnType>CHAR</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>TYPE</ColumnName>
<ColumnType>CHAR</ColumnType>
</ColumnDefinition>
<Row>
<Value>'TAB311N_2'</Value>
<Value>'CONSTR311_UNIQ'</Value>
<Value>'UNIQUE'</Value>
</Row>
</ResultSet>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
    drop table tab311n_1
       </CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
    drop table tab311n_2</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="312" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>creating a new table of two tables referenced in a subquery,
but the new table would have more than the allowed number of 1023 char columns </Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>CREATE TABLE TAB312n_1 (
                                COL1 CHAR, COL2 CHAR, COL3 CHAR, COL4 CHAR, COL5 CHAR,
                                COL6 CHAR, COL7 CHAR, COL8 CHAR, COL9 CHAR, COL10 CHAR,
                                COL11 CHAR, COL12 CHAR, COL13 CHAR, COL14 CHAR, COL15 CHAR,
                                COL16 CHAR, COL17 CHAR, COL18 CHAR, COL19 CHAR, COL20 CHAR,
                                COL21 CHAR, COL22 CHAR, COL23 CHAR, COL24 CHAR, COL25 CHAR,
                                COL26 CHAR, COL27 CHAR, COL28 CHAR, COL29 CHAR, COL30 CHAR,
                                COL31 CHAR, COL32 CHAR, COL33 CHAR, COL34 CHAR, COL35 CHAR,
                                COL36 CHAR, COL37 CHAR, COL38 CHAR, COL39 CHAR, COL40 CHAR,
                                COL41 CHAR, COL42 CHAR, COL43 CHAR, COL44 CHAR, COL45 CHAR,
                                COL46 CHAR, COL47 CHAR, COL48 CHAR, COL49 CHAR, COL50 CHAR,
                                COL51 CHAR, COL52 CHAR, COL53 CHAR, COL54 CHAR, COL55 CHAR,
                                COL56 CHAR, COL57 CHAR, COL58 CHAR, COL59 CHAR, COL60 CHAR,
                                COL61 CHAR, COL62 CHAR, COL63 CHAR, COL64 CHAR, COL65 CHAR,
                                COL66 CHAR, COL67 CHAR, COL68 CHAR, COL69 CHAR, COL70 CHAR,
                                COL71 CHAR, COL72 CHAR, COL73 CHAR, COL74 CHAR, COL75 CHAR,
                                COL76 CHAR, COL77 CHAR, COL78 CHAR, COL79 CHAR, COL80 CHAR,
                                COL81 CHAR, COL82 CHAR, COL83 CHAR, COL84 CHAR, COL85 CHAR,
                                COL86 CHAR, COL87 CHAR, COL88 CHAR, COL89 CHAR, COL90 CHAR,
                                COL91 CHAR, COL92 CHAR, COL93 CHAR, COL94 CHAR, COL95 CHAR,
                                COL96 CHAR, COL97 CHAR, COL98 CHAR, COL99 CHAR, COL100 CHAR,
                                COL101 CHAR, COL102 CHAR, COL103 CHAR, COL104 CHAR, COL105 CHAR,
                                COL106 CHAR, COL107 CHAR, COL108 CHAR, COL109 CHAR, COL110 CHAR,
                                COL111 CHAR, COL112 CHAR, COL113 CHAR, COL114 CHAR, COL115 CHAR,
                                COL116 CHAR, COL117 CHAR, COL118 CHAR, COL119 CHAR, COL120 CHAR,
                                COL121 CHAR, COL122 CHAR, COL123 CHAR, COL124 CHAR, COL125 CHAR,
                                COL126 CHAR, COL127 CHAR, COL128 CHAR, COL129 CHAR, COL130 CHAR,
                                COL131 CHAR, COL132 CHAR, COL133 CHAR, COL134 CHAR, COL135 CHAR,
                                COL136 CHAR, COL137 CHAR, COL138 CHAR, COL139 CHAR, COL140 CHAR,
                                COL141 CHAR, COL142 CHAR, COL143 CHAR, COL144 CHAR, COL145 CHAR,
                                COL146 CHAR, COL147 CHAR, COL148 CHAR, COL149 CHAR, COL150 CHAR,
                                COL151 CHAR, COL152 CHAR, COL153 CHAR, COL154 CHAR, COL155 CHAR,
                                COL156 CHAR, COL157 CHAR, COL158 CHAR, COL159 CHAR, COL160 CHAR,
                                COL161 CHAR, COL162 CHAR, COL163 CHAR, COL164 CHAR, COL165 CHAR,
                                COL166 CHAR, COL167 CHAR, COL168 CHAR, COL169 CHAR, COL170 CHAR,
                                COL171 CHAR, COL172 CHAR, COL173 CHAR, COL174 CHAR, COL175 CHAR,
                                COL176 CHAR, COL177 CHAR, COL178 CHAR, COL179 CHAR, COL180 CHAR,
                                COL181 CHAR, COL182 CHAR, COL183 CHAR, COL184 CHAR, COL185 CHAR,
                                COL186 CHAR, COL187 CHAR, COL188 CHAR, COL189 CHAR, COL190 CHAR,
                                COL191 CHAR, COL192 CHAR, COL193 CHAR, COL194 CHAR, COL195 CHAR,
                                COL196 CHAR, COL197 CHAR, COL198 CHAR, COL199 CHAR, COL200 CHAR,
                                COL201 CHAR, COL202 CHAR, COL203 CHAR, COL204 CHAR, COL205 CHAR,
                                COL206 CHAR, COL207 CHAR, COL208 CHAR, COL209 CHAR, COL210 CHAR,
                                COL211 CHAR, COL212 CHAR, COL213 CHAR, COL214 CHAR, COL215 CHAR,
                                COL216 CHAR, COL217 CHAR, COL218 CHAR, COL219 CHAR, COL220 CHAR,
                                COL221 CHAR, COL222 CHAR, COL223 CHAR, COL224 CHAR, COL225 CHAR,
                                COL226 CHAR, COL227 CHAR, COL228 CHAR, COL229 CHAR, COL230 CHAR,
                                COL231 CHAR, COL232 CHAR, COL233 CHAR, COL234 CHAR, COL235 CHAR,
                                COL236 CHAR, COL237 CHAR, COL238 CHAR, COL239 CHAR, COL240 CHAR,
                                COL241 CHAR, COL242 CHAR, COL243 CHAR, COL244 CHAR, COL245 CHAR,
                                COL246 CHAR, COL247 CHAR, COL248 CHAR, COL249 CHAR, COL250 CHAR,
                                COL251 CHAR, COL252 CHAR, COL253 CHAR, COL254 CHAR, COL255 CHAR,
                                COL256 CHAR, COL257 CHAR, COL258 CHAR, COL259 CHAR, COL260 CHAR,
                                COL261 CHAR, COL262 CHAR, COL263 CHAR, COL264 CHAR, COL265 CHAR,
                                COL266 CHAR, COL267 CHAR, COL268 CHAR, COL269 CHAR, COL270 CHAR,
                                COL271 CHAR, COL272 CHAR, COL273 CHAR, COL274 CHAR, COL275 CHAR,
                                COL276 CHAR, COL277 CHAR, COL278 CHAR, COL279 CHAR, COL280 CHAR,
                                COL281 CHAR, COL282 CHAR, COL283 CHAR, COL284 CHAR, COL285 CHAR,
                                COL286 CHAR, COL287 CHAR, COL288 CHAR, COL289 CHAR, COL290 CHAR,
                                COL291 CHAR, COL292 CHAR, COL293 CHAR, COL294 CHAR, COL295 CHAR,
                                COL296 CHAR, COL297 CHAR, COL298 CHAR, COL299 CHAR, COL300 CHAR,
                                COL301 CHAR, COL302 CHAR, COL303 CHAR, COL304 CHAR, COL305 CHAR,
                                COL306 CHAR, COL307 CHAR, COL308 CHAR, COL309 CHAR, COL310 CHAR,
                                COL311 CHAR, COL312 CHAR, COL313 CHAR, COL314 CHAR, COL315 CHAR,
                                COL316 CHAR, COL317 CHAR, COL318 CHAR, COL319 CHAR, COL320 CHAR,
                                COL321 CHAR, COL322 CHAR, COL323 CHAR, COL324 CHAR, COL325 CHAR,
                                COL326 CHAR, COL327 CHAR, COL328 CHAR, COL329 CHAR, COL330 CHAR,
                                COL331 CHAR, COL332 CHAR, COL333 CHAR, COL334 CHAR, COL335 CHAR,
                                COL336 CHAR, COL337 CHAR, COL338 CHAR, COL339 CHAR, COL340 CHAR,
                                COL341 CHAR, COL342 CHAR, COL343 CHAR, COL344 CHAR, COL345 CHAR,
                                COL346 CHAR, COL347 CHAR, COL348 CHAR, COL349 CHAR, COL350 CHAR,
                                COL351 CHAR, COL352 CHAR, COL353 CHAR, COL354 CHAR, COL355 CHAR,
                                COL356 CHAR, COL357 CHAR, COL358 CHAR, COL359 CHAR, COL360 CHAR,
                                COL361 CHAR, COL362 CHAR, COL363 CHAR, COL364 CHAR, COL365 CHAR,
                                COL366 CHAR, COL367 CHAR, COL368 CHAR, COL369 CHAR, COL370 CHAR,
                                COL371 CHAR, COL372 CHAR, COL373 CHAR, COL374 CHAR, COL375 CHAR,
                                COL376 CHAR, COL377 CHAR, COL378 CHAR, COL379 CHAR, COL380 CHAR,
                                COL381 CHAR, COL382 CHAR, COL383 CHAR, COL384 CHAR, COL385 CHAR,
                                COL386 CHAR, COL387 CHAR, COL388 CHAR, COL389 CHAR, COL390 CHAR,
                                COL391 CHAR, COL392 CHAR, COL393 CHAR, COL394 CHAR, COL395 CHAR,
                                COL396 CHAR, COL397 CHAR, COL398 CHAR, COL399 CHAR, COL400 CHAR,
                                COL401 CHAR, COL402 CHAR, COL403 CHAR, COL404 CHAR, COL405 CHAR,
                                COL406 CHAR, COL407 CHAR, COL408 CHAR, COL409 CHAR, COL410 CHAR,
                                COL411 CHAR, COL412 CHAR, COL413 CHAR, COL414 CHAR, COL415 CHAR,
                                COL416 CHAR, COL417 CHAR, COL418 CHAR, COL419 CHAR, COL420 CHAR,
                                COL421 CHAR, COL422 CHAR, COL423 CHAR, COL424 CHAR, COL425 CHAR,
                                COL426 CHAR, COL427 CHAR, COL428 CHAR, COL429 CHAR, COL430 CHAR,
                                COL431 CHAR, COL432 CHAR, COL433 CHAR, COL434 CHAR, COL435 CHAR,
                                COL436 CHAR, COL437 CHAR, COL438 CHAR, COL439 CHAR, COL440 CHAR,
                                COL441 CHAR, COL442 CHAR, COL443 CHAR, COL444 CHAR, COL445 CHAR,
                                COL446 CHAR, COL447 CHAR, COL448 CHAR, COL449 CHAR, COL450 CHAR,
                                COL451 CHAR, COL452 CHAR, COL453 CHAR, COL454 CHAR, COL455 CHAR,
                                COL456 CHAR, COL457 CHAR, COL458 CHAR, COL459 CHAR, COL460 CHAR,
                                COL461 CHAR, COL462 CHAR, COL463 CHAR, COL464 CHAR, COL465 CHAR,
                                COL466 CHAR, COL467 CHAR, COL468 CHAR, COL469 CHAR, COL470 CHAR,
                                COL471 CHAR, COL472 CHAR, COL473 CHAR, COL474 CHAR, COL475 CHAR,
                                COL476 CHAR, COL477 CHAR, COL478 CHAR, COL479 CHAR, COL480 CHAR,
                                COL481 CHAR, COL482 CHAR, COL483 CHAR, COL484 CHAR, COL485 CHAR,
                                COL486 CHAR, COL487 CHAR, COL488 CHAR, COL489 CHAR, COL490 CHAR,
                                COL491 CHAR, COL492 CHAR, COL493 CHAR, COL494 CHAR, COL495 CHAR,
                                COL496 CHAR, COL497 CHAR, COL498 CHAR, COL499 CHAR, COL500 CHAR,
                                COL501 CHAR, COL502 CHAR, COL503 CHAR, COL504 CHAR, COL505 CHAR,
                                COL506 CHAR, COL507 CHAR, COL508 CHAR, COL509 CHAR, COL510 CHAR,
                                COL511 CHAR, COL512 CHAR, COL513 CHAR, COL514 CHAR, COL515 CHAR,
                                COL516 CHAR, COL517 CHAR, COL518 CHAR, COL519 CHAR, COL520 CHAR,
                                COL521 CHAR, COL522 CHAR, COL523 CHAR, COL524 CHAR, COL525 CHAR,
                                COL526 CHAR, COL527 CHAR, COL528 CHAR, COL529 CHAR, COL530 CHAR,
                                COL531 CHAR, COL532 CHAR, COL533 CHAR, COL534 CHAR, COL535 CHAR,
                                COL536 CHAR, COL537 CHAR, COL538 CHAR, COL539 CHAR, COL540 CHAR,
                                COL541 CHAR, COL542 CHAR, COL543 CHAR, COL544 CHAR, COL545 CHAR,
                                COL546 CHAR, COL547 CHAR, COL548 CHAR, COL549 CHAR, COL550 CHAR,
                                COL551 CHAR, COL552 CHAR, COL553 CHAR, COL554 CHAR, COL555 CHAR,
                                COL556 CHAR, COL557 CHAR, COL558 CHAR, COL559 CHAR, COL560 CHAR,
                                COL561 CHAR, COL562 CHAR, COL563 CHAR, COL564 CHAR, COL565 CHAR,
                                COL566 CHAR, COL567 CHAR, COL568 CHAR, COL569 CHAR, COL570 CHAR,
                                COL571 CHAR, COL572 CHAR, COL573 CHAR, COL574 CHAR, COL575 CHAR,
                                COL576 CHAR, COL577 CHAR, COL578 CHAR, COL579 CHAR, COL580 CHAR,
                                COL581 CHAR, COL582 CHAR, COL583 CHAR, COL584 CHAR, COL585 CHAR,
                                COL586 CHAR, COL587 CHAR, COL588 CHAR, COL589 CHAR, COL590 CHAR,
                                COL591 CHAR, COL592 CHAR, COL593 CHAR, COL594 CHAR, COL595 CHAR,
                                COL596 CHAR, COL597 CHAR, COL598 CHAR, COL599 CHAR, COL600 CHAR,
                                COL601 CHAR, COL602 CHAR, COL603 CHAR, COL604 CHAR, COL605 CHAR,
                                COL606 CHAR, COL607 CHAR, COL608 CHAR, COL609 CHAR, COL610 CHAR,
                                COL611 CHAR, COL612 CHAR, COL613 CHAR, COL614 CHAR, COL615 CHAR,
                                COL616 CHAR, COL617 CHAR, COL618 CHAR, COL619 CHAR, COL620 CHAR,
                                COL621 CHAR, COL622 CHAR, COL623 CHAR, COL624 CHAR, COL625 CHAR,
                                COL626 CHAR, COL627 CHAR, COL628 CHAR, COL629 CHAR, COL630 CHAR,
                                COL631 CHAR, COL632 CHAR, COL633 CHAR, COL634 CHAR, COL635 CHAR,
                                COL636 CHAR, COL637 CHAR, COL638 CHAR, COL639 CHAR, COL640 CHAR,
                                COL641 CHAR, COL642 CHAR, COL643 CHAR, COL644 CHAR, COL645 CHAR,
                                COL646 CHAR, COL647 CHAR, COL648 CHAR, COL649 CHAR, COL650 CHAR,
                                COL651 CHAR, COL652 CHAR, COL653 CHAR, COL654 CHAR, COL655 CHAR,
                                COL656 CHAR, COL657 CHAR, COL658 CHAR, COL659 CHAR, COL660 CHAR,
                                COL661 CHAR, COL662 CHAR, COL663 CHAR, COL664 CHAR, COL665 CHAR,
                                COL666 CHAR, COL667 CHAR, COL668 CHAR, COL669 CHAR, COL670 CHAR,
                                COL671 CHAR, COL672 CHAR, COL673 CHAR, COL674 CHAR, COL675 CHAR,
                                COL676 CHAR, COL677 CHAR, COL678 CHAR, COL679 CHAR, COL680 CHAR,
                                COL681 CHAR, COL682 CHAR, COL683 CHAR, COL684 CHAR, COL685 CHAR,
                                COL686 CHAR, COL687 CHAR, COL688 CHAR, COL689 CHAR, COL690 CHAR,
                                COL691 CHAR, COL692 CHAR, COL693 CHAR, COL694 CHAR, COL695 CHAR,
                                COL696 CHAR, COL697 CHAR, COL698 CHAR, COL699 CHAR, COL700 CHAR,
                                COL701 CHAR, COL702 CHAR, COL703 CHAR, COL704 CHAR, COL705 CHAR,
                                COL706 CHAR, COL707 CHAR, COL708 CHAR, COL709 CHAR, COL710 CHAR,
                                COL711 CHAR, COL712 CHAR, COL713 CHAR, COL714 CHAR, COL715 CHAR,
                                COL716 CHAR, COL717 CHAR, COL718 CHAR, COL719 CHAR, COL720 CHAR,
                                COL721 CHAR, COL722 CHAR, COL723 CHAR, COL724 CHAR, COL725 CHAR,
                                COL726 CHAR, COL727 CHAR, COL728 CHAR, COL729 CHAR, COL730 CHAR,
                                COL731 CHAR, COL732 CHAR, COL733 CHAR, COL734 CHAR, COL735 CHAR,
                                COL736 CHAR, COL737 CHAR, COL738 CHAR, COL739 CHAR, COL740 CHAR,
                                COL741 CHAR, COL742 CHAR, COL743 CHAR, COL744 CHAR, COL745 CHAR,
                                COL746 CHAR, COL747 CHAR, COL748 CHAR, COL749 CHAR, COL750 CHAR,
                                COL751 CHAR, COL752 CHAR, COL753 CHAR, COL754 CHAR, COL755 CHAR,
                                COL756 CHAR, COL757 CHAR, COL758 CHAR, COL759 CHAR, COL760 CHAR,
                                COL761 CHAR, COL762 CHAR, COL763 CHAR, COL764 CHAR, COL765 CHAR,
                                COL766 CHAR, COL767 CHAR, COL768 CHAR, COL769 CHAR, COL770 CHAR,
                                COL771 CHAR, COL772 CHAR, COL773 CHAR, COL774 CHAR, COL775 CHAR,
                                COL776 CHAR, COL777 CHAR, COL778 CHAR, COL779 CHAR, COL780 CHAR,
                                COL781 CHAR, COL782 CHAR, COL783 CHAR, COL784 CHAR, COL785 CHAR,
                                COL786 CHAR, COL787 CHAR, COL788 CHAR, COL789 CHAR, COL790 CHAR,
                                COL791 CHAR, COL792 CHAR, COL793 CHAR, COL794 CHAR, COL795 CHAR,
                                COL796 CHAR, COL797 CHAR, COL798 CHAR, COL799 CHAR, COL800 CHAR,
                                COL801 CHAR, COL802 CHAR, COL803 CHAR, COL804 CHAR, COL805 CHAR,
                                COL806 CHAR, COL807 CHAR, COL808 CHAR, COL809 CHAR, COL810 CHAR,
                                COL811 CHAR, COL812 CHAR, COL813 CHAR, COL814 CHAR, COL815 CHAR,
                                COL816 CHAR, COL817 CHAR, COL818 CHAR, COL819 CHAR, COL820 CHAR,
                                COL821 CHAR, COL822 CHAR, COL823 CHAR, COL824 CHAR, COL825 CHAR,
                                COL826 CHAR, COL827 CHAR, COL828 CHAR, COL829 CHAR, COL830 CHAR,
                                COL831 CHAR, COL832 CHAR, COL833 CHAR, COL834 CHAR, COL835 CHAR,
                                COL836 CHAR, COL837 CHAR, COL838 CHAR, COL839 CHAR, COL840 CHAR,
                                COL841 CHAR, COL842 CHAR, COL843 CHAR, COL844 CHAR, COL845 CHAR,
                                COL846 CHAR, COL847 CHAR, COL848 CHAR, COL849 CHAR, COL850 CHAR,
                                COL851 CHAR, COL852 CHAR, COL853 CHAR, COL854 CHAR, COL855 CHAR,
                                COL856 CHAR, COL857 CHAR, COL858 CHAR, COL859 CHAR, COL860 CHAR,
                                COL861 CHAR, COL862 CHAR, COL863 CHAR, COL864 CHAR, COL865 CHAR,
                                COL866 CHAR, COL867 CHAR, COL868 CHAR, COL869 CHAR, COL870 CHAR,
                                COL871 CHAR, COL872 CHAR, COL873 CHAR, COL874 CHAR, COL875 CHAR,
                                COL876 CHAR, COL877 CHAR, COL878 CHAR, COL879 CHAR, COL880 CHAR,
                                COL881 CHAR, COL882 CHAR, COL883 CHAR, COL884 CHAR, COL885 CHAR,
                                COL886 CHAR, COL887 CHAR, COL888 CHAR, COL889 CHAR, COL890 CHAR,
                                COL891 CHAR, COL892 CHAR, COL893 CHAR, COL894 CHAR, COL895 CHAR,
                                COL896 CHAR, COL897 CHAR, COL898 CHAR, COL899 CHAR, COL900 CHAR,
                                COL901 CHAR, COL902 CHAR, COL903 CHAR, COL904 CHAR, COL905 CHAR,
                                COL906 CHAR, COL907 CHAR, COL908 CHAR, COL909 CHAR, COL910 CHAR,
                                COL911 CHAR, COL912 CHAR, COL913 CHAR, COL914 CHAR, COL915 CHAR,
                                COL916 CHAR, COL917 CHAR, COL918 CHAR, COL919 CHAR, COL920 CHAR,
                                COL921 CHAR, COL922 CHAR, COL923 CHAR, COL924 CHAR, COL925 CHAR,
                                COL926 CHAR, COL927 CHAR, COL928 CHAR, COL929 CHAR, COL930 CHAR,
                                COL931 CHAR, COL932 CHAR, COL933 CHAR, COL934 CHAR, COL935 CHAR,
                                COL936 CHAR, COL937 CHAR, COL938 CHAR, COL939 CHAR, COL940 CHAR,
                                COL941 CHAR, COL942 CHAR, COL943 CHAR, COL944 CHAR, COL945 CHAR,
                                COL946 CHAR, COL947 CHAR, COL948 CHAR, COL949 CHAR, COL950 CHAR,
                                COL951 CHAR, COL952 CHAR, COL953 CHAR, COL954 CHAR, COL955 CHAR,
                                COL956 CHAR, COL957 CHAR, COL958 CHAR, COL959 CHAR, COL960 CHAR,
                                COL961 CHAR, COL962 CHAR, COL963 CHAR, COL964 CHAR, COL965 CHAR,
                                COL966 CHAR, COL967 CHAR, COL968 CHAR, COL969 CHAR, COL970 CHAR,
                                COL971 CHAR, COL972 CHAR, COL973 CHAR, COL974 CHAR, COL975 CHAR,
                                COL976 CHAR, COL977 CHAR, COL978 CHAR, COL979 CHAR, COL980 CHAR,
                                COL981 CHAR, COL982 CHAR, COL983 CHAR, COL984 CHAR, COL985 CHAR,

                                COL986 CHAR, COL987 CHAR, COL988 CHAR, COL989 CHAR, COL990 CHAR,
                                COL991 CHAR, COL992 CHAR, COL993 CHAR, COL994 CHAR, COL995 CHAR,
                                COL996 CHAR, COL997 CHAR, COL998 CHAR, COL999 CHAR, COL1000 CHAR,
                                COL1001 CHAR, COL1002 CHAR, COL1003 CHAR, COL1004 CHAR, COL1005 CHAR,
                                COL1006 CHAR, COL1007 CHAR, COL1008 CHAR, COL1009 CHAR, COL1010 CHAR,
                                COL1011 CHAR, COL1012 CHAR, COL1013 CHAR, COL1014 CHAR, COL1015 CHAR,
                                COL1016 CHAR, COL1017 CHAR, COL1018 CHAR, COL1019 CHAR, COL1020 CHAR,
                                COL1021 CHAR, COL1022 CHAR, COL1023 CHAR)</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table tab312n_2 (col1024 char)</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table tab312n_3 as select * from tab312n_1, tab312n_2</CallString>
<Error>
<ErrorCode>-2013</ErrorCode>
<ErrorMessage>[-2013]: Select column list too long</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>drop table tab312n_1</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>drop table tab312n_2</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(7.4-;;)" Number="313" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>renaming columns when creating a new table with create_table_as_select statement
but trying to set a primary key by using the old column_names (see first run statement)
("LaSt_NaMe" &lt;&gt; lastname)

** for DB &gt;= 7.4 without anonym constraints
   see CREATE_TABLE_negative.xml[1313]</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
   create table tab311n_1 (lastname char (50),
				  firstname char(40),
				  street char (60),
				  city char (60),
				  zip char(5), 
				  unique (lastname, firstname))
      </CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
       insert into tab311n_1 (lastname, firstname, city, zip) values ('Mueller', 'Holger', 'Berlin', 10445)
       </CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
        insert into tab311n_1 (lastname, firstname, city, zip) values ('Schmidt', 'Bernd', 'Berlin', 10375)
        </CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
         insert into tab311n_1 (lastname, firstname, city, zip) values ('Holtz', 'Werner', 'Berlin', 10653)
   
</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="true">
<CallString>
create table tab311n_2 (constraint constr311_uniq unique ("LaSt_NaMe", "FiRsT_nAmE" ), primary key (lastname, firstname)) as select lastname "LaSt_NaMe", firstname "FiRsT_nAmE", city, zip from tab311n_1
</CallString>
<Error>
<ErrorCode>-4005</ErrorCode>
<ErrorMessage>[-4005] (at 102): Unknown column name:LASTNAME</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="true">
<CallString>
show tabledef tab311n_2
</CallString>
<Error>
<ErrorCode>-4004</ErrorCode>
<ErrorMessage>[-4004] (at 16): Unknown table name:TAB311N_2</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
drop table tab311n_1</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(7.4-;;)" Number="314" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>trying to define a foreign_key with ON DELETE SET NULL on a column which is also primary_key_column
(but a primary_key_column is not allowed to be null)

** for DB &gt;= 7.4 without anonym constraints
   and command 'show tabledef ...' does not exist for 7.4-
   see CREATE_TABLE_negative.xml[1314]</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table tab314n_1 (lastname char (50),
				  firstname char(40),
				  street char (60),
				  city char (60),
				  zip char(5), 
				  unique (lastname, firstname))
</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="true">
<CallString>create table tab314n_2 (constraint constr311_uniq unique (street, zip), 
			primary key ("LaSt_NaMe", "FiRsT_nAmE"), 
			foreign key ("LaSt_NaMe", "FiRsT_nAmE") 
			references tab314n_1 (lastname, firstname) on delete set null) 
			as select lastname "LaSt_NaMe", firstname "FiRsT_nAmE", street, city, zip from tab314n_1
</CallString>
<Error>
<ErrorCode>-7009</ErrorCode>
<ErrorMessage>[-7009] (at 136): NULL value in key column not allowed</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="true">
<CallString>show tabledef tab314n_2</CallString>
<Error>
<ErrorCode>-4004</ErrorCode>
<ErrorMessage>[-4004] (at 15): Unknown table name:TAB314N_2</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>drop table tab314n_1</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="315" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>trying to define a foreign key on 17 columns
(allowed max. 16)  in a create_table_statement with an as_select

</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>CREATE TABLE TAB315n_1 (
                                COL1 char(487) unique, COL2 char unique, COL3 char unique, COL4 char unique, COL5 char unique,
                                COL6 char unique, COL7 char unique, COL8 char unique, COL9 char unique, COL10 char unique,
                                COL11 char unique, COL12 char unique, COL13 char unique, COL14 char unique, COL15 char unique,
                                COL16 char unique, COL17 char unique, COL18 char unique, COL19 char unique, COL20 char unique,
                                COL21 char unique, COL22 char unique, COL23 char unique, COL24 char unique, COL25 char unique,
                                COL26 char unique, COL27 char unique, COL28 char unique, COL29 char unique, COL30 char unique,
                                COL31 char unique, COL32 char unique, COL33 char unique, COL34 char unique, COL35 char unique,
                                COL36 char unique, COL37 char unique, COL38 char unique, COL39 char unique, COL40 char unique,
                                COL41 char unique, COL42 char unique, COL43 char unique, COL44 char unique, COL45 char unique,
                                COL46 char unique, COL47 char unique, COL48 char unique, COL49 char unique, COL50 char unique,
                                COL51 char(489) unique, COL52 char unique, COL53 char unique, COL54 char unique, COL55 char unique,
                                COL56 char unique, COL57 char unique, COL58 char unique, COL59 char unique, COL60 char unique,
                                COL61 char unique, COL62 char unique, COL63 char unique, COL64 char unique, COL65 char unique,
                                COL66 char unique, COL67 char unique, COL68 char unique, COL69 char unique, COL70 char unique,
                                COL71 char unique, COL72 char unique, COL73 char unique, COL74 char unique, COL75 char unique,
                                COL76 char unique, COL77 char unique, COL78 char unique, COL79 char unique, COL80 char unique,
                                COL81 char unique, COL82 char unique, COL83 char unique, COL84 char unique, COL85 char unique,
                                COL86 char unique, COL87 char unique, COL88 char unique, COL89 char unique, COL90 char unique,
                                COL91 char unique, COL92 char unique, COL93 char unique, COL94 char unique, COL95 char unique,
                                COL96 char unique, COL97 char unique, COL98 char unique, COL99 char unique, COL100 char unique,
                                PRIMARY KEY (COL1, COL2, COL3, COL4, COL5,
                                COL6, COL7, COL8, COL9, COL10,
                                COL11, COL12, COL13, COL14, COL15,
                                COL16, col17)) </CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString> CREATE TABLE TAB315n_2 (constraint cOnStR315 FOREIGN KEY ( COL51, COL52, COL53, COL54, COL55,
                                COL56, COL57, COL58, COL59, COL60,
                                COL61, COL62, COL63, COL64, COL65,
                                COL66, col67) REFERENCES TAB315n_1)
                                as select * from TAB315n_1 
</CallString>
<Error>
<ErrorCode>-1002</ErrorCode>
<ErrorMessage>[-1002] (at 63): Too many columns</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>drop table tab315n_1</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="336" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>trying to add a FOREIGN KEY ... ON DELETE SET NULL constraint to a "PRIMARY-KEY-column" </Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>

	CREATE TABLE TAB336P_1 ( nr INT PRIMARY KEY, 
				 surname CHAR (50),
				 forename CHAR (50),
				 length INT)
				 				 </CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>

	CREATE TABLE TAB336P_2 ( nr2 INT PRIMARY KEY, 
				 surname2 CHAR (50),
				 forename2 CHAR (50),
				 profession CHAR (50),
					CONSTRAINT CONSTR_nr
						FOREIGN KEY (nr2) REFERENCES TAB336P_1 ON DELETE SET NULL)
				 				 </CallString>
<Error>
<ErrorCode>-7009</ErrorCode>
<ErrorMessage>[-7009] (at 174): NULL value in key column not allowed</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="true">
<CallString>

	SELECT * FROM TAB336P_2</CallString>
<Error>
<ErrorCode>-942</ErrorCode>
<ErrorMessage>[-942] (at 18): Unknown table name:TAB336P_2</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>

	DROP TABLE TAB336P_1</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="408" Responsible="" TestType="negative">
<Comment/>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString/>
</Statement>
</Run>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="484" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>incomplete CONSTRAINT
test has been created due to a known and fixed bug (incomplete constraints were accepted)</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>CREATE TABLE TAB484 (
					COL1 VARCHAR CONSTRAINT CONSTR_1,
					COL2 INTEGER,
					COL3 FLOAT(32),
					COL4 FLOAT(29) )</CallString>
<Error>
<ErrorCode>-3008</ErrorCode>
<ErrorMessage>[-3008] (at 60): Invalid keyword or missing delimiter</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>CREATE TABLE TAB484_2 (
					COL1 VARCHAR,
					COL2 INTEGER CONSTRAINT CONSTR_2,
					COL3 FLOAT(32),
					COL4 FLOAT(29) )</CallString>
<Error>
<ErrorCode>-3008</ErrorCode>
<ErrorMessage>[-3008] (at 81): Invalid keyword or missing delimiter</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>DROP TABLE TAB484</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>DROP TABLE TAB484_2</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="521" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>NULL NULL instead of typing the keyword one time</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB521N (
                                        COL1 CHAR(49),
                                        COL2 INTEGER CONSTRAINT CONSTR2 NULL,
                                        COL3 DATE CONSTRAINT CONSTR3 NULL NULL,
                                        COL4 NUMERIC(38) CONSTRAINT CONSTR4 NULL,
                                        COL6 INTEGER,

				

	</CallString>
<Error>
<ErrorCode>-3008</ErrorCode>
<ErrorMessage>[-3008] (at 235): Invalid keyword or missing delimiter</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
	DROP TABLE TAB521N</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;oracle)" Number="534" Responsible="Oleg Luzginov" TestType="negative">
<Comment>no table name</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>CREATE TABLE  (
                                        COL1 FLOAT(28),
                                        COL2 INTEGER,
                                        COL3 CHAR(836),
                                        COL5 CHARACTER(1493),
                                        COL6 INT,
                                        COL7 CHAR(5582),
                                        COL8 CHARACTER(5758),
                                        COL9 VARCHAR(4618),
                                        COL10 VARCHAR(6617),
                                        COL11 FLOAT(1),
                                        COL12 CHARACTER(4481),
                                        COL13 VARCHAR(5592) )
				</CallString>
<Error>
<ErrorCode>-3009</ErrorCode>
<ErrorMessage>Invalid table name</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB10
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;oracle)" Number="549" Responsible="Oleg Luzginov" TestType="negative">
<Comment>missing a bracket before a columns definition</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB14
                                        COL1 CHAR(7425),
                                        COL2 FLOAT(35),
                                        COL3 FIXED(28),
                                        COL4 VARCHAR(5307),
                                        COL5 VARCHAR(1256),
                                        COL6 VARCHAR(3163) )
				</CallString>
<Error>
<ErrorCode>-3008</ErrorCode>
<ErrorMessage>Invalid keyword or missing delimiter</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB14
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="625" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>needless keyword INDEX, see COL4</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB625N (
                                        COL1 INT,
                                        COL2 INTEGER CONSTRAINT CONSTR2 NULL,
                                        COL3 DATE CONSTRAINT CONSTR3 NULL,
                                        COL4 NUMERIC(38) CONSTRAINT CONSTR4 NULL INDEX,
                                          COL6 INTEGER
)
				

	</CallString>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>[-5016] (at 311): Missing delimiter: )</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>

	DROP TABLE TAB625N</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;oracle)" Number="675" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>invalid table names</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>CREATE TABLE *TAB13 (
                                        COL1 FLOAT(5),
                                        COL2 VARCHAR(2106),
                                        COL3 CHAR(157),
                                        COL4 FLOAT(1),
                                        COL5 INTEGER,
                                        COL6 CHARACTER(2772),
                                        COL7 DATE )
				</CallString>
<Error>
<ErrorCode>-3009</ErrorCode>
<ErrorMessage>Invalid table name</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE 13TAB (
                                        COL1 FLOAT(5),
                                        COL2 VARCHAR(2106),
                                        COL3 CHAR(157),
                                        COL4 FLOAT(1),
                                        COL5 INTEGER,
                                        COL6 CHARACTER(2772),
                                        COL7 DATE )
				</CallString>
<Error>
<ErrorCode>-3009</ErrorCode>
<ErrorMessage>[-3009] (at 18): Invalid table name</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE "TAB13 (
                                        COL1 FLOAT(5),
                                        COL2 VARCHAR(2106),
                                        COL3 CHAR(157),
                                        COL4 FLOAT(1),
                                        COL5 INTEGER,
                                        COL6 CHARACTER(2772),
                                        COL7 DATE )
				</CallString>
<Error>
<ErrorCode>-3014</ErrorCode>
<ErrorMessage>[-3014] (at 19): Invalid end of SQL statement</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE T"AB13 (
                                        COL1 FLOAT(5),
                                        COL2 VARCHAR(2106),
                                        COL3 CHAR(157),
                                        COL4 FLOAT(1),
                                        COL5 INTEGER,
                                        COL6 CHARACTER(2772),
                                        COL7 DATE )
				</CallString>
<Error>
<ErrorCode>-3014</ErrorCode>
<ErrorMessage>[-3014] (at 20): Invalid end of SQL statement</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB-13 (
                                        COL1 FLOAT(5),
                                        COL2 VARCHAR(2106),
                                        COL3 CHAR(157),
                                        COL4 FLOAT(1),
                                        COL5 INTEGER,
                                        COL6 CHARACTER(2772),
                                        COL7 DATE )
				</CallString>
<Error>
<ErrorCode>-3008</ErrorCode>
<ErrorMessage>[-3008] (at 21): Invalid keyword or missing delimiter</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB13
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="704" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>referencing a non-existent table, column;
datatypes are incompatible (TABLE TAB704N_4, CONSTR704_4
</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>			
		CREATE TABLE TAB704N_1 (
                                        COL1 FLOAT(8),
                                        COL2 INTEGER UNIQUE,
                                        COL3 CHARACTER(4000),
                                        COL4 ROWID,
                                        COL5 CHAR(384),
                                        COL6 DATE,
                                        COL7 NUMBER(4),
                                        COL8 CHAR(2206),
                                        COL9 VARCHAR2(1893),
                                        COL10 VARCHAR2(4000),
                                        COL11 INT
                                        )</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>			
		CREATE TABLE TAB704N_2 (
                                        COL1 FLOAT(8),
                                        COL2 INTEGER,
                                        COL3 CHARACTER(4000),
                                        COL4 ROWID,
                                        COL5 CHAR(384),
                                        COL6 DATE,
                                        COL7 NUMBER(4),
                                        COL8 CHAR(2206),
                                        COL9 VARCHAR2(1893),
                                        COL10 VARCHAR2(4000),
                                        COL11 INT,	
					CONSTRAINT CONSTR704_2 
					   FOREIGN KEY (COL11) REFERENCES TAB704N_BASE (COL2)
                                        )</CallString>
<Error>
<ErrorCode>-942</ErrorCode>
<ErrorMessage>[-942] (at 718): Unknown table name:TAB704N_BASE</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>			
		CREATE TABLE TAB704N_3 (
                                        COL1 FLOAT(8),
                                        COL2 INTEGER,
                                        COL3 CHARACTER(4000),
                                        COL4 ROWID,
                                        COL5 CHAR(384),
                                        COL6 DATE,
                                        COL7 NUMBER(4),
                                        COL8 CHAR(2206),
                                        COL9 VARCHAR2(1893),
                                        COL10 VARCHAR2(4000),
                                        COL11 INT,	
					CONSTRAINT CONSTR704_3 
					   FOREIGN KEY (COL11) REFERENCES TAB704N_1 (COL12)
                                        )</CallString>
<Error>
<ErrorCode>-4005</ErrorCode>
<ErrorMessage>[-4005] (at 729): Unknown column name</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>			
		CREATE TABLE TAB704N_4 (
                                        COL1 FLOAT(8),
                                        COL2 INTEGER,
                                        COL3 CHARACTER(4000),
                                        COL4 ROWID,
                                        COL5 CHAR(384),
                                        COL6 DATE,
                                        COL7 NUMBER(4),
                                        COL8 CHAR(2206),
                                        COL9 VARCHAR2(1893),
                                        COL10 VARCHAR2(4000),
                                        COL11 INT,	
					CONSTRAINT CONSTR704_4 
					   FOREIGN KEY (COL11) REFERENCES TAB704N_1 (COL6)
                                        )</CallString>
<Error>
<ErrorCode>-8006</ErrorCode>
<ErrorMessage>[-8006] (at 700): Data types must be compatible</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="true">
<CallString>

	SELECT tablename, type FROM TABLES 
		WHERE tablename IN ('TAB704N_1', 'TAB704N_2', 'TAB704N_3', 'TAB704N_4')</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>TABLENAME</ColumnName>
<ColumnType>VARCHAR</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>TYPE</ColumnName>
<ColumnType>VARCHAR</ColumnType>
</ColumnDefinition>
<Row>
<Value>'TAB704N_1'</Value>
<Value>'TABLE'</Value>
</Row>
</ResultSet>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>

	DROP TABLE TAB704N_1</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="774" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>columns are not indexed as necessary

** for DB &gt;= 7.4 without anonym constraints
   see CREATE_TABLE_positive.xml[1774]</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>

	CREATE TABLE TAB774P_1 (COL1 CHAR,
				COL2 INT,
				COL3 NUMBER, 
				COL4 FLOAT,
				COL5 DATE,
				COL6 DATE, 
				unique (COL2, COL3, COL4, COL5))</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>

	CREATE TABLE TAB774P_2 (COL1 CHAR,
				COL2 INT,
				COL3 NUMBER, 
				COL4 FLOAT,
				COL5 DATE,
				COL6 DATE,
				FOREIGN KEY (COL2, COL3, COL4) REFERENCES TAB774P_1 (COL2, COL3, COL4))</CallString>
<Error>
<ErrorCode>-8030</ErrorCode>
<ErrorMessage>[-8030]: Column must be indexed</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>

	DROP TABLE TAB774P_1</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;oracle)" Number="797" Responsible="Oleg Luzginov" TestType="negative">
<Comment>no delimiter in the end of the create table statement</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>CREATE TABLE TAB20 (
                                        COL1 CHAR(652),
                                        COL2 CHAR(5777),
                                        COL3 FLOAT(21),
                                        COL4 FIXED(20),
                                        COL5 CHAR(6558),
                                        COL6 LONG,
                                        COL7 FIXED(15),
                                        COL8 LONG,
                                        COL9 VARCHAR(7391),
                                        COL10 CHARACTER(3299),
                                        COL11 INT,
                                        COL12 VARCHAR(6096),
                                        COL13 LONG,

                                        COL15 FLOAT(16),
                                        COL16 CHAR(2145),
                                        COL17 VARCHAR(7443),
                                        COL18 FIXED(4),
                                        COL19 CHAR(6127)
				</CallString>
<Error>
<ErrorCode>-5016</ErrorCode>
<ErrorMessage>Missing delimiter: )</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				DROP TABLE TAB20
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="(;;internal)(;ascii;)" Number="1179" Responsible="Jan Michael Daub" TestType="negative">
<Comment>column UNIQUE constaraints with critical CHAR column length = 512
on unicode databases</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
				CREATE TABLE TAB1179 (
                                        COL1 DATE,
                                        COL2 RAW(3021),
                                        COL3 INT,
                                        COL4 LONG,
                                        COL5 ROWID,
                                        COL6 FLOAT(*),
                                        COL7 CHAR(2728),
                                        COL8 FLOAT(22),
                                        COL9 NUMBER(34),
                                        COL10 VARCHAR(512) unicode UNIQUE,
                                        COL11 ROWID,
                                        COL12 RAW(3549),
                                        COL13 RAW(4000),
                                        COL14 CHAR(4000),
                                        COL15 NUMBER(35),
                                        COL16 ROWID,
                                        COL17 RAW(2879) )
				</CallString>
<Error>
<ErrorCode>-2001</ErrorCode>
<ErrorMessage>Key too long</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
				drop table TAB1179
				</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="semantic" Exclude="" Number="1313" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>** for DB &gt;= 7.4 without anonym constraints

renaming columns when creating a new table with create_table_as_select statement
but trying to set a primary key by using the old column_names (see first run statement)
("LaSt_NaMe" &lt;&gt; lastname)

</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
   create table tab311n_1 (lastname char (50),
				  firstname char(40),
				  street char (60),
				  city char (60),
				  zip char(5), 
				  constraint tab311n_1 unique (lastname, firstname))
      </CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
       insert into tab311n_1 (lastname, firstname, city, zip) values ('Mueller', 'Holger', 'Berlin', 10445)
       </CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
        insert into tab311n_1 (lastname, firstname, city, zip) values ('Schmidt', 'Bernd', 'Berlin', 10375)
        </CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
         insert into tab311n_1 (lastname, firstname, city, zip) values ('Holtz', 'Werner', 'Berlin', 10653)
   
</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="true">
<CallString>
create table tab311n_2 (constraint constr311_uniq unique ("LaSt_NaMe", "FiRsT_nAmE" ), primary key (lastname, firstname)) as select lastname "LaSt_NaMe", firstname "FiRsT_nAmE", city, zip from tab311n_1
</CallString>
<Error>
<ErrorCode>-4005</ErrorCode>
<ErrorMessage>[-4005] (at 102): Unknown column name:LASTNAME</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="true">
<CallString>SELECT count(*) zero FROM DOMAIN.COLUMNS where 
	tablename = 'tab311n_2' 
        


</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>ZERO</ColumnName>
<ColumnType>FIXED</ColumnType>
</ColumnDefinition>
<Row>
<Value>0</Value>
</Row>
</ResultSet>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
drop table tab311n_1</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="1314" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>** for DB &gt;= 7.4 without anonym constraints

trying to define a foreign_key with ON DELETE SET NULL on a column which is also primary_key_column
(but a primary_key_column is not allowed to be null)


</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table tab314n_1 (lastname char (50),
				  firstname char(40),
				  street char (60),
				  city char (60),
				  zip char(5), 
				  constraint tab314n_1 unique (lastname, firstname))
</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="true">
<CallString>create table tab314n_2 (constraint constr311_uniq unique (street, zip), 

			primary key ("LaSt_NaMe", "FiRsT_nAmE"), 
			foreign key ("LaSt_NaMe", "FiRsT_nAmE") 
			references tab314n_1 (lastname, firstname) on delete set null) 
			as select lastname "LaSt_NaMe", firstname "FiRsT_nAmE", street, city, zip from tab314n_1
</CallString>
<Error>
<ErrorCode>-7009</ErrorCode>
<ErrorMessage>[-7009] (at 136): NULL value in key column not allowed</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="true">
<CallString>SELECT count(*) zero FROM DOMAIN.COLUMNS where 
	tablename = 'TAB314N_2' 
        

</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>ZERO</ColumnName>
<ColumnType>FIXED</ColumnType>
</ColumnDefinition>
<Row>
<Value>0</Value>
</Row>
</ResultSet>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>drop table tab314n_1</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="1315" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>trying to define a foreign key on 17 columns
(allowed max. 16)  into a create_table_statement with an as_select


due to a bug there are not more than 38 unique columns in a table possible yet</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>CREATE TABLE TAB315n_1 (
                                COL1 char(991) unique, COL2 char unique, COL3 char unique, COL4 char unique, COL5 char unique,
                                COL6 char unique, COL7 char unique, COL8 char unique, COL9 char unique, COL10 char unique,
                                COL11 char unique, COL12 char unique, COL13 char unique, COL14 char unique, COL15 char unique,
                                COL16 char unique, COL17 char unique, COL18 char unique, COL19 char unique, COL20 char unique,
                                COL21 char unique, COL22 char unique, COL23 char unique, COL24 char unique, COL25 char unique,
                                COL26 char unique, COL27 char unique, COL28 char unique, COL29 char unique, COL30 char unique,
                                COL31 char unique, COL32 char unique, COL33 char unique, COL34 char unique, COL35 char unique,
                                COL36 char unique, COL37 char unique, COL38 char unique, COL39 char unique, COL40 char unique,
                                COL41 char unique, COL42 char unique, COL43 char unique, COL44 char unique, COL45 char unique,
                                COL46 char unique, COL47 char unique, COL48 char unique, COL49 char unique, COL50 char unique,
                                COL51 char(991) unique, COL52 char unique, COL53 char unique, COL54 char unique, COL55 char unique,
                                COL56 char unique, COL57 char unique, COL58 char unique, COL59 char unique, COL60 char unique,
                                COL61 char unique, COL62 char unique, COL63 char unique, COL64 char unique, COL65 char unique,
                                COL66 char unique, COL67 char unique, COL68 char unique, COL69 char unique, COL70 char unique,
                                COL71 char unique, COL72 char unique, COL73 char unique, COL74 char unique, COL75 char unique,
                                COL76 char unique, COL77 char unique, COL78 char unique, COL79 char unique, COL80 char unique,
                                COL81 char unique, COL82 char unique, COL83 char unique, COL84 char unique, COL85 char unique,
                                COL86 char unique, COL87 char unique, COL88 char unique, COL89 char unique, COL90 char unique,
                                COL91 char unique, COL92 char unique, COL93 char unique, COL94 char unique, COL95 char unique,
                                COL96 char unique, COL97 char unique, COL98 char unique, COL99 char unique, COL100 char unique,
                                PRIMARY KEY (COL1, COL2, COL3, COL4, COL5,
                                COL6, COL7, COL8, COL9, COL10,
                                COL11, COL12, COL13, COL14, COL15,
                                COL16, col17)) </CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString> CREATE TABLE TAB315n_2 (constraint cOnStR315 FOREIGN KEY ( COL51, COL52, COL53, COL54, COL55,
                                COL56, COL57, COL58, COL59, COL60,
                                COL61, COL62, COL63, COL64, COL65,
                                COL66, col67) REFERENCES TAB315n_1)
                                as select * from TAB315n_1 
</CallString>
<Error>
<ErrorCode>-1002</ErrorCode>
<ErrorMessage>[-1002] (at 63): Too many columns</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="false" verify="false">
<CallString>drop table tab315n_1</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;internal)" Number="1774" Responsible="Daub, Jan Michael" TestType="negative">
<Comment>
columns are not indexed as necessary
</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>

	CREATE TABLE TAB774P_1 (COL1 CHAR,
				COL2 INT,
				COL3 NUMBER, 
				COL4 FLOAT,
				COL5 DATE,
				COL6 DATE, 
				constraint tab774p_1 unique (COL2, COL3, COL4, COL5))</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>

	CREATE TABLE TAB774P_2 (COL1 CHAR,
				COL2 INT,
				COL3 NUMBER, 
				COL4 FLOAT,
				COL5 DATE,
				COL6 DATE,
				FOREIGN KEY (COL2, COL3, COL4) REFERENCES TAB774P_1 (COL2, COL3, COL4))</CallString>
<Error>
<ErrorCode>-8030</ErrorCode>
<ErrorMessage>[-8030]: Column must be indexed</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>

	DROP TABLE TAB774P_1</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="22222222" Responsible="" TestType="negative">
<Comment/>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString/>
</Statement>
</Run>
</Test>
</Tests>
