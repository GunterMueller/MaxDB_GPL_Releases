<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Tests SYSTEM "TestCases.dtd">
<Tests>
<Test ErrorType="syntax" Exclude="" Number="1" Responsible="" TestType="negative">
<Comment>Test to show how regular expression work in Stedi.

Regular expression (regex):
- You find a introduction to regex in the java documentation to class java.util.regex.Pattern
- To mark a resultset field as regex, right click on it and select regex.
- You can not use regex on numeric columns</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>select 'this is a normal text and the resultset must be equal to this string' from dual
</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>EXPRESSION1</ColumnName>
<ColumnType>CHAR</ColumnType>
</ColumnDefinition>
<Row>
<Value>'this is a normal text and the resultset must be equal to this string'</Value>
</Row>
</ResultSet>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>select 'but you can match a text with regexxxxxxx' from dual
</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>EXPRESSION1</ColumnName>
<ColumnType>CHAR</ColumnType>
</ColumnDefinition>
<Row>
<Value regex="true">'b.t you [a-n]{3} match a .* with regex*'</Value>
</Row>
</ResultSet>
</Statement>
</Run>
</Test>
<Test Exclude="" Number="2" Responsible="" TestType="positive">
<Comment>Test to show how numeric ranges work in Stedi.

Numeric ranges:
- To use range you have to write expression with the fowlling syntax in the resultet.
- All blanks will be ignored
- Syntax:
    &lt;= 500   	means, that the value from the database must be less than or equal to 500
    &lt; 500      	means, that the value from the database must be less than 500
    &gt;= 10      	means, that the value from the database must be greater than or equal to 10
    &gt; 10	means, that the value from the database must be greater than 10
    10 / 20	 means, that the value from the database must be greater than or equal to 10 and less than or equal to 20
    100 / 5% 	means, that the value from the database must be within 5 per cent around 100 ( greater or equal to 95 and less or equal to 105 )</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>/* find a normal number */
select 123 from dual</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>EXPRESSION1</ColumnName>
<ColumnType>FIXED</ColumnType>
</ColumnDefinition>
<Row>
<Value>123</Value>
</Row>
</ResultSet>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>/* find numbers between 100 and 150 */
select 100, 123, 150  from dual</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>EXPRESSION1</ColumnName>
<ColumnType>FIXED</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>EXPRESSION2</ColumnName>
<ColumnType>FIXED</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>EXPRESSION3</ColumnName>
<ColumnType>FIXED</ColumnType>
</ColumnDefinition>
<Row>
<Value range="true">100/150</Value>
<Value range="true">100/150</Value>
<Value range="true">100/150</Value>
</Row>
</ResultSet>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>/* find numbers less than 150 */
select 100, 123, 149 from dual</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>EXPRESSION1</ColumnName>
<ColumnType>FIXED</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>EXPRESSION2</ColumnName>
<ColumnType>FIXED</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>EXPRESSION3</ColumnName>
<ColumnType>FIXED</ColumnType>
</ColumnDefinition>
<Row>
<Value range="true">&lt;150</Value>
<Value range="true">&lt;150</Value>
<Value range="true">&lt;150</Value>
</Row>
</ResultSet>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>/* find numbers greater than 100 */
select 101, 123, 150 from dual</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>EXPRESSION1</ColumnName>
<ColumnType>FIXED</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>EXPRESSION2</ColumnName>
<ColumnType>FIXED</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>EXPRESSION3</ColumnName>
<ColumnType>FIXED</ColumnType>
</ColumnDefinition>
<Row>
<Value range="true">&gt;100</Value>
<Value range="true">&gt;100</Value>
<Value range="true">&gt;100</Value>
</Row>
</ResultSet>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>/* find numbers less or equal to 150 */
select -12.998, 123, 150 from dual</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>EXPRESSION1</ColumnName>
<ColumnType>FIXED</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>EXPRESSION2</ColumnName>
<ColumnType>FIXED</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>EXPRESSION3</ColumnName>
<ColumnType>FIXED</ColumnType>
</ColumnDefinition>
<Row>
<Value range="true">&lt;=150 </Value>
<Value range="true">&lt;=150</Value>
<Value range="true">&lt;=150</Value>
</Row>
</ResultSet>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>/* find numbers greater or equal to 100 */
select 100.00001, 123, 999999999999999999999999 from dual</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>EXPRESSION1</ColumnName>
<ColumnType>FIXED</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>EXPRESSION2</ColumnName>
<ColumnType>FIXED</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>EXPRESSION3</ColumnName>
<ColumnType>FLOAT</ColumnType>
</ColumnDefinition>
<Row>
<Value range="true">&gt;=100</Value>
<Value range="true">&gt;=100</Value>
<Value range="true">&gt;=100</Value>
</Row>
</ResultSet>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>/* find numbers with not more or less then 5%  aberrance from 100 */
select 95,97,99,100,105 from dual</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>EXPRESSION1</ColumnName>
<ColumnType>FIXED</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>EXPRESSION2</ColumnName>
<ColumnType>FIXED</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>EXPRESSION3</ColumnName>
<ColumnType>FIXED</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>EXPRESSION4</ColumnName>
<ColumnType>FIXED</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>EXPRESSION5</ColumnName>
<ColumnType>FIXED</ColumnType>
</ColumnDefinition>
<Row>
<Value range="true">100 / 5%</Value>
<Value range="true">100 / 5%</Value>
<Value range="true">100 / 5%</Value>
<Value range="true">100 / 5%</Value>
<Value range="true">100 / 5%</Value>
</Row>
</ResultSet>
</Statement>
</Run>
</Test>
<Test ErrorType="syntax" Exclude="(;;oracle)" Number="4" Responsible="" TestType="negative">
<Comment>Here an example for regex,range and ignore.
Colors:
grey = ignore
pink = regex
cyan = range</Comment>
<Prepare>
<Statement callable="false" ignore="true" verify="false">
<CallString>drop table tab</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table tab (
	ca char (12) ascii,
	cb char (12) byte,
	vca varchar (12) ascii,
	
	b boolean,
	fix1 fixed (1),
	fix11 fixed(20,10),
	in integer,
	float12 float(12),
	d  date,
	t  time,
	ts timestamp
)
	</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>INSERT TAB SET 
	ca='ABCdef', 
	cb='ABCdef',
	vca='ABCdef', 
	
	fix1=1,
	
	fix11=1234567890.0123456789,
	in =1234567890,
	
	float12=1234.1242,
	d='2412-12-24',
	t='01:12:59',
	ts='2412-12-24 01:12:59'
	
	</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>INSERT TAB SET 
	ca='ABCdef', 
	cb='ABCdef',
	vca='ABCdef', 
	
	fix1=1,
	
	fix11=1234567890.0123456789,
	in =1234567890,
	
	float12=1234.1242,
	d='2412-12-24',
	t='01:12:59',
	ts='2412-12-24 01:12:59'
	
	</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>INSERT TAB SET 
	ca='ABCdef', 
	cb='ABCdef',
	vca='ABCdef', 
	
	fix1=1,
	
	fix11=1234567890.0123456789,
	in =1234567890,
	
	float12=1234.1242,
	d='2412-12-24',
	t='01:12:59',
	ts='2412-12-24 01:12:59'
	
	</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>INSERT TAB SET 
	ca='ABCdef', 
	cb='ABCdef',
	vca='ABCdef', 
	
	fix1=1,
	
	fix11=1234567890.0123456789,
	in =1234567890,
	
	float12=1234.1242,
	d='2412-12-24',
	t='01:12:59',
	ts='2412-12-24 01:12:59'
	
	</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>SELECT * from tab</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>CA</ColumnName>
<ColumnType>CHAR</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>CB</ColumnName>
<ColumnType>CHAR BYTE</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>VCA</ColumnName>
<ColumnType>VARCHAR</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>B</ColumnName>
<ColumnType>BOOLEAN</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>FIX1</ColumnName>
<ColumnType>FIXED</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>FIX11</ColumnName>
<ColumnType>FIXED</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>IN</ColumnName>
<ColumnType>INTEGER</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>FLOAT12</ColumnName>
<ColumnType>FLOAT</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>D</ColumnName>
<ColumnType>DATE</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>T</ColumnName>
<ColumnType>TIME</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>TS</ColumnName>
<ColumnType>TIMESTAMP</ColumnType>
</ColumnDefinition>
<Row>
<Value regex="true">'AB..ef'</Value>
<Value>Xabcdef000000000000000000</Value>
<Value Ignore="true" regex="true">'ABCdef'</Value>
<Value>NULL</Value>
<Value range="true">-10/10</Value>
<Value>1234567890.0123456789</Value>
<Value>1234567890</Value>
<Value range="true">1200/10%</Value>
<Value regex="true">'2412.*'</Value>
<Value>'01:12:59'</Value>
<Value>'2412-12-24 01:12:59.000000'</Value>
</Row>
<Row>
<Value>'ABCdef'</Value>
<Value>Xabcdef000000000000000000</Value>
<Value>'ABCdef'</Value>
<Value Ignore="true">''</Value>
<Value>1</Value>
<Value Ignore="true" range="true">&gt;0</Value>
<Value>1234567890</Value>
<Value>1234.1242</Value>
<Value>'2412-12-24'</Value>
<Value>'01:12:59'</Value>
<Value regex="true">'.*'</Value>
</Row>
<Row>
<Value>'ABCdef'</Value>
<Value Ignore="true"/>
<Value>'ABCdef'</Value>
<Value>NULL</Value>
<Value>1</Value>
<Value>1234567890.0123456789</Value>
<Value range="true">&gt;0</Value>
<Value>1234.1242</Value>
<Value>'2412-12-24'</Value>
<Value regex="true">'..:..:59'</Value>
<Value>'2412-12-24 01:12:59.000000'</Value>
</Row>
<Row>
<Value>'ABCdef'</Value>
<Value>Xabcdef000000000000000000</Value>
<Value regex="true">'[A-Z]*def'</Value>
<Value>NULL</Value>
<Value>1</Value>
<Value Ignore="true">blabla</Value>
<Value>1234567890</Value>
<Value>1234.1242</Value>
<Value>'2412-12-24'</Value>
<Value>'01:12:59'</Value>
<Value>'2412-12-24 01:12:59.000000'</Value>
</Row>
</ResultSet>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="false" verify="false">
<CallString>drop table tab</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="10" Responsible="Märker, Olaf" TestType="negative">
<Comment>User connections:
This test show how to connect and release a new user to the database.
To connect use: connect &lt;username&gt; identified by &lt;password&gt;
Then you can fill in the user name in the field 'user' to declare, which user should run this statement.
The user field is case sensitive. When you connect with'Peter' you have to use 'Peter' and not 'peter' or 'PETER' in the userfield.
Leave the field 'user' blank to use the standard testuser defined in the stedi options dialog or in the tests parameter file.
To create a user in a test the default test user must have dba privileges.
Please do not use comments in connect or commit statement yet.
</Comment>
<Prepare>
<Statement callable="false" ignore="true" verify="false">
<CallString>drop user Peter</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>create user Peter password peter</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>connect Peter identified by peter</CallString>
</Statement>
<Statement callable="false" ignore="false" user="Peter" verify="false">
<CallString>/* this is statement of the user peter*/
select USERNAME from sessions where OWN='YES'</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>USERNAME</ColumnName>
<ColumnType>CHAR</ColumnType>
</ColumnDefinition>
<Row>
<Value>'PETER'</Value>
</Row>
</ResultSet>
</Statement>
<Statement callable="false" ignore="false" user="Peter" verify="false">
<CallString>/* this is statement of the user peter*/
create table tabPeter (i int primary key)</CallString>
<Error>
<ErrorCode>-5001</ErrorCode>
<ErrorMessage>[-5001] (at 55): Missing privilege:RESOURCE</ErrorMessage>
</Error>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="false" user="Peter" verify="false">
<CallString>/*IMPORTANT: Please clean up. Close connections and drop users so the next test can start cleanly*/
commit release</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>drop user peter</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="11" Responsible="Märker, Olaf" TestType="negative">
<Comment>User connections:
When you connect a user you can specify connection parameters in form &lt;parameter&gt; &lt;value&gt; &lt;parameter&gt; &lt;value&gt; ...
The supported parameters are:
sqlmode, timeout, isolation, reconnect, autocommit, spaceoption, unicode, trace, application, applversion</Comment>
<Prepare>
<Statement callable="false" ignore="true" verify="false">
<CallString>drop user Peter</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>create user Peter password peter resource</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>connect Peter identified by peter SQLMODE ORACLE AUTOCOMMIT OFF UNICODE YES</CallString>
</Statement>
<Statement callable="false" ignore="false" user="Peter" verify="false">
<CallString>create table tabPeter (i int primary key)</CallString>
</Statement>
<Statement callable="false" ignore="false" user="Peter" verify="false">
<CallString>select tablename from tables where owner='PETER'</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>TABLENAME</ColumnName>
<ColumnType>CHAR</ColumnType>
</ColumnDefinition>
<Row>
<Value>'TABPETER'</Value>
</Row>
</ResultSet>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="false" user="Peter" verify="false">
<CallString>rollback work release</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>select tablename from tables where owner='PETER'</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>TABLENAME</ColumnName>
<ColumnType>CHAR</ColumnType>
</ColumnDefinition>
</ResultSet>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>drop user peter</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="20" Responsible="Märker, Olaf" TestType="negative">
<Comment>A simple select and comparison of the resultset</Comment>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>SELECT 'bla' FROM dual</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>EXPRESSION1</ColumnName>
<ColumnType>CHAR</ColumnType>
</ColumnDefinition>
<Row>
<Value>'bla'</Value>
</Row>
</ResultSet>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>SELECT 'bla', 'blu', 'ble', 123 FROM dual</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>EXPRESSION1</ColumnName>
<ColumnType>CHAR</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>EXPRESSION2</ColumnName>
<ColumnType>CHAR</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>EXPRESSION3</ColumnName>
<ColumnType>CHAR</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>EXPRESSION4</ColumnName>
<ColumnType>FIXED</ColumnType>
</ColumnDefinition>
<Row>
<Value>'bla'</Value>
<Value>'blu'</Value>
<Value>'ble'</Value>
<Value>123</Value>
</Row>
</ResultSet>
</Statement>
</Run>
</Test>
<Test ErrorType="syntax" Exclude="" Number="21" Responsible="Märker, Olaf" TestType="negative">
<Comment>How to use phases:
Prepare:  Set up an environment your test can run in. Make sure all needed tables, users etc exists.

Run: Do your test

Clean up: Bring back the database to the situation before the test. The clean-up-phase will be run in any case, after a succsessful or abortet test.</Comment>
<Prepare>
<Statement callable="false" ignore="true" verify="false">
<CallString>/* remove table tab1 if it exist. If not, errors will be ignores (option 'Ignore') */

drop table tab1</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>/* create table tab1 new */

create table tab1 ( int1 int, char1 char(20) )</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>/* insert a test value */

insert into tab1 values (1, 'hallo')</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>/* check if the test value is correct  in the database. Select the checkbox 'Verify' to indicate that this statement is for verification */

select * from tab1</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>INT1</ColumnName>
<ColumnType>INTEGER</ColumnType>
</ColumnDefinition>
<ColumnDefinition>
<ColumnName>CHAR1</ColumnName>
<ColumnType>CHAR</ColumnType>
</ColumnDefinition>
<Row>
<Value>1</Value>
<Value>'hallo'</Value>
</Row>
</ResultSet>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="false" verify="false">
<CallString>/* remove the table */

drop table tab1</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="" Number="22" Responsible="Märker, Olaf" TestType="negative">
<Comment>This test show how to check for correct error codes</Comment>
<Prepare>
<Statement callable="false" ignore="true" verify="false">
<CallString>create table tab1 (int1 int)</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>drop table tab1</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>drop table tab1

/* you can't drop a table twice. The error code will be compared with all determined codes. 
If the code aren't equal to one of the specified codes, a message in the protocol will be generated. Only the 
codes will be compared, but not the messages.

More than one  code may be necessary like in this case. -4004 will be returned in internal mode 
and -942 in oracle mode.
 */
</CallString>
<Error>
<ErrorCode>-4004</ErrorCode>
<ErrorMessage>[-4004] (at 12): Unknown table name:TAB1</ErrorMessage>
</Error>
<Error>
<ErrorCode>-942</ErrorCode>
<ErrorMessage>[-942] (at 12): Unknown table name:TAB1</ErrorMessage>
</Error>
</Statement>
</Run>
</Test>
<Test ErrorType="syntax" Exclude="(;;ORACLE)(-7.6.99.999;;)" Number="30" Responsible="Märker, Olaf" TestType="negative">
<Comment/>
<Prepare>
<Statement callable="false" ignore="true" verify="false">
<CallString>DROP DBPROC procedure1</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>CREATE DBPROC procedure1 (IN b1 BOOLEAN, 
		IN i1 INTEGER,
		IN f1 FLOAT,
		OUT fx1 FIXED(10,5),
		OUT si1 SMALLINT,
		INOUT ch1 CHAR(20),
		IN vch1 VARCHAR(20),
		OUT lvch1 LONG,
		IN lvb1 LONG,
		INOUT ts1 TIMESTAMP,
		OUT d1 DATE,
		OUT t1 TIME)
AS
TRY
	SET fx1 = ROUND( i1 / f1, 5 );
	SET si1 = TRUNC( fx1, 0);
	SET ch1 = ch1 || 'bla';
	IF b1 THEN SET ch1 = ch1 || ' true';
	SET ts1 = ADDDATE ( ts1, 3);
	SET d1 = DATE ( 812313 );
	SET t1 = TIME ( '01:12:59' );
	RETURN;

CATCH 
	STOP ($rc, 'unexpected error');
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>CALL procedure1 ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,? )</CallString>
<Parameter DataType="BOOLEAN" InValue="'true'" OutValue="''" ParamType="IN"/>
<Parameter DataType="INTEGER" InValue="125" OutValue="" ParamType="IN"/>
<Parameter DataType="FLOAT" InValue="2.3456" OutValue="" ParamType="IN"/>
<Parameter DataType="FIXED" InValue="" OutValue="53.29127" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="53" ParamType="OUT"/>
<Parameter DataType="CHAR" InValue="'bla'" OutValue="'blabla true'" ParamType="INOUT"/>
<Parameter DataType="CHAR" InValue="'blo'" OutValue="''" ParamType="IN"/>
<Parameter DataType="LONGVARCHAR" InValue="''" OutValue="NULL" ParamType="OUT"/>
<Parameter DataType="LONGVARCHAR" InValue="'38u8strduitzkdfhullö'" OutValue="''" ParamType="IN"/>
<Parameter DataType="TIMESTAMP" InValue="12-12-12 12:12:12" OutValue="0012-12-15 12:12:12.0" ParamType="INOUT"/>
<Parameter DataType="DATE" InValue="" OutValue="2225-01-14" ParamType="OUT"/>
<Parameter DataType="TIME" InValue="" OutValue="01:12:59" ParamType="OUT"/>
</Statement>
</Run>
</Test>
</Tests>
