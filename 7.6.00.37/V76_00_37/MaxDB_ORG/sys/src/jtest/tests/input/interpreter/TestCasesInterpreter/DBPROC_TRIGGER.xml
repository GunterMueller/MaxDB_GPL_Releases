<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Tests SYSTEM "TestCases.dtd">
<Tests>
<Test Exclude="(;;oracle)" Number="1" Responsible="Robert Voelkel" TestType="positive">
<Comment>
Test of important DB procedure features with a non-trivial example, nested calls,
combination of dbprocs and triggers.

The example simulates a video rental store. These tables are used:

	INVENTORY: all media (VHS tapes, DVDs, etc.) in the store
	MOVIES:    all movies available on any medium
	CUSTOMERS: the store's customers
	LOANS:     all rentals of media by customers

In the Prepare phase, the tables are created. In the Run phase, dbprocs and
triggers are defined; then they are executed in a meaningful sequence,
thereby simulating business activity. In the CleanUp phase, the dbprocs and
tables are dropped (triggers are dropped implicitly).

In addition, some limitations of DB procedures are tested:

 - max. number of parameters (255)
 - max. number of statements (255)

</Comment>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE TABLE INVENTORY (
	INV_NO INTEGER KEY,
	MOVIE_NO SMALLINT NOT NULL,
	STATUS CHAR(10) CONSTRAINT STATUS IN ('in stock', 'removed'),
	PURCHASE_DATE DATE NOT NULL,
	PURCHASE_PRICE FIXED(6,2) NOT NULL,
	TIMES_RENTED SMALLINT DEFAULT 0,
	REMOVE_CAUSE CHAR(10) CONSTRAINT REMOVE_CAUSE IN ('old', 'lost', 'broken', 'banned', 'n/a'))
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE TABLE MOVIES (
	MOVIE_NO SMALLINT KEY,
	TITLE CHAR(60) NOT NULL,
	DUBBED_TITLE CHAR(60) DEFAULT NULL,
	YEAR_OF_PUBLICATION CHAR(4) DEFAULT NULL,
	CATEGORY CHAR(20) CONSTRAINT CATEGORY IN ('Action', 'Drama', 'Thriller', 'Comedy', 'Romance',
		'Romantic Comedy', 'SciFi', 'Adventure', 'Horror', 'Kids', 'Cartoon/Animated', 'other'),
	DIRECTOR CHAR(30) DEFAULT NULL,
	ACTORS CHAR(100) DEFAULT NULL,
	MEDIUM CHAR(3) CONSTRAINT MEDIUM IN ('VHS', 'DVD', 'VCD'),
	LANGUAGES CHAR(80) DEFAULT NULL,
	DAILY_RATE FIXED(4,2))
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE TABLE CUSTOMERS (
	CUSTOMER_NO SMALLINT KEY,
	LAST_NAME CHAR(20) NOT NULL,
	FIRST_NAMES CHAR(20),
	SEX CHAR CONSTRAINT SEX IN ('M', 'F'),
	STREET CHAR(50) NOT NULL,
	ZIP_CODE CHAR(5) NOT NULL,
	TOWN CHAR(50) NOT NULL,
	PHONE CHAR(15),
	CUSTOMER_SINCE DATE NOT NULL,
	DELAYED_RETURNS FIXED(4) DEFAULT 0,
	MOVIES_LOST FIXED(2) DEFAULT 0,
	CARDS_LOST FIXED(2) DEFAULT 0,
	DISCOUNT_PCT FIXED(3) DEFAULT 0,
	AMOUNT_DUE FIXED(7,2) DEFAULT 0,
	CARD_NO SMALLINT,
	DISABLED BOOLEAN DEFAULT FALSE,
	BLACKLISTED BOOLEAN DEFAULT FALSE)
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE TABLE LOANS (
	INV_NO INTEGER NOT NULL,
	CUSTOMER_NO SMALLINT NOT NULL,
	DATE_RENTED DATE NOT NULL,
	DATE_DUE DATE NOT NULL,
	AMOUNT_DUE FIXED(5,2),
	DATE_RETURNED DATE DEFAULT NULL)
</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE DBPROC ADD_CUSTOMER (IN I_LAST_NAME CHAR(20), IN I_FIRST_NAMES CHAR(20), IN I_SEX CHAR,
	IN I_STREET CHAR(50), IN I_ZIP_CODE CHAR(5), IN I_TOWN CHAR(50), IN I_PHONE CHAR(15),
	IN I_CUSTOMER_SINCE DATE,
	OUT O_CUSTOMER_NO SMALLINT, OUT O_CARD_NO SMALLINT)
	AS VAR LAST_NO SMALLINT; CURR_NO SMALLINT;
		SELECT CUSTOMER_NO FROM USER.CUSTOMERS;
		SET CURR_NO = 0;
		SET LAST_NO = 0;
		WHILE $RC &lt;&gt; 100 DO BEGIN
			FETCH INTO :CURR_NO;
			IF ($RC &lt;&gt; 100) AND (CURR_NO &gt; LAST_NO) THEN
				LAST_NO = CURR_NO;
		END;
		SET O_CUSTOMER_NO = LAST_NO + 1;
		SELECT CARD_NO FROM USER.CUSTOMERS;
		SET CURR_NO = 0;
		SET LAST_NO = 0;
		WHILE $RC &lt;&gt; 100 DO BEGIN
			FETCH INTO :CURR_NO;
			IF ($RC &lt;&gt; 100) AND (CURR_NO &gt; LAST_NO) THEN
				LAST_NO = CURR_NO;
		END;
		SET O_CARD_NO = LAST_NO + 1;
		INSERT INTO USER.CUSTOMERS VALUES (:O_CUSTOMER_NO, :I_LAST_NAME, :I_FIRST_NAMES, :I_SEX,
			:I_STREET, :I_ZIP_CODE, :I_TOWN, :I_PHONE, :I_CUSTOMER_SINCE, 0, 0, 0, 0, 0,
			:O_CARD_NO, FALSE, FALSE);
		IF $RC &lt;&gt; 0 THEN
			STOP (1, 'INSERT INTO CUSTOMERS failed');
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE DBPROC REMOVE_CUSTOMER (IN I_CUSTOMER_NO SMALLINT)
	AS VAR CT INT;
		SELECT COUNT(*) from USER.LOANS WHERE CUSTOMER_NO = :I_CUSTOMER_NO AND DATE_RETURNED IS NULL;
		FETCH INTO :CT;
		IF CT &gt; 0 THEN
			STOP (1, 'Customer has films on loan');
		DELETE FROM USER.LOANS WHERE CUSTOMER_NO=:I_CUSTOMER_NO;
		IF $RC &lt;&gt; 0 AND $RC &lt;&gt; 100 THEN
			STOP ($RC, 'DELETE FROM LOANS failed');
		DELETE FROM USER.CUSTOMERS WHERE CUSTOMER_NO=:I_CUSTOMER_NO;
		IF $RC &lt;&gt; 0  AND $RC &lt;&gt; 100 THEN
			STOP (1, 'DELETE FROM CUSTOMERS failed');
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE DBPROC ADD_MOVIE (IN I_TITLE CHAR(60), IN I_DUBBED_TITLE CHAR(60), IN I_YEAR_OF_PUBLICATION CHAR(4),
	IN I_CATEGORY CHAR(20), IN I_DIRECTOR CHAR(30), IN I_ACTORS CHAR(100), IN I_MEDIUM CHAR(3),
	IN I_LANGUAGES CHAR(80), IN I_DAILY_RATE FIXED(4,2),
	OUT O_MOVIE_NO SMALLINT)
	AS VAR LAST_NO SMALLINT; CURR_NO SMALLINT;
		SELECT MOVIE_NO FROM USER.MOVIES;
		SET CURR_NO = 0;
		SET LAST_NO = 0;
		WHILE $RC &lt;&gt; 100 DO BEGIN
			FETCH INTO :CURR_NO;
			IF ($RC &lt;&gt; 100) AND (CURR_NO &gt; LAST_NO) THEN
				LAST_NO = CURR_NO;
		END;
		SET O_MOVIE_NO = LAST_NO + 1;
		INSERT INTO USER.MOVIES VALUES (:O_MOVIE_NO, :I_TITLE, :I_DUBBED_TITLE, :I_YEAR_OF_PUBLICATION,
			:I_CATEGORY, :I_DIRECTOR, :I_ACTORS, :I_MEDIUM, :I_LANGUAGES, :I_DAILY_RATE);
		IF $RC &lt;&gt; 0 THEN
			STOP (1, 'INSERT INTO MOVIES failed');
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE DBPROC REMOVE_MOVIE (IN I_MOVIE_NO SMALLINT)
	AS
		DELETE FROM USER.MOVIES WHERE MOVIE_NO=:I_MOVIE_NO;
		IF $RC &lt;&gt; 0 AND $RC &lt;&gt; 100 THEN
			STOP (1, 'DELETE FROM MOVIES failed');
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE DBPROC ADD_MEDIUM (IN I_MOVIE_NO SMALLINT, IN I_PURCHASE_DATE DATE, IN I_PURCHASE_PRICE FIXED(6,2),
	OUT O_INV_NO INTEGER)
	AS VAR LAST_NO SMALLINT; CURR_NO SMALLINT;
		SELECT INV_NO FROM USER.INVENTORY;
		SET CURR_NO = 0;
		SET LAST_NO = 0;
		WHILE $RC &lt;&gt; 100 DO BEGIN
			FETCH INTO :CURR_NO;
			IF ($RC &lt;&gt; 100) AND (CURR_NO &gt; LAST_NO) THEN
				LAST_NO = CURR_NO;
		END;
		SET O_INV_NO = LAST_NO + 1;
		INSERT INTO USER.INVENTORY VALUES (:O_INV_NO, :I_MOVIE_NO, 'in stock', :I_PURCHASE_DATE,
			:I_PURCHASE_PRICE, 0, 'n/a');
		IF $RC &lt;&gt; 0 THEN
			STOP (1, 'INSERT INTO INVENTORY failed');
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE DBPROC REMOVE_MEDIUM (IN I_INV_NO INTEGER)
	AS
		DELETE FROM USER.INVENTORY WHERE INV_NO=:I_INV_NO;
		IF $RC &lt;&gt; 0 AND $RC &lt;&gt; 100 THEN
			STOP (1, 'DELETE FROM INVENTORY failed');
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE DBPROC UPD_DISCOUNT (IN I_CUSTOMER_NO SMALLINT, IN I_TODAY DATE)
	AS VAR DUR DATE; DR DATE; CT_TOTAL SMALLINT; CT_RECENT SMALLINT; DISCOUNT FIXED(3);
		SET CT_TOTAL = 0;
		SET CT_RECENT = 0;
		SET DISCOUNT = 0;
		SELECT CUSTOMER_SINCE FROM USER.CUSTOMERS WHERE CUSTOMER_NO = :I_CUSTOMER_NO;
		FETCH INTO :DUR;
		IF $RC &lt;&gt; 0 THEN
			STOP (1, 'Customer not found');
		SELECT DATE_RENTED FROM USER.LOANS WHERE CUSTOMER_NO = :I_CUSTOMER_NO;
		FETCH INTO :DR;
		WHILE $RC = 0 DO
			BEGIN
				SET CT_TOTAL = CT_TOTAL + 1;
				IF DATEDIFF(I_TODAY, DR) &lt; 28 THEN
					SET CT_RECENT = CT_RECENT + 1;
				FETCH INTO :DR;
			END;
		IF DATEDIFF(I_TODAY, DUR) &gt; 364 THEN
			DISCOUNT = DISCOUNT + 10;
		IF CT_TOTAL &gt; 99 THEN
			DISCOUNT = DISCOUNT + 10;
		IF CT_RECENT &gt; 9 THEN
			DISCOUNT = DISCOUNT + 10;
		UPDATE USER.CUSTOMERS SET DISCOUNT_PCT = :DISCOUNT WHERE CUSTOMER_NO = :I_CUSTOMER_NO;
		IF $RC &lt;&gt; 0 THEN
			STOP (1, 'UPDATE CUSTOMERS failed');
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE DBPROC RENT_MEDIUM (IN I_INV_NO INTEGER, IN I_CUSTOMER_NO SMALLINT, IN I_DATE_RENTED DATE,
	IN I_DATE_DUE DATE)
	AS VAR DIS BOOLEAN; BLK BOOLEAN; MOVIE SMALLINT; RATE FIXED(4,2); AMOUNT FIXED(4,2); DSCT FIXED(5,2);
		CALL UPD_DISCOUNT(:I_CUSTOMER_NO, :I_DATE_RENTED);
		SELECT DISCOUNT_PCT, DISABLED, BLACKLISTED FROM USER.CUSTOMERS WHERE CUSTOMER_NO=:I_CUSTOMER_NO;
		FETCH INTO :DSCT, :DIS, :BLK;
		IF $RC &lt;&gt; 0 THEN
			STOP (1, 'Customer not found');
		IF DIS=TRUE THEN
			STOP (1, 'Customer account disabled');
		IF BLK=TRUE THEN
			STOP (1, 'Customer blacklisted');
		SELECT MOVIE_NO FROM USER.INVENTORY WHERE INV_NO=:I_INV_NO;
		FETCH INTO :MOVIE;
		IF $RC &lt;&gt; 0 THEN
			STOP (1, 'Medium not found in inventory');
		SELECT DAILY_RATE FROM USER.MOVIES WHERE MOVIE_NO=:MOVIE;
		FETCH INTO :RATE;
		IF $RC &lt;&gt; 0 THEN
			STOP (1, 'Movie not found');
		SET AMOUNT = (DATEDIFF(I_DATE_DUE, I_DATE_RENTED) + 1) * RATE * (100 - DSCT) / 100;
		INSERT INTO USER.LOANS VALUES (:I_INV_NO, :I_CUSTOMER_NO, :I_DATE_RENTED, :I_DATE_DUE,
			:AMOUNT, NULL);
		IF $RC &lt;&gt; 0 THEN
			STOP (1, 'INSERT INTO LOANS failed');
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE DBPROC RET_MEDIUM (IN I_INV_NO INTEGER, IN I_DATE_RETURNED DATE)
	AS
		UPDATE USER.LOANS SET DATE_RETURNED = :I_DATE_RETURNED WHERE
			INV_NO = :I_INV_NO AND DATE_RETURNED IS NULL;
		IF $RC &lt;&gt; 0 THEN
			STOP (1, 'Medium not on loan');
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE DBPROC UPD_AMOUNTS_DUE (IN I_TODAY DATE)
	AS VAR INVNO INTEGER; CUSTOMERNO SMALLINT; DATEDUE DATE; AMOUNTDUE FIXED(5,2);
		MOVIENO SMALLINT; RATE FIXED(4,2); AMOUNTDUEC FIXED(7,2);
		DECLARE ON_LOAN CURSOR FOR SELECT INV_NO, CUSTOMER_NO, DATE_DUE, AMOUNT_DUE FROM USER.LOANS WHERE DATE_RETURNED IS NULL;
		FETCH ON_LOAN INTO :INVNO, :CUSTOMERNO, :DATEDUE, :AMOUNTDUE;
		WHILE $RC = 0 DO
			BEGIN
				IF DATEDIFF(I_TODAY, DATEDUE) &gt; 0 THEN
					BEGIN
						SELECT MOVIE_NO FROM USER.INVENTORY WHERE INV_NO = :INVNO;
						FETCH INTO :MOVIENO;
						IF $RC &lt;&gt; 0 THEN
							STOP(1, 'Medium not found');
						SELECT DAILY_RATE FROM USER.MOVIES WHERE MOVIE_NO = :MOVIENO;
						FETCH INTO :RATE;
						IF $RC &lt;&gt; 0 THEN
							STOP(1, 'Movie not found');
						UPDATE USER.LOANS SET AMOUNT_DUE = :AMOUNTDUE + :RATE WHERE INV_NO = :INVNO AND DATE_RETURNED IS NULL;
						SELECT AMOUNT_DUE FROM USER.CUSTOMERS WHERE CUSTOMER_NO = :CUSTOMERNO;
						FETCH INTO :AMOUNTDUEC;
						IF $RC &lt;&gt; 0 THEN
							STOP(1, 'Customer not found');
						UPDATE USER.CUSTOMERS SET AMOUNT_DUE = :AMOUNTDUEC + :RATE WHERE CUSTOMER_NO = :CUSTOMERNO;
					END;
				FETCH ON_LOAN INTO :INVNO, :CUSTOMERNO, :DATEDUE, :AMOUNTDUE;
			END;
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE DBPROC CHK_LOANS (IN I_TODAY DATE)
	AS VAR INVNO INTEGER; CUSTOMERNO SMALLINT; DATEDUE DATE; PPR FIXED(6,2); AMTDUE FIXED(7,2); MVLOST FIXED(2);
		DECLARE ON_LOAN CURSOR FOR SELECT INV_NO, CUSTOMER_NO, DATE_DUE FROM USER.LOANS WHERE DATE_RETURNED IS NULL;
		FETCH ON_LOAN INTO :INVNO, :CUSTOMERNO, :DATEDUE;
		WHILE $RC = 0 DO
			BEGIN
				IF DATEDIFF(I_TODAY, DATEDUE) &gt; 4 THEN
					BEGIN
						UPDATE USER.LOANS SET DATE_RETURNED = :I_TODAY
							WHERE DATE_RETURNED IS NULL AND INV_NO = :INVNO;
						IF $RC &lt;&gt; 0 THEN
							STOP(1, 'Medium not on loan');
						SELECT PURCHASE_PRICE FROM USER.INVENTORY WHERE INV_NO = :INVNO;
						FETCH INTO :PPR;
						IF $RC &lt;&gt; 0 THEN
							STOP(1, 'Medium not found');
						UPDATE USER.INVENTORY SET STATUS = 'removed', REMOVE_CAUSE = 'lost'
							WHERE INV_NO = :INVNO;
						IF $RC &lt;&gt; 0 THEN
							STOP(1, 'UPDATE INVENTORY failed');
						SELECT AMOUNT_DUE, MOVIES_LOST FROM USER.CUSTOMERS WHERE CUSTOMER_NO = :CUSTOMERNO;
						FETCH INTO :AMTDUE, :MVLOST;
						IF $RC &lt;&gt; 0 THEN
							STOP(1, 'Customer not found');
						UPDATE USER.CUSTOMERS SET MOVIES_LOST = :MVLOST + 1, AMOUNT_DUE = :AMTDUE + :PPR
							WHERE CUSTOMER_NO = :CUSTOMERNO;
						IF $RC &lt;&gt; 0 THEN
							STOP(1, 'UPDATE CUSTOMERS failed');
					END;
				FETCH ON_LOAN INTO :INVNO, :CUSTOMERNO, :DATEDUE;
			END;
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE DBPROC HOLIDAYS_2002 (IN I_TODAY DATE, OUT O_HOLIDAY CHAR(20))
	AS
		CASE I_TODAY
			WHEN '2002-01-02' THEN O_HOLIDAY = 'New Year''s Day';
			WHEN '2002-03-29' THEN O_HOLIDAY = 'Good Friday';
			WHEN '2002-03-31' THEN O_HOLIDAY = 'Easter Sunday';
			WHEN '2002-12-24','2002-12-25','2002-12-26' THEN O_HOLIDAY = 'Christmas';
			WHEN '2002-12-31' THEN O_HOLIDAY = 'New Year''s Eve';
			ELSE O_HOLIDAY = 'no holiday';
		END;
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE DBPROC MORNING_COFFEE (IN I_TODAY DATE)
	AS VAR DAY CHAR(20);
		CALL UPD_AMOUNTS_DUE(:I_TODAY);
		IF $RC &lt;&gt; 0 THEN
			STOP(1, 'UPD_AMOUNTS_DUE failed');
		CALL CHK_LOANS(:I_TODAY);
		IF $RC &lt;&gt; 0 THEN
			STOP(1, 'CHK_LOANS failed');
		CALL HOLIDAYS_2002(:I_TODAY, :DAY);
		CASE
			WHEN $RC &lt;&gt; 0 THEN STOP(1, 'HOLIDAYS_2002 failed');
			WHEN DAY &lt;&gt; 'no holiday' THEN STOP(1, 'No work on holidays');
			ELSE RETURN;
		END;
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE DBPROC SETTLE_ACCOUNT (IN I_CUSTOMER_NO SMALLINT, IN I_TODAY DATE)
	AS
		UPDATE USER.LOANS SET DATE_RETURNED = :I_TODAY
			WHERE CUSTOMER_NO = :I_CUSTOMER_NO AND DATE_RETURNED IS NULL;
		IF $RC &lt;&gt; 0 AND $RC &lt;&gt; 100 THEN
			STOP($RC, $ERRMSG);
		IF $COUNT &gt; 10 THEN
			STOP(1, 'Cannot settle account with more than 10 open loans');
		UPDATE USER.CUSTOMERS SET AMOUNT_DUE = 0
			WHERE CUSTOMER_NO = :I_CUSTOMER_NO;
		IF $RC &lt;&gt; 0 THEN
			STOP($RC, $ERRMSG);
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE DBPROC RECURSIVE_CLEANUP (IN I_INVNO INTEGER)
	AS VAR CT INTEGER; INCRMT INTEGER;
		SET INCRMT = I_INVNO;
		DELETE FROM USER.LOANS WHERE INV_NO = :INCRMT;
		IF $RC &lt;&gt; 0 AND $RC &lt;&gt; 100 THEN
			STOP($RC, $ERRMSG);
		SELECT COUNT (*) FROM USER.LOANS;
		FETCH INTO :CT;
		IF $RC &lt;&gt; 0 THEN
			STOP($RC, $ERRMSG);
		SET INCRMT = INCRMT + 1;
		IF CT &gt; 0 THEN
			BEGIN
				TRY
					CALL RECURSIVE_CLEANUP (:INCRMT);
					RETURN;
				CATCH
					IF $RC &lt;&gt; 0 THEN
						STOP($RC, $ERRMSG);
			END
		ELSE
			RETURN;
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE DBPROC DO_REC_CLUP 
	AS
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
</CallString>
<Error>
<ErrorCode>-1120</ErrorCode>
<ErrorMessage>Too many statements in definition</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE DBPROC DO_REC_CLUP 
	AS
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
		CALL RECURSIVE_CLEANUP (1);
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE DBPROC MANY_PARS(

IN P1 CHAR(20), IN P2 CHAR(20), IN P3 CHAR, IN P4 CHAR(50), IN P5 CHAR(5),
IN P6 CHAR(50), IN P7 CHAR(15), IN P8 DATE, OUT P9 SMALLINT, OUT P10 SMALLINT,

IN P11 CHAR(20), IN P12 CHAR(20), IN P13 CHAR, IN P14 CHAR(50), IN P15 CHAR(5),
IN P16 CHAR(50), IN P17 CHAR(15), IN P18 DATE, OUT P19 SMALLINT, OUT P20 SMALLINT,

IN P21 CHAR(20), IN P22 CHAR(20), IN P23 CHAR, IN P24 CHAR(50), IN P25 CHAR(5),
IN P26 CHAR(50), IN P27 CHAR(15), IN P28 DATE, OUT P29 SMALLINT, OUT P30 SMALLINT,

IN P31 CHAR(20), IN P32 CHAR(20), IN P33 CHAR, IN P34 CHAR(50), IN P35 CHAR(5),
IN P36 CHAR(50), IN P37 CHAR(15), IN P38 DATE, OUT P39 SMALLINT, OUT P40 SMALLINT,

IN P41 CHAR(20), IN P42 CHAR(20), IN P43 CHAR, IN P44 CHAR(50), IN P45 CHAR(5),
IN P46 CHAR(50), IN P47 CHAR(15), IN P48 DATE, OUT P49 SMALLINT, OUT P50 SMALLINT,

IN P51 CHAR(20), IN P52 CHAR(20), IN P53 CHAR, IN P54 CHAR(50), IN P55 CHAR(5),
IN P56 CHAR(50), IN P57 CHAR(15), IN P58 DATE, OUT P59 SMALLINT, OUT P60 SMALLINT,

IN P61 CHAR(20), IN P62 CHAR(20), IN P63 CHAR, IN P64 CHAR(50), IN P65 CHAR(5),
IN P66 CHAR(50), IN P67 CHAR(15), IN P68 DATE, OUT P69 SMALLINT, OUT P70 SMALLINT,

IN P71 CHAR(20), IN P72 CHAR(20), IN P73 CHAR, IN P74 CHAR(50), IN P75 CHAR(5),
IN P76 CHAR(50), IN P77 CHAR(15), IN P78 DATE, OUT P79 SMALLINT, OUT P80 SMALLINT,

IN P81 CHAR(20), IN P82 CHAR(20), IN P83 CHAR, IN P84 CHAR(50), IN P85 CHAR(5),
IN P86 CHAR(50), IN P87 CHAR(15), IN P88 DATE, OUT P89 SMALLINT, OUT P90 SMALLINT,

IN P91 CHAR(20), IN P92 CHAR(20), IN P93 CHAR, IN P94 CHAR(50), IN P95 CHAR(5),
IN P96 CHAR(50), IN P97 CHAR(15), IN P98 DATE, OUT P99 SMALLINT, OUT P100 SMALLINT,

IN P101 CHAR(20), IN P102 CHAR(20), IN P103 CHAR, IN P104 CHAR(50), IN P105 CHAR(5),
IN P106 CHAR(50), IN P107 CHAR(15), IN P108 DATE, OUT P109 SMALLINT, OUT P110 SMALLINT,

IN P111 CHAR(20), IN P112 CHAR(20), IN P113 CHAR, IN P114 CHAR(50), IN P115 CHAR(5),
IN P116 CHAR(50), IN P117 CHAR(15), IN P118 DATE, OUT P119 SMALLINT, OUT P120 SMALLINT,

IN P121 CHAR(20), IN P122 CHAR(20), IN P123 CHAR, IN P124 CHAR(50), IN P125 CHAR(5),
IN P126 CHAR(50), IN P127 CHAR(15), IN P128 DATE, OUT P129 SMALLINT, OUT P130 SMALLINT,

IN P131 CHAR(20), IN P132 CHAR(20), IN P133 CHAR, IN P134 CHAR(50), IN P135 CHAR(5),
IN P136 CHAR(50), IN P137 CHAR(15), IN P138 DATE, OUT P139 SMALLINT, OUT P140 SMALLINT,

IN P141 CHAR(20), IN P142 CHAR(20), IN P143 CHAR, IN P144 CHAR(50), IN P145 CHAR(5),
IN P146 CHAR(50), IN P147 CHAR(15), IN P148 DATE, OUT P149 SMALLINT, OUT P150 SMALLINT,

IN P151 CHAR(20), IN P152 CHAR(20), IN P153 CHAR, IN P154 CHAR(50), IN P155 CHAR(5),
IN P156 CHAR(50), IN P157 CHAR(15), IN P158 DATE, OUT P159 SMALLINT, OUT P160 SMALLINT,

IN P161 CHAR(20), IN P162 CHAR(20), IN P163 CHAR, IN P164 CHAR(50), IN P165 CHAR(5),
IN P166 CHAR(50), IN P167 CHAR(15), IN P168 DATE, OUT P169 SMALLINT, OUT P170 SMALLINT,

IN P171 CHAR(20), IN P172 CHAR(20), IN P173 CHAR, IN P174 CHAR(50), IN P175 CHAR(5),
IN P176 CHAR(50), IN P177 CHAR(15), IN P178 DATE, OUT P179 SMALLINT, OUT P180 SMALLINT,

IN P181 CHAR(20), IN P182 CHAR(20), IN P183 CHAR, IN P184 CHAR(50), IN P185 CHAR(5),
IN P186 CHAR(50), IN P187 CHAR(15), IN P188 DATE, OUT P189 SMALLINT, OUT P190 SMALLINT,

IN P191 CHAR(20), IN P192 CHAR(20), IN P193 CHAR, IN P194 CHAR(50), IN P195 CHAR(5),
IN P196 CHAR(50), IN P197 CHAR(15), IN P198 DATE, OUT P199 SMALLINT, OUT P200 SMALLINT,

IN P201 CHAR(20), IN P202 CHAR(20), IN P203 CHAR, IN P204 CHAR(50), IN P205 CHAR(5),
IN P206 CHAR(50), IN P207 CHAR(15), IN P208 DATE, OUT P209 SMALLINT, OUT P210 SMALLINT,

IN P211 CHAR(20), IN P212 CHAR(20), IN P213 CHAR, IN P214 CHAR(50), IN P215 CHAR(5),
IN P216 CHAR(50), IN P217 CHAR(15), IN P218 DATE, OUT P219 SMALLINT, OUT P220 SMALLINT,

IN P221 CHAR(20), IN P222 CHAR(20), IN P223 CHAR, IN P224 CHAR(50), IN P225 CHAR(5),
IN P226 CHAR(50), IN P227 CHAR(15), IN P228 DATE, OUT P229 SMALLINT, OUT P230 SMALLINT,

IN P231 CHAR(20), IN P232 CHAR(20), IN P233 CHAR, IN P234 CHAR(50), IN P235 CHAR(5),
IN P236 CHAR(50), IN P237 CHAR(15), IN P238 DATE, OUT P239 SMALLINT, OUT P240 SMALLINT,

IN P241 CHAR(20), IN P242 CHAR(20), IN P243 CHAR, IN P244 CHAR(50), IN P245 CHAR(5),
IN P246 CHAR(50), IN P247 CHAR(15), IN P248 DATE, OUT P249 SMALLINT, OUT P250 SMALLINT)

AS

	CALL ADD_CUSTOMER (:P1, :P2, :P3, :P4, :P5, :P6, :P7, :P8, :P9, :P10);
	IF $RC &lt;&gt; 0 THEN
		STOP ($RC, $ERRMSG);
	CALL ADD_CUSTOMER (:P11, :P12, :P13, :P14, :P15, :P16, :P17, :P18, :P19, :P20);
	IF $RC &lt;&gt; 0 THEN
		STOP ($RC, $ERRMSG);
	CALL ADD_CUSTOMER (:P21, :P22, :P23, :P24, :P25, :P26, :P27, :P28, :P29, :P30);
	IF $RC &lt;&gt; 0 THEN
		STOP ($RC, $ERRMSG);
	CALL ADD_CUSTOMER (:P31, :P32, :P33, :P34, :P35, :P36, :P37, :P38, :P39, :P40);
	IF $RC &lt;&gt; 0 THEN
		STOP ($RC, $ERRMSG);
	CALL ADD_CUSTOMER (:P41, :P42, :P43, :P44, :P45, :P46, :P47, :P48, :P49, :P50);
	IF $RC &lt;&gt; 0 THEN
		STOP ($RC, $ERRMSG);
	CALL ADD_CUSTOMER (:P51, :P52, :P53, :P54, :P55, :P56, :P57, :P58, :P59, :P60);
	IF $RC &lt;&gt; 0 THEN
		STOP ($RC, $ERRMSG);
	CALL ADD_CUSTOMER (:P61, :P62, :P63, :P64, :P65, :P66, :P67, :P68, :P69, :P70);
	IF $RC &lt;&gt; 0 THEN
		STOP ($RC, $ERRMSG);
	CALL ADD_CUSTOMER (:P71, :P72, :P73, :P74, :P75, :P76, :P77, :P78, :P79, :P80);
	IF $RC &lt;&gt; 0 THEN
		STOP ($RC, $ERRMSG);
	CALL ADD_CUSTOMER (:P81, :P82, :P83, :P84, :P85, :P86, :P87, :P88, :P89, :P90);
	IF $RC &lt;&gt; 0 THEN
		STOP ($RC, $ERRMSG);
	CALL ADD_CUSTOMER (:P91, :P92, :P93, :P94, :P95, :P96, :P97, :P98, :P99, :P100);
	IF $RC &lt;&gt; 0 THEN
		STOP ($RC, $ERRMSG);
	CALL ADD_CUSTOMER (:P101, :P102, :P103, :P104, :P105, :P106, :P107, :P108, :P109, :P110);
	IF $RC &lt;&gt; 0 THEN
		STOP ($RC, $ERRMSG);
	CALL ADD_CUSTOMER (:P111, :P112, :P113, :P114, :P115, :P116, :P117, :P118, :P119, :P120);
	IF $RC &lt;&gt; 0 THEN
		STOP ($RC, $ERRMSG);
	CALL ADD_CUSTOMER (:P121, :P122, :P123, :P124, :P125, :P126, :P127, :P128, :P129, :P130);
	IF $RC &lt;&gt; 0 THEN
		STOP ($RC, $ERRMSG);
	CALL ADD_CUSTOMER (:P131, :P132, :P133, :P134, :P135, :P136, :P137, :P138, :P139, :P140);
	IF $RC &lt;&gt; 0 THEN
		STOP ($RC, $ERRMSG);
	CALL ADD_CUSTOMER (:P141, :P142, :P143, :P144, :P145, :P146, :P147, :P148, :P149, :P150);
	IF $RC &lt;&gt; 0 THEN
		STOP ($RC, $ERRMSG);
	CALL ADD_CUSTOMER (:P151, :P152, :P153, :P154, :P155, :P156, :P157, :P158, :P159, :P160);
	IF $RC &lt;&gt; 0 THEN
		STOP ($RC, $ERRMSG);
	CALL ADD_CUSTOMER (:P161, :P162, :P163, :P164, :P165, :P166, :P167, :P168, :P169, :P170);
	IF $RC &lt;&gt; 0 THEN
		STOP ($RC, $ERRMSG);
	CALL ADD_CUSTOMER (:P171, :P172, :P173, :P174, :P175, :P176, :P177, :P178, :P179, :P180);
	IF $RC &lt;&gt; 0 THEN
		STOP ($RC, $ERRMSG);
	CALL ADD_CUSTOMER (:P181, :P182, :P183, :P184, :P185, :P186, :P187, :P188, :P189, :P190);
	IF $RC &lt;&gt; 0 THEN
		STOP ($RC, $ERRMSG);
	CALL ADD_CUSTOMER (:P191, :P192, :P193, :P194, :P195, :P196, :P197, :P198, :P199, :P200);
	IF $RC &lt;&gt; 0 THEN
		STOP ($RC, $ERRMSG);
	CALL ADD_CUSTOMER (:P201, :P202, :P203, :P204, :P205, :P206, :P207, :P208, :P209, :P210);
	IF $RC &lt;&gt; 0 THEN
		STOP ($RC, $ERRMSG);
	CALL ADD_CUSTOMER (:P211, :P212, :P213, :P214, :P215, :P216, :P217, :P218, :P219, :P220);
	IF $RC &lt;&gt; 0 THEN
		STOP ($RC, $ERRMSG);
	CALL ADD_CUSTOMER (:P221, :P222, :P223, :P224, :P225, :P226, :P227, :P228, :P229, :P230);
	IF $RC &lt;&gt; 0 THEN
		STOP ($RC, $ERRMSG);
	CALL ADD_CUSTOMER (:P231, :P232, :P233, :P234, :P235, :P236, :P237, :P238, :P239, :P240);
	IF $RC &lt;&gt; 0 THEN
		STOP ($RC, $ERRMSG);
	CALL ADD_CUSTOMER (:P241, :P242, :P243, :P244, :P245, :P246, :P247, :P248, :P249, :P250);
	IF $RC &lt;&gt; 0 THEN
		STOP ($RC, $ERRMSG);
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE DBPROC LOCAL_RESIDENT (IN I_CUSTNO SMALLINT, INOUT IO_TOWN_STREET CHAR(50))
	AS VAR T CHAR(50); S CHAR(50);
		SELECT TOWN, STREET FROM USER.CUSTOMERS WHERE CUSTOMER_NO = :I_CUSTNO;
		FETCH INTO :T, :S;
		IF $RC &lt;&gt; 0 THEN
			STOP($RC, $ERRMSG);
		IF T = IO_TOWN_STREET THEN
			IO_TOWN_STREET = S
		ELSE
			IO_TOWN_STREET = T;
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE DBPROC MEDIUM_RETURNED (IN I_INVNO INTEGER, INOUT IO_RENTED_DUE DATE, OUT O_RETURNED BOOLEAN)
	AS VAR D DATE; R DATE;
		SELECT DATE_DUE, DATE_RETURNED FROM USER.LOANS WHERE INV_NO = :I_INVNO AND DATE_RENTED = :IO_RENTED_DUE;
		FETCH INTO :D, :R;
		IF $RC &lt;&gt; 0 THEN
			STOP($RC, $ERRMSG);
		IO_RENTED_DUE = D;
		IF R IS NULL THEN
			O_RETURNED = FALSE
		ELSE
			O_RETURNED = TRUE;
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE TRIGGER INS_LOANS FOR LOANS AFTER INSERT EXECUTE (
	VAR TR SMALLINT; AMOUNT FIXED(7,2);
	SELECT AMOUNT_DUE FROM USER.CUSTOMERS WHERE CUSTOMER_NO = :NEW.CUSTOMER_NO;
	FETCH INTO :AMOUNT;
	IF $RC &lt;&gt; 0 THEN
		STOP (1, 'Customer not found');
	UPDATE USER.CUSTOMERS SET AMOUNT_DUE = :AMOUNT + :NEW.AMOUNT_DUE WHERE CUSTOMER_NO = :NEW.CUSTOMER_NO;
	IF $RC &lt;&gt; 0 THEN
		STOP (1, 'UPDATE CUSTOMERS failed');
	SELECT TIMES_RENTED FROM USER.INVENTORY WHERE INV_NO = :NEW.INV_NO;
	FETCH INTO :TR;
	IF $RC &lt;&gt; 0 THEN
		STOP (1, 'Medium not found');
	UPDATE USER.INVENTORY SET TIMES_RENTED = :TR + 1 WHERE INV_NO = :NEW.INV_NO;
	IF $RC &lt;&gt; 0 THEN
		STOP (1, 'UPDATE INVENTORY failed');
)
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE TRIGGER UPD_LOANS FOR LOANS AFTER UPDATE (DATE_RETURNED) EXECUTE (
	VAR AMOUNT FIXED(4,2); MOV SMALLINT; TR SMALLINT; MED CHAR(3);
	SELECT AMOUNT_DUE FROM USER.CUSTOMERS WHERE CUSTOMER_NO = :NEW.CUSTOMER_NO;
	FETCH INTO :AMOUNT;
	IF $RC &lt;&gt; 0 THEN
		STOP (1, 'Customer not found');
	UPDATE USER.CUSTOMERS SET AMOUNT_DUE = :AMOUNT - :NEW.AMOUNT_DUE WHERE CUSTOMER_NO = :NEW.CUSTOMER_NO;
	IF $RC &lt;&gt; 0 THEN
		STOP (1, 'UPDATE CUSTOMERS failed');
	SELECT MOVIE_NO, TIMES_RENTED FROM USER.INVENTORY WHERE INV_NO = :NEW.INV_NO;
	FETCH INTO :MOV, :TR;
	IF $RC &lt;&gt; 0 THEN
		STOP (1, 'Medium not found');
	SELECT MEDIUM FROM USER.MOVIES WHERE MOVIE_NO = :MOV;
	FETCH INTO :MED;
	IF $RC &lt;&gt; 0 THEN
		STOP (1, 'Movie not found');
	IF (TR &gt; 10 and MED = 'VHS') OR (TR &gt; 30 and MED &lt;&gt; 'VHS') THEN
		BEGIN
			UPDATE USER.INVENTORY SET STATUS = 'removed', REMOVE_CAUSE = 'old'
				WHERE INV_NO = :NEW.INV_NO;
			IF $RC &lt;&gt; 0 THEN
				STOP (1, 'UPDATE INVENTORY failed');
		END;
)
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE TRIGGER DEL_INVENTORY FOR INVENTORY AFTER DELETE EXECUTE (
	VAR CT INT;
	DELETE FROM USER.LOANS WHERE INV_NO = :OLD.INV_NO;
	IF $RC &lt;&gt; 0 AND $RC &lt;&gt; 100 THEN
		STOP ($RC, $ERRMSG);
	SELECT COUNT(*) FROM USER.INVENTORY WHERE MOVIE_NO = :OLD.MOVIE_NO;
	FETCH INTO :CT;
	IF CT = 0 THEN
		BEGIN
			DELETE FROM USER.MOVIES WHERE MOVIE_NO = :OLD.MOVIE_NO;
			IF $RC &lt;&gt; 0 AND $RC &lt;&gt; 100 THEN
				STOP ($RC, $ERRMSG);
		END;
)
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE TRIGGER DEL_MOVIES FOR MOVIES AFTER DELETE EXECUTE (
	DELETE FROM USER.INVENTORY WHERE MOVIE_NO = :OLD.MOVIE_NO;
	IF $RC &lt;&gt; 0 AND $RC &lt;&gt; 100 THEN
		STOP ($RC, $ERRMSG);
)
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
CREATE TRIGGER UPD_CUSTOMERS FOR CUSTOMERS AFTER UPDATE EXECUTE (
	IF NEW.MOVIES_LOST &gt; OLD.MOVIES_LOST AND NEW.MOVIES_LOST &gt; 9 THEN
		UPDATE USER.CUSTOMERS SET BLACKLISTED = TRUE WHERE CUSTOMER_NO = :NEW.CUSTOMER_NO;
	IF NEW.CARDS_LOST &gt; OLD.CARDS_LOST AND NEW.CARDS_LOST &gt; 2 THEN
		UPDATE USER.CUSTOMERS SET BLACKLISTED = TRUE WHERE CUSTOMER_NO = :NEW.CUSTOMER_NO;
	IF NEW.AMOUNT_DUE &gt; OLD.AMOUNT_DUE AND NEW.AMOUNT_DUE &gt; 50 THEN
		UPDATE USER.CUSTOMERS SET DISABLED = TRUE WHERE CUSTOMER_NO = :NEW.CUSTOMER_NO;
	IF NEW.AMOUNT_DUE &lt; OLD.AMOUNT_DUE AND NEW.AMOUNT_DUE &lt; 50 THEN
		UPDATE USER.CUSTOMERS SET DISABLED = FALSE WHERE CUSTOMER_NO = :NEW.CUSTOMER_NO;
)
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MOVIE ('2001: A Space Odyssey', '', '1968', 'SciFi', 'Stanley Kubrick',
	'Keir Dullea, Gary Lockwood, William Sylvester', 'VHS', 'English', 1.00, ?)
</CallString>
<Parameter DataType="SMALLINT" InValue="" OutValue="1" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MOVIE ('Pulp Fiction', '', '1994', 'Thriller', 'Quentin Tarantino',
	'John Travolta, Samuel L. Jackson, Uma Thurman, Harvey Keitel', 'VHS', 'English', 1.00, ?)
</CallString>
<Parameter DataType="SMALLINT" InValue="" OutValue="2" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MOVIE ('Ronin', 'Ronin', '1998', 'Thriller', 'John Frankenheimer',
	'Robert De Niro, Jean Reno', 'DVD', 'English, Deutsch, Francais', 1.50, ?)
</CallString>
<Parameter DataType="SMALLINT" InValue="" OutValue="3" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MOVIE ('You''ve Got Mail', 'E-mail für Dich', '1998', 'Romantic Comedy', 'Nora Ephron',
	'Tom Hanks, Meg Ryan', 'DVD', 'English, Deutsch', 1.50, ?)
</CallString>
<Parameter DataType="SMALLINT" InValue="" OutValue="4" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MOVIE ('One Fine Day', 'Tage wie dieser', '1996', 'Romantic Comedy', 'Michael Hoffman',
	'Michelle Pfeiffer, George Clooney', 'DVD', 'English, Deutsch, Magyar, Suomi', 1.50, ?)
</CallString>
<Parameter DataType="SMALLINT" InValue="" OutValue="5" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MOVIE ('Lola rennt', 'Run Lola Run', '1998', 'Drama', 'Tom Tykwer',
	'Franka Potente, Moritz Bleibtreu', 'DVD', 'Deutsch, English', 1.50, ?)
</CallString>
<Parameter DataType="SMALLINT" InValue="" OutValue="6" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MOVIE ('Forrest Gump', 'Forrest Gump', '1994', 'Drama', 'Robert Zemeckis',
	'Tom Hanks, Robin Wright, Sally Field', 'DVD', 'English, Deutsch, Svenska', 1.50, ?)
</CallString>
<Parameter DataType="SMALLINT" InValue="" OutValue="7" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MOVIE ('Lost Highway', 'Lost Highway', '1997', 'Thriller', 'David Lynch',
	'Bill Pullman, Patricia Arquette', 'DVD', 'English, Deutsch,', 1.50, ?)
</CallString>
<Parameter DataType="SMALLINT" InValue="" OutValue="8" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MOVIE ('The Mummy', 'Die Mumie', '1999', 'Action', 'Stephen Sommers',
	'Brendan Fraser, Rachel Weisz', 'DVD', 'English, Deutsch, Espanol', 1.50, ?)
</CallString>
<Parameter DataType="SMALLINT" InValue="" OutValue="9" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MOVIE ('Sleepless in Seattle', 'Schlaflos in Seattle', '1993', 'Romantic Comedy', 'Nora Ephron',
	'Tom Hanks, Meg Ryan', 'VCD', 'English, Deutsch, Cesky', 1.20, ?)
</CallString>
<Parameter DataType="SMALLINT" InValue="" OutValue="10" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MEDIUM (1, '2000-10-31', 19.99, ?)
</CallString>
<Parameter DataType="INTEGER" InValue="" OutValue="1" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MEDIUM (1, '2000-10-31', 19.99, ?)
</CallString>
<Parameter DataType="INTEGER" InValue="" OutValue="2" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MEDIUM (2, '2001-01-15', 27.50, ?)
</CallString>
<Parameter DataType="INTEGER" InValue="" OutValue="3" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MEDIUM (3, '2001-07-12', 18.98, ?)
</CallString>
<Parameter DataType="INTEGER" InValue="" OutValue="4" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MEDIUM (4, '1999-03-31', 22.90, ?)
</CallString>
<Parameter DataType="INTEGER" InValue="" OutValue="5" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MEDIUM (5, '2001-11-21', 18.00, ?)
</CallString>
<Parameter DataType="INTEGER" InValue="" OutValue="6" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MEDIUM (6, '2001-08-10', 19.99, ?)
</CallString>
<Parameter DataType="INTEGER" InValue="" OutValue="7" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MEDIUM (7, '1999-03-01', 29.90, ?)
</CallString>
<Parameter DataType="INTEGER" InValue="" OutValue="8" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MEDIUM (8, '2002-01-05', 25.00, ?)
</CallString>
<Parameter DataType="INTEGER" InValue="" OutValue="9" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MEDIUM (9, '2000-02-28', 18.90, ?)
</CallString>
<Parameter DataType="INTEGER" InValue="" OutValue="10" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_CUSTOMER ('Schulze', 'Fritze', 'M', 'Friedrichstr. 234', '10251', 'Berlin', '030-5559678', '2000-10-22', ?, ?)
</CallString>
<Parameter DataType="SMALLINT" InValue="" OutValue="1" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="1" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_CUSTOMER ('Übel', 'Kalle', 'M', 'Alt-Moabit 24', '10551', 'Berlin', '030-5551234', '2001-11-25', ?, ?)
</CallString>
<Parameter DataType="SMALLINT" InValue="" OutValue="2" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="2" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_CUSTOMER ('Meyer', 'Erna', 'F', 'Marburger Str. 5', '12367', 'Berlin', '030-5559876', '1998-05-12', ?, ?)
</CallString>
<Parameter DataType="SMALLINT" InValue="" OutValue="3" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="3" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_CUSTOMER ('Schäfer', 'Ottilie', 'F', 'Kantstr. 98', '10387', 'Berlin', '030-5553758', '1999-06-02', ?, ?)
</CallString>
<Parameter DataType="SMALLINT" InValue="" OutValue="4" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="4" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_CUSTOMER ('Scott', 'Anthony', 'M', 'Prenzlauer Allee 122', '10450', 'Berlin', '030-5552573', '2002-01-15', ?, ?)
</CallString>
<Parameter DataType="SMALLINT" InValue="" OutValue="5" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="5" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_CUSTOMER ('Hinze-Schlabberich', 'Agathe', 'F', 'Pestalozzistr. 12', '11456', 'Berlin', '030-5559974', '2001-05-03', ?, ?)
</CallString>
<Parameter DataType="SMALLINT" InValue="" OutValue="6" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="6" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_CUSTOMER ('Taschenräuber', 'Schorsch', 'M', 'Buckower Damm 84', '12459', 'Berlin', '030-5556365', '2000-03-08', ?, ?)
</CallString>
<Parameter DataType="SMALLINT" InValue="" OutValue="7" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="7" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_CUSTOMER ('Meyer', 'Erna-Friederike', 'F', 'Greifswalder Str. 67', '10408', 'Berlin', '030-5558753', '1999-09-30', ?, ?)
</CallString>
<Parameter DataType="SMALLINT" InValue="" OutValue="8" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="8" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_CUSTOMER ('Uhrmacher', 'Sigismund', 'M', 'Knesebeckstr. 8', '12987', 'Berlin', '030-5552793', '1999-05-18', ?, ?)
</CallString>
<Parameter DataType="SMALLINT" InValue="" OutValue="9" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="9" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_CUSTOMER ('Kloß', 'Erdmuthe', 'F', 'Am Acker 10', '13954', 'Finsterberg-Dodeleben', '031234-5551', '2000-07-01', ?, ?)
</CallString>
<Parameter DataType="SMALLINT" InValue="" OutValue="10" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="10" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MEDIUM (10, '1998-07-10', 15.99, ?)
</CallString>
<Parameter DataType="INTEGER" InValue="" OutValue="11" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MEDIUM (2, '2001-01-15', 27.50, ?)
</CallString>
<Parameter DataType="INTEGER" InValue="" OutValue="12" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MEDIUM (7, '2000-03-01', 24.90, ?)
</CallString>
<Parameter DataType="INTEGER" InValue="" OutValue="13" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MEDIUM (7, '2000-03-01', 24.90, ?)
</CallString>
<Parameter DataType="INTEGER" InValue="" OutValue="14" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MEDIUM (4, '2001-05-01', 15.00, ?)
</CallString>
<Parameter DataType="INTEGER" InValue="" OutValue="15" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MEDIUM (4, '2001-05-01', 15.00, ?)
</CallString>
<Parameter DataType="INTEGER" InValue="" OutValue="16" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MEDIUM (9, '2002-02-12', 12.90, ?)
</CallString>
<Parameter DataType="INTEGER" InValue="" OutValue="17" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MEDIUM (9, '2002-02-12', 12.90, ?)
</CallString>
<Parameter DataType="INTEGER" InValue="" OutValue="18" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MEDIUM (9, '2002-02-12', 12.90, ?)
</CallString>
<Parameter DataType="INTEGER" InValue="" OutValue="19" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL ADD_MEDIUM (5, '2002-03-01', 16.00, ?)
</CallString>
<Parameter DataType="INTEGER" InValue="" OutValue="20" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL MORNING_COFFEE ('2002-03-18')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (4, 3, '2002-03-18', '2002-03-19')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (5, 7, '2002-03-18', '2002-03-18')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (19, 1, '2002-03-18', '2002-03-19')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (15, 6, '2002-03-18', '2002-03-20')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RET_MEDIUM (5, '2002-03-18')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (10, 9, '2002-03-18', '2002-03-19')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL MORNING_COFFEE ('2002-03-19')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RET_MEDIUM (4, '2002-03-19')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RET_MEDIUM (15, '2002-03-19')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (15, 9, '2002-03-19', '2002-03-19')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (1, 9, '2002-03-19', '2002-03-19')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RET_MEDIUM (10, '2002-03-19')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (2, 10, '2002-03-19', '2002-03-20')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (17, 1, '2002-03-19', '2002-03-19')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL MORNING_COFFEE ('2002-03-20')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RET_MEDIUM (15, '2002-03-20')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RET_MEDIUM (1, '2002-03-20')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (3, 9, '2002-03-20', '2002-03-21')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (1, 9, '2002-03-20', '2002-03-21')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (4, 1, '2002-03-20', '2002-03-21')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (11, 1, '2002-03-20', '2002-03-20')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (12, 1, '2002-03-20', '2002-03-20')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RET_MEDIUM (2, '2002-03-20')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (7, 10, '2002-03-20', '2002-03-21')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (8, 10, '2002-03-20', '2002-03-21')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (9, 10, '2002-03-20', '2002-03-21')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL MORNING_COFFEE ('2002-03-21')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RET_MEDIUM (1, '2002-03-21')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RET_MEDIUM (3, '2002-03-21')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (20, 9, '2002-03-21', '2002-03-22')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (18, 9, '2002-03-21', '2002-03-22')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RET_MEDIUM (7, '2002-03-21')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RET_MEDIUM (8, '2002-03-21')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RET_MEDIUM (9, '2002-03-21')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (16, 10, '2002-03-21', '2002-03-22')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL MORNING_COFFEE ('2002-03-22')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RET_MEDIUM (16, '2002-03-22')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (3, 10, '2002-03-22', '2002-03-22')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (14, 10, '2002-03-22', '2002-03-22')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RET_MEDIUM (18, '2002-03-22')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RET_MEDIUM (20, '2002-03-22')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (13, 9, '2002-03-22', '2002-03-22')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (5, 4, '2002-03-22', '2002-03-23')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (18, 8, '2002-03-22', '2002-03-22')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (2, 5, '2002-03-22', '2002-03-24')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL MORNING_COFFEE ('2002-03-23')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL MORNING_COFFEE ('2002-03-24')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RET_MEDIUM (13, '2002-03-24')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RET_MEDIUM (14, '2002-03-24')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RET_MEDIUM (3, '2002-03-24')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (7, 10, '2002-03-24', '2002-03-25')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RET_MEDIUM (5, '2002-03-24')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RET_MEDIUM (18, '2002-03-24')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RET_MEDIUM (2, '2002-03-24')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL MORNING_COFFEE ('2002-03-25')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL MORNING_COFFEE ('2002-03-26')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RET_MEDIUM (7, '2002-03-26')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL SETTLE_ACCOUNT (1, '2002-03-26')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (5, 10, '2002-03-26', '2002-03-26')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RET_MEDIUM (5, '2002-03-26')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (1, 5, '2002-03-26', '2002-03-26')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (2, 5, '2002-03-26', '2002-03-26')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (3, 5, '2002-03-26', '2002-03-26')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (4, 5, '2002-03-26', '2002-03-26')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (5, 5, '2002-03-26', '2002-03-26')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (6, 5, '2002-03-26', '2002-03-26')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (7, 5, '2002-03-26', '2002-03-26')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (8, 5, '2002-03-26', '2002-03-26')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (9, 5, '2002-03-26', '2002-03-26')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (10, 5, '2002-03-26', '2002-03-26')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RENT_MEDIUM (11, 5, '2002-03-26', '2002-03-26')
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
COMMIT
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL SETTLE_ACCOUNT (5, '2002-03-26')
</CallString>
<Error>
<ErrorCode>1</ErrorCode>
<ErrorMessage>Cannot settle account with more than 10 open loans</ErrorMessage>
</Error>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>
ROLLBACK
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RET_MEDIUM (1, '2002-03-26')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL SETTLE_ACCOUNT (5, '2002-03-26')
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL MEDIUM_RETURNED (?, ?, ?)
</CallString>
<Parameter DataType="INTEGER" InValue="5" OutValue="" ParamType="IN"/>
<Parameter DataType="DATE" InValue="2002-03-18" OutValue="2002-03-18" ParamType="INOUT"/>
<Parameter DataType="BOOLEAN" InValue="" OutValue="true" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL MEDIUM_RETURNED (?, ?, ?)
</CallString>
<Parameter DataType="INTEGER" InValue="19" OutValue="" ParamType="IN"/>
<Parameter DataType="DATE" InValue="2002-03-18" OutValue="2002-03-19" ParamType="INOUT"/>
<Parameter DataType="BOOLEAN" InValue="" OutValue="true" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL RECURSIVE_CLEANUP (1)
</CallString>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL LOCAL_RESIDENT (?, ?)
</CallString>
<Parameter DataType="SMALLINT" InValue="3" OutValue="" ParamType="IN"/>
<Parameter DataType="CHAR(50)" InValue="Berlin" OutValue="Marburger Str. 5" ParamType="INOUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL LOCAL_RESIDENT (?, ?)
</CallString>
<Parameter DataType="SMALLINT" InValue="10" OutValue="" ParamType="IN"/>
<Parameter DataType="CHAR(50)" InValue="Berlin" OutValue="Finsterberg-Dodeleben" ParamType="INOUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL MANY_PARS(

'Scott', 'Anthony', 'M', 'Prenzlauer Allee 122', '10450', 'Berlin', '030-5552573', '2002-01-15', ?, ?,
'Scott', 'Anthony', 'M', 'Prenzlauer Allee 122', '10450', 'Berlin', '030-5552573', '2002-01-15', ?, ?,
'Scott', 'Anthony', 'M', 'Prenzlauer Allee 122', '10450', 'Berlin', '030-5552573', '2002-01-15', ?, ?,
'Scott', 'Anthony', 'M', 'Prenzlauer Allee 122', '10450', 'Berlin', '030-5552573', '2002-01-15', ?, ?,
'Scott', 'Anthony', 'M', 'Prenzlauer Allee 122', '10450', 'Berlin', '030-5552573', '2002-01-15', ?, ?,

'Scott', 'Anthony', 'M', 'Prenzlauer Allee 122', '10450', 'Berlin', '030-5552573', '2002-01-15', ?, ?,
'Scott', 'Anthony', 'M', 'Prenzlauer Allee 122', '10450', 'Berlin', '030-5552573', '2002-01-15', ?, ?,
'Scott', 'Anthony', 'M', 'Prenzlauer Allee 122', '10450', 'Berlin', '030-5552573', '2002-01-15', ?, ?,
'Scott', 'Anthony', 'M', 'Prenzlauer Allee 122', '10450', 'Berlin', '030-5552573', '2002-01-15', ?, ?,
'Scott', 'Anthony', 'M', 'Prenzlauer Allee 122', '10450', 'Berlin', '030-5552573', '2002-01-15', ?, ?,

'Scott', 'Anthony', 'M', 'Prenzlauer Allee 122', '10450', 'Berlin', '030-5552573', '2002-01-15', ?, ?,
'Scott', 'Anthony', 'M', 'Prenzlauer Allee 122', '10450', 'Berlin', '030-5552573', '2002-01-15', ?, ?,
'Scott', 'Anthony', 'M', 'Prenzlauer Allee 122', '10450', 'Berlin', '030-5552573', '2002-01-15', ?, ?,
'Scott', 'Anthony', 'M', 'Prenzlauer Allee 122', '10450', 'Berlin', '030-5552573', '2002-01-15', ?, ?,
'Scott', 'Anthony', 'M', 'Prenzlauer Allee 122', '10450', 'Berlin', '030-5552573', '2002-01-15', ?, ?,

'Scott', 'Anthony', 'M', 'Prenzlauer Allee 122', '10450', 'Berlin', '030-5552573', '2002-01-15', ?, ?,
'Scott', 'Anthony', 'M', 'Prenzlauer Allee 122', '10450', 'Berlin', '030-5552573', '2002-01-15', ?, ?,
'Scott', 'Anthony', 'M', 'Prenzlauer Allee 122', '10450', 'Berlin', '030-5552573', '2002-01-15', ?, ?,
'Scott', 'Anthony', 'M', 'Prenzlauer Allee 122', '10450', 'Berlin', '030-5552573', '2002-01-15', ?, ?,
'Scott', 'Anthony', 'M', 'Prenzlauer Allee 122', '10450', 'Berlin', '030-5552573', '2002-01-15', ?, ?,

'Scott', 'Anthony', 'M', 'Prenzlauer Allee 122', '10450', 'Berlin', '030-5552573', '2002-01-15', ?, ?,
'Scott', 'Anthony', 'M', 'Prenzlauer Allee 122', '10450', 'Berlin', '030-5552573', '2002-01-15', ?, ?,
'Scott', 'Anthony', 'M', 'Prenzlauer Allee 122', '10450', 'Berlin', '030-5552573', '2002-01-15', ?, ?,
'Scott', 'Anthony', 'M', 'Prenzlauer Allee 122', '10450', 'Berlin', '030-5552573', '2002-01-15', ?, ?,
'Scott', 'Anthony', 'M', 'Prenzlauer Allee 122', '10450', 'Berlin', '030-5552573', '2002-01-15', ?, ?

)
</CallString>
<Parameter DataType="SMALLINT" InValue="" OutValue="11" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="11" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="12" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="12" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="13" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="13" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="14" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="14" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="15" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="15" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="16" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="16" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="17" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="17" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="18" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="18" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="19" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="19" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="20" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="20" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="21" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="21" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="22" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="22" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="23" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="23" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="24" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="24" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="25" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="25" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="26" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="26" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="27" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="27" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="28" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="28" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="29" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="29" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="30" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="30" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="31" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="31" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="32" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="32" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="33" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="33" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="34" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="34" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="35" ParamType="OUT"/>
<Parameter DataType="SMALLINT" InValue="" OutValue="35" ParamType="OUT"/>
</Statement>
<Statement callable="true" ignore="false" verify="false">
<CallString>
CALL DO_REC_CLUP
</CallString>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="true" verify="false">
<CallString>
DROP DBPROC MEDIUM_RETURNED
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
DROP DBPROC LOCAL_RESIDENT
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
DROP DBPROC DO_REC_CLUP
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
DROP DBPROC MANY_PARS
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
DROP DBPROC RECURSIVE_CLEANUP
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
DROP DBPROC MORNING_COFFEE
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
DROP DBPROC HOLIDAYS_2002
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
DROP DBPROC CHK_LOANS
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
DROP DBPROC SETTLE_ACCOUNT
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
DROP DBPROC ADD_CUSTOMER
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
DROP DBPROC REMOVE_CUSTOMER
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
DROP DBPROC ADD_MOVIE
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
DROP DBPROC REMOVE_MOVIE
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
DROP DBPROC ADD_MEDIUM
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
DROP DBPROC REMOVE_MEDIUM
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
DROP DBPROC UPD_DISCOUNT
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
DROP DBPROC RENT_MEDIUM
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
DROP DBPROC RET_MEDIUM
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
DROP DBPROC UPD_AMOUNTS_DUE
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
DROP TABLE CUSTOMERS
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
DROP TABLE MOVIES
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
DROP TABLE INVENTORY
</CallString>
</Statement>
<Statement callable="false" ignore="true" verify="false">
<CallString>
DROP TABLE LOANS
</CallString>
</Statement>
</CleanUp>
</Test>
<Test ErrorType="syntax" Exclude="(;;oracle)" Number="822" Responsible="FerdiF" TestType="negative">
<Comment/>
<Prepare>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table triggereventprot( msg varchar(2000))</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table triggertest ( i int, c16a char(16) ascii, c16 char(16), lc long)</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table triggertest1 ( i int)</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>create table triggertest2 (c16a char(16) ascii)</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>create trigger InsertTriggerTest1 for triggertest1 after insert execute (
    try   insert into user.triggereventprot values(   '***INSERT_1*** i: ' || chr(:i)  || ' ***END ');
    catch    stop ($RC, 'InsertTriggerTest1: ' || $ERRMSG);
)</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>create trigger UpdateTriggerTest1 for triggertest1 after update (i) execute (
    try   
    insert into user.triggereventprot values(   '***UPDATE_1*** old_i: ' || chr(:old.i)  || ' new_i:' || chr(:new.i) || ' ***END ');
    catch    stop ($RC, 'UpdateTriggerTest1: ' || $ERRMSG);
)</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>create trigger InsertTriggerTest2 for triggertest2 after insert execute (
    try   insert into user.triggereventprot values(   '***INSERT_2*** c16a: ' ||  :c16a || ' ***END ');
    catch    stop ($RC, 'InsertTriggerTest2: ' || $ERRMSG);
)</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>create trigger UpdateTriggerTest2 for triggertest2 after update execute (
    try   
    insert into user.triggereventprot values(   '***UPDATE2*** old_c16a: ' || chr(:old.c16a)  || ' new_i:' || chr(:new.c16a) || ' ***END ');
    catch    stop ($RC, 'UpdateTriggerTest2: ' || $ERRMSG);
)</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>create trigger DeleteTriggerTest1 for triggertest1 after delete execute (
    try   
    insert into user.triggereventprot values(   '***DELETE_1*** i: ' || chr(:i)  || ' ***END ');
    delete from user.triggertest2 where c16a in ( select c16a from user.triggertest where i = :i);
    delete from user.triggertest where i = :i;    
    catch    stop ($RC, 'DeleteTriggerTest1: ' || $ERRMSG);
)</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>create trigger DeleteTriggerTest2 for triggertest2 after delete execute (
    try   
    insert into user.triggereventprot values(   '***DELETE_2*** c16a: ' || :c16a  || ' ***END ');
    catch    stop ($RC, 'DeleteTriggerTest2: ' || $ERRMSG);
)</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>create trigger DeleteTriggerTest for triggertest after delete execute (
    try   
    insert into user.triggereventprot  values(  '***DELETE*** i:'|| chr(:i)   || ' c16a: ' || :c16a  || ' c16: ' || :c16  || ' ***END ' );
    catch    stop ($RC, 'DeleteTriggerTest: ' || $ERRMSG);
)</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>create trigger InsertTriggerTest for triggertest after insert execute (
VAR 
    c varchar(2000);
    ix  int;
    
    try
        c =  '***INSERT*** i: ' || chr(i) ||  ' c16a:  '  || c16a ||  ' c16:  '  || c16 || ' ***END ' ;
        insert into user.triggereventprot values(   '***INSERT*** i: ' || chr(:i) ||  ' c16a:  '  || :c16a ||  ' c16:  '  || :c16 || ' ***END ');
        insert into user.triggereventprot values( :c );
        insert into user.triggertest1 values(:i);
        insert into user.triggertest2 values( :c16a );
    catch
        stop ($RC, 'InsertTriggerTest: ' || $ERRMSG);
)
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>create trigger UpdateTriggerTest for triggertest after update (i, c16a, c16) execute  (
    try
        insert into user.triggereventprot values(   '***UPDATE*** old_i: ' || chr(:old.i) ||  ' old_c16a:  '  || :old.c16a ||  ' old_c16:  '  || :old.c16 || ' ***END ');
        insert into user.triggereventprot values(   '***UPDATE*** new_i: ' || chr(:new.i) ||  ' new_c16a:  '  || :new.c16a ||  ' new_c16:  '  || :new.c16 || ' ***END ');
        update user.triggertest1 set i = :new.i where i = :old.i;
        update user.triggertest2 set c16a = :new.c16a where c16a = :old.c16a;
    catch
    stop ($RC, 'updateTriggerTest: ' || $ERRMSG);
)</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>create dbproc TestTrigger returns cursor as 
    insert into user.triggertest values (1, 'eins', 'eins', '11111111111');
    insert into user.triggertest values (2, 'zwei', 'zwei', '2222222222222222222222222');
    update user.triggertest set i = i *10, c16a = chr(i*10), c16 = chr(i*10);
    delete from user.triggertest1;
    declare :$cursor cursor for select * from user.triggereventprot;
return;
</CallString>
</Statement>
</Prepare>
<Run>
<Statement callable="true" ignore="false" verify="true">
<CallString>call TestTrigger</CallString>
<ResultSet Verification="Complete">
<ColumnDefinition>
<ColumnName>MSG</ColumnName>
<ColumnType>VARCHAR</ColumnType>
</ColumnDefinition>
<Row>
<Value>'***INSERT*** i: 1 c16a:  eins             c16:  eins             ***END'</Value>
</Row>
<Row>
<Value>'***INSERT*** i: 1 c16a:  eins c16:  eins ***END'</Value>
</Row>
<Row>
<Value>'***INSERT_1*** i: 1 ***END'</Value>
</Row>
<Row>
<Value>'***INSERT_2*** c16a: eins             ***END'</Value>
</Row>
<Row>
<Value>'***INSERT*** i: 2 c16a:  zwei             c16:  zwei             ***END'</Value>
</Row>
<Row>
<Value>'***INSERT*** i: 2 c16a:  zwei c16:  zwei ***END'</Value>
</Row>
<Row>
<Value>'***INSERT_1*** i: 2 ***END'</Value>
</Row>
<Row>
<Value>'***INSERT_2*** c16a: zwei             ***END'</Value>
</Row>
<Row>
<Value>'***UPDATE*** old_i: 1 old_c16a:  eins             old_c16:  eins             ***END'</Value>
</Row>
<Row>
<Value>'***UPDATE*** new_i: 10 new_c16a:  10               new_c16:  10               ***END'</Value>
</Row>
<Row>
<Value>'***UPDATE_1*** old_i: 1 new_i:10 ***END'</Value>
</Row>
<Row>
<Value>'***UPDATE2*** old_c16a: eins             new_i:10               ***END'</Value>
</Row>
<Row>
<Value>'***UPDATE*** old_i: 2 old_c16a:  zwei             old_c16:  zwei             ***END'</Value>
</Row>
<Row>
<Value>'***UPDATE*** new_i: 20 new_c16a:  20               new_c16:  20               ***END'</Value>
</Row>
<Row>
<Value>'***UPDATE_1*** old_i: 2 new_i:20 ***END'</Value>
</Row>
<Row>
<Value>'***UPDATE2*** old_c16a: zwei             new_i:20               ***END'</Value>
</Row>
<Row>
<Value>'***DELETE_1*** i: 10 ***END'</Value>
</Row>
<Row>
<Value>'***DELETE_2*** c16a: 10               ***END'</Value>
</Row>
<Row>
<Value>'***DELETE*** i:10 c16a: 10               c16: 10               ***END'</Value>
</Row>
<Row>
<Value>'***DELETE_1*** i: 20 ***END'</Value>
</Row>
<Row>
<Value>'***DELETE_2*** c16a: 20               ***END'</Value>
</Row>
<Row>
<Value>'***DELETE*** i:20 c16a: 20               c16: 20               ***END'</Value>
</Row>
</ResultSet>
</Statement>
</Run>
<CleanUp>
<Statement callable="false" ignore="false" verify="false">
<CallString>drop table triggereventprot</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>drop table triggertest</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>drop table triggertest1
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>drop table triggertest2
</CallString>
</Statement>
<Statement callable="false" ignore="false" verify="false">
<CallString>drop dbproc TestTrigger</CallString>
</Statement>
</CleanUp>
</Test>
</Tests>
