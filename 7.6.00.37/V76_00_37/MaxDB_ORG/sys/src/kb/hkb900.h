/*!******************************************************************************

  @file         hkb900.h

  ------------------------------------------------------------------------------

  @author       <unknown>

  @brief        <unknown topic>

\if EMIT_LICENCE

    ========== licence begin  GPL
    Copyright (c) 2001-2005 SAP AG
 
    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.
 
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
 
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
    ========== licence end
\endif

********************************************************************************/

#ifndef HKB900_H
#define HKB900_H


/*===========================================================================*
 *     RefType: Both                                                         *
 *===========================================================================*/

/*===========================================================================*
 *     MD5: '\x93\xf7\xfd\x92\x63\xf0\xff\x12\xf7\x0b\x99\xe7\xe7\x4e\x5a\x78'
 *===========================================================================*/


/*===========================================================================*
 *  INCLUDES                                                                 *
 *===========================================================================*/

#include "gsp00.h"
#include "ggg00.h"


/*===========================================================================*
 *  FUNCTION PROTOTYPES                                                      *
 *===========================================================================*/

externPascal void kb900RunNonUserTask (
    tgg00_TransContext    VAR_VALUE_REF  trans);

/* Don't edit this file by hand, it is generated by ptocProto.py */

class Trans_Context;

externPascal tsp00_Int4 kb900AvailableServerTasks ();

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal pasbool kb900CreateBackupServer (
    void* &                              pSrvTasks_BackupServer,
    pasbool                              forAutosave,
    tsp00_Int4                           maxMedias,
    tsp00_Int4                           maxVolumes,
    tsp00_TaskId                         taskid,
    tgg00_VoidPtr                        errorlist);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void kb900ExecuteBackupJob (
    Trans_Context&                       trans,
    void*                                pSrvTasks_BackupServer,
    tsp00_Int4                           region,
    pasbool                              forAutosave,
    tsp00_Int2                           task_no,
    tsp00_Int4                           media_no,
    tsp00_Int4                           vol_no);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void kb900WaitForAnyBackupJobFinished (
    Trans_Context&                       trans,
    void*                                pSrvTasks_BackupServer,
    tsp00_Int4                           region,
    tsp00_Int2            VAR_VALUE_REF  task_no,
    tgg00_BasisError      VAR_VALUE_REF  joberror);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void kb900DropAuxFiles (
    tgg00_TransContext    VAR_VALUE_REF  trans);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void kb900AddToPrefixDestroyFile (
    tgg00_TransContext    VAR_VALUE_REF  trans,
    tgg91_TransNo         VAR_VALUE_REF  fileTransId);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void kb900CreateCheckDataCoordinator (
    tgg00_TransContext    VAR_VALUE_REF  trans,
    tsp00_Addr            VAR_VALUE_REF  pCheckDataCoordinator);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void kb900ExecuteCheckDataJob (
    tgg00_TransContext    VAR_VALUE_REF  trans,
    tsp00_Addr                           pCheckDataCoordinator,
    tgg00_FileId          VAR_VALUE_REF  fileid,
    pasbool                              bWithUpdate,
    pasbool                              bWithExtendedCheck);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void kb900WaitForAnyCheckDataJob (
    tgg00_TransContext    VAR_VALUE_REF  trans,
    tsp00_Addr                           pCheckDataCoordinator,
    tgg00_BasisError      VAR_VALUE_REF  joberror,
    tsp00_PageNo          VAR_VALUE_REF  errorRoot);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void kb900AbortCheckDataJobs (
    tgg00_TransContext    VAR_VALUE_REF  trans,
    tsp00_Addr                           pCheckDataCoordinator);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void kb900DeleteCheckDataCoordinator (
    tgg00_TransContext    VAR_VALUE_REF  trans,
    tsp00_Addr            VAR_VALUE_REF  pCheckDataCoordinator);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void kb900PrefetchLob (
    Trans_Context&                       trans,
    tgg00_FileId          VAR_VALUE_REF  fileId,
    tsp00_Int4                           lobPosition,
    tsp00_Int4                           lobBytesToRead);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void kb900PrefetchLeaves (
    Trans_Context&                       t,
    tgg00_FileId          VAR_VALUE_REF  fileid,
    tsp00_PageNo                         pno);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void kb900PrefetchJoin (
    Trans_Context&                       trans,
    tgg00_FileId          VAR_VALUE_REF  fileid,
    tgg00_Lkey            VAR_VALUE_REF  key);

/* Don't edit this file by hand, it is generated by ptocProto.py */


#endif

