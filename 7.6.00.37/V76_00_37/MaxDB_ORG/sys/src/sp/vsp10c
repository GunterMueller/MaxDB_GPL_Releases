.ad 8
.bm 8
.fm 4
.bt $Copyright (c) 1988-2005 SAP AG-2002$$Page %$
.tm 12
.hm 6
.hs 3
.tt 1 $NME$Project Distributed Database System$vsp10c$
.tt 2 $$$
.tt 3 $$                        $1999-11-22$
***********************************************************
.nf

.nf

.nf

    ========== licence begin  GPL
    Copyright (c) 1988-2005 SAP AG

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
    ========== licence end
.fo


.fo


.fo
.nf
.sp
Module  :       SP_MV_MODULS
=========
.sp
Purpose :
.CM *-END-* purpose -------------------------------------
.sp
.cp 3
Define  :

.CM *-END-* define --------------------------------------
.sp;.cp 3
Use     :

.CM *-END-* use -----------------------------------------
.sp;.cp 3
Synonym :

.CM *-END-* synonym -------------------------------------
.sp;.cp 3
Author  :
.sp
.cp 3
Created :
.sp
.cp 3
Version : 1991-11-27
.sp
.cp 3
Release :      Date : 1999-11-22
.sp
***********************************************************
.sp
.cp 10
.fo
.oc _/1
Specification:

.CM *-END-* specification -------------------------------
.sp 2
***********************************************************
.sp
.cp 10
.fo
.oc _/1
Description:

.CM *-END-* description ---------------------------------
.sp 2
***********************************************************
.sp
.cp 10
.nf
.oc _/1
Structure:

.CM *-END-* structure -----------------------------------
.sp 2
**********************************************************
.sp
.cp 10
.nf
.oc _/1
.CM -lll-
Code    :


/*******************************/
#if defined(_WIN32)
/*******************************/
 void          sql60_int_err_msg_prio7 ( char *pszFormatStr, ... );
#define PRINT_ERR     sql60_int_err_msg_prio7
/*******************************/
#else
#if defined(__OS2__)
/*******************************/
 void _System sql60_int_err_msg_prio7 ( char *pszFormatStr, ... );
#define PRINT_ERR    sql60_int_err_msg_prio7
/*******************************/
#else
/*******************************/
#define PRINT_ERR    printf
#endif
#endif

extern void s10fil();
extern void s10fil1();
extern void s10fil2();
extern void s10fil3();
extern void s10fil4();
extern void s10fil5();
extern void s10mv();
extern void s10mvc();
extern void s10mv1();
extern void s10mv2();
extern void s10mv3();
extern void s10mv4();
extern void s10mv5();
extern void s10mv6();
extern void s10mv7();
extern void s10mv8();
extern void s10mv9();
extern void s10mv10();
extern void s10mv11();
extern void s10mv12();
extern void s10mv13();
extern void s10mv14();
extern void s10mv15();
extern void s10mv16();
extern void s10mv17();
extern void s10mv18();
extern void s10mv19();
extern void s10mv20();
extern void s10mv21();
extern void s10mv22();
extern void s10mv23();
extern void s10mv24();
extern void s10mv25();
extern void s10mv26();
extern void s10mv27();
extern void s10mv28();
extern void s10mv29();
extern void s10mv30();
extern void s10mvr();

extern void s10fil(size, m, pos, len, fillchar)
           int size;
           unsigned char *m;
  register int pos;
  register int len;
           unsigned char fillchar;
	{
	if (size < pos + len - 1 || pos < 0 || len < 0) /* LINE@ 255 */
	    {
	    m = 0; *m = 1;
	    }
	else
            memset ( m + pos - 1, (unsigned char)fillchar, len );
	}


extern void s10fil1(size, m, pos, len, fillchar)
           int size;
           unsigned char *m;
  register int pos;
  register int len;
           unsigned char fillchar;
	{
	if (size < pos + len - 1 || pos < 0 || len < 0) /* LINE@ 255 */
	    {
	    m = 0; *m = 1;
	    }
	else
            memset ( m + pos - 1, (unsigned char)fillchar, len );
	}


extern void s10fil2(size, m, pos, len, fillchar)
           int size;
           unsigned char *m;
  register int pos;
  register int len;
           unsigned char fillchar;
	{
	if (size < pos + len - 1 || pos < 0 || len < 0) /* LINE@ 255 */
	    {
	    m = 0; *m = 1;
	    }
	else
            memset ( m + pos - 1, (unsigned char)fillchar, len );
	}


extern void s10fil3(size, m, pos, len, fillchar)
           int size;
           unsigned char *m;
  register int pos;
  register int len;
           unsigned char fillchar;
	{
	if (size < pos + len - 1 || pos < 0 || len < 0) /* LINE@ 255 */
	    {
	    m = 0; *m = 1;
	    }
	else
            memset ( m + pos - 1, (unsigned char)fillchar, len );
	}


extern void s10fil4(size, m, pos, len, fillchar)
           int size;
           unsigned char *m;
  register int pos;
  register int len;
           unsigned char fillchar;
	{
	if (size < pos + len - 1 || pos < 0 || len < 0) /* LINE@ 255 */
	    {
	    m = 0; *m = 1;
	    }
	else
            memset ( m + pos - 1, (unsigned char)fillchar, len );
	}


extern void s10fil5(size, m, pos, len, fillchar)
           int size;
           unsigned char *m;
  register int pos;
  register int len;
           unsigned char fillchar;
	{
	if (size < pos + len - 1 || pos < 0 || len < 0) /* LINE@ 255 */
	    {
	    m = 0; *m = 1;
	    }
	else
            memset ( m + pos - 1, (unsigned char)fillchar, len );
	}



extern void s10mv(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0) /* LINE@ 481 */
		{
		PRINT_ERR ( "%d %d 0x%x %d 0x%x %d %d s10mv : ABEND\n",
			  size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mvc(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0) /* LINE@ 481 */
		{
		PRINT_ERR ( "%d %d 0x%x %d 0x%x %d %d s10mvc ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv1(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0) /* LINE@ 481 */
		{
		PRINT_ERR ( "%d %d 0x%x %d 0x%x %d %d s10mv1 ABEND\n",
			  size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv2(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0) /* LINE@ 481 */
		{
		PRINT_ERR ( "%d %d 0x%x %d 0x%x %d %d s10mv2 ABEND\n",
			  size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv3(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0) /* LINE@ 481 */
		{
		PRINT_ERR ( "%d %d 0x%x %d 0x%x %d %d s10mv3 ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv4(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0) /* LINE@ 481 */
		{
		PRINT_ERR ("%d %d 0x%x %d 0x%x %d %d s10mv4 ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv5(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0) /* LINE@ 481 */
		{
		PRINT_ERR ("%d %d 0x%x %d 0x%x %d %d s10mv5 ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv6(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0) /* LINE@ 481 */
		{
		PRINT_ERR ("%d %d 0x%x %d 0x%x %d %d s10mv6 ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv7(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0) /* LINE@ 481 */
		{
		PRINT_ERR ("%d %d 0x%x %d 0x%x %d %d s10mv7 ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv8(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0) /* LINE@ 481 */
		{
		PRINT_ERR ("%d %d 0x%x %d 0x%x %d %d s10mv8 ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv9(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0) /* LINE@ 481 */
		{
		PRINT_ERR ("%d %d 0x%x %d 0x%x %d %d s10mv9 ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv10(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0) /* LINE@ 481 */
		{
		PRINT_ERR ("%d %d 0x%x %d 0x%x %d %d s10mv10 ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv11(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0) /* LINE@ 481 */
		{
		PRINT_ERR ("%d %d 0x%x %d 0x%x %d %d s10mv11 ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv12(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0) /* LINE@ 481 */
		{
		PRINT_ERR ("%d %d 0x%x %d 0x%x %d %d s10mv12 ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv13(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0) /* LINE@ 481 */
		{
		PRINT_ERR ("%d %d 0x%x %d 0x%x %d %d s10mv13 ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv14(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0) /* LINE@ 481 */
		{
		PRINT_ERR ("%d %d 0x%x %d 0x%x %d %d s10mv14 ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv15(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0) /* LINE@ 481 */
		{
		PRINT_ERR ("%d %d 0x%x %d 0x%x %d %d s10mv15 ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv16(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0) /* LINE@ 481 */
		{
		PRINT_ERR ("%d %d 0x%x %d 0x%x %d %d s10mv16 ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv17(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0) /* LINE@ 481 */
		{
		PRINT_ERR ("%d %d 0x%x %d 0x%x %d %d s10mv17 ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv18(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0) /* LINE@ 481 */
		{
		PRINT_ERR ("%d %d 0x%x %d 0x%x %d %d s10mv18 ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv19(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0) /* LINE@ 481 */
		{
		PRINT_ERR ("%d %d 0x%x %d 0x%x %d %d s10mv19 ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv20(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0)
		{
		PRINT_ERR ("%d %d 0x%x %d 0x%x %d %d s10mv20 ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv21(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0)
		{
		PRINT_ERR ("%d %d 0x%x %d 0x%x %d %d s10mv21 ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv22(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0)
		{
		PRINT_ERR ("%d %d 0x%x %d 0x%x %d %d s10mv22 ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv23(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0)
		{
		PRINT_ERR ("%d %d 0x%x %d 0x%x %d %d s10mv23 ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv24(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0)
		{
		PRINT_ERR ("%d %d 0x%x %d 0x%x %d %d s10mv24 ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv25(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0)
		{
		PRINT_ERR ("%d %d 0x%x %d 0x%x %d %d s10mv25 ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv26(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0)
		{
		PRINT_ERR ("%d %d 0x%x %d 0x%x %d %d s10mv26 ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv27(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0)
		{
		PRINT_ERR ("%d %d 0x%x %d 0x%x %d %d s10mv27 ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv28(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0)
		{
		PRINT_ERR ("%d %d 0x%x %d 0x%x %d %d s10mv28 ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv29(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0)
		{
		PRINT_ERR ("%d %d 0x%x %d 0x%x %d %d s10mv29 ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}


extern void s10mv30(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           unsigned char *val1;
           int p1;
           unsigned char *val2;
           int p2;
           int cnt;
	{
	if (size1 < p1 + cnt - 1 || size2 < p2 + cnt - 1 || cnt < 0 || p1 <= 0 || p2 <= 0)
		{
		PRINT_ERR ("%d %d 0x%x %d 0x%x %d %d s10mv30 ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
		  memcpy ( val2 - 1 + p2, val1 - 1 + p1, cnt );
	}



extern void s10mvr(size1, size2, val1, p1, val2, p2, cnt)
           int size1;
           int size2;
           register unsigned char *val1;
           int p1;
           register unsigned char *val2;
           int p2;
           register int cnt;
	{

	if (size1 < p1 + cnt - 1
	    || size2 < p2 + cnt - 1
	    || cnt < 0 || p1 <= 0
	    || p2 <= 0)
		{
		PRINT_ERR ("%d %d 0x%x %d 0x%x %d %d s10mvr ABEND\n",
			 size1, size2, val1, p1, val2, p2, cnt );
		val1 = 0; *val1 = 1 ;
		}
	else
	        {
		val1 = val1 + p1 + cnt - 2;
		val2 = val2 + p2 + cnt - 2;
		while ( cnt-- )
		    {
		    *(val2--) = *(val1--);
		    }
		  }
	}


.CM *-END-* code ----------------------------------------
.sp
.sp
***********************************************************
ANZAHL STATEMENTS :           0
ANZAHL LINES OF CODE :        0
.pa
