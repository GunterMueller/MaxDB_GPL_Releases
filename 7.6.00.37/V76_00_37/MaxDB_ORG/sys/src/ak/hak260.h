/*!******************************************************************************

  @file         hak260.h

  ------------------------------------------------------------------------------

  @author       ThomasA

  @brief        AK_dialog_tools

\if EMIT_LICENCE

    ========== licence begin  GPL
    Copyright (c) 2000-2005 SAP AG

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
    ========== licence end

\endif

********************************************************************************/

#ifndef HAK260_H
#define HAK260_H


/*===========================================================================*
 *     RefType: Both                                                         *
 *===========================================================================*/

/*===========================================================================*
 *     MD5: '\x5e\xea\x19\x37\xf4\x8b\xf4\x03\x05\x19\x82\x94\xae\x5b\xd2\x87'
 *===========================================================================*/


/*===========================================================================*
 *  INCLUDES                                                                 *
 *===========================================================================*/

#include "gsp00.h"
#include "ggg00.h"
#include "vak001.h"


/*===========================================================================*
 *  FUNCTION PROTOTYPES                                                      *
 *===========================================================================*/

externPascal void a260BuildCodeSyskey (
    const tgg00_Surrogate  VAR_ARRAY_REF  CodeId,
    tgg00_SysInfoKey      VAR_VALUE_REF  CodeSyskey);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal pasbool a260BuildDebugStack ();

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a260CallSystemTriggers (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a260check_priv (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tgg00_Surrogate       VAR_ARRAY_REF  proc_id,
    tgg00_Surrogate       VAR_ARRAY_REF  user_id);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal pasbool a260CurrentTaskInCppDBProc ();

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a260DropParseIds (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tak_parskey           VAR_VALUE_REF  parsk);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a260end_session (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a260exec_dialog (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a260get_proc (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tsp00_KnlIdentifier   VAR_ARRAY_REF  authname,
    tsp00_KnlIdentifier   VAR_ARRAY_REF  proc,
    integer               VAR_VALUE_REF  tree_index);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a260GetDBProcOwner (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tak_methodrecord      VAR_VALUE_REF  MethodRecord,
    tgg00_Surrogate       VAR_ARRAY_REF  OwnerId);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a260hresult_error (
    tsp00_Int4                           hresult,
    tsp00_KnlIdentifier   VAR_ARRAY_REF  dbproc_name,
    tsp00_C64             VAR_ARRAY_REF  errtext,
    tgg00_BasisError      VAR_VALUE_REF  e);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a260internal_proc_call (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a260init ();

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal pasbool a260IsInternalDBProc (
    tak_methodrecord      VAR_VALUE_REF  MethodRec);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal integer a260max_output_params ();

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal integer a260max_params ();

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal pasbool a260sql_in_dbproc (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tsp00_C16             VAR_ARRAY_REF  clsid,
    tgg00_Surrogate       VAR_ARRAY_REF  packageId);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a260ParseIdDrop (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tak_parsid            VAR_VALUE_REF  parsid);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a260reset_statistics ();

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a260session_frame_release (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a260statistics (
    tsp00_8ByteCounter    VAR_VALUE_REF  external_proc_cnt,
    tsp00_8ByteCounter    VAR_VALUE_REF  internal_proc_cnt);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a260sysdbproc_exist (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a260TransEnd (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tgg00_MessType_Param                 messType,
    pasbool                              release,
    tgg00_BasisError      VAR_VALUE_REF  e);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a260trigger_call (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tak_sysbufferaddress                 trigger_parsinfo);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a260trigger_parsinfo (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tgg00_SysInfoKey      VAR_VALUE_REF  parsinfokey,
    tgg00_Surrogate       VAR_ARRAY_REF  proc_id);

/* Don't edit this file by hand, it is generated by ptocProto.py */


#endif

