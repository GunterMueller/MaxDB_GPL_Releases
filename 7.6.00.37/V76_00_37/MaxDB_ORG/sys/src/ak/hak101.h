/*!******************************************************************************

  @file         hak101.h

  ------------------------------------------------------------------------------

  @author       <unknown>

  @brief        <unknown topic>

\if EMIT_LICENCE

    ========== licence begin  GPL
    Copyright (c) 2003-2005 SAP AG
 
    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.
 
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
 
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
    ========== licence end
\endif

********************************************************************************/

#ifndef HAK101_H
#define HAK101_H


/*===========================================================================*
 *     RefType: Both                                                         *
 *===========================================================================*/

/*===========================================================================*
 *     MD5: '\x5d\x68\x0a\xd5\x8c\x4f\x2e\x7b\x0b\x23\xf0\xb2\xae\x62\x7c\xb4'
 *===========================================================================*/


/*===========================================================================*
 *  INCLUDES                                                                 *
 *===========================================================================*/

#include "gsp00.h"
#include "vsp001.h"
#include "ggg00.h"
#include "vak001.h"
#include "gak40.h"


/*===========================================================================*
 *  FUNCTION PROTOTYPES                                                      *
 *===========================================================================*/

externPascal void a101_AnalyzeErrorMessageList (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_AttachColumnBuffer (
    tgg00_VoidPtr                        pColBuffer);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_DebuggerAddRemoveBreakPoint (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tgg00_Surrogate       VAR_ARRAY_REF  procId,
    integer                              procKind,
    integer                              procType,
    integer                              pos,
    pasbool                              doRemove);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_DumpSessionInfo (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    const tsp00_VFilename  VAR_ARRAY_REF  dmpFileName,
    const tsp00_Int4                     dmpFileNo,
    tsp00_Int4            VAR_VALUE_REF  dmpPageNo,
    const tsp00_BufAddr                  dmpBufAddr,
    const tsp00_Int4                     dmpBufSize);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_CatalogCollectUpgradeInfo (
    tsp00_C40             VAR_ARRAY_REF  msg);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_CollectNewSoftwareVersion ();

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_CopyMessBlockShallow (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tgg00_MessBlock       VAR_VALUE_REF  Source,
    tgg00_MessBlock       VAR_VALUE_REF  Destination,
    pasbool                              withoutData,
    tgg00_BasisError      VAR_VALUE_REF  e);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal integer a101_CreateCatalog ();

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_CreateErrorHandler ();

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal pasbool a101_DebuggerActive (
    tgg00_TransContext    VAR_VALUE_REF  transContext);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_DebuggerCheckDebugBreak (
    tgg00_TransContext    VAR_VALUE_REF  transContext,
    tgg00_SelectFieldsParam  VAR_VALUE_REF  interpreterContext,
    integer                              currStackEntry,
    tsp00_MoveObjPtr                     pVariables,
    integer                              codePos,
    integer                              codeLength,
    tgg00_BasisError      VAR_VALUE_REF  e);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_DebuggerCreate (
    tak_all_command_glob  VAR_VALUE_REF  debuggingAcv,
    tak_all_command_glob  VAR_VALUE_REF  debuggedAcv,
    tak_all_command_glob  VAR_VALUE_REF  listenerAcv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_DebuggerGetExecuteInfo (
    tsp00_MoveObjPtr                     pInfo,
    integer                              size);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_DebuggerGetMethodInfo (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tgg00_Surrogate       VAR_ARRAY_REF  methodId,
    integer               VAR_VALUE_REF  methodKind,
    integer               VAR_VALUE_REF  linkage,
    tsp00_MoveObjPtr      VAR_VALUE_REF  pTriggerColumns,
    tsp00_MoveObjPtr      VAR_VALUE_REF  pVariables);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_DebuggerGetFunctionParameter (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tgg00_StackEntry      VAR_VALUE_REF  stackCode,
    tsp00_MoveObjPtr      VAR_VALUE_REF  pParam,
    integer               VAR_VALUE_REF  length);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_DebuggerListen (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tgg00_Surrogate       VAR_ARRAY_REF  methodId,
    integer               VAR_VALUE_REF  procKind,
    integer               VAR_VALUE_REF  linkage,
    integer               VAR_VALUE_REF  pos,
    integer               VAR_VALUE_REF  length);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_DebuggerPopCall (
    tgg00_TransContext    VAR_VALUE_REF  transContext);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_DebuggerPushCall (
    tgg00_TransContext    VAR_VALUE_REF  transContext,
    tgg00_SelectFieldsParam  VAR_VALUE_REF  interpreterContext);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_DebuggerStep (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    integer                              count);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_DebuggerStoreExecuteInfo (
    tsp00_MoveObjPtr                     pInfo,
    integer                              size);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_DetachColumnBuffer (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tgg00_VoidPtr                        pTable);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal tak_sysbufferaddress a101_DescribeParseId (
    tgg00_VoidPtr                        pExecuteHandle);

/* Don't edit this file by hand, it is generated by ptocProto.py */


externPascal void a101_DestroyContextMembers (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal pasbool a101_DropParseId (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tak_parsid            VAR_VALUE_REF  parsedId);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_ExecuteSqlStatement (
    tak_acv_address                      acv_addr,
    tgg00_SelectFieldsParam  VAR_VALUE_REF  sel,
    tsp00_MoveObjPtr                     retcode_addr,
    tgg00_StackList       VAR_ARRAY_REF  StackList,
    tsp00_Int4            VAR_VALUE_REF  qual_ptr,
    tgg00_BasisError      VAR_VALUE_REF  e);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal tgg00_VoidPtr a101_GetErrorMessageList (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_GetMySQLScramble (
    tsp00_C8              VAR_ARRAY_REF  scramble);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal pasbool a101_CheckMySqlPassword (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tsp00_Name            VAR_ARRAY_REF  password,
    pasbool                              isOldVersion,
    tsp00_C8              VAR_ARRAY_REF  receivedPassword);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_IncrementSyntaxTree (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_InitContextMembers (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_InitSessionInfo (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_AddToSessionList (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_RemoveFromSessionList (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_ResetReturnCode (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_InvalidateListAppend (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tgg00_Surrogate       VAR_ARRAY_REF  SchemaId,
    tsp00_KnlIdentifier   VAR_ARRAY_REF  Tablename);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal pasbool a101_IsStatementActive (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tsp00_Int4                           statementId);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal tgg00_VoidPtr a101_GetExecuteHandle (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tak_parsid            VAR_VALUE_REF  parsedId,
    pasbool                              CountExecuting);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal tgg00_VoidPtr a101_GetPlanElement (
    tgg00_VoidPtr                        pExecuteHandle,
    tgg00_SysInfoKey      VAR_VALUE_REF  syskey);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal tgg00_VoidPtr a101_GetPrepareHandle (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    pasbool               VAR_VALUE_REF  isPrepared,
    tak_parsid            VAR_VALUE_REF  masterParsedId,
    tgg00_VoidPtr         VAR_VALUE_REF  pSegment,
    integer               VAR_VALUE_REF  segementLength);

/* Don't edit this file by hand, it is generated by ptocProto.py */


externPascal void a101_GetStatement (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tgg00_VoidPtr                        planHandle,
    tsp00_MoveObjPtr      VAR_VALUE_REF  pStatement,
    integer               VAR_VALUE_REF  statementLength,
    tsp00_MoveObjPtr      VAR_VALUE_REF  pParamDescription,
    integer               VAR_VALUE_REF  paramDescLength,
    tsp00_SqlMode         VAR_VALUE_REF  sqlmode,
    pasbool               VAR_VALUE_REF  prepareFlag,
    pasbool               VAR_VALUE_REF  massCmdFlag);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101PacketError (
    tsp00_C50             VAR_ARRAY_REF  fmt,
    tsp00_Int4                           val1,
    tsp00_Int4                           val2,
    tsp00_Int4                           val3);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_ProcedureCall (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    integer               VAR_VALUE_REF  outParamCount);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal pasbool a101_PutParseId (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tgg00_VoidPtr                        pStatementHandle,
    tak_parsid            VAR_VALUE_REF  parseId);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_GetModuleName (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tak_parsid            VAR_VALUE_REF  parseId,
    tgg00_VoidPtr         VAR_VALUE_REF  NamePtr,
    tsp00_Int4            VAR_VALUE_REF  Length);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal pasbool a101_SetExecuteStatisticData (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tak_parsid            VAR_VALUE_REF  parseId,
    tgg00_Surrogate       VAR_ARRAY_REF  CmdID,
    tsp00_Int4                           ExecuteTimeSec,
    tsp00_Int4                           ExecuteTimeMicroSec,
    tsp00_Int4                           ReadRowCount,
    tsp00_Int4                           QualifiedRowCount,
    tsp00_Int4                           VirtualReadCount,
    tsp00_Int4                           PhysicalReadCount,
    tsp00_Int4                           FetchRowCount,
    tsp00_Int4                           SuspendCount,
    tsp00_Int4                           WaitCount);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal tsp00_Int4 a101_RegisterCurrentStatement (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_ReleaseExecuteHandle (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tgg00_VoidPtr         VAR_VALUE_REF  planHandle);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_CleanUpAll (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_InvalidateSelective (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_SilentReparseAll (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal tsp00_Int4 a101_SetMaxParallelServers (
    tsp00_Int4                           max);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_SetSessionInfoIsolationLevel (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tsp00_Uint1                          isolationLevel);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_SilentReparseSelective (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal pasbool a101_SharedSQL_GetStatusParameter ();

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_SharedSQL_SetStatusParameter (
    pasbool                              Status);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_SharedSQL_ReadStatusParameter ();

/* Don't edit this file by hand, it is generated by ptocProto.py */


externPascal pasbool a101_StoreTableInfo (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tgg00_Surrogate       VAR_ARRAY_REF  SchemaID,
    tsp00_KnlIdentifier   VAR_ARRAY_REF  TableName,
    pasbool                              WithSpecifiedSchema,
    tgg00_VoidPtr                        prepareHandle);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal pasbool a101_StorePlan (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tak_parsid            VAR_VALUE_REF  parseId,
    pasbool                              storePlan,
    tgg00_VoidPtr                        prepareHandle);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_StoreUpgradeInfo ();

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_ReleasePrepareHandle (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tgg00_VoidPtr         VAR_VALUE_REF  prepareHandle,
    tsp00_Int4                           PrepareTimeSecs,
    tsp00_Int4                           PrepareTimeMicroSecs);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_QueryRewrite_MonitorReset ();

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_QueryRewrite_MonitorOut (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tak40_show_glob       VAR_VALUE_REF  a41v);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_UnregisterStatement (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tsp00_Int4                           statementId);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_UserDefinedFunctionCall (
    tgg00_TransContext    VAR_VALUE_REF  transContext,
    tgg00_SelectFieldsParam  VAR_VALUE_REF  interpreterContext,
    const tgg00_StackEntry  VAR_VALUE_REF  functionCode,
    const tgg00_StackEntry  VAR_VALUE_REF  functionId,
    tgg00_BasisError      VAR_VALUE_REF  error);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_StoreTable (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tak_baserecord        VAR_VALUE_REF  BaseRecord);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal tsp00_Int4 a101_GetMaxJoinHashTableSize ();

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_CreateGroupedTempFile (
    tgg00_TransContext    VAR_VALUE_REF  trans,
    tgg00_FileId          VAR_VALUE_REF  tempFileId,
    tgg00_TfnTemp_Param                  tempFileType);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_AddGroupedTempFile (
    tgg00_TransContext    VAR_VALUE_REF  trans,
    tgg00_FileId          VAR_VALUE_REF  tempFileId,
    tgg00_Surrogate       VAR_ARRAY_REF  instanceId);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_RemoveGroupedTempFile (
    tgg00_TransContext    VAR_VALUE_REF  trans,
    tgg00_FileId          VAR_VALUE_REF  tempFileId);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_ResetGroupedTempFile (
    tgg00_TransContext    VAR_VALUE_REF  trans,
    tgg00_FileId          VAR_VALUE_REF  tempFileId,
    tgg00_TfnTemp_Param                  tempFileType);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_NewGroupedTempFile (
    tgg00_TransContext    VAR_VALUE_REF  trans,
    tgg00_TfnTemp_Param                  fileType,
    tsp00_Int4                           level,
    tgg00_FileId          VAR_VALUE_REF  tempFileId);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_DestroyGroupedTempFile (
    tgg00_TransContext    VAR_VALUE_REF  trans,
    tgg00_FileId          VAR_VALUE_REF  tempFileId);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_DestroyGroupedTempFiles (
    tgg00_TransContext    VAR_VALUE_REF  trans,
    const tgg00_TfnTemp_Param                 fileType,
    const tsp00_Int4                     level,
    const tsp00_Int2                     subLevel,
    tgg00_Filename        VAR_ARRAY_REF  fileName);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_DestroyAllGroupedTempFiles (
    tgg00_TransContext    VAR_VALUE_REF  trans,
    tgg00_Filename        VAR_ARRAY_REF  fileName);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal pasbool a101_IsTempFile (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    const tgg00_FileId    VAR_VALUE_REF  fileId);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal pasbool a101_IsExtendedTempFile (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    const tgg00_FileId    VAR_VALUE_REF  fileId);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal tgg00_VoidPtr a101_RTEMemAllocate (
    tsp00_Int4                           Size);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_RTEMemDeallocate (
    tgg00_VoidPtr         VAR_VALUE_REF  p);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_IncrementProcLevel (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_DecrementProcLevel (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal tsp00_Int a101_GetProcLevel (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal pasbool a101_SetProcLevel (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    const integer                        newProcLevel);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal tgg00_TfnTemp_Param a101_GetExtendedTempFileType (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    const tgg00_FileId    VAR_VALUE_REF  tempFileId);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_SetTempFileLevel (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tgg00_FileId          VAR_VALUE_REF  tempFileId,
    const tsp00_Int2                     level);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_SetTempFileSublevel (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tgg00_FileId          VAR_VALUE_REF  tempFileId,
    const tsp00_Int2                     sublevel);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_SetTempFileIndex (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tgg00_FileId          VAR_VALUE_REF  tempFileId,
    const tsp00_Int4                     sublevel);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal tsp00_Int2 a101_GetTempFileLevel (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    const tgg00_FileId    VAR_VALUE_REF  tempFileId);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal tsp00_Int2 a101_GetTempFileSublevel (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    const tgg00_FileId    VAR_VALUE_REF  tempFileId);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal tsp00_Int4 a101_GetTempFileIndex (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    const tgg00_FileId    VAR_VALUE_REF  tempFileId);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_GetTempFileInstance (
    tgg00_TransContext    VAR_VALUE_REF  trans,
    tgg00_FileId          VAR_VALUE_REF  tempFileId);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_ExistsGroupedTempFile (
    tgg00_TransContext    VAR_VALUE_REF  trans,
    tgg00_FileId          VAR_VALUE_REF  tempFileId);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_GetLogicalFilename (
    tgg00_TransContext    VAR_VALUE_REF  trans,
    tgg00_FileId          VAR_VALUE_REF  tempFileId);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal pasbool a101_CheckRequestPacket (
    tsp1_packet_ptr                      packet,
    tsp00_Int4                           packetSize);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal pasbool a101_BasicAuthenticationAllowed (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal pasbool a101_InitAuthentication (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tsp00_KnlIdentifier   VAR_ARRAY_REF  userName,
    pasbool                              isParameter,
    tsp00_MoveObjPtr                     dataBuf,
    tsp00_Int4                           dataLength);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal pasbool a101_VerifyAuthentication (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tsp00_KnlIdentifier   VAR_ARRAY_REF  userName,
    tsp00_Name            VAR_ARRAY_REF  pwd,
    tsp00_MoveObjPtr                     dataBuf,
    tsp00_Int4                           dataLength);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_ClearAuthenticationInfo (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_GetUsernameHostvar (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tsp00_KnlIdentifier   VAR_ARRAY_REF  userName,
    integer                              parameterIndex);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_MarkUsernameAsParameter (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_CreateJoinHashAllocatorSingleton ();

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_DiagnoseDropFile (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tgg00_Surrogate       VAR_ARRAY_REF  surrogate);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_GetGroupedFileForFileId (
    tgg00_TransContext    VAR_VALUE_REF  trans,
    tgg00_FileId          VAR_VALUE_REF  fileId,
    tgg00_TfnTemp_Param                  tempFileType,
    tgg00_FileId          VAR_VALUE_REF  logicalFileId);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_CreateUpdStatObject (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tsp00_Addr            VAR_VALUE_REF  objAddr,
    tsp00_Int4                           sampleRows,
    tsp00_Int4                           samplePercentage);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_DestroyUpdStatObject (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tsp00_Addr            VAR_VALUE_REF  objAddr);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_UpdStatAddTableRequest (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tsp00_Addr                           updStatObj,
    tgg00_Surrogate       VAR_ARRAY_REF  surrogate,
    tsp00_Int4                           noOfPagesToSample);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_UpdStatProcessRequests (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tsp00_Addr                           updStatObj);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_UpdateStatisticsColumn (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tsp00_Int4                           samplePercent,
    tsp00_Int4                           sampleRows);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal pasbool a101_ParallelUpdStatEnabled ();

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_InsertIntoSysUpdStatWanted (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    const tgg00_Surrogate  VAR_ARRAY_REF  tableSurr);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_InsertColumnIntoSysUpdStatWanted (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    const tgg00_Surrogate  VAR_ARRAY_REF  tableSurr,
    const tsp00_KnlIdentifier  VAR_ARRAY_REF  columnName);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_InsertIntoSysUpdStatLog (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tsp00_KnlIdentifier   VAR_ARRAY_REF  schemaName,
    tsp00_KnlIdentifier   VAR_ARRAY_REF  tableName,
    tsp00_KnlIdentifier   VAR_ARRAY_REF  columnName,
    tsp00_KnlIdentifier   VAR_ARRAY_REF  indexName,
    tgg00_Surrogate       VAR_ARRAY_REF  tableFileNo,
    tsp00_Timestamp       VAR_ARRAY_REF  executionTimeStamp,
    tsp00_Int4                           samplePercent,
    tsp00_Int4                           sampleRows,
    tsp00_Timestamp       VAR_ARRAY_REF  beginTimeStamp,
    tsp00_Timestamp       VAR_ARRAY_REF  endTimeStamp,
    tgg91_SessionNo       VAR_VALUE_REF  session,
    tsp00_TermId          VAR_ARRAY_REF  termid,
    tsp00_Int4                           seqno);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_InsertIntoSysCheckTableLog (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tsp00_KnlIdentifier   VAR_ARRAY_REF  schemaName,
    tsp00_KnlIdentifier   VAR_ARRAY_REF  tableName,
    tsp00_Int4                           msgNo);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_UpdateCounter (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_DeleteFromSysUpdateCounterWanted (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    const tgg00_Surrogate  VAR_ARRAY_REF  surr);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal pasbool a101_AnySchemaMapped (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_DestroySchemaMap (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_EnableSchemaMap (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    pasbool                              doEnable);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_MapSchemaName (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tsp00_KnlIdentifier   VAR_ARRAY_REF  schemaName,
    integer                              pos);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_ReadSchemaMap (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tsp00_C24             VAR_ARRAY_REF  guid);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_RenameSchemaNames (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_ResetMappingInfo (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal pasbool a101_SchemaMappingActive (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a101_SetMappingOffset (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    integer                              offset);

/* Don't edit this file by hand, it is generated by ptocProto.py */


#endif

