/*!******************************************************************************

  @file         hak061.h

  ------------------------------------------------------------------------------

  @author       ThomasA

  @brief        AK_universal_semantic_tools

\if EMIT_LICENCE

    ========== licence begin  GPL
    Copyright (c) 2000-2005 SAP AG

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
    ========== licence end

\endif

********************************************************************************/

#ifndef HAK061_H
#define HAK061_H


/*===========================================================================*
 *     RefType: Both                                                         *
 *===========================================================================*/

/*===========================================================================*
 *     MD5: '\xf4\x15\xee\x2b\x07\x4c\xfd\xaa\xb2\x3b\x26\x3f\x44\x7a\xc3\x1f'
 *===========================================================================*/


/*===========================================================================*
 *  INCLUDES                                                                 *
 *===========================================================================*/

#include "gsp00.h"
#include "ggg00.h"
#include "gak00.h"
#include "vak001.h"


/*===========================================================================*
 *  FUNCTION PROTOTYPES                                                      *
 *===========================================================================*/

externPascal void a061add_name (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tak_baserecord        VAR_VALUE_REF  base_rec,
    tsp00_KnlIdentifier   VAR_ARRAY_REF  name,
    tsp00_KnlIdentifierPtr  VAR_VALUE_REF  p);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a061app_columnname (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tak_baserecord        VAR_VALUE_REF  base_rec,
    tsp00_KnlIdentifier   VAR_ARRAY_REF  column,
    integer               VAR_VALUE_REF  index);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a061assign_colname (
    tsp00_C18             VAR_ARRAY_REF  value,
    tsp00_KnlIdentifier   VAR_ARRAY_REF  colname);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a061colinfo_to_var (
    tak00_columninfo      VAR_VALUE_REF  src,
    tak00_columninfo      VAR_VALUE_REF  dst);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a061compress_baserec (
    tak_baserecord        VAR_VALUE_REF  base_rec,
    tgg00_BasisError      VAR_VALUE_REF  b_err);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a061copy_colinfo (
    tak00_columninfo      VAR_VALUE_REF  src_col,
    tak00_columninfo      VAR_VALUE_REF  dst_col);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal pasbool a061exist_columnname (
    tak_baserecord        VAR_VALUE_REF  base_rec,
    tsp00_KnlIdentifier   VAR_ARRAY_REF  column,
    tak00_colinfo_ptr     VAR_VALUE_REF  colinfo_ptr);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal pasbool a061exist_columnindex (
    tak_baserecord        VAR_VALUE_REF  base_rec,
    integer                              extcolno,
    tak00_colinfo_ptr     VAR_VALUE_REF  colinfo_ptr);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal pasbool a061ExistColumnnameSequential (
    tak_baserecord        VAR_VALUE_REF  base_rec,
    tsp00_KnlIdentifier   VAR_ARRAY_REF  column,
    tak00_colinfo_ptr     VAR_VALUE_REF  colinfo_ptr);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a061get_colname (
    tak00_columninfo      VAR_VALUE_REF  col_info,
    tsp00_KnlIdentifier   VAR_ARRAY_REF  colname);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a061eval_colname_len (
    tak00_columninfo      VAR_VALUE_REF  src);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal integer a061identifier_len (
    const tsp00_KnlIdentifier VAR_ARRAY_REF                 id);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a061old_to_new_identifier (
    tak_oldidentifier     VAR_ARRAY_REF  old,
    tsp00_KnlIdentifier   VAR_ARRAY_REF  new_ident);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a061put_systemkey (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tak_baserecord        VAR_VALUE_REF  base_rec);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a061sort (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tak_baserecord        VAR_VALUE_REF  base_rec,
    integer                              last_used_expr_no,
    pasbool               VAR_VALUE_REF  duplicate_column,
    tsp00_KnlIdentifier   VAR_ARRAY_REF  duplicate_colname);

/* Don't edit this file by hand, it is generated by ptocProto.py */


#if defined (trace)

externPascal void a061td_colinfo (
    tak00_columninfo      VAR_VALUE_REF  colinfo,
    integer                              index);

/* Don't edit this file by hand, it is generated by ptocProto.py */


#endif


#endif

