/*!******************************************************************************

  @file         hak61.h

  ------------------------------------------------------------------------------

  @author       ElkeZ

  @brief        Select_List

\if EMIT_LICENCE

    ========== licence begin  GPL
    Copyright (c) 1999-2005 SAP AG
 
    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.
 
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
 
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
    ========== licence end
\endif

********************************************************************************/

#ifndef HAK61_H
#define HAK61_H


/*===========================================================================*
 *     RefType: Both                                                         *
 *===========================================================================*/

/*===========================================================================*
 *     MD5: '\xdf\x8a\x53\xf1\x55\x5e\xc9\x49\xb1\x78\x14\x13\x7f\x13\x02\x09'
 *===========================================================================*/


/*===========================================================================*
 *  INCLUDES                                                                 *
 *===========================================================================*/

#include "gsp00.h"
#include "ggg00.h"
#include "gak00.h"
#include "vak001.h"


/*===========================================================================*
 *  FUNCTION PROTOTYPES                                                      *
 *===========================================================================*/

externPascal void a61_check_val_params (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tak_dml_info          VAR_VALUE_REF  dmli,
    integer                              sel_node,
    integer                              par_node);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a61_search_table (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tak_dml_info          VAR_VALUE_REF  dmli);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a61_search_table_by_columnindex (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tak_dml_info          VAR_VALUE_REF  dmli);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a61_set_jump (
    tgg00_MessBlock       VAR_VALUE_REF  mess_block,
    integer                              stentrynr,
    tgg00_StackEntryType_Param                 operatortype);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a61_p_short_info (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tak_syspointerarr     VAR_VALUE_REF  sparr,
    tak00_columninfo      VAR_VALUE_REF  colinf,
    integer                              i,
    integer                              fix_bufpos);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a61_rel_old_table (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tak_dml_info          VAR_VALUE_REF  dmli,
    integer                              i);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a61_is_orderfield (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tak_dml_info          VAR_VALUE_REF  dmli,
    tak00_columninfo      VAR_VALUE_REF  colinf,
    tak00_ord_fields_ptr                 order_ptr,
    pasbool                              single_column,
    tak_convert_type_Param                 e_convert_t,
    tsp00_Int2                           curr_n,
    tsp00_KnlIdentifier   VAR_ARRAY_REF  col);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a61_update_column (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tak_dml_info          VAR_VALUE_REF  dmli,
    integer               VAR_VALUE_REF  minkeylen,
    integer                              curr_n);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a61_put_last_func (
    tak_all_command_glob  VAR_VALUE_REF  acv);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a61_is_group_field (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tak_dml_info          VAR_VALUE_REF  dmli,
    tsp00_KnlIdentifier   VAR_ARRAY_REF  fieldname,
    tsp00_Int2                           extcolno,
    tsp00_Int2                           reccolno,
    pasbool                              is_expression,
    tsp00_Int2                           expression_n,
    integer                              errorpos);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a61_p_long_info (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tak_dml_info          VAR_VALUE_REF  dmli,
    tak00_columninfo      VAR_VALUE_REF  colinf);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a61columnnames (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tak_syspointerarr     VAR_VALUE_REF  sparr,
    tsp00_KnlIdentifier   VAR_ARRAY_REF  refname,
    tak00_columninfo      VAR_VALUE_REF  colinf);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a61get_column_expression (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tak_dml_info          VAR_VALUE_REF  dmli,
    tak00_columninfo      VAR_VALUE_REF  colinf,
    integer                              errpos);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a61_new_expr_no (
    tak00_columninfo      VAR_VALUE_REF  colinf,
    tsp00_Int2            VAR_VALUE_REF  exprno);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a61_var_col_stackentry (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tak_dml_info          VAR_VALUE_REF  dmli,
    tak00_columninfo      VAR_VALUE_REF  colinf,
    pasbool                              may_be_together,
    pasbool               VAR_VALUE_REF  put_together,
    integer               VAR_VALUE_REF  output_len,
    pasbool                              is_corr_column,
    tak_convert_type_Param                 convert_t,
    tsp00_DataType_Param                 convert_type);

/* Don't edit this file by hand, it is generated by ptocProto.py */

externPascal void a61_format_change (
    tak_all_command_glob  VAR_VALUE_REF  acv,
    tak_dml_info          VAR_VALUE_REF  dmli,
    integer                              stackpos,
    tsp00_DataType_Param                 cdatatyp,
    tsp00_Int2            VAR_VALUE_REF  datalen);

/* Don't edit this file by hand, it is generated by ptocProto.py */


#endif

