# @(#)   desc/KernelRunTime.lib   7.4.0   17/10/2000
#
#===============================================================================================
# This library contains all runtime modules for SAPDB Kernel for all platforms and all variants
#===============================================================================================
#
#
#    ========== licence begin  GPL
#    Copyright (c) 2000-2005 SAP AG
#
#    This program is free software; you can redistribute it and/or
#    modify it under the terms of the GNU General Public License
#    as published by the Free Software Foundation; either version 2
#    of the License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#    ========== licence end

# &fast etc. must be at top level :-(

# Determines the speed variant of the Runtime
&fast
&  if not variant(liboms)
&     if not variant(omstst)
RTE_Speed.cpp f
&     else
RTE_Speed-omstst.cpp f
&     endif
&  endif
&endfast
&slow
&  if not variant(liboms)
RTE_Speed.cpp s
&  endif
&endslow
&quick
&  if not variant(liboms)
RTE_Speed.cpp q
&  endif
&endquick
&slow
&  if not variant(liboms)
? defaultversion : s
&  endif
&endslow

RTE_Version.cpp
#
# liboms only needs very small amount of sp modules
# the following modules are common to KernelRunTime and KernelRunTime-liboms variant
#

#
# SystemCall wrapper
#   RTESys_Time(), RTESys_FillProtocolTimeStamp(),
#   RTESys_SetInCrashHandler(), RTESys_ResetInCrashHandler()
&if ! defined SAPDB_INTERNAL && $MACHINE == "IX86" && $OSSPEC == WIN32
:SAPDB/RunTime/System/${MACH}_${OSSPEC}_32/RTESys_MemoryBarrier.o
&else
RTESys_MemoryBarrier.s
&endif
RTESys_Time.c
RTESys_AtomicOperation.c
RTESys_MemoryInfo.cpp
RTESys_MemProtect.c
RTEMem_Allocator.cpp
RTEMem_BlockAllocator.cpp
RTESync_SpinlockRegister.cpp
RTEMem_AllocatorRegister.cpp
SAPDB_MemCopyMove.cpp
#RTE_Message.cpp
RTE_Message-n.cpp
RTESys_ProcessState.cpp
RTE_EnvironmentVariables.cpp

# General OS error text and Pascal/CString conversion
#      sqlos_errortxtc(), sqlos_errcode_and_errtext(), sqlos_errtext_by_errcode(),
#      eo46_system_error_text(), eo46_rte_errtext_with_filename(), eo46_rte_error_init(),
#      eo46_set_rte_error(), eo46PtoC(), eo46CtoP(), eo46BuildErrorStringRC(),
#      eo46BuildPascalErrorStringRC(), sql46c_build_error_string()
veo46.c
# General itoa(),ltoa() functions
#      sql47_ptoc(), sql47_ctop(), sql47_MS_itoa(), sql47_itoa(), sql47_ltoa()
veo47.c


# extract/fill ping packet
veo420-k.c
&if $OS == UNIX
&if $MACH != _IBMR2
RTESys_AsmSpinlock.s
&endif
&if $MACH in [ PA11, PA20W ]
RTE_SystemPA.s
&elif $MACH == I386
RTE_SystemLinux.s
&endif
# UNIX DCOM Registry routines
#   sqlComObjectRegister(), sqlComObjectUnregister(),
#   sqlComObjectGet(), sqlComObjectGetByClsID()
# ven78.cpp                         obsolete PTS 1124546 FF
&endif

#&slow
RTEMem_UnregisteredAllocator.cpp
#&endslow


&if variant(liboms)
#
#===============================================================================================
# -> ONLY contained in variant liboms
#===============================================================================================
#
# fast only variant!!!!
SAPDB_UTF8Basis.cpp f
Msg_IArg.cpp f
# reduced variant!!!!
Msg_List-l.cpp f
# non kernel variant!!!!
veo02.c
# fast only variant!!!!
SAPDB_ToString.cpp f
# fast only variant!!!!
RTEMem_SystemPageCache.cpp f
RTESys_Spinlock.c

&if $OS in [ WIN32 ]
# WIN32 system functions
# fast only variant!!!!
RTE_SystemNT.cpp f
&else
# UNIX system functions
# fast only variant!!!!
RTE_SystemUNIX.cpp f
&endif

# exception throwing variant !!!!
SAPDBMem_DefaultRawAllocator.cpp
# exception throwing variant !!!!
SAPDBMem_RawAllocator.cpp

&if $OSSPEC == WIN32
# reduced variant !!!!
# vos50-p.c f          obsolete PTS 1124546 FF
&endif

# reduced variant!!!!
# veo01-l.c            obsolete PTS 1124546 FF


RTESys_SystemInfo-liboms.c

#
#===============================================================================================
# -> END OF ONLY contained in variant liboms
#===============================================================================================
#
&else
#
#===============================================================================================
# -> NOT contained in variant liboms
#===============================================================================================
#
RTEMem_RteAllocator.cpp
SAPDBMem_PseudoAllocator.cpp
RTEMem_PseudoStackAllocator.cpp

#
RTE_Crash.cpp
RTESys_Spinlock-k.c
RTE_ExternalCall.cpp
RTESys_SystemInfo.c
RTEThread_Thread.cpp
RTEThread_KernelThread.cpp

#
# Common objects
#
SAPDB_OStream.cpp
SAPDB_ToString.cpp
SAPDB_UTF8Basis.cpp
SAPDBAlgo_Test.cpp
#
# former libcpptrace.lib modules
#
SAPDBDiag_Topic.cpp
SAPDBDiag_CheckTopic.cpp
SAPDBTrace_Topic.cpp
SAPDBTrace_Stream.cpp
SAPDBTrace_MethodBrace.cpp
SAPDBTrace_Streaming-kernel.cpp
SAPDBTrace_Hex.cpp
SAPDBTrace_HexBuf.cpp
#
# end of former libcpptrace.lib modules
#
Msg_IArg.cpp
Msg_List.cpp
Msg_OutputFile.cpp
Msg_OutputKnlDiag.cpp
Msg_OutputUtilProt.cpp
Msg_FileProcessor.cpp
SAPDBErr_MessageOutput.c
SAPDBErr_MessageEventConverter.cpp
RTE_CallDebugger.cpp
#
&if $OS in [ WIN32 ]
# WIN32 system functions
RTE_SystemNT.cpp
RTE_GlobalNameSpaceNT.c
&else
# UNIX system functions
RTE_SystemUNIX.cpp
# Signal save variants of UNIX system calls
RTE_saveUNIXcalls.c
RTE_TagFileHandlingUNIX.cpp
&endif
RTESys_SecurityAttributes-k.cpp
RTEMem_SystemPageCache.cpp

RTESys_IO.c
RTEConf_ParameterAccess.cpp
RTEConf_ParameterAccessSimple.cpp
RTEConf_BuildParamFileName.c

# new IO system
#
#RTEConf_MediumConfiguration.cpp
#RTEConf_VolumeConfiguration.cpp
#RTEIO_IMedium.cpp
#RTEIO_Medium.cpp
#RTEIO_IVolume.cpp
#RTEIO_Volume.cpp
#

RTETask_TCB.cpp
RTETask_LoadBalancingInfo.cpp
RTESync_RWRegion.cpp
RTESync_SpinlockPool.cpp
RTESync_SpinlockPoolRegister.cpp
RTETask_CommunicationQueue.cpp
RTETask_ReadyToRunQueue.cpp
RTETask_ExternalRequestsQueue.cpp
RTETask_SchedulerToSchedulerQueue.cpp
RTETask_Task.cpp
RTETask_TaskScheduler.cpp
RTETask_LegacyTaskCtrl.cpp
RTETask_LegacyUKTCtrl.cpp
RTETask_CommonQueue.cpp
RTETask_LegacyQueueElementFreeList.cpp
RTETask_TaskClientConnections.cpp
RTETask_TaskClientConnection.cpp
RTETask_LegacyConnectionInterface.cpp
RTETask_UnconnectedTaskPool.cpp
RTETask_UnconnectedTasksQueue.cpp
RTETask_LocalStorage.cpp

#
# Memory Management and Allocator Interfaces
#
SAPDBMem_RawAllocator-k.cpp
SAPDBMem_CallDirectory.cpp
RTEConf_ParameterAccessKernelInterface.cpp
SAPDBMem_IncrementalBufferAllocator.cpp
SAPDBMem_IncrementalRawAllocator.cpp
RTEMem_AllocatorInfoReader.cpp
RTEMem_RawAllocator.cpp
#RTEMem_ProtectingAllocator.cpp

# new Shared Library Access Module
RTESys_SharedLib.cpp
RTESys_SharedLibCode.c

# (* PTS 1115043 U.J. New iterator class for Spinlocks*)
RTESync_SpinlockReader.cpp

# Communication
RTEComm_PacketHeader.cpp
RTEComm_Swapping.cpp
RTEComm_ParseURI.cpp
RTEComm_URIUtils.cpp
RTEComm_URIBuilder.cpp
RTEThread_Requestor.cpp

#
# Kernel specific addition objects
#
SAPDBMem_PageAllocator.cpp
RTEMem_PageAllocator.cpp
RTEWrapper_KernelMemory.cpp
RTEIO_VolumeInfo.cpp
RTE_CommonInterfaceInstance.cpp
RTE_KernelInterfaceInstance.cpp
RTE_KernelMain.cpp
RTE_KGS.cpp
RTEHSS_ApiDll.cpp
&if $OS in [ WIN32 ]
# WIN32 system functions
RTE_WindowsReleaseDependend.c
RTESys_NTHighResTimer.cpp
RTESys_NTLoadDLLFunc.cpp
RTESys_NTLoadKernelDLL.cpp
&endif
# Stack checking code
RTE_CurrentStack.cpp
&if (($OS == UNIX) && ($MACH in [IA64, HP_IA64])) || ($OS == WIN32 && $MACH == I386 && defined BIT64)
# assembler routine to read the backing storage pointer
# necessary for stack size checks on IA64 machines
# PTS 1128113
RTE_IA64GetBsp.s
&endif
#
RTEHSS_StandbyNodeList.cpp
RTEHSS_PascalInterface.cpp
RTEHSS_KernelInterface.cpp
RTESys_CommandPipe.c

# AWE
RTEMem_AWEAllocator.cpp

# Console Common Modules
RTE_ConsoleCommon.cpp
RTE_UniqueId.c  #Not used on Kernel side. Only added to satisfy the linker
RTE_ConsoleDataCommunication.cpp
RTE_ConsoleRequestCommunication.cpp
RTE_ConsoleTraceTopic.cpp
&if ($OSSPEC == LINUX && $__HAS_NPTL != 1) || $MACH == SUN || $OSSPEC == SOLARIS
RTE_ConsoleSemaphoreTimeoutList.cpp
&endif

#Console
&ifvar fastcap
RTEThread_Console-CAP.cpp
RTEThread_ConsoleWorkerThread-CAP.cpp
&else
RTEThread_Console.cpp
RTEThread_ConsoleWorkerThread.cpp
&endif
RTEThread_ConsoleConnections.cpp
RTEThread_ConsoleStandardWorker.cpp
RTEThread_ConsoleWorkerBase.cpp
RTEThread_ConsoleRequestor.cpp
RTE_HandleManager.cpp

#Interprocess Communication
RTEIPC_Mailslot.cpp
RTEIPC_NamedSharedMemory.cpp

#Synchronisation
RTESync_BinarySemaphore.cpp

#ClientKernelCommunication
RTECKC_PacketHeader.cpp
RTECKC_Request.cpp
RTECKC_RequestChannel.cpp
RTECKC_CommunicationSegment.cpp
RTECKC_KernelCommunicationSegment.cpp
RTECKC_KernelCommSequenceCheck.cpp
RTECKC_TestKernelXFer.cpp

#UDE Server
RTEUDE_ServerControl.cpp

#-------------------------------------------------------------
# General part: Source files shared between UNIX and WIN32
#-------------------------------------------------------------
# path and environment functions
#      sqlIsIndependentDataPathInRegistry(),
#      sqlIsIndependentProgramsPathInRegistry(),
#      sqlGetIndependentProgramsPath(),
#      sqlGetIndependentDataPath(),
#      sqlSetIndependentProgramsPath(),
#      sqlSetIndependentDataPath(),
#      sqlGetIndependentPgmPath(),
#      sqlGetIndependentBinPath(),
#      sqlGetIndependentTerminfoPath(),
#      sqlGetIndependentProtPath(),
#      sqlGetIndependentServiceProtPath(),
#      sqlGetConfigPath(),
#      sqlGetIndependentConfigPath(),
#      sqlGetWrkPath(),
#      sqlGetIndependentWrkPath(),
#      sqlGetDbrootPath(),
#      sqlGetDbrootBinPath(),
#      sqlGetDbrootEnvPath(),
#      sqlGetDbrootPgmPath(),
#      sqlGetServiceParamPath(),
#      sqlGetDbrootWrkPath(),
#      sqlGetDbrootLibPath(),
#      sqlGetDbrootSapPath(),
#      sqlIsServiceParamFile(),
#      sqlGetDBrootFromExecPath(),
#      sqlGetEnv(),
#      sqlgetenv(),
#      eo01_PutEnvVarDoNotUseIndepPath(),
#      eo01_IsEnvVarDoNotUseIndepPathSet(),
veo01.c
# General Dynamic Link Library handling
#   sqlLoadLibrary(), sqlLoadLibraryEx(), sqlGetProcAddress(), sqlFreeLibrary()
veo02-k.c
# General multithreading support
#      sqlinit_multithreading(),
#      sqlbeginthread(), sqlendthread(), sqlkillthread(),
#      sqlsigthread(), sqlcancelthread(), sqlforgetthread(),
#      sqlyieldthread(), sqlgetthread(), sqlgetthreadid(),
#      sqlthreadid(), sqlsuspendthread(), sqlresumethread(),
#      sqljointhread(), sqlthreadalive(), sqlonce(),
#      sqlcreatemutex(), sqldestroymutex(), sqlbeginmutex(), sqlissetmutex(),
#      sqltrybeginmutex(), sqlendmutex(),
#      sqlcreatetls(), sqldestroytls(), sqlsettls(), sqlgettls(),
#      sqlcreatesem(), sqldestroysem(), sqlwaitsem(), sqltimedwaitsem(), sqlsignalsem()
veo07-k.c
# General paramfile access
#      sqlxpopenxparam(), sqlxpclosexparam(), sqldelxparam(), sqlgnextxparam(),
#      sqlgetxparam(), sqlputxparam(), sqlXparamOpen(), sqlXparamOpenVersion(),
#      sqlXparamClose(), sqlXparamPut(), sqlXparamGet(), sqlXparamGetNext(),
#      sqlXparamDel(), eo11ResetXparamChangedFlag(), eo11GetParam(), eo11PutParam(),
#      sqlXParamCheckExists(), sqlXparamFsize(), sqlXParamRemoveAll(),
#      sqlXParamRemoveAllVersions(), sqlXParamRemoveOneParamfile(),
#      eo11SaveActParamFileAsVersion(), sqlXParamGetParamfileDir()
veo11.c
# General message output module (APO message files)
#      Implementation of class ceo15_MessageFile
#      eo15InitMessageBufferSpace(), eo15CompleteMessageFiles(), eo15FlushMessageFiles(),
#      eo15OpenToAppendToMessageFile(), eo15OpenMessageFile(), eo15GetMessageFileIndex(),
#      eo15CheckExist(), eo15WriteMessageFile(), eo15SyncMessageFile(),
#      eo15SyncNamedMessageFile(), eo15CloseMessageFile(), eo15CopyMessageFile(),
#      eo15RemoveMessageFile(), eo15GetWorkingDirectory(),
#      eo15_Open(), eo15_Close(), eo15_Write(), eo15_Read(), eo15_Seek(),
#      eo15_CopyFile(), eo15_Unlink()
veo15.cpp
# General Event list handling
#     Implementation of teo200_EventList class
veo200-k.cpp
# NI helper functions
veo401.c
# General teo41_Swap Klasse
#      Implementation of teo41_Swap class
veo41.cpp
# General Mathematic functions
#  vasin(), vsin(), vsinh(), vacos(), vcos(), vcosh(),
#  vatan(), vtan(), vtanh(), vlog10(), vln(), vatan2(), vexp()
veo50.cpp
# General Assertion support routines i.e. for range check
veo51.cpp
# Time reconrding statistic helper
#   eo52UpdateAbsoluteTimeRec(), eo52UpdateRelativeAndAbsoluteTimeRec
veo52.c
# General savable int and pageNo handling
#   sqlk_assert(), sqlk_rangeviolation()
veo54.c
# General Allocation Interface
#      vnewtracebuf(), vGetAvailableKBDynPool(), vGetAvailablePagesDynData()
veo57.cpp
# General Parameter access
#      vget_unique_id(), vcold(), vgetrteinfo(), vget_devsize(), vget_devname(),
#      vnew_devspace(), vrevoke_devspace(),
#      vinit_akdump_ptr(), vGetAcvPtrFromCurrentTask(),
#      sql58k_get_devsp_descr(),
veo58.cpp
# General Unicode Kernel extensions
#      vopmsgUnicode(), vmessageUnicode()
veo59.c
# checks if given taskid is a valid kernel task
#      vIsValidTask()
veo600.c
# General Unicode common extensions
#      eo602_ConvertPascalStringToUTF8Unicode(),
#      eo602getConsoleEncoding(), eo602_setConsoleEncoding()
veo602.c
# General message output
#      vtime_in_seconds(), vmessage(), vutilprot(), eo60InsertEvent(),
#      sql60c_varg_message(), sql60c_msg_6(), sql60c_msg_7(),
#      sql60c_msg_8(), sql60c_msg_9(), eo60k_Message()
veo60k.c
# General backup and medium definition info and kernel virtual file
#      vbackup_info(), vbackup_medium_def(), vfopen(), vfclose(), vfwrite()
veo66.c
# General Event Task Implementation
#      vinsert_keep_alive(), vinsert_event(), vwait_for_event(),
#      eo67SpaceNeeded(), eo67InitializeEventInfo(), eo67Initialize(),
#      eo67InsertKeepAlive(), eo67ConnectEventTask(), eo67ReleaseEventTask(),
#      eo67InsertSessionEvent()
veo67.cpp
RTE_PendingEventHandler.cpp
# General StackBacktrace output
#       eo670_FillCallArray(),eo670_GetAddressInfo(), eo670_FreeAddressInfo(),
#       eo670_GetAddressInfoProlog(), eo670_GetAddressInfoEpilog(), eo670WriteString(),
#       eo670_CTraceStack(), eo670_CTraceContextStack(), vtracestack(),
veo670-k.c
RTEDiag_SymbolResolutionLock.cpp
# General Task Stack Checking
#      vsoverflow()
veo69.cpp
# General Taskcluster analysis
#      eo70k_AnalyzeTaskcluster(), eo70k_GetVarCntFromThrdInfo(),
#      eo70_deb_taskcluster_array()
veo70.c
# General Paramfile functions
#      vxparam_save_good_config(), vxparam_open_binary(), vxparam_open(),
#      vxparam_close(), vxparam_read_binary(), vxparam_write_binary(),
#      vxparam_set_new_serverdb(), vxparam_get_filesize(), vxparam_get_next(),
#      vxparam_rec_put(),
#      eo79ReadAndAnalyzeParam(),
veo79.c
# General x_cons support functions
#      eo92GetTaskStateName(), eo92GetTaskTypeName(), eo92_SecToDDHHMMSS(),
#      e92_strcont(), e92_get_tt_to_show(), eo92CreateTaskcluster()
veo92-k.c
# Process checking
#      RTEProc_Open (), RTEProc_Close (), RTEProc_State ()
veo900.c
# General internal sysmon / console support for filling internal table
#      vGetRteInfoRegionNext(), vGetRteInfoRegionFirst(),
#      vGetRteInfoIONext(), vGetRteInfoIOFirst(),
#      vGetRteInfoBackupNext(), vGetRteInfoBackupFirst(),
#      vGetRteInfoStorageNext(), vGetRteInfoStorageFirst(),
#      vGetRteInfoSpecThreadsNext(), vGetRteInfoSpecThreadsFirst(),
#      vGetRteInfoUKTNext(), vGetRteInfoUKTFirst(),
#      vGetRteInfoIODetailsNext(), vGetRteInfoIODetailsFirst(),
#      vGetRteInfoTaskNext(), vGetRteInfoTaskFirst(),
#      vGetRteInfoTaskDetailsNext(), vGetRteInfoTaskDetailsFirst(),
#      vGetRteInfoTotalCnt()
veo922.cpp
#
# Microsecond timer
#   RTESys_InitMicroSecTimer(), RTESys_MicroSecTimer()
RTESys_MicroTime.c
#
# RTE_Test
#
RTE_Test.cpp
RTETst_Parser.cpp
RTETst_Default.cpp
#RTETst_RegionCode.cpp
RTETst_RWRegionCode.cpp
#   RTEDiag_MakeCrashHist (), RTEDiag_SetCrashSem ()
RTEDiag_ServerCrashHist.c
#   RTEDiag_OsError (), RTEDiag_DeleteOldHistories ()
RTEDiag_CommonCrashHist-k.c
#
# Trace info page routines
#   Trace_InfoPageSetup
#
Trace_InfoPage.cpp
RTETask_WorkerPool.cpp
#
# MySQL Proxy Crypting style
RTE_MySQLProxy.cpp
#
# Security
:SAPDB/RunTime/Security/Crypto/RTECrypto_MAC.cpp
:SAPDB/RunTime/Security/Crypto/RTECrypto_MD5.cpp
:SAPDB/RunTime/Security/Crypto/RTECrypto_SHA1.cpp
:SAPDB/RunTime/Security/Crypto/RTECrypto_HMAC.cpp
:SAPDB/RunTime/Security/Crypto/RTECrypto_HMACMD5.cpp
:SAPDB/RunTime/Security/Crypto/RTECrypto_HMACSHA1.cpp
:SAPDB/RunTime/Security/Crypto/RTECrypto_RNG.cpp
:SAPDB/RunTime/Security/Crypto/RTECrypto_SysRNG.cpp
:SAPDB/RunTime/Security/Crypto/RTECrypto_SHA1PRNG.cpp
:SAPDB/RunTime/Security/Crypto/RTECrypto_EntropyPool.cpp

RTESec_Authentication.cpp
RTESec_SCRAMMD5.c
RTESec_MD5.c
RTESec_HMACMD5.c

# file based registry API
#   RTE_GetConfigString(), RTE_PutConfigString(), RTE_RemoveConfigString(),
#   RTE_OpenConfigEnum(), RTE_CloseConfigEnum(), RTE_NextConfig()
RTE_IniFileHandling-k.c
########################################################################################
#         End of OS Independend Runtime modules
########################################################################################

&if $OS in [ WIN32 ]

########################################################################################
#         WIN32 Part
########################################################################################

&if $MACH == I386 && !defined BIT64
RTESys_NTAWE.cpp
&endif

vos40-2.c

&if $SAPDB_INTERNAL = YES
&if $MACHINE = "IX86"
$TOOL/lib/debm_api.lib
vos76a
&endif
vos71ka
&else
&if $MACHINE = "IX86"
$TOOL/lib/debm_api.lib
:os/I386_WIN32_32/vos76a.o
&endif
:os/I386_WIN32_32/vos71ka.o
&endif

&ifvar omstst
# livecache kernel-omstst
vos01-t.c
&else
vos01-k.c
&endif
vos02-k.c
vos03-k.c
vos06-k.c
vos11-k.c
vos41-k.c
vos42-k.c
vos43-k.c
vos44-k.c
vos49-k.c
vos50-k.c
vos60-k.c
#vos60-n.c

vos01k.c
vos36.cpp
vos38.cpp
&if $SAPDB_INTERNAL = YES
vos38a
&else
:os/I386_WIN32_32/vos38a.o
&endif
vos51k.cpp
vos52k.c
vos53k.cpp
vos55k.c
vos56k.c
vos58k.c
vos59k.c
vos60k.c
vos61k.c
vos64k.c
vos66k.c
vos68k.c
vos69k.c
vos70k.cpp
vos71k.c
vos72k.c
vos73k.c
vos74k.cpp
vos79k.c
vos81.cpp


&ifvar fastcap
vos50k-CAP.c
vos54-CAP.c
vos65k-CAP.cpp
vos83k-CAP.cpp
vos84k-CAP.cpp
vos85k-CAP.c
vos88k-CAP.cpp
&else
vos50k.c
vos54.c
vos65k.cpp
vos83k.cpp
vos84k.cpp
vos85k.c
vos88k.cpp
&endif

? parentlinkoption: -lib=Ws2_32.lib
? parentlinkoption: -lib=shell32
? parentlinkoption: -lib=kernel32.lib

&if $MACH == I386 && !defined BIT64
 ? parentlinkoption: -lib=largeint
&endif

&else

#################################################
# UNIX specific part: Source files only for UNIX
#################################################
#Coroutine handling
# RTE_ContextSize,RTE_ContextPrepare,RTE_ContextSwitch
RTE_Coroutine.cpp
RTE_TaskStackControl.cpp

# Profile Container Handling for Support Group
#
veo28.cpp
veo49.c

# General Simple Kernel Tracking
#      vtrack_alloc(), vtrack_free(), vtrack_insert(), vtrack_remove_last(),
#      vtrack_empty(), vtrack_first(), vtrack_next(), vtrack_check(),
#      vtrack_dump_first(), vtrack_dump_next(), vtrack_dump_check()
veo61.cpp
#
# Special support for HPUX 32Bit PA stack unwinding used in eo670_CTraceStack
#
&if $MACH in [ PA11 ]
:en/ugetfram.o
&endif
# General Pool Allocation class
#     Implementation of teo570_AllocPool class
veo570.cpp
# UNIX specific paramfile access
#   sql11c_OpenXParam(), sql11c_CloseXParam(), sql11c_DeleteXParam(),
#   sql11c_get_xparam_buffer(), sql11c_PutXParam(), sql11c_GetXParam(),
#   sql11c_GetNextXParam(), sql11c_delxparam(), sql11c_renxparam(),
#   sql11c_open_xparam_file(), sql11c_IncrParamChangedFlag(),
#   sql11c_ResetParamChangedFlag(), sql11c_close_xparam_file(),
#   sql11c_InitXparamStruc(), sql11c_FreeXparamStruc(), sql11c_SeqNextXParam(),
#   sql11c_SeqBinReadXParam(), sql11c_SeqBinWriteXParam()
ven11.c
# UNIX Communication Functions for Local Access
#   sql32_open_kernel_fifo(), sql32_open_reply_fifo(), sql32_attach_comseg(),
#   sql32_lock_comseg(), sql32_unlock_comseg()
ven32.c
# UNIX Kernel DCOM Thread
#   en35_VDCOMTransfer(), en35_RemoveDCOMi(), en35_DCOM0(), sql35_VDCOMiRequest()
# ven35.cpp PTS 1112663
# UNIX enumeration types to strings
#   e38_dbstate_name(), e38_type_name(), e38_adv_tskstate_name(), e38_tskstate_name(),
#   e38_req_name(), en38KtStateName()
ven381.c
# UNIX error output and abort of program
#   sqlerrs(), sqlabort()
ven40-k.c
# UNIX IPC resource handling
#   sql41_create_sem(), sql41_remove_sem(), sql41_create_shm(), sql41_remove_shm(),
#   sql41AttachShm(), sql41_attach_shm(), sql41_detach_shm(), sql41_stat_sem(),
#   sql41_stat_shm(), sql41_create_fifo(), sql41_remove_fifo(),
#   sql41_get_ukp_net_fifo_name(), sql41_get_request_fifo_name(),
#   sql41_get_reply_fifo_name(), sql41_create_idfile(), sql41_remove_idfile(),
#   sql41_fopen_idfile(), sql41_CreateServerKey(), sql41_get_server_key(),
#   sql41_get_idfile_name(), sql41_check_spool_dirs(),
#   sql41_check_dir(), sql41_get_ipc_dir(),
#   sql41_get_diag_dir(), sql41_get_fifo_dir(), sql41_get_spool_dir(),
#   sql41_remove_ipc_resources(), sqlAllocSharedMem(), sqlFreeSharedMem(),
#   en41FindDatabaseProcess(), en41BuildDatabaseProcessScan(), en41BuildXShowCommand()
ven41.c
# UNIX Socket support
#   sql42_new_swap_type(), sql42_put_port_no(), sql42_get_port_no(), sqldbgaddress(),
#   sql42_put_string(), sql42_get_string(), sql42_put_int1(), sql42_get_int1(),
#   sql42_put_int4(), sql42_get_int4(), sql42_put_long(), sql42_get_long(),
#   sql42_create_conpkt(), sql42_extract_conpkt(), sql42_send_conpkt(),
#   sql42_recv_conpkt(), sql42_send_control(), sql42_send_packet(),
#   sql42_recv_packet(), en42SocketSendPacket(), en42Receive(), sql42_unpack_int2(),
#   sql42_unpack_int4(), sql42_get_server_address(), sql42_info_request(),
#   sql42_connect_server(), sql42_socket_buffer(), sql42_socket_live()
ven42.c
# UNIX Socket address resolution
#   sqlhostname(), sqlnodename(), sql43_get_my_host_name(),
#   sql43_get_official_node_name(), sql43_get_service_by_name(),
#   sql43_get_host_by_name(), sql43_get_host_by_address(), sql43_is_inet_addr()
ven43-s.c
# UNIX kernel kill and info
#   sql45_killall(), sql45_kill_task(), sql45_has_remote_pid(), sql45_peer_pid(),
#   sql45_peer_node()
ven45.c
# UNIX dump of packets and hex strings
#   sql46_dump(), sql46_dump_packet(), sql46hexstr()
ven46.c
# UNIX string handling
#      sql48_change_log(), sql48_strblcpy(), sql48_strloc()
ven48.c

&if $MACH in [ _IBMR2, PA11, PA20W ]
# UNIX C interlock handling. Relict to stay compatible with old clients
#      e49_lock_int4_4fold
ven49.c
&endif

# UNIX Kernel abort handling
#      vabort()
ven50.c
# UNIX Kernel initialization
#      vinitok(), vinit(), vdebug_break(), vgetuktid(), vgetpid(), vgetfirstuserpid(),
#      vptype(), vversion(), vutil_startup(), vrestart(), vshutdown(), vfinish(), vos()
ven51.cpp
# UNIX Timestamp and timehandling
#      vclock(), vdattime(), vtimestamp(), en52Localtime_r(), e52_init_time()
ven52.c
# UNIX Kernel communication functions
#      vcmd_wait_time(), vconnect2(), vconnect(), vreceive(), vreply(), vgetapplpid()
ven53.cpp
# UNIX Kernel Disk IO and DEV Thread implementation
#      vcurrdevsize(), vdevsize(), vattach(), vdetach(), vmake_bad_dev(),
#      vget_data_io_cnt(), vblockio(), v2info(), v2blckio(), vasynopen(),
#      vasynclose(), vasynclose_old(), vasynio(), vasynwait(), vasyninit_tape(),
#      vdump_rte(), vvectorio()
#      en54_Mdevio(), e54_init_self_io(), e54_int_to_text(), en54DumpNewRteDumpOnly()
ven54.cpp
# UNIX Asynchron System I/O
#      e54a_aio_catch_signal(), e54a_get_aio_struct_size(), e54a_init_sys_aio_struc(),
#      e54a_install_aio_signal_handler(), e54_asyn_vblockio(), e54_asyn_vasynio(),
#      e54_asyn_vasynio_result(),
ven542.c
# UNIX inode_info / devsize0 / filecopy
#      SqlDevSize(), e541_get_nodinfo(), e541_get_devsize0()
ven541.c
# UNIX Kernel mutual exclusion
#      vbegexl(), vendexcl(), visexcl(), vsemaphid(), vsemainfo(),
#      e55_init_vbegexcl_func_ptr(), e55_remactive()
ven55.c
# UNIX Kernel scheduling
#      vstop(), vcontinue(), vsuspend(), visresume(), vresume(), vwait(), vsignal(),
#      vsleep(), vreschedule_msec()
ven56.c
# UNIX Kernel diagnostic initialization
#      vdiaginit()
ven58.c
# UNIX knldiag output
#      vopmsg(), vksprintf(),
#      sqldbgwrite(), sqlerrwrite(), sqlwngwrite(), sqldbg_modinfo_write(),
#      sql60kc_msg(), sql60_write_to_util_diag(), sql60_write_to_event_file(),
#      e60_deliver_msg(), e60_open_opmsgs(), en60InitializeMessageOutput(),
#      en60_ReopenKnldiagFile(), en60OpenEventFile()
ven60.c
RTE_DiagPipe.cpp
# UNIX implementation part of virtual file for kernel
#      sql66kc_open(), sql66kc_append_open(), sql66kc_close(), sql66kc_write(),
#      e66_lock_file(), e66_write_magic_record(),
ven66.c
# UNIX Specific account and stack usage calculation
#      vcinit(), vccheck(), vioinit(), viocheck(), vmonitor(),
#      vsinit(), vscheck(), vsfill(), vsscan()
ven69.c
# UNIX Initialize Common Shared Memory ( KERNEL_GLOBAL_SECTION kgs )
#      e70_init_kgs(), eo70_is_kgsshmid()
ven70.cpp

# UNIX UKT dispatcher
#      v2prio(), vprio(), vdelay_commit(), vdelay_lw()
#      en71Dispatcher(), e71_ioc(), e71_com(),
#      e71_EnquRav(), e71_EnquRex(), e71_ukp_to_ukp()
ven71.cpp
# UNIX UKT wakup
#      e72_wake(), e72_wake_ignore_semop_err()
ven72.cpp
# UNIX queue handling
#      e73_dev_ioc_queue_init(), e73_xxx_queue_init(), e73_ioc_queue_init(),
#      e73_ior_queue_init(), e73_ioc_enqu(), e73_dl_init(), e73_dl_enqu(),
#      e73_dl_dequ()
ven73.c
# UNIX Shared Memory Communication functions
#      e74_conn_count (), e74_comdata_size (), e74_init_comdata (),
#      e74_create_big_comsegs (), e74_init_big_comseg (), e74_release_comseg ()
#      e74_print_all_conns (), e74_print_connection ()
ven74.c
# UNIX Kernel communication
#      e75_wake_peer(), e75_release_all_ukp_tasks(), e75_release_connection(),
#      e75_has_com(), e75_is_connected(), e75_checkcom(), e75_connect_request(),
#      e75_release_request(), e75_vnshutdown_request()
ven75.c
&if $MACH in [ I386, ALPHA ]
# UNIX memory barrier assembler code
#   e76_mem_sync()
  ven76a
&endif
# UNIX Kernel parent process and Coordinator Thread
#     vpid_alive(), vtracewriter_alive(), en81_NotifyCoordinator(),
#     en81_kernel_main(), en81_kill_database(), en81NotifyStarter(),
#     en81TimerThreadSleep(), en81TimerThreadWakeup(), en81Abort(),
#     en81_dump_process_core(), en81_Set_KT_TLS(), en81_Get_KT_TLS(),
#     en81FinalAction(), en81RunKernel(), en81CallDebugger(),
ven81.cpp
# UNIX Kernel Timer Thread
#     en83TimerThread(), en83TimerJob(),
ven83.cpp
# UNIX Kernel Requestor Thread
#     en84_requestor(), e84_test_application()
ven84.cpp
# UNIX Kernel UKT (User Kernel Thread)
#     en88_ukt(), en88_InitDynPthreadTasks()
ven88.cpp

RTE_UNIXAuthenticate-nocrypt.cpp
#-------------------------------------------------------------
# TRIGGER and OMS Port specific part
#-------------------------------------------------------------
#
# these ports support OMS interfaces used for TRIGGER and Livecache
# PTS 1107243 ( NMP added )
&if ( $MACH in [  PA11, PA20W, _IBMR2, SUN, NMP, HP_IA64] ) or ( $MACH in [ ALPHA ] and $OSSPEC in [ OSF1 ] ) or ( $MACH in [ I386, IA64, S390X, X86_64, SDBonPPC64 ] and $OSSPEC in [ LINUX ] ) or $OSSPEC == SOLARIS
#   eo36ParamInfo()
ven36.cpp
#   sql38CoCreateInstance(), sql38CoGetClassObject(), sql38CoInitializeEx(),
#   en38_Eval_Exception()
ven38.cpp
# UNIX Assembler part of DCOM interface
#   sql38aVdcomCall()
# PTS 1107243 ( NMP added )  for NMP interface is written in C++
&if ( $MACH in [ NMP, S390X ] )
ven38NMP.cpp
&else
ven38a
&endif

&endif

#-------------------------------------------------------------
# Platform specific part
#-------------------------------------------------------------
##########################################
# needed by RTESys_SystemInfo
##########################################
&if $MACH in [ _IBMR2 ]
? parentlinkoption: -lperfstat
&endif
&if $MACH == SUN || $OSSPEC == SOLARIS
? parentlinkoption: -lkstat
&   if defined BIT64 && $MACH in [ SUN ]
##########################################
# only for SUNOS_64 with MACH == SUN
##########################################
       :en/mtmalloc2.o
&   else
# link dynamically, so we have the choice of libmtmalloc or libumem
? parentlinkoption: -lumem
&   endif
&endif


##########################################
# End of UNIX Part
##########################################

&endif
#
#===============================================================================================
# -> end of NOT contained in variant liboms
#===============================================================================================
#
&endif
