
#  @(#)liboms.dld     7.2   1998-09-04
#
#
#
#
#    ========== licence begin  GPL
#    Copyright (c) 2000-2005 SAP AG
#
#    This program is free software; you can redistribute it and/or
#    modify it under the terms of the GNU General Public License
#    as published by the Free Software Foundation; either version 2
#    of the License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#    ========== licence end

############################################################################
#
#   Libraries and resources
#
############################################################################
# link
&if $OSSPEC in [ WIN32 ]
-base:0x76050000
-subsystem:windows
&endif
&fast
&if $OSSPEC in [ WIN32 ]
#-lib=mfc42
#-lib=mfcs42
&ifndebug
-lib=msvcrt
# -lib=msvcirt   PTS 1129537
&else
-lib=msvcrtd
# -lib=msvcirtd   PTS 1129537
&endif
-lib=user32
&endif
&endfast
&quick
&if $OSSPEC in [ WIN32 ]
#-lib=mfc42
#-lib=mfcs42
&ifndebug
-lib=msvcrt
-lib=msvcirt
&else
-lib=msvcrtd
-lib=msvcirtd
&endif
-lib=user32
&endif
&endquick
&slow
&if $OSSPEC in [ WIN32 ]
#-lib=msvcirtd
#-lib=msvcrtd
-lib=Eafxisd
-lib=mfc42d
-lib=mfcs42d
-lib=user32
&endif
&endslow
&if $OSSPEC in [ WIN32 ]
#-lib=msvcprt                       --- no std-lib

:Resource/liboms.rc	 remake
:Resource/liboms.def   definition       # Linker definition file
&endif

&if $OSSPEC in [ WIN32 ]
libsqlptc
&else
:libptc/sql__trunc.c      
:libptc/sql__caseerr.c
:libptc/sql__perrorp.c  
:libptc/sql__flp.c
:libptc/sql__gn.c
:libptc/sql__closep.c
:libptc/sql__peer.c
:libptc/sql__ucmp.c
:libptc/sql__sqrt.c
&endif


############################################################################
#
#   OMS functionality implementation
#
############################################################################

# test stuff, with OMS_CHECK_EXCEPTION and OMSTST (TODO)
&ifvar omstst
OMS_AbstractObject-t.cpp
OMS_Globals-t.cpp
OMS_Handle-t.cpp
OMS_ObjByClsIterBase-t.cpp
OMS_Stream-t.cpp
&else
OMS_AbstractObject.cpp
OMS_Globals.cpp
OMS_Handle.cpp
OMS_ObjByClsIterBase.cpp
OMS_Stream.cpp
&endif

# normal OMS objects
OMS_AllocatorInterface.cpp
OMS_AllocatorInterfaceBase.cpp
OMS_AllocatorTracer.cpp
OMS_ArrayObject.cpp
OMS_ArrayObjectUtils.cpp
OMS_ArrayObjectCompression.cpp
OMS_ArrayObjectPlain.cpp
OMS_COMMonitor.cpp
OMS_CriticalSection.cpp
OMS_DateTime.cpp
OMS_DbpBase.cpp
#OMS_DbpCurrency.cpp
OMS_DbpError.cpp
#OMS_DbpLongCurrency.cpp
OMS_Exceptions.cpp
OMS_GlobalAnchorObject.cpp
#OMS_IGuidHash.cpp
OMS_KernelDefaultInterface.cpp
OMS_LibOmsInterfaceInstance.cpp
OMS_LockObject.cpp
OMS_LongPacked.cpp
OMS_MassDerefIterators.cpp
OMS_Malloc.cpp
OMS_Monitor.cpp
OMS_MonitorDirectory.cpp
OMS_OidArrayReader.cpp
OMS_OidArrayWriter.cpp
OMS_Packed.cpp
OMS_RWLock.cpp
OMS_LockScopes.cpp
OMS_Sequence.cpp
OMS_SimDumpCollector.cpp
OMS_StackAllocator.cpp
OMS_Trace.cpp
OMS_VarObj.cpp
OMS_VarOid.cpp
OMS_VersionDictionary.cpp

OMS_UserAllocator.cpp
OMS_CheckedUserAllocator.cpp
OMS_GlobalUserAllocator.cpp
OMS_GlobalUserAllocatorDirectory.cpp
OMS_GlobalAnchorDirectory.cpp
OMS_GlobalAnchorItem.cpp
OMS_GlobalAllocatorWrapper.cpp


############################################################################
#
# Because of a restriction on the maximal length of the link-command on 
# Windows2000, the following modules, which are only needed internally, are
# linked together in a special library.
#
############################################################################

liboms1.lib

##OMS_BeforeImageList.cpp
##OMS_CacheMissEntry.cpp
##OMS_ClassEntry.cpp
##OMS_ClassDirectory.cpp
##OMS_ContainerEntry.cpp
##OMS_ContainerDirectory.cpp
##OMS_ContainerHandle.cpp
##OMS_Context.cpp
##OMS_FreeListHeader.cpp
##OMS_InMemVersionKeyIter.cpp
##OMS_KernelClsIter.cpp
##OMS_KernelKeyIter.cpp
##OMS_KernelVersionMergeKeyIter.cpp
##OMS_ObjByKeyIterBase.cpp
##OMS_OidHash.cpp
##OMS_Session.cpp
##OMS_UnloadableVersionList.cpp
##OMS_UnloadedVersionKeyIter.cpp
##OMS_VersionMergeKeyIter.cpp

############################################################################
#
#   SQL functionality implementation
#
############################################################################

# source files with test kernel dependencies
&ifvar omstst
# liboms-omstst
SQL_-t.cpp
SQL_SessionContext-t.cpp
SQL_Column-t.cpp
SQL_ColumnDesc-t.cpp
&else
SQL_.cpp
SQL_SessionContext.cpp
SQL_Column.cpp
SQL_ColumnDesc.cpp
&endif

# remaining source files
SQL_Handle.cpp
SQL_Utilities.cpp
SQL_ReplyParser.cpp
SQL_ErrorHandler.cpp
SQL_Statement.cpp
SQL_Monitor.cpp

# packet interface
:SAPDB/PacketInterface/PIn_Part.cpp f
:SAPDB/PacketInterface/PIn_Segment.cpp
:SAPDB/PacketInterface/PIn_Packet.cpp
:SAPDB/PacketInterface/PIn_ReplyParser.cpp
:SAPDB/PacketInterface/PIn_RequestWriter.cpp
:SAPDB/PacketInterface/PIn_SimpleTraceStream.cpp

############################################################################
#
#   SQLDBC functionality implementation
#
############################################################################
:SAPDB/Interfaces/SQLDBC/SQLDBC.cpp
:SAPDB/Interfaces/SQLDBC/SQLDBC_StorageItems.cpp
::SAPDB/Interfaces/sapdbifr-liboms.lib
SQL_SQLDBCConnection.cpp
SQL_SQLDBCRuntime.cpp

############################################################################
#
#   Extra functionality that will be linked directly in liboms
#
############################################################################

vgg90.cpp
LVCMem_DefaultAllocator.cpp

# needed by vgg90.cpp...
veo47.c
# fast only variant!!!!
SAPDB_UTF8Basis.cpp f
# fast only variant!!!!
SAPDB_ToString.cpp f
# reduced variant !!!!
Msg_List-l.cpp f
# exception throwing variant !!!!
SAPDBMem_RawAllocator-o.cpp
&if $OS not in [ WIN32 ] && $MACH not in [ _IBMR2 ]
# need for spinlock assembler code implementation
RTESys_AsmSpinlock.s
&endif

&if ! defined SAPDB_INTERNAL && $MACHINE == "IX86" && $OSSPEC == WIN32
:SAPDB/RunTime/System/${MACH}_${OSSPEC}_32/RTESys_MemoryBarrier.o
&else
RTESys_MemoryBarrier.s
&endif

# no longer needed ! KernelRunTime-liboms

splib-liboms

############################################################################
#
#   Change destination, if compiling for tests
#
############################################################################

&ifvar omstst
&if $OSSPEC in [ WIN32 ]
->$INSTROOT/pgm/test/liboms*
? distribute: Support/Mapfiles/liboms-omstst.map, symbols/liboms-omstst.pdb
&else
->$INSTLIB/test/liboms*
&endif
&endif

&ifvar fdir
&if $OSSPEC in [ WIN32 ]
->$INSTROOT/pgm/fdir/liboms*
&else
->$INSTLIB/fdir/liboms*
&endif
&endif
