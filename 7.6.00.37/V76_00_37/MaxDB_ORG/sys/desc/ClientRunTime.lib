# --------------------------------------------------------------------------
# description: C++ client RunTime library
#
# JoergM
# --------------------------------------------------------------------------
#
#
#    ========== licence begin  GPL
#    Copyright (c) 2003-2005 SAP AG
#
#    This program is free software; you can redistribute it and/or
#    modify it under the terms of the GNU General Public License
#    as published by the Free Software Foundation; either version 2
#    of the License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#    ========== licence end

# This Library knows the following variants
#
# serv		- Server variant (XServer, VServer, NIServer, NISSLServer
# tcp		- TCP Library is linked dynamically
# crypt		- Some Modules used for Cryptography are linked
# kernel	- Some kernel modules are linked
#

-BuildNrFunction=RTEBuildNumber

&if $OS in [WIN32]
#----------------------------------------------
# Windows part
#----------------------------------------------

&ifvar tcp
vos40-1.c
&else
vos40l.c
&endif

veo60k-u.c

vos04u
vos09u.c

vos06-u.c
vos09-u.c
vos11-u.c
vos23-u.c
vos33-u.c
&if ! defined SAPDB_INTERNAL && $MACHINE == "IX86" && $OSSPEC == WIN32
:SAPDB/RunTime/System/${MACH}_${OSSPEC}_32/RTESys_MemoryBarrier.o
&else
RTESys_MemoryBarrier.s
&endif
vos42-u.c
vos43-u.c
vos41-u.c
RTESys_Time.c
vos60-u.c
#vsp77.c
RTE_DiagPipe.cpp
vos80-u.c

#Formerly sapdbntrte:
#-------------------
vos01-u.c
vos02-u.c
vos03-u.c
vos44-u.c
vos49-u.c
vos50-u.c
vos57-u.c
#-------------------

vos01u.c
vos02u.c
vos03u.cpp
vos04.c
vos05u.c
vos06u.c
vos08u.c
vos10u.c
vos12u.c
vos13u.c
vos14u.c
vos17u.c
vos18u.c
vos21u.c
vos24u.c
vos40u.c
vos69u.c

&if ($SAPDB_INTERNAL == YES) && ! defined SDB_NO_SAP_OBECTS
sapni.dld ff nobind
&endif

veo572.cpp

sqltcp.dld  distrib nobind
sqltcp1.dld distrib nobind
sqltcp2.dld distrib nobind
sqltcpn.dld distrib nobind
#RTESys_Spinlock.c
# RTE_UniqueId would produce a reference to 'CoCreateGuid' which is included in libole32.
# If you need this module, add it separately and add libole32 in your link description.
#RTE_UniqueId.c

&if $MACHINE = "IX86"
&if defined SAPDB_INTERNAL
vos76a
&else
:os/I386_WIN32_32/vos76a.o
&endif
&endif


&else
#----------------------------------------------
# UNIX part
#----------------------------------------------
ven01.c
ven02.c
ven03.c
ven04
ven041.c
ven042.c
ven05.c
ven07.c
ven08.c
ven12.c
veo12_1.c
&if $MACH != HP9
ven12a
&endif
ven13.c
ven14.c
ven15.c
ven17.c
ven18.c
veo21.c
RTESys_Time.c
ven22.c
ven23.c
# CTS 1106771
ven32-s.c
ven33.c
ven34.c
ven37.c
# CTS 1106771
ven42-s.c
ven43-s.c

ven45-u.c
ven69-a.c

&if $MACH in [ _IBMR2, PA11, PA20W ]
  ven49.c
&endif
&if $MACH in [I386, ALPHA]
  ven76a
&endif

vsp82

&if ($SAPDB_INTERNAL == YES) && (defined BIT64 || ($MACH not in [_IBMR2, SPARC, SUN, PA11, PA20W]))  && ! defined SDB_NO_SAP_OBECTS
sapni.dld ff nobind
&endif

#-----------------------------------------------------------------
# enblib Modules
#
ven11.c
ven381.c
ven40.c
ven41.c
veo44_0.c
ven46.c
ven48.c
ven541.c
# General StackBacktrace output
#       eo670_FillCallArray(),eo670_GetAddressInfo(), eo670_FreeAddressInfo(),
#       eo670_GetAddressInfoProlog(), eo670_GetAddressInfoEpilog(), eo670WriteString(),
#       eo670_CTraceStack(), eo670_CTraceContextStack(), vtracestack(),
&ifvar serv
&else
veo670.c
&endif
#
# Special support for HPUX 32Bit PA stack unwinding used in eo670_CTraceStack
#
&if $MACH in [ PA11 ]
:en/ugetfram.o
&endif
ven904.c
RTESys_MemoryBarrier.s
RTESys_Spinlock.c
&if $OS not in [ WIN32 ] && $MACH not in [ _IBMR2 ]
RTESys_AsmSpinlock.s
&endif
RTESys_AtomicOperation.c
RTESys_MemProtect.c
RTE_GetDBRootOfDB.c
RTE_UniqueId.c

&endif

#----------------------------------------------
# Common Part
#----------------------------------------------

#Argument parsing
veo01.c
veo03.c
veo06.c
veo54.c
&if not variant(nothread)
veo07-u.c
&endif
veo011.c
veo11.c
veo12.c
veo13.c
veo130.c
veo16.c
veo40-l.c
veo401.c
veo41.cpp
veo420.c
veo46.c
veo47.c
veo49.c
veo80.cpp
veo81.cpp
veo200.cpp
veo570.cpp
veo601.c
veo602.c
veo900.c

# The formerly SAPDBRTE.rel part

# This collects all modules common from SAPDB/RunTime including Allocator, Assertion and Messages support
#
# It does not include 'RTE_IGlobal' interface and 'RTE_Crash' interface which are specific
#
SAPDB_OStream.cpp
SAPDB_ToString.cpp
SAPDB_UTF8Basis.cpp
SAPDB_MemCopyMove.cpp
Msg_IArg.cpp
Msg_List.cpp
RTE_CommonInterfaceInstance.cpp
RTE_ClientInterfaceInstance.cpp
SAPDBErr_MessageOutput.c
SAPDBErr_MessageEventConverter.cpp
RTE_Message.cpp
RTE_CallDebugger.cpp
&if not variant(nothread)
RTEThread_Thread.cpp
&endif

SAPDBMem_PseudoAllocator.cpp
RTEMem_PseudoStackAllocator.cpp
#
&if $OS in [ WIN32 ]

# WIN32 system functions
RTESys_Spinlock.c
RTESys_MemProtect.c
RTESys_AtomicOperation.c
RTE_SystemNT.cpp
RTE_GlobalNameSpaceNT.c
##########################################
# needed by RTESys_SystemInfo
##########################################
RTE_WindowsReleaseDependend.c
RTESys_NTLoadDLLFunc.cpp
RTESys_NTLoadKernelDLL.cpp
RTESys_NTHighResTimer.cpp

&else

# UNIX system functions
RTE_SystemUNIX.cpp
# Signal save variants of UNIX system calls
RTE_saveUNIXcalls.c
RTE_TagFileHandlingUNIX.cpp
&ifvar crypt
RTE_UNIXAuthenticate.cpp
&else
RTE_UNIXAuthenticate-nocrypt.cpp
&endif
veo28.cpp

&endif

RTE_HandleManager.cpp
RTESys_SystemInfo.c
RTESys_CommandPipe.c
RTESys_ProcessState.cpp
RTESys_SecurityAttributes.cpp

&if $MACH in [ _IBMR2 ]
? parentlinkoption: -lperfstat
&endif
&if $MACH == SUN || $OSSPEC == SOLARIS
? parentlinkoption: -lkstat
&endif

RTESys_IO.c
RTEConf_ParameterAccess.cpp
RTEConf_ParameterAccessSimple.cpp
RTEConf_BuildParamFileName.c

#
# Memory Management and Allocator Interfaces
#

&ifvar kernel

SAPDBMem_RawAllocator-k.cpp
SAPDBMem_CallDirectory.cpp
RTEConf_ParameterAccessKernelInterface.cpp

&else

SAPDBMem_RawAllocator.cpp

&endif

SAPDBMem_IncrementalBufferAllocator.cpp
SAPDBMem_IncrementalRawAllocator.cpp
RTEMem_RteAllocator.cpp
RTEMem_Allocator.cpp
RTEMem_AllocatorRegister.cpp
RTEMem_AllocatorInfoReader.cpp
RTESync_SpinlockRegister.cpp
RTEMem_RawAllocator.cpp
RTEMem_BlockAllocator.cpp
RTEMem_SystemPageCache.cpp
#RTEMem_ProtectingAllocator.cpp
RTEMem_UnregisteredAllocator.cpp

#
# former libcpptrace.lib modules
#
SAPDBDiag_Topic.cpp
SAPDBDiag_CheckTopic.cpp
SAPDBTrace_Topic.cpp
SAPDBTrace_Stream.cpp
SAPDBTrace_MethodBrace.cpp
SAPDBTrace_Streaming.cpp
SAPDBTrace_Hex.cpp
SAPDBTrace_HexBuf.cpp
#
# end of former libcpptrace.lib modules
#

# new Shared Library Access Module
RTESys_SharedLib.cpp
RTESys_SharedLibCode.c

# (* PTS 1115043 U.J. New iterator class for Spinlocks*)
RTESync_SpinlockReader.cpp

&if not variant(nothread)
# Console Common Modules
RTE_ConsoleCommon.cpp
RTE_ConsoleDataCommunication.cpp
RTE_ConsoleRequestCommunication.cpp

&if ($OSSPEC == LINUX && $__HAS_NPTL != 1) || $MACH == SUN || $OSSPEC == SOLARIS
RTE_ConsoleSemaphoreTimeoutList.cpp
&endif
&endif

# Communication
RTEComm_PacketHeader.cpp
RTEComm_Swapping.cpp
RTEComm_ParseURI.cpp
RTEComm_URIUtils.cpp
RTEComm_URIBuilder.cpp

# Micro Timer
RTESys_MicroTime.c

RTE_ClientTraceTopics.cpp

#Interprocess Communication
RTEIPC_NamedSharedMemory.cpp
RTEIPC_Mailslot.cpp

#Synchronisation
RTESync_BinarySemaphore.cpp

#Client Kernel Communication
RTECKC_ClientCommSequenceCheck.cpp
RTECKC_PacketHeader.cpp
RTECKC_GlobalClientInstance.cpp
RTECKC_Request.cpp
RTECKC_RequestChannel.cpp
RTECKC_ClientCommunication.cpp
RTECKC_LocalCommunication.cpp
RTECKC_CommunicationSegment.cpp
RTECKC_ClientCommunicationSegment.cpp
RTE_EnvironmentVariables.cpp

#SSL
RTESec_SAPSSL-l.cpp
&ifvar serv
RTESec_SSL-s.cpp
&else
RTESec_SSL-u.cpp
&endif

:SAPDB/RunTime/Security/Crypto/RTECrypto_MAC.cpp
:SAPDB/RunTime/Security/Crypto/RTECrypto_MD5.cpp
:SAPDB/RunTime/Security/Crypto/RTECrypto_SHA1.cpp
:SAPDB/RunTime/Security/Crypto/RTECrypto_HMAC.cpp
:SAPDB/RunTime/Security/Crypto/RTECrypto_HMACMD5.cpp
:SAPDB/RunTime/Security/Crypto/RTECrypto_HMACSHA1.cpp
:SAPDB/RunTime/Security/Crypto/RTECrypto_RNG.cpp
:SAPDB/RunTime/Security/Crypto/RTECrypto_SysRNG.cpp
:SAPDB/RunTime/Security/Crypto/RTECrypto_SHA1PRNG.cpp
:SAPDB/RunTime/Security/Crypto/RTECrypto_EntropyPool.cpp

RTESec_Authentication.cpp
RTESec_SCRAMMD5.c
RTESec_MD5.c
RTESec_HMACMD5.c
SAPDBFields_VarData.cpp

RTE_NonKernelCrash.cpp
RTE_IniFileHandling.c

&if $OS in [WIN32]
-lib=shell32
&else
& if $OSSPEC in [ LINUX ]
? parentlinkoption: -ldl
& endif

& if $MACH in [ _IBMR2, SUN ] || $OSSPEC == SOLARIS
? parentlinkoption: -append=-ldl
& endif

&if $OSSPEC in [ AIX ]
? parentlinkoption: -lcurses
&endif
&endif

